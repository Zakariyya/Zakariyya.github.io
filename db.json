{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/melody/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/img/top.jpg","path":"img/top.jpg","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1533115259833},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1533115259833},{"_id":"themes/melody/.gitignore","hash":"371c0a57184696c2069b146fc8ccaa285ca7626c","modified":1533115259833},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1533115259833},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1533115259833},{"_id":"themes/melody/LICENSE","hash":"e7e7b7677bb19563a9013e936486bdefeb761d07","modified":1533115259833},{"_id":"themes/melody/README.md","hash":"cfad5fe134b4598e37eef6af38ce1ffda37355d1","modified":1533115259833},{"_id":"themes/melody/_config.yml","hash":"a8afb1a69e2a339381a57781ff57b1dffe7a425d","modified":1533462541003},{"_id":"themes/melody/package.json","hash":"8c347ceec26270e390e75a9d474eb6fb3d35c849","modified":1533115259895},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1533115259958},{"_id":"source/manifest.json","hash":"d8c6cbe98804afc3edf3602977a1416dce820078","modified":1533461572630},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533115259895},{"_id":"themes/melody/.git/COMMIT_EDITMSG","hash":"c21a3f6bb8344b0c09f085376b5f917fef3e7d04","modified":1533467161571},{"_id":"themes/melody/.git/HEAD","hash":"eb96ca3b429d2872ea0713ebdcfacd4c85cd78c6","modified":1533374505142},{"_id":"themes/melody/.git/config","hash":"16b3011c8bbf6e209a484a2c1d032cadbeb294c3","modified":1533374505157},{"_id":"themes/melody/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1533374467577},{"_id":"themes/melody/.git/index","hash":"6e6dbc20f89eaa649d182be3372773f56d136c50","modified":1533467161553},{"_id":"themes/melody/.git/packed-refs","hash":"a88a0bf641c0cae88255fc5585b269e28fde57ae","modified":1533374505126},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"d1420092142acd3f38c31099934d84bf5c4a4b7c","modified":1533374505188},{"_id":"themes/melody/.vscode/settings.json","hash":"46d72f2c9c27996464091654d1687babcd603d24","modified":1533374505188},{"_id":"themes/melody/.vscode/launch.json","hash":"52d28f3455d1e9ff1d7c56316773a77710e89751","modified":1533374505188},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1533115259848},{"_id":"themes/melody/languages/en.yml","hash":"24972a6e19b22e30a96c3299a76767bb5abdefa8","modified":1533115259848},{"_id":"themes/melody/languages/default.yml","hash":"24972a6e19b22e30a96c3299a76767bb5abdefa8","modified":1533115259848},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"9d7db4affdee5dd1355ed0330286a12bf683578a","modified":1533115259848},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1533115259848},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1533115259848},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1533115259895},{"_id":"themes/melody/layout/page.pug","hash":"67ed6d30164515540603c885f8e6f5f61f4db9ab","modified":1533115259895},{"_id":"themes/melody/layout/post.pug","hash":"e0d840ee90bf773e1dcc14e884c809822baefb09","modified":1533115259895},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1533115259895},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1533115259895},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1533115259895},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1533115259911},{"_id":"source/_posts/hexo.md","hash":"77d18844fc6683e36476a845aa7d426f63802f06","modified":1533364365605},{"_id":"source/_posts/修改形参对象值，会影响实参.md","hash":"1f333d14f90884e3d03b288b60a30ddfc6474b19","modified":1533364365606},{"_id":"source/_posts/文件上传.md","hash":"dfc3ac2073c0aea883045345ce54e8d4e14711c6","modified":1533364365618},{"_id":"source/categories/index.md","hash":"48ad2fbd1e228ece36c9b6916c4d6aa7ac532ea3","modified":1533364365671},{"_id":"source/tags/index.md","hash":"8e3375c6848483e5edc316d6c9781e49a3b18224","modified":1533364365673},{"_id":"themes/melody/source/favicon.ico","hash":"77f33a03f42e576348ea82c61ed190169799f9bc","modified":1530109261817},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533115259942},{"_id":"themes/melody/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1533374467577},{"_id":"themes/melody/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1533374467577},{"_id":"themes/melody/.git/hooks/fsmonitor-watchman.sample","hash":"a04bcd7925e722826245dd3085ddbc739ccf12ac","modified":1533374467577},{"_id":"themes/melody/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1533374467577},{"_id":"themes/melody/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1533374467577},{"_id":"themes/melody/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1533374467577},{"_id":"themes/melody/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1533374467577},{"_id":"themes/melody/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1533374467577},{"_id":"themes/melody/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1533374467577},{"_id":"themes/melody/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1533374467593},{"_id":"themes/melody/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1533374467593},{"_id":"themes/melody/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1533374467593},{"_id":"themes/melody/.git/logs/HEAD","hash":"607d550938869f6b37d592308e7a434def08519f","modified":1533467161677},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1533115259864},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"94f64df96ac1d5a4853eae27a04b91d4669b9965","modified":1533115259848},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1533115259864},{"_id":"themes/melody/layout/includes/head.pug","hash":"89d5205994746015fe7412457dc2a97f3912e6c7","modified":1533115259864},{"_id":"themes/melody/layout/includes/layout.pug","hash":"187df0634800e2ebe48f26e4bf04fe3f73ba25fa","modified":1533115259864},{"_id":"themes/melody/layout/includes/nav.pug","hash":"a4921788a618b5ffa560a87b7b0e65f7f6e7ffbf","modified":1533115259880},{"_id":"themes/melody/layout/includes/header.pug","hash":"664705214dc167e7a323fea6e7874790d870fb3c","modified":1533115259864},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"a28c30fca4780a2afd5375f98833637b6b6e941a","modified":1533115259880},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"7323c95c02d2821021d426cbbc51aeeb10cc10df","modified":1533115259880},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"4a531e4f09417e2172ebda39c7d7c856b3979ced","modified":1533115259895},{"_id":"source/_posts/docker/docker.md","hash":"38c7931f2e5ea059e8e8e0454ce74a9e649b0f9e","modified":1530195131450},{"_id":"source/_posts/linux/arch-arch安装笔记.md","hash":"b1816e8536ac779bd2dd61defe2bdfa7474ed212","modified":1530195131452},{"_id":"source/_posts/linux/arch分swap.md","hash":"1fe9a829389cffad964e4b3487cc090f4f757e17","modified":1530195131453},{"_id":"source/_posts/linux/arch打包sogou.md","hash":"542a223cc663b992a145d1415111a420e367feb9","modified":1530195131454},{"_id":"source/_posts/linux/pppoe上网.md","hash":"f159108f761fe04e6108b2f559ab3d9b97d1108b","modified":1530195131455},{"_id":"source/_posts/linux/sogou输入配置.md","hash":"c093f4a6b034b6985d603d020b9006e1c5eddbe1","modified":1530195131456},{"_id":"source/_posts/linux/ubuntu修改ssh端口.md","hash":"9b49c769685df04db87a615795053a77ff2b0ccf","modified":1530195131457},{"_id":"source/_posts/搭建笔记/Jib构建你的第一个java镜像.md","hash":"a56b080be0a4cbe10d79ef08a58c9afba936925d","modified":1533364365608},{"_id":"source/_posts/linux/解决CentOS（6和7版本），-etc-sysconfig-下没有iptables的问题.md","hash":"649dcfd7dcd58ec8422fd004a2d0279a8a0516f4","modified":1530195131458},{"_id":"source/_posts/搭建笔记/Maven 安装与入门.md","hash":"a8ba30218f40a778ad5b53bfd53ddd0ab83ddff8","modified":1533364365609},{"_id":"source/_posts/搭建笔记/基于 Ubuntu 搭建个人网盘.md","hash":"47cfcc07d85bcbeb5de64b328f59f241e61b2db6","modified":1533364365610},{"_id":"source/_posts/搭建笔记/基于Ubuntu搭建FTP.md","hash":"d15fc1b6e78936795c729c80dcb0639919e3bfe2","modified":1533364365611},{"_id":"source/_posts/搭建笔记/搭建Git服务器.md","hash":"db410f19419787336be2ba5dad191535f49403a0","modified":1533364365612},{"_id":"source/_posts/搭建笔记/搭建javaweb开发环境.md","hash":"f6de04d4ab89845db89fc11a7c4bdc7e9023d66f","modified":1533364365613},{"_id":"source/_posts/搭建笔记/搭建个人 Leanote 云笔记本.md","hash":"01c8c90ba426e881cb163a186f378be5819aed01","modified":1533364365614},{"_id":"source/_posts/电脑问题/OneTab-和-轻听.md","hash":"ad82785310c5f5613978312886143a14992a454d","modified":1530195131507},{"_id":"source/_posts/电脑问题/QQ右下角弹出新闻框.md","hash":"051c9d8d54e72a2c5a5a4b86ebbc06ae09041fb4","modified":1530195131508},{"_id":"source/_posts/电脑问题/Tomcat提示指定的服务未安装Unable-to-open-the-service-'tomcat'.md","hash":"2f98c95e0e65e2db31be5cb4340bfbc5c8a85114","modified":1530195131509},{"_id":"source/_posts/电脑问题/eclipse中批量修改Java类文件中引入的package包路径.md","hash":"c94aa8cddce2732431af470375eff968b011eeb5","modified":1530195131510},{"_id":"source/_posts/电脑问题/win7隐藏IE浏览器.md","hash":"d21c61c82345a0330102cc827bc8d5e40cf91e9f","modified":1530195131512},{"_id":"source/_posts/电脑问题/windows10关闭“自动更新”.md","hash":"afd753959877483e8df28d110393fa41db22644d","modified":1530195131513},{"_id":"source/_posts/电脑问题/windows7,打开休眠模式.md","hash":"b021dbb1f330a801a74d884726424b705044317d","modified":1530195131514},{"_id":"source/_posts/电脑问题/f-lux和“薄暮微光”.md","hash":"e226cf9a10db7009c74ae1d9ecd4f0a10b0adaf0","modified":1530195131511},{"_id":"source/_posts/电脑问题/windows7-我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”].md","hash":"3e51c3f263a71ca10dc93b5b473edda11deaca1e","modified":1530195131516},{"_id":"source/_posts/电脑问题/windows下启动项菜单(Boot-Manager)问题.md","hash":"85d8c160ebf7896a980a3780eb5ece77403d07f2","modified":1530195131517},{"_id":"source/_posts/电脑问题/处理快捷方式小箭头.md","hash":"7b92050286774975dd03b006a0f4f05c99c82d49","modified":1530195131518},{"_id":"source/_posts/电脑问题/定时关机-睡眠.md","hash":"6de6aaffab616d96f05d0bc739789736d45949d9","modified":1530195131519},{"_id":"source/_posts/电脑问题/电脑文件搜索神器——Everything.md","hash":"f2b6d986d1d3b5daa215c043e0c125f0002c16aa","modified":1530195131521},{"_id":"source/_posts/电脑问题/禁止软件开机自启动的三种方法.md","hash":"fa797c50d958e457b311da8681fed5da41080513","modified":1530195131522},{"_id":"source/_posts/电脑问题/禁用UEFI安全启动功能.md","hash":"ae0e4c83777305c4bfbbab400612d3a4acec830b","modified":1530195131522},{"_id":"source/_posts/碎碎念/Google[x]’s-Loon，一个互联网气球.md","hash":"3ada487bdd2a1b658436677b217fa7efcc9c17af","modified":1533364365631},{"_id":"source/_posts/碎碎念/Many-Doors-In-My-Life.md","hash":"9bd948cadf8eb17d3a7a195c4a459e5cb18d40b9","modified":1533364365633},{"_id":"source/_posts/碎碎念/Google18岁了.md","hash":"19e22442cd5b2e78785ef193572bbd8691bb1aa4","modified":1533364365631},{"_id":"source/_posts/电脑问题/说说在win7下优化软件的必要性.md","hash":"8050be0fe006739db8fa71c2c9f29446916ed3ae","modified":1530195131523},{"_id":"source/_posts/碎碎念/“hello,-os-world!-”-of-Boot-Sector.md","hash":"570599f6aecbe814dbd9077d7ffbc4df0d652b0e","modified":1533364365634},{"_id":"source/_posts/碎碎念/《越晚越开心》停播.md","hash":"a4481bec29825af98e3204c7d2b79fadb9acb764","modified":1533364365634},{"_id":"source/_posts/碎碎念/一罐硬币实验的讨论——《信号与噪声》.md","hash":"d3a15cdb000fb4d0abab8e7db6949b8da7feccc2","modified":1533364365635},{"_id":"source/_posts/碎碎念/分数，教育的目的.md","hash":"4ade2b14fec3c75ccddc81bd184f55813dce246a","modified":1533364365636},{"_id":"source/_posts/碎碎念/十二行代码.md","hash":"974287ce02d2dc7a49766691875d9973472ddab2","modified":1533364365637},{"_id":"source/_posts/碎碎念/孙悟空无姓无名的时候，阎王生死簿是怎么写的呢？.md","hash":"fcfafc50e1f29f3e44f82e0dd63bf504d8e96d1a","modified":1533364365638},{"_id":"source/_posts/碎碎念/恶意代码引起的反思.md","hash":"88fb641d25ce5ec57cb2e56b48ae7322fa569ccf","modified":1533364365639},{"_id":"source/_posts/碎碎念/抠头发丝.md","hash":"7a8df1b0790e26dbf9ed7842b4d460039a6461aa","modified":1533364365641},{"_id":"source/_posts/碎碎念/我未曾见过你, 而你的光却照耀到了我.md","hash":"6a5d1433449178765ab2e4e723789f7aa132abbe","modified":1533364365640},{"_id":"source/_posts/碎碎念/无标题文章.md","hash":"0197e68734b62f3ad750b289487d2ac6dfd96a97","modified":1533364365642},{"_id":"source/_posts/碎碎念/日常20161030.md","hash":"9bb3df1689ffecc27b691122e15465189662baa4","modified":1533364365643},{"_id":"source/_posts/碎碎念/旧照片.md","hash":"f09dfdc6bd0583e3a60f82bad34a3bad51d537b5","modified":1533364365645},{"_id":"source/_posts/碎碎念/日常——google涂鸦.md","hash":"4265d2bb4af887ce10ce8422c5954d67d19814b5","modified":1533364365644},{"_id":"source/_posts/碎碎念/时光.md","hash":"8901607e664cebd5382906c20797b0ebef0bb0ab","modified":1533364365646},{"_id":"source/_posts/碎碎念/春分.md","hash":"f11ac2cb949b0bd4511ba5557e84dd75903d8b68","modified":1533364365646},{"_id":"source/_posts/碎碎念/百度，广告.md","hash":"2facfa33eeb8733d352d33e223c93f6012b56071","modified":1533364365647},{"_id":"source/_posts/碎碎念/看几天韩剧的感想.md","hash":"58d5be1bed86de915eb6576644614e4fbfe284d7","modified":1533364365648},{"_id":"source/_posts/碎碎念/织梦.md","hash":"b22cf4bbc3ee9ad2ce2f2cdaf01d0ffb5e24fb9d","modified":1533364365649},{"_id":"source/_posts/碎碎念/那些住在手机里的朋友.md","hash":"afa577cf3c76bcd425378bb8f44565466db8e9d4","modified":1533364365663},{"_id":"source/_posts/碎碎念/还没有晾干的旧伞，闷在寂寞的房里.md","hash":"fcad977e0e70a38f8d99eda42aefc556045a9237","modified":1533364365650},{"_id":"source/_posts/碎碎念/麻雀告诉我们的故事.md","hash":"a87c8f9afe2e57115e2fb4615000babb28a43804","modified":1533364365664},{"_id":"source/_posts/科普/IaaS、SaaS 和 PaaS 的区别.md","hash":"b5330e71430e51bae502300ef0a4688459a98ed9","modified":1533364365665},{"_id":"source/_posts/科普/Update与Modify两者区别.md","hash":"7665714783182d11a9d1099d76130dbe2312c0bd","modified":1530195131525},{"_id":"source/_posts/科普/视频格式.md","hash":"9ffb74919068cfbcd750b80b10f72ee01fe5d7cd","modified":1530195131544},{"_id":"source/_posts/科普/软件为何会有那么多权限.md","hash":"15756105745ce03953c20e449d6e6a666264807e","modified":1533364365666},{"_id":"source/_posts/编程/Java调用Python.md","hash":"6f6c8ee264b77cd787b07ee0b70f38e453201a45","modified":1533364365669},{"_id":"themes/melody/source/css/index.styl","hash":"1a5479d4ba15c0c0f20493f985fe55ea59d9a34a","modified":1533115259926},{"_id":"themes/melody/source/css/var.styl","hash":"7a1f4099b71741e3a156003234ef9a9a48b66abe","modified":1533115259926},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533115259926},{"_id":"themes/melody/source/js/copy.js","hash":"1bde8b43e92d938acfc98e37168dd693039650fe","modified":1533115259926},{"_id":"themes/melody/source/js/fancybox.js","hash":"7e2dbf73b44e9e262b6a856503cfe8cddc671c90","modified":1533115259926},{"_id":"themes/melody/source/js/fireworks.js","hash":"4ea3d888c122f2277159b7810b62848eeb790762","modified":1533115259942},{"_id":"themes/melody/source/js/head.js","hash":"1f0693d5d985b4bc5de16c79c5c9d4601260d617","modified":1533115259942},{"_id":"themes/melody/source/js/scroll.js","hash":"2206464e1ad4031d38054f9d1dc4a15daddb3481","modified":1533115259942},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1533115259942},{"_id":"themes/melody/source/js/transition.js","hash":"254820390dd5dfe9ee9097f3ef58e8c17b4bb280","modified":1533115259958},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1533115259958},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533115259864},{"_id":"themes/melody/.git/objects/12/602441848f089ff83957c7fd686cb150e592d0","hash":"3ef467ef1ef562ab800c5b1c92e60bde48767ae2","modified":1533456078542},{"_id":"themes/melody/.git/objects/13/ac92647f7be8b4305ea0639c6de81c5ddb9e3f","hash":"48f98264a6b95a2cf7b38b1646112f0142d0fb93","modified":1533467161338},{"_id":"themes/melody/.git/objects/26/6b7f5eebcc3d80dbd29e965b62e6f50ee7e841","hash":"16dc88fa669746658238fe8b18986f076541cef5","modified":1533456087743},{"_id":"themes/melody/.git/objects/28/64771a8a09c5d37ab01fd18e49a7e1146b1947","hash":"65ad7d8d74e11b48b764a54ead25617d79f5f41c","modified":1533462858203},{"_id":"themes/melody/.git/objects/42/eea53ef09cd2713f6185ccef8d15cd59fc4304","hash":"089e74c0c31d56ab44b2bcd48de2630df1af436d","modified":1533462866797},{"_id":"themes/melody/.git/objects/45/1381e461ff3f82a06314c5081f03a83e53866d","hash":"fe126dff9ebb718054cc87b24435c246cc628b58","modified":1533456087188},{"_id":"themes/melody/.git/objects/47/08e02fb31b60153a06d22cea5033dc2c3754bb","hash":"cdf69c5cc84426034e68a302936265683e56a29c","modified":1533460503735},{"_id":"themes/melody/.git/objects/47/57379d23665d327aa8ff5e41ebc06f0b3d63f2","hash":"c26753471eaedc3cdfd2c2d629e4b4995be48b88","modified":1533450952633},{"_id":"themes/melody/.git/objects/50/51c1127b9b0f80ed373bc4530bd2c324b6d875","hash":"ea69a6183df36c73b84569f80784124bb45480bc","modified":1533450952586},{"_id":"themes/melody/.git/objects/56/09a9663b595e082155a6f8a1543fe2c63ab492","hash":"4375e71d143726601f3eddcc0a18677b2d5ab243","modified":1533453974871},{"_id":"themes/melody/.git/objects/5b/c4440236f9b8857b8ad96ec4118b0884e94f3d","hash":"4a992e2846734f5f74acd5f01e1c238b1aff91ef","modified":1533450936399},{"_id":"themes/melody/.git/objects/5d/9f4b5f8fd260c9c7a9f8b9bc590fafe7252b12","hash":"6753404152bc41494b7c08e8d130559d66266d89","modified":1533453974979},{"_id":"themes/melody/.git/objects/6a/34e71b9bb7f897ecbfa5dcc3725a4945e880c0","hash":"7f190312b9649c9ad7980ed53a7405a5220fc9d6","modified":1533467161497},{"_id":"themes/melody/.git/objects/8b/9c4ce9d76b0b04ba88ad59ea0ff7bdca2fe537","hash":"a3b1efdbe450a7e25e497251c979e6c6529ae83c","modified":1533462644082},{"_id":"themes/melody/.git/objects/8d/b90f690a14a7eda6b7fa5792cd36e51e86120f","hash":"90d6f9aeaf34122f2090116343e5d8ca6ebaf885","modified":1533462716869},{"_id":"themes/melody/.git/objects/94/7636fb52a4e8a6f13a9563a7a8c8125c7d45fe","hash":"c8de7eaa77e5613fcdb0ea56b1f8cf183921052f","modified":1533374578815},{"_id":"themes/melody/.git/objects/ad/0e47a8f43c7e968644a34021ac42699a47c034","hash":"4f3e8767cc94ff1834e8bec873f4102c3afcea24","modified":1533374579883},{"_id":"themes/melody/.git/objects/af/e6c4060bc1c6a03f62b89504f281a51a408700","hash":"a25c6753db173415f444157543985a22e79f136f","modified":1533462716755},{"_id":"themes/melody/.git/objects/b8/6e82e69282b000fcfd8c9b33ad5fe37d389958","hash":"15be5f8cab3dd7c44005ad20305534cbd9b68442","modified":1533453960224},{"_id":"themes/melody/.git/objects/c3/83889249e139892c2803b71513eff333b10d8b","hash":"ffeea8c7d03e8e794aeebbae850d77170b16f616","modified":1533462866848},{"_id":"themes/melody/.git/objects/c6/b7b99a9acb233f754bd3154e9333ee42990594","hash":"2349456f8d929f91bb1babeadcfd5a376b125c3d","modified":1533450952680},{"_id":"themes/melody/.git/objects/cd/27f13b8d2c8b19bcfbe0f144fa3785fccbd728","hash":"23be6d4cd13bfae77968ebf5af3318d8bb043c94","modified":1533460527771},{"_id":"themes/melody/.git/objects/ce/111b98dcfa8ecbcfe82b2d7e3978e1ddef8cc3","hash":"5e299d4e2fb45bae6c5497839daf3877ccbae0e9","modified":1533374579749},{"_id":"themes/melody/.git/objects/d5/0f17f4ec365483469e060e3e155003f9356edd","hash":"8836fa47473f78561efa0103fc6ac31f0744d2e5","modified":1533462866730},{"_id":"themes/melody/.git/objects/d7/5b96b6caba118b3be7e634cf8c646a19c0fb3d","hash":"79f187ff39b79b9b43a89e79a5d0cbd94e8c7873","modified":1533374579964},{"_id":"themes/melody/.git/objects/d9/0507d742618c86d6603c94d5b6026525c2cd57","hash":"3cc3eafd866226e28af616fe6ffcc777780b9a0c","modified":1533467161599},{"_id":"themes/melody/.git/objects/e1/3b9238d24716f1ccc158ea9e1b3584cda85f2b","hash":"dfd244e7765ce41e4e4ea937bcda34d64469f0ee","modified":1533467161419},{"_id":"themes/melody/.git/objects/e5/054fb82ac8090544fc3eace18b9ce4ca775872","hash":"ba47a629d5a60e2146e80513a9ad010184d9a7a9","modified":1533450952492},{"_id":"themes/melody/.git/objects/e9/4c6ed71649fedb4ad531cf3dda898ff27056d8","hash":"6473cbb6519f21938a25ad77217f0a5338049e3c","modified":1533460528700},{"_id":"themes/melody/.git/objects/fa/8cdbab0d6a26d9f0b5290aa6b4eb17da1ab9fe","hash":"add7663346c3bbf69a072de41e05748897ffeafc","modified":1533374538940},{"_id":"themes/melody/.git/objects/pack/pack-f84b3b16efbad25a93bd5afbc8eaec83e0e2d595.idx","hash":"c4fe829aeeea8247c9bfa8ad5060eb1440396faf","modified":1533374504938},{"_id":"themes/melody/.git/refs/heads/dev","hash":"75c70f6f21333f8d40dc06ec130db539a78fc607","modified":1533467161675},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1533115259848},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1533115259848},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"0165f5adf06100cb1c66f1fce0f42796bfe99d19","modified":1533115259864},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1533115259864},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1533115259864},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"11b739a6e1fd090fbb72bbb42a9119bb8503ad63","modified":1533115259864},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"6594860873324914d2da62b1a47779284f3e1058","modified":1533115259864},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1533115259864},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1533115259880},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1533115259880},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1533115259880},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1533115259880},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1533115259880},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1533115259880},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"49cf38dc1f25f5646bf28568b08b4e35d5822648","modified":1533115259880},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"7d8660614f5b80e9078c184456f4742a520c5d56","modified":1533115259880},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"d4118b23bed4daba8c98247c0f4bdd81e0f60f53","modified":1533115259895},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1533115259895},{"_id":"source/_posts/backEnd/maven/maven项目jar包导入失败.md","hash":"ae2c5fe3ff2f796f94a93c5557204f6ef4936d4f","modified":1533364365592},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"245823713e729136779af3f0cbb33bf1de5a5103","modified":1533115259895},{"_id":"source/_posts/backEnd/spring/Spring Boot YML文件配置多环境.md","hash":"9097ef2a727017929fba3de44ce21a763ca791b5","modified":1533364365594},{"_id":"source/_posts/backEnd/spring/Spring Boot多数据源整合.md","hash":"f19ff309010e62bf16c5add61c00ce024a6eef54","modified":1533364365595},{"_id":"source/_posts/backEnd/spring/tiny-spring 简介.md","hash":"e4fc92ddfc521e8cb3ceb63ac8a44611d76882fe","modified":1533364365596},{"_id":"source/_posts/backEnd/spring/tiny-spring分析.md","hash":"248543b9dc8806903be75af525c179de5cae172c","modified":1533364365597},{"_id":"source/_posts/backEnd/服务配置/Redis.md","hash":"d5d0a6d6c4b4a7d90d4d0b34adde5337ee6cccf9","modified":1533364365599},{"_id":"source/_posts/frontEnd/ajax/$(this)-id和$(this)-attr('id').md","hash":"c11e6f2436231e4831073f4ab9ec160c4ab899e0","modified":1533364365601},{"_id":"source/_posts/frontEnd/ajax/使用ajax()方法加载服务器数据.md","hash":"bf3bb306466d2f1638e79ccd9c8a139e08d4b1ef","modified":1533364365602},{"_id":"source/_posts/backEnd/服务配置/apahce错误提示the-requested-operation-has-failed.md","hash":"dfee11c709b8255c0c599d6c51c98b1a3f3bc5bd","modified":1533364365600},{"_id":"source/_posts/搭建笔记/翻墙/arch-开机自启动脚本.md","hash":"b4e8726ee63da431452eb3c2b5c730cd7ccae281","modified":1533364365615},{"_id":"source/_posts/frontEnd/ajax/回调函数（callback）是什么？.md","hash":"e4c1a66b5d6373ae371d8769fe6a92b0fc6c95df","modified":1533364365604},{"_id":"source/_posts/搭建笔记/翻墙/shadowsocks搭建过程(客户端).md","hash":"1e36c1621a186b149718b8873862621fd24cd647","modified":1533364365616},{"_id":"source/_posts/搭建笔记/翻墙/shadowsocks搭建过程(服务端).md","hash":"5f8ca063d509bf90fe643319b5c55f434df84dad","modified":1533364365617},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-专注游戏的原因.md","hash":"0937a1f6aff152dbf7ecc46ee2f85189bc08258e","modified":1533364365620},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-游戏和世界.md","hash":"aef6aabff65c0a15bba9a553798ce2d903058ebe","modified":1533364365622},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-叙事和Narreme.md","hash":"8dfda2ce25a8ce2617edd89f84f788046454fecd","modified":1533364365621},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-游戏和视觉.md","hash":"b4775327fcf4d3989867cdb09ab44014eaec8e60","modified":1533364365623},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-游戏和触觉.md","hash":"96e9378d5f070f0ed61b04022ecca66674078d59","modified":1533364365624},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-游戏的设计.md","hash":"e91b28f44c7f0b23a3c5b45b2fabbc3f112ce576","modified":1533364365626},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-游戏和身体.md","hash":"65cc17474c9c927a8ed5241fe3d339ce3249ec58","modified":1533364365625},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-结构.md","hash":"54867c75364bb6a0f5fc7ae65283ad663a93f880","modified":1533364365627},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-记录《游戏性是什么》.md","hash":"da5c8b629b26faf643765ecfcedd6816947b23ed","modified":1533364365628},{"_id":"source/_posts/文集/游戏性是什么/游戏性是什么-难易度平衡设计与效率预测.md","hash":"1f47fae2d2b25c7dcaf9690210b31562ac05f083","modified":1533364365629},{"_id":"themes/melody/source/css/_global/index.styl","hash":"7fd18f0bcfbf3cd2674ab87a3900c89780beecbe","modified":1533115259911},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"bb83b379954dc2e7f5a9915e5ed50da7223e3efa","modified":1533115259911},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1533115259911},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1533115259911},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"5ef520380e57b31bce985d353eabce4e9f2828f1","modified":1533115259911},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"a91f6632f5359256b0c4cc624a5ee6cfd39683b0","modified":1533115259911},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"6a0014348daaf4d4e08649dc565e5069c13fd36c","modified":1533115259911},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"c825d1176a998e378b07e457dd2d1af40f6f94b9","modified":1533115259911},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1533115259911},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"f36daf7f3f18778f28c3e7b6551ce9418e8aa975","modified":1533115259911},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1533115259926},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1533115259926},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1533115259926},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1533115259926},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1533115259926},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1533115259926},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1533115259942},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1533115259942},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1533115259942},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1533115259942},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1533115259958},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1533115259958},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1533115259942},{"_id":"themes/melody/.git/logs/refs/heads/dev","hash":"607d550938869f6b37d592308e7a434def08519f","modified":1533467161679},{"_id":"themes/melody/.git/refs/remotes/origin/HEAD","hash":"2c142208129b78a4616cbb6798f96f4fb3580296","modified":1533374505142},{"_id":"themes/melody/.git/refs/remotes/origin/dev","hash":"75c70f6f21333f8d40dc06ec130db539a78fc607","modified":1533467181481},{"_id":"themes/melody/source/img/top.jpg","hash":"c92cf2f99900ba834be269b9e1e489b2f379d070","modified":1533396647514},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1533115259942},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1533115259958},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1533115259958},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1533115259958},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1533115259958},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1533115259958},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1533115259958},{"_id":"themes/melody/.git/logs/refs/remotes/origin/dev","hash":"b4110e7c2066fa4d3974e06089cd354fb83e718d","modified":1533467181485},{"_id":"themes/melody/.git/logs/refs/remotes/origin/HEAD","hash":"166653c21fec9d9cbf66ba442857341a512e506a","modified":1533374505142},{"_id":"themes/melody/.git/objects/e3/a7bf8b86a7734fd336868e69f66394104bea78","hash":"b8b11d0983860a5e0db67eda69e909bd53518b15","modified":1533450936554},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1533115259958},{"_id":"themes/melody/.git/objects/0a/fb16f4f980a09801dd072596bf9091bc74382c","hash":"a7efeb3a67251fe313da8097c3e982cbf081ed5c","modified":1533374539081},{"_id":"themes/melody/.git/objects/pack/pack-f84b3b16efbad25a93bd5afbc8eaec83e0e2d595.pack","hash":"cbd91972a6f14b7be7634aa03a28203f9c3e42d1","modified":1533374578000},{"_id":"themes/melody/.git/objects/76/4844a6f4eead4421992044cc8c7eb833db9231","hash":"e739194e6c35ea3d682c0c2f1cb7b6e9cd3c8239","modified":1533450937107},{"_id":"public/manifest.json","hash":"76f52282c8f4afdd3e9003cbaaf9525206510c59","modified":1533472062920},{"_id":"public/search.xml","hash":"57bf1e39720198081b9cfebc47d19c2fc79052d1","modified":1533472062961},{"_id":"public/categories/index.html","hash":"c0469c93aaa0ae3804d457e670e30c281067090a","modified":1533472063066},{"_id":"public/tags/index.html","hash":"307a5c4123fb6cd919f6298dc7523a4c543984e4","modified":1533472063066},{"_id":"public/2018/08/04/搭建笔记/搭建个人 Leanote 云笔记本/index.html","hash":"96dec3ab3f0935581876335051c3adcf20307c88","modified":1533472063066},{"_id":"public/2018/08/04/搭建笔记/搭建javaweb开发环境/index.html","hash":"e76138a1a71629fee59dc9bd93dc6b67b5f8041a","modified":1533472063066},{"_id":"public/2018/08/04/搭建笔记/搭建Git服务器/index.html","hash":"0a8795ddd86c887b2dbe9bff946264ab1bc829a6","modified":1533472063067},{"_id":"public/2018/08/04/搭建笔记/基于Ubuntu搭建FTP/index.html","hash":"5b850786f292f864107238da6c70c5093b53804d","modified":1533472063067},{"_id":"public/2018/08/04/搭建笔记/Maven 安装与入门/index.html","hash":"a92f3cd3818445388fb6399e236764044a94f18a","modified":1533472063067},{"_id":"public/2018/08/04/搭建笔记/基于 Ubuntu 搭建个人网盘/index.html","hash":"486f029d674210478b082b84d85915dcd025cc5e","modified":1533472063067},{"_id":"public/2018/08/01/科普/IaaS、SaaS 和 PaaS 的区别/index.html","hash":"c694ec2a0fb09eb7147bcf96bd3b2a6a2f4b30dc","modified":1533472063067},{"_id":"public/2018/08/01/文件上传/index.html","hash":"a17a2cd9b2e65cca655061c6037a3f6cbe720e58","modified":1533472063067},{"_id":"public/2018/07/21/修改形参对象值，会影响实参/index.html","hash":"60c4bed9ccd9ee117d36f829c48940b43be17bdf","modified":1533472063067},{"_id":"public/2018/07/12/编程/Java调用Python/index.html","hash":"b5c3e09ed83273408089793196d78e46829d9d01","modified":1533472063068},{"_id":"public/2018/07/03/科普/软件为何会有那么多权限/index.html","hash":"0a470320169c1071b19e6fee9f197cc9c60f43b2","modified":1533472063068},{"_id":"public/2018/04/23/搭建笔记/翻墙/arch-开机自启动脚本/index.html","hash":"cf07bee34fa83bb100e67bfa195243d49a08beb2","modified":1533472063068},{"_id":"public/2018/03/14/碎碎念/我未曾见过你, 而你的光却照耀到了我/index.html","hash":"160a01d13efabfee22b25fd4f6b77f37b230ba4c","modified":1533472063068},{"_id":"public/2017/08/31/frontEnd/ajax/回调函数（callback）是什么？/index.html","hash":"fc3bffb147e4e0434a6c31dabe11d0695e4e6803","modified":1533472063068},{"_id":"public/2017/08/22/backEnd/maven/maven项目jar包导入失败/index.html","hash":"3ed494a7fd3fa643afa428cf6b6380161849d692","modified":1533472063068},{"_id":"public/2017/08/05/电脑问题/eclipse中批量修改Java类文件中引入的package包路径/index.html","hash":"e1f17812f7ea6098572558bb11c1964bcabc804d","modified":1533472063068},{"_id":"public/2017/06/18/frontEnd/ajax/$(this)-id和$(this)-attr('id')/index.html","hash":"2864a916a9fc59b18bf0cf25fc29e8ac16123de3","modified":1533472063068},{"_id":"public/2017/06/16/frontEnd/ajax/使用ajax()方法加载服务器数据/index.html","hash":"a3098652eb4bd61f3044c6d9b98917114a1a9d0d","modified":1533472063069},{"_id":"public/2017/05/23/linux/解决CentOS（6和7版本），-etc-sysconfig-下没有iptables的问题/index.html","hash":"195366b2edd98b5dc04f3a5358c84506f2098855","modified":1533472063069},{"_id":"public/2017/04/23/backEnd/服务配置/apahce错误提示the-requested-operation-has-failed/index.html","hash":"c66d415ceb57c7f6fc5ea429300be9c7af5ee34e","modified":1533472063069},{"_id":"public/2017/03/24/backEnd/服务配置/Redis/index.html","hash":"6eaaf8f8faf69c941cbf811980fb6c14dbd9f4aa","modified":1533472063069},{"_id":"public/2017/01/24/电脑问题/windows10关闭“自动更新”/index.html","hash":"0ed09e1a2f76ef434c2b586ee86510d6cb52cdc3","modified":1533472063069},{"_id":"public/2017/03/24/科普/Update与Modify两者区别/index.html","hash":"691b19b93951f4036d9e69f4d99a0d26a86163a1","modified":1533472063069},{"_id":"public/2017/01/21/电脑问题/Tomcat提示指定的服务未安装Unable-to-open-the-service-'tomcat'/index.html","hash":"8c75bd7c847f0e5bf80b278afac1a1dc950f8fd0","modified":1533472063069},{"_id":"public/2017/01/20/docker/docker/index.html","hash":"cdf2138ea167c4f92e56714c21b59c7de4df0fe4","modified":1533472063069},{"_id":"public/2016/11/05/碎碎念/Many-Doors-In-My-Life/index.html","hash":"d262cd75d5837cf60e56cc2548662c50f58edabc","modified":1533472063070},{"_id":"public/2016/11/05/碎碎念/Google18岁了/index.html","hash":"0e11e2f8b1e65ff8213ace51315827bb22c4c081","modified":1533472063070},{"_id":"public/2016/11/05/碎碎念/《越晚越开心》停播/index.html","hash":"77982d0b608b51e3e5ab72117f266ecf17471bbc","modified":1533472063070},{"_id":"public/2016/11/05/碎碎念/分数，教育的目的/index.html","hash":"97aff1ff5598e89e9e9598d54e6634d01d777735","modified":1533472063070},{"_id":"public/2016/10/31/碎碎念/日常——google涂鸦/index.html","hash":"2b4524ef61cf4fb0c2d71ad4a388795025ef749f","modified":1533472063070},{"_id":"public/2016/10/30/碎碎念/日常20161030/index.html","hash":"f2ae0e954928109040fbf76fb2a4b6f1853949fb","modified":1533472063070},{"_id":"public/2016/09/11/linux/ubuntu修改ssh端口/index.html","hash":"a025ffbd0a6f5f69e10d13491e201c8053fb20d5","modified":1533472063070},{"_id":"public/2016/09/07/linux/sogou输入配置/index.html","hash":"7af60bcf160373a9522ee4f176b5ac0b38724595","modified":1533472063070},{"_id":"public/2016/06/10/文集/游戏性是什么/游戏性是什么-难易度平衡设计与效率预测/index.html","hash":"38bc3c2b936c00ee7e61ce4a9969a3ec4211ca6d","modified":1533472063071},{"_id":"public/2016/05/25/碎碎念/“hello,-os-world!-”-of-Boot-Sector/index.html","hash":"ac7b7f9ed4783dae1dc5c90731c85c7a017e90d9","modified":1533472063071},{"_id":"public/2016/05/08/碎碎念/百度，广告/index.html","hash":"cf0dfb8da3bd9404d67580acc439bb7932016653","modified":1533472063071},{"_id":"public/2016/04/22/电脑问题/OneTab-和-轻听/index.html","hash":"14c7ee68dddf148d11d7aaf75356b071d1f07e2b","modified":1533472063071},{"_id":"public/2016/04/18/碎碎念/恶意代码引起的反思/index.html","hash":"69f3709b5d215bc5eb6c75dfa51e4e82f8d20cb5","modified":1533472063071},{"_id":"public/2016/04/15/碎碎念/无标题文章/index.html","hash":"8b319def818cf967277ac6c0d3b5ea9c4a383f19","modified":1533472063071},{"_id":"public/2016/04/15/碎碎念/看几天韩剧的感想/index.html","hash":"eef40bf737eb1aedb278fda65c80a19aaa525452","modified":1533472063071},{"_id":"public/2016/04/07/linux/pppoe上网/index.html","hash":"4ffa25883d05059d8914224dc4e29a3ccb48efee","modified":1533472063071},{"_id":"public/2016/04/05/碎碎念/旧照片/index.html","hash":"ca66e9772b1cde9dc4e9bb1a19f186abe5f9d0e3","modified":1533472063071},{"_id":"public/2016/04/01/电脑问题/f-lux和“薄暮微光”/index.html","hash":"39616f6321d60e796b7dd55ba93330e04f8eb0a6","modified":1533472063072},{"_id":"public/2016/04/01/电脑问题/windows7,打开休眠模式/index.html","hash":"588cdcb26501550ad17be2aaa236bd96044f0e0c","modified":1533472063072},{"_id":"public/2016/03/21/电脑问题/电脑文件搜索神器——Everything/index.html","hash":"3e09dcd72a2a1c3b0dc8cec05e484fae33028a61","modified":1533472063072},{"_id":"public/2016/03/20/碎碎念/春分/index.html","hash":"f884573313bfde05e0c5b3d190ca2767c59280a9","modified":1533472063072},{"_id":"public/2016/03/19/电脑问题/windows下启动项菜单(Boot-Manager)问题/index.html","hash":"53bc6c7a1e04974e6536e37b1967d2f8f6f320d3","modified":1533472063072},{"_id":"public/2016/03/17/碎碎念/还没有晾干的旧伞，闷在寂寞的房里/index.html","hash":"29e8d122896e4b445fa978bbf18d5ca600766161","modified":1533472063072},{"_id":"public/2016/03/14/碎碎念/麻雀告诉我们的故事/index.html","hash":"77df5a9bf907210eca871fbc0c7f86c87856c641","modified":1533472063072},{"_id":"public/2016/03/11/碎碎念/织梦/index.html","hash":"8cd8d11c217b0f5fbafc978907d75ac9d0dabb4a","modified":1533472063072},{"_id":"public/2016/03/06/linux/arch分swap/index.html","hash":"1b8b04021f466811bf06425e329cb7d2743ac598","modified":1533472063072},{"_id":"public/2016/03/06/电脑问题/定时关机-睡眠/index.html","hash":"fc13076362d99170557b60c69fafd0d76d606889","modified":1533472063072},{"_id":"public/2016/03/04/linux/arch打包sogou/index.html","hash":"0cb356ae01a366b9c0692f947c925ccd00ce43ba","modified":1533472063072},{"_id":"public/2016/03/02/碎碎念/十二行代码/index.html","hash":"b134fa8b344c449d10451d21ff07b44b845c8daa","modified":1533472063073},{"_id":"public/2016/03/02/碎碎念/一罐硬币实验的讨论——《信号与噪声》/index.html","hash":"4f78635ca5fb2a6ee405a7a41bf84ff2320f4258","modified":1533472063073},{"_id":"public/2016/03/01/电脑问题/处理快捷方式小箭头/index.html","hash":"f7dc3fca637c73f5318566d2659f54aa2c6d5cb1","modified":1533472063073},{"_id":"public/2016/02/29/电脑问题/说说在win7下优化软件的必要性/index.html","hash":"c1527d47f8ab4f150a5f882ea1b7216aeb75bdd6","modified":1533472063073},{"_id":"public/2016/02/28/电脑问题/禁用UEFI安全启动功能/index.html","hash":"31a37133727f26f16442083446b7adff2f9bc9c0","modified":1533472063073},{"_id":"public/2016/02/27/电脑问题/QQ右下角弹出新闻框/index.html","hash":"07c055fc73def783d9efa1aacceee64a6b757967","modified":1533472063073},{"_id":"public/2016/02/27/电脑问题/win7隐藏IE浏览器/index.html","hash":"1be9737e72a4c758f539aff75b1637befc9fe938","modified":1533472063073},{"_id":"public/2016/02/26/电脑问题/windows7-我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”]/index.html","hash":"0834fe33e04f858a7698aeb83f00a672a32212a2","modified":1533472063073},{"_id":"public/2016/02/21/电脑问题/禁止软件开机自启动的三种方法/index.html","hash":"e91bc3758b1828c7f13475670587fa03129ce491","modified":1533472063073},{"_id":"public/2016/02/21/碎碎念/Google[x]’s-Loon，一个互联网气球/index.html","hash":"7aa972ce9f5be15004d7bd5035225f3125c35de6","modified":1533472063073},{"_id":"public/2016/01/28/碎碎念/时光/index.html","hash":"cf3e1a7e8e38d771f18f14c47a5b2be53c1be0c9","modified":1533472063073},{"_id":"public/2016/01/15/碎碎念/那些住在手机里的朋友/index.html","hash":"0fba2d9a4dcee4fbb5413808c64fba10eb10313a","modified":1533472063073},{"_id":"public/categories/系统-Linux/index.html","hash":"5fda7977e2428d3da893d58ffcd5e8d0d40d9a3c","modified":1533472063074},{"_id":"public/categories/Program/index.html","hash":"6b1d00c9aaff215452248b6a19d671577f6e6317","modified":1533472063074},{"_id":"public/categories/系统/index.html","hash":"11dca116fcfd6953df241179b86714e1dc37d99d","modified":1533472063074},{"_id":"public/categories/windows电脑问题/index.html","hash":"b395ce438ab2914f5e2d871559de398e6cd44218","modified":1533472063074},{"_id":"public/categories/windows电脑问题/page/2/index.html","hash":"c847f090e3c6ee4eebffe6650eae069f7dd492d6","modified":1533472063074},{"_id":"public/categories/软件/index.html","hash":"c562ef0ad83b8a51c223c465473329406153698d","modified":1533472063074},{"_id":"public/categories/日记本/index.html","hash":"897075ace9c8d8906d5d177239a5852e0faa6ed4","modified":1533472063074},{"_id":"public/categories/日记本/page/2/index.html","hash":"be3432ce39dfc8567c948eaca0dfc880353dafe4","modified":1533472063074},{"_id":"public/categories/随笔/index.html","hash":"3b40c0f955d27b59733d9fd9eef8993f41c1df7c","modified":1533472063074},{"_id":"public/categories/科普/index.html","hash":"39e1ecc78086130a15dc4e704bb193caf8c4a186","modified":1533472063074},{"_id":"public/categories/编程/index.html","hash":"70d5870dbbf55ff1d1ae3f7035376401d771573c","modified":1533472063074},{"_id":"public/categories/java-Program/index.html","hash":"90641e5356e8ba5ba3f31209372ab243441fe9c0","modified":1533472063074},{"_id":"public/categories/服务配置/index.html","hash":"8ab7e70e9d9a3be56734fe4f09d391b06b4f8f2d","modified":1533472063074},{"_id":"public/categories/翻墙-Linux/index.html","hash":"8233aeb2b2ace58f916180f304450d41890d86e0","modified":1533472063074},{"_id":"public/categories/翻墙/index.html","hash":"4fc9f2d3bf12abcdb67636f5d7c0e943a145a7d5","modified":1533472063075},{"_id":"public/categories/游戏性是什么/index.html","hash":"d58f2e747c8035dda6de19bd6c34f8d93b896e05","modified":1533472063075},{"_id":"public/archives/index.html","hash":"e5f555ad793d98219c3aebb61798febe6caee333","modified":1533472063075},{"_id":"public/archives/page/2/index.html","hash":"7679cc55190a6ae897446c71de00380426577917","modified":1533472063075},{"_id":"public/archives/page/3/index.html","hash":"154dbae12e663a36e2bff4f3aa5644da393d7650","modified":1533472063075},{"_id":"public/archives/page/4/index.html","hash":"13dac8abdcc435e470a39c4123839b3561f52fc6","modified":1533472063075},{"_id":"public/archives/page/5/index.html","hash":"9d93fcbbfd291c8dea98ac4d9547075b80162310","modified":1533472063075},{"_id":"public/archives/page/6/index.html","hash":"278d017753a0cc0094d5349f78f3b6361bb22a46","modified":1533472063075},{"_id":"public/archives/page/7/index.html","hash":"ea585fef3763922992172348faaa01fdd9e21c8d","modified":1533472063075},{"_id":"public/archives/page/8/index.html","hash":"f9139bd72d23aa82b11d163acef72b5267808df8","modified":1533472063075},{"_id":"public/archives/page/9/index.html","hash":"21eec1b3944f1d9b0ab549849b4af1f40ddda4ed","modified":1533472063075},{"_id":"public/archives/2015/index.html","hash":"d0d1c24f54c0f7160dc9e65eca9da304c595e423","modified":1533472063075},{"_id":"public/archives/2015/12/index.html","hash":"f0ae648e8570ff250cedaf157d9f83bdf928850d","modified":1533472063075},{"_id":"public/archives/2016/index.html","hash":"5dc5ffcb21cb1bed36871ef3f4f602797f780bf5","modified":1533472063076},{"_id":"public/archives/2016/page/2/index.html","hash":"e610afe2bdc4c23dedb9ecf5dd5ee876b2ce5958","modified":1533472063076},{"_id":"public/archives/2016/page/3/index.html","hash":"2ed55494e4d70943bc9a447ce7950f993c98477f","modified":1533472063076},{"_id":"public/archives/2016/page/4/index.html","hash":"1cfabcbcd1bee9a50ee1d4cd23a23c687b24e31e","modified":1533472063076},{"_id":"public/archives/2016/page/5/index.html","hash":"ac4581e475f83716fbf3b64f60bd36f7a9343ee2","modified":1533472063076},{"_id":"public/archives/2016/page/6/index.html","hash":"ace02b2a91cba35f5d5163f36958ca88eb8e1c67","modified":1533472063076},{"_id":"public/archives/2016/01/index.html","hash":"1827326516198c91d2705cb6b1954bb8ab35a46b","modified":1533472063076},{"_id":"public/archives/2016/02/index.html","hash":"da195d9191f883fec7be78650c6cf97154040a13","modified":1533472063076},{"_id":"public/archives/2016/03/index.html","hash":"3efb48df46a0f680c78985335401a858b807f6f6","modified":1533472063076},{"_id":"public/archives/2016/03/page/2/index.html","hash":"a970fa58a9b4012f8c89ff18c3689069454779a8","modified":1533472063076},{"_id":"public/archives/2016/04/index.html","hash":"8cf3d4939ca49126b708b2cbd64e3de802c251e9","modified":1533472063076},{"_id":"public/archives/2016/05/index.html","hash":"c9ec324c20efb69e8d07e8ec13371fe27e632341","modified":1533472063076},{"_id":"public/archives/2016/06/index.html","hash":"50ca66852f5680c008fa0aa46bd79fe001cf753b","modified":1533472063076},{"_id":"public/archives/2016/09/index.html","hash":"fdf107220a61ab7bba540921b70b7f25b3263dfe","modified":1533472063077},{"_id":"public/archives/2016/10/index.html","hash":"fec4b0f6b6dd9b07733da26f3acecff8d4179b14","modified":1533472063077},{"_id":"public/archives/2016/11/index.html","hash":"ff7cbc2c563e793774d0ed454d81b85cd64fc60c","modified":1533472063077},{"_id":"public/archives/2017/index.html","hash":"0fd61a30726477ac833b5e0e8f47b4771f29d684","modified":1533472063077},{"_id":"public/archives/2017/page/2/index.html","hash":"babe1e4d667372fcd5224d5d11f62f8166b1728c","modified":1533472063077},{"_id":"public/archives/2017/01/index.html","hash":"ffa2deae9c4be3f6317277c4003c3007ffd6d79d","modified":1533472063077},{"_id":"public/archives/2017/03/index.html","hash":"6a29d320b2ce27a92769ae38e8178a9fc37cc988","modified":1533472063077},{"_id":"public/archives/2017/04/index.html","hash":"7501a8cd01503b5248e905089df4874d6d393413","modified":1533472063077},{"_id":"public/archives/2017/05/index.html","hash":"dc1f0d74cc3f38c4b7fb9333203fce54810562e5","modified":1533472063077},{"_id":"public/archives/2017/06/index.html","hash":"e0c16083f3a9b7c6da039d9adeb39181f2758d8c","modified":1533472063077},{"_id":"public/archives/2017/08/index.html","hash":"7b129060005c31a4ece0019abcb02235aa5bc6d0","modified":1533472063077},{"_id":"public/archives/2018/index.html","hash":"9031616772b49a1509bb252245b1f9b70efc4242","modified":1533472063077},{"_id":"public/archives/2018/page/2/index.html","hash":"b5cf634d1f672cf17a59b585a6c390b9e5c690f3","modified":1533472063077},{"_id":"public/archives/2018/page/3/index.html","hash":"2383532ecde65b255d22fdf00478d5a068f952f2","modified":1533472063078},{"_id":"public/archives/2018/03/index.html","hash":"619e8dea24ef627bb34bf279305cb5ce76556766","modified":1533472063078},{"_id":"public/archives/2018/04/index.html","hash":"ae2773cb58f3c88d6ce3705ac719cc54f045dcda","modified":1533472063078},{"_id":"public/archives/2018/06/index.html","hash":"75b1d1ab6090c1b9b92e7e52df0b7bf33c65328b","modified":1533472063078},{"_id":"public/archives/2018/07/index.html","hash":"2a9ba766276fa28e8073f254c27d03c160721255","modified":1533472063078},{"_id":"public/archives/2018/08/index.html","hash":"33677de8fad73cf4af5e9c8d1c6b9cb9f16b6f2a","modified":1533472063078},{"_id":"public/tags/arch/index.html","hash":"016d0046dfcb5e68ffcd6b95ddab58223e420487","modified":1533472063078},{"_id":"public/tags/docker-linux/index.html","hash":"2f9b8c50a803218f0a42a2cdf1c32a3c94ba8e0b","modified":1533472063078},{"_id":"public/tags/linux/index.html","hash":"55520d9c7a0fcbe13978ed7f4ce1c206022015ef","modified":1533472063078},{"_id":"public/tags/linux-sogou/index.html","hash":"e6161a36e6474924b504371f03b790aceb0ef7e4","modified":1533472063078},{"_id":"public/tags/linux-网络/index.html","hash":"1325f7f4aa8d4a473c9b1885a720c19cd86d49ab","modified":1533472063078},{"_id":"public/tags/linux-ssh/index.html","hash":"4c6e25569f64e93257fa073316550aca86d7b4e4","modified":1533472063078},{"_id":"public/tags/linux-centos/index.html","hash":"d4f4c92bdc6a9d2528f671e9ec5955344e805e2d","modified":1533472063079},{"_id":"public/tags/电脑问题/index.html","hash":"9b6f953973306720c45dac40e7fd4dc79d15387e","modified":1533472063079},{"_id":"public/tags/电脑问题/page/2/index.html","hash":"b4144489b0836864f20090d4a97c59cbf9cede88","modified":1533472063079},{"_id":"public/tags/神器/index.html","hash":"65f89e9103436c1a9bc802a86e34e9f6d6d53415","modified":1533472063079},{"_id":"public/tags/Google/index.html","hash":"02f03ab9293cd63e63ee11e10856a1dc2496f186","modified":1533472063079},{"_id":"public/tags/碎碎-子涵/index.html","hash":"4e66087f4f2f50f17b9e1fcb1c8cd86cf08c23aa","modified":1533472063079},{"_id":"public/tags/科普/index.html","hash":"cbf63dc36b02ebd7a1cab48358b8049ea5ec6eee","modified":1533472063079},{"_id":"public/tags/maven/index.html","hash":"d0e8c5a8cedba56db07bb3cb085f7b83c701d375","modified":1533472063079},{"_id":"public/tags/spring/index.html","hash":"9a842255c5c6c889c42150e4e847e0028ac2b470","modified":1533472063079},{"_id":"public/tags/ajax-前端/index.html","hash":"05d85059032967505e4c181176e7e5130c870379","modified":1533472063079},{"_id":"public/tags/apahce/index.html","hash":"e2594a2a6affb7da998e628ddea7e560a97a630b","modified":1533472063079},{"_id":"public/tags/翻墙-Shadowsocks-arch/index.html","hash":"4d1429b940078a0a33563bcc1955966bf0c20c11","modified":1533472063079},{"_id":"public/tags/翻墙-Shadowsocks/index.html","hash":"e26a742117574d45ed2abd9f343462aa19e11857","modified":1533472063079},{"_id":"public/tags/游戏/index.html","hash":"001eb750d3ec0d25576a5b7883e1c31143b045c7","modified":1533472063080},{"_id":"public/index.html","hash":"5647125c3b534063ffb7acb4180e6cd91125df66","modified":1533472063080},{"_id":"public/page/2/index.html","hash":"fff1c7d6d7b80be7cc8f4585205e4a9562d0ee5d","modified":1533472063080},{"_id":"public/page/3/index.html","hash":"e262920ac7da69415fe8d6837835609bcf54ace9","modified":1533472063080},{"_id":"public/page/4/index.html","hash":"c713fc37574ae0d788ba3f6d76467706371b64e1","modified":1533472063080},{"_id":"public/page/5/index.html","hash":"091dca0abaa7b7480107799b3b1ce2487f0b8b29","modified":1533472063080},{"_id":"public/page/6/index.html","hash":"7b595ac0730187047a47b208a4e5fc51a6af69f8","modified":1533472063080},{"_id":"public/page/7/index.html","hash":"7cde7c08e02ef0ce8ba6ea8628e7c6af947bc9bd","modified":1533472063080},{"_id":"public/page/8/index.html","hash":"53baed192f68fd4a911f67dd1c306f12d63ebf0c","modified":1533472063080},{"_id":"public/page/9/index.html","hash":"78dd15545ac0c611fe7bd3feb540f54fc269f399","modified":1533472063080},{"_id":"public/2018/08/04/搭建笔记/Jib构建你的第一个java镜像/index.html","hash":"9c826f40f76f5d5fef7b4b0dcd1b15ae7db702ec","modified":1533472063081},{"_id":"public/2018/07/19/backEnd/spring/Spring Boot多数据源整合/index.html","hash":"2e184a3a2e09d9e8ce1c5c094daac200a82ceeba","modified":1533472063081},{"_id":"public/2018/06/28/hexo/index.html","hash":"20bd367930d982af0acbfe7da6589a6edcc94703","modified":1533472063081},{"_id":"public/2018/06/28/backEnd/spring/Spring Boot YML文件配置多环境/index.html","hash":"82d1acc563ceddf0f8b6ea1a03073359fd748cc2","modified":1533472063081},{"_id":"public/2018/04/23/搭建笔记/翻墙/shadowsocks搭建过程(客户端)/index.html","hash":"102025241b484322eb801937c0af2383ef465de4","modified":1533472063081},{"_id":"public/2018/04/23/搭建笔记/翻墙/shadowsocks搭建过程(服务端)/index.html","hash":"a855206c30d23e9f8aee1338cb2ec05fb3cdb16c","modified":1533472063081},{"_id":"public/2018/03/24/科普/视频格式/index.html","hash":"1412ae4c0b3ec73e29b9424946e7781a8fd27def","modified":1533472063081},{"_id":"public/2018/03/18/backEnd/spring/tiny-spring 简介/index.html","hash":"9fda8badc0761f265d20effcf9bacba742d8cae4","modified":1533472063081},{"_id":"public/2018/03/18/backEnd/spring/tiny-spring分析/index.html","hash":"f7e666fe884fd691ad5802342d7b0ec923d124a2","modified":1533472063081},{"_id":"public/2016/06/13/文集/游戏性是什么/游戏性是什么-记录《游戏性是什么》/index.html","hash":"f852e60eadf6a4a8078b6f7a2ce3db45a4659579","modified":1533472063081},{"_id":"public/2016/06/12/文集/游戏性是什么/游戏性是什么-叙事和Narreme/index.html","hash":"66f1dfaabc3e48e42605fdaa864cec349a57b7f9","modified":1533472063082},{"_id":"public/2016/06/11/文集/游戏性是什么/游戏性是什么-结构/index.html","hash":"eb9bdc236822fefac30e62313ab525df6b721f1a","modified":1533472063082},{"_id":"public/2016/06/08/文集/游戏性是什么/游戏性是什么-专注游戏的原因/index.html","hash":"6d29120fe59715b14caf5683d287a8da84c5c257","modified":1533472063082},{"_id":"public/2016/06/07/文集/游戏性是什么/游戏性是什么-游戏和触觉/index.html","hash":"3012dfd0968cbc93c3f8bd998863f2f564df41d6","modified":1533472063082},{"_id":"public/2016/06/06/文集/游戏性是什么/游戏性是什么-游戏和世界/index.html","hash":"3f968ab7b1fb5448004cb2cedc1ba4ed8420a7e8","modified":1533472063082},{"_id":"public/2016/06/05/文集/游戏性是什么/游戏性是什么-游戏和视觉/index.html","hash":"7115bf4b536584982b4aa12ba67737ff6bdae3e7","modified":1533472063082},{"_id":"public/2016/06/04/文集/游戏性是什么/游戏性是什么-游戏的设计/index.html","hash":"e6c3a371e4d415be4bb9b114ee2bcc93de49d30e","modified":1533472063082},{"_id":"public/2016/06/04/文集/游戏性是什么/游戏性是什么-游戏和身体/index.html","hash":"f0ad61fc365a75f5529496a31c5e7a28fd8d6bdd","modified":1533472063082},{"_id":"public/2016/05/08/碎碎念/抠头发丝/index.html","hash":"41907a94cac149592dd2723765e7cf96f4cacbca","modified":1533472063082},{"_id":"public/2016/05/04/碎碎念/孙悟空无姓无名的时候，阎王生死簿是怎么写的呢？/index.html","hash":"e020e20e21a97ad661c1a848d48bbfad85b9ec82","modified":1533472063082},{"_id":"public/2015/12/21/linux/arch-arch安装笔记/index.html","hash":"94a453d3855b148a43035595c3064d203b91048e","modified":1533472063082},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533472063269},{"_id":"public/favicon.ico","hash":"77f33a03f42e576348ea82c61ed190169799f9bc","modified":1533472064138},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533472064148},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533472064148},{"_id":"public/js/copy.js","hash":"cfae08721664d19cf0059172b994c0a2e253d334","modified":1533472064149},{"_id":"public/js/fancybox.js","hash":"0c2c506559129a5108893cf054b9aa46fe878fc3","modified":1533472064149},{"_id":"public/js/fireworks.js","hash":"5e3da1344966d5d6328a410cad69e92297699f3b","modified":1533472064149},{"_id":"public/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1533472064149},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1533472064149},{"_id":"public/js/scroll.js","hash":"73d57e7cf9921ba5724ad48b8d0e8b25dbce059f","modified":1533472064149},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1533472064149},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1533472064149},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1533472064149},{"_id":"public/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1533472064150},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1533472064150},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1533472064150},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1533472064150},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1533472064150},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1533472064150},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1533472064150},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1533472064150},{"_id":"public/css/index.css","hash":"2fdc361f2e43c40fc2f67b4137e5ab560e4523e0","modified":1533472064150},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1533472064151},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1533472064151},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1533472064151},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1533472064151},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1533472064151},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1533472064151},{"_id":"public/img/top.jpg","hash":"c92cf2f99900ba834be269b9e1e489b2f379d070","modified":1533472064211}],"Category":[{"name":"系统 Linux","_id":"cjkgtkc3j0008m4cmfchn9rkp"},{"name":"Program","_id":"cjkgtkc40000dm4cm104rpec4"},{"name":"系统","_id":"cjkgtkc47000jm4cmv9gcezsg"},{"name":"windows电脑问题","_id":"cjkgtkc4r001am4cmfcjb8hnx"},{"name":"软件","_id":"cjkgtkc5m002em4cm646z58xk"},{"name":"日记本","_id":"cjkgtkc5t002pm4cmxnpgwb68"},{"name":"随笔","_id":"cjkgtkc63002zm4cmny0dig0l"},{"name":"科普","_id":"cjkgtkc7m004gm4cmqc1m841y"},{"name":"编程","_id":"cjkgtkc7u004um4cmcbsb22gw"},{"name":"java Program","_id":"cjkgtkccy0052m4cmcsgpyxk8"},{"name":"服务配置","_id":"cjkgtkcdg005lm4cmik6y98l0"},{"name":"翻墙 Linux","_id":"cjkgtkcdp0060m4cmfovajvaz"},{"name":"翻墙","_id":"cjkgtkcdu0067m4cmwmnhtu02"},{"name":"游戏性是什么","_id":"cjkgtkce2006im4cmhedz6oyt"}],"Data":[],"Page":[{"_content":"{\n  \"name\": \"H2O2\",\n  \"short_name\": \"H2O2\",\n  \"theme_color\": \"#ff667b\",\n  \"background_color\": \"#ffffff\",\n  \"display\": \"fullscreen\",\n  \"scope\": \"/\",\n  \"start_url\": \"https://zakariyya.github.io\"\n}","source":"manifest.json","raw":"{\n  \"name\": \"H2O2\",\n  \"short_name\": \"H2O2\",\n  \"theme_color\": \"#ff667b\",\n  \"background_color\": \"#ffffff\",\n  \"display\": \"fullscreen\",\n  \"scope\": \"/\",\n  \"start_url\": \"https://zakariyya.github.io\"\n}","date":"2018-08-05T09:33:48.716Z","updated":"2018-08-05T09:32:52.630Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"cjkgtka9c0000m4cmc6dvtm3t","content":"{\"name\":\"H2O2\",\"short_name\":\"H2O2\",\"theme_color\":\"#ff667b\",\"background_color\":\"#ffffff\",\"display\":\"fullscreen\",\"scope\":\"/\",\"start_url\":\"https://zakariyya.github.io\"}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"H2O2\",\"short_name\":\"H2O2\",\"theme_color\":\"#ff667b\",\"background_color\":\"#ffffff\",\"display\":\"fullscreen\",\"scope\":\"/\",\"start_url\":\"https://zakariyya.github.io\"}"},{"title":"categories","date":"2018-08-03T07:58:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-08-03 15:58:10\ntype: \"categories\"\n---\n","updated":"2018-08-04T06:32:45.671Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjkgtkbsr0002m4cmc1px03e7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-03T07:56:30.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-03 15:56:30\ntype: \"tags\"\n---\n","updated":"2018-08-04T06:32:45.673Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjkgtkbus0005m4cmbkth7i9s","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"文件上传","date":"2018-08-01T06:35:35.000Z","_content":"","source":"_posts/文件上传.md","raw":"---\ntitle: 文件上传\ndate: 2018-08-01 14:35:35\ntags:\n---\n","slug":"文件上传","published":1,"updated":"2018-08-04T06:32:45.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkbsk0001m4cm0un3wmq4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hexo 的搭建过程","date":"2018-06-28T14:30:16.000Z","_content":"\n使用Hexo在GitHub上搭建网站\n\n目录\nhexo&github\n为什么这么选择\n配置环境\n安装node.js&git\n安装hexo\n建立博客文件夹\n试着运行\n新建文章\n主题更换\n_config.yml配置文件\n生成网站文件\n将博客部署到github\nhexo短命令\n域名申请\n网站分析\n搜索引擎\n评论功能\nmarkdown编辑软件\nhexo&github\n正如文章标题，这个博客托管在github上，通过hexo框架搭建。github不用多说，github提供的github pages项目使得可以将静态网页托管在github上提供网站服务。至于hexo，直接引用它的作者tommy351的话：\n\nA fast, simple & powerful blog framework\n\n一个快速、简洁、强大的静态博客框架。\n\n为什么这么选择\n很简单，托管在github上就不用自己去买vps，vps要花钱的←_←\n\nhexo使用起来也很简单，配置好之后三个命令就足以应付日常写博客了。现成的博客框架也不用多操心网站的搭建，图方便十几分钟就能搞定；如果喜欢折腾，那么完全可以自己在框架上进行修改，玩几个月都不是问题。\n\n配置环境\n以下操作为OS X 11.3系统下进行的，不过不同系统间的差异性应该不大。\n\n无论是否已经搭建成功，都推荐看一看官方文档，官方文档一定是最好的学习资料。\n\n安装node.js&git\nOS X自带git，不用管，node.js建议从node.js官网下载安装器，连npm也安装了，省了不少事。\n\n安装hexo\n之后打开终端，使用npm安装hexo，需要root权限进行某些文件的写入\n\n \n```\n$ sudo npm install hexo-cli -g\n```\n建立博客文件夹\n和博客有关的资源需要放在一个文件夹中，新建一个文件夹后在终端进入该文件夹的目录中进行hexo及npm的初始化\n\n```\n$ hexo init\n$ npm install\n```\n之后打开刚才的文件夹，会看到这样的结构\n\n```\n.\n├── _config.yml     //hexo配置文件\n├── node_modules     //node.js运行库\n├── package.json\n├── scaffolds     //markdown模板\n├── source     //资源文件夹\n└── themes     //主题\n```\n\n试着运行\n```\n$ hexo server\n```\n用浏览器打开 http://localhost:4000/，\n\n打开的网页就是hexo所生成的，因为我们还没有进行任何修改，所以打开的是hexo默认的hello world\n\nhexo编译的时候会出现这样的报错：\n```\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n这是因为dtrace模块没有安装成功，按照官方文档所说的，换个姿势重新装一遍hexo即可\n```\n$ npm install hexo --no-optional\n```\n不过我觉得一定会有人像我一样多次重装还是报错（我一定不是一个人，对吧）。出现这个问题是因为我朝GFW，所以单纯地重装可能还是装不上dtrace模块，需要更换一下安装源，换成国内的淘宝镜像就行了（马云爸爸真可爱~）\n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n$ npm install hexo --no-optional\n```\n之后需要重新初始化文件夹，就没有报错了。不过dtrace基本用不上，不管报错继续用也不会有什么问题。\n新建文章\n```\nhexo new '文章名称'\n```\n之后就会在source/_posts/下生成一个文件，文件名就是我么所命名的，后缀为.md，因为hexo的博客使用markdown语法书写，至于怎么写markdown，之后会介绍的。文章名称不加单引号也可以，不过名称中有空格的时候必须加单引号。\n```\n---\ntitle: test\ndate: 2016-03-05 14:56:52\ntags:\n---\t\n```\n打开建好的文章后，会看到上面的字样，分别是标题、日期和标签。注意不要更改标题名称，新建文章的时候hexo根据标题建立了目录，更改了文章文件的标题会导致hexo错误。如果想更换标题，只能删掉重建。标签可以任意添加，便于归类文章，不同的主题对标签的实现方法也不一样。如果想写多个标签，可以这样书写\n```\ntags:\n\n- tag1\n- tag2\n- tag3\n```\n主题更换\nhexo默认的主题是landscape，如果不喜欢可以更换，hexo官网上就有不少漂亮的主题，如果还不满意可以自己修改甚至从头做起。下载好的主题放在themes文件夹中，之后在hexo的配置文件_config.yml中将theme后的名称改成想更改的主题名称即可。主题的配置因主题而异，在主题中同样有一个_config.yml文件，是配置主题设置的，不要与hexo的配置文件弄混。\n_config.yml配置文件\nhexo的相关配置在这个文件中都可以配置，详细介绍一下\n\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site        //网站基本信息\ntitle: Hexo        //网站名称\nsubtitle:        //副标题\ndescription:        //描述，会被搜索引擎抓取，分享文章的时候也会显示\nauthor: John Doe        //作者\nlanguage:        //语言\ntimezone:        //时区，留空为系统默认时区\n\n# URL        //网站URL信息\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com        //网站URL\nroot: /        //网站根目录，如果整个博客是一个网站的子目录，需要将根目录改为子目录的名称\npermalink: :year/:month/:day/:title/        //每篇文章的URL格式\npermalink_defaults:        //默认URL格式\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts        //默认新文章的名字\ndefault_layout: post        //默认文章布局\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab        //是否在新标签页打开链接\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:        //代码高亮设置\n  enable: true        //代码高亮开关\n  line_number: true        //是否显示行号\n  auto_detect: false        //是否自动判断语言\n  tab_replace:        //用空格替换tab\n\n# Category & Tag        //目录与标签设置\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format        //日期设置\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD        //日期格式\ntime_format: HH:mm:ss        //时间格式\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10        //每页的文章数目\npagination_dir: page        //页面路径\n\n# Extensions        //扩展配置，配置主题以及hexo插件信息\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape        //主题名称\n\n# Deployment        //发布相关配置，需要安装相应插件\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n生成网站文件\n 1\n$ hexo generate\n之后会生成一个public文件夹，文件夹中的文件即为生成的网页文件。\n\n将博客部署到github\n按照github pages的说明配置，申请一个github帐号，之后新建项目，注意项目名称为用户名.github.io否则之后是无法访问的，一个账户只能建一个github pages。之后将之前的public文件夹里的内容都同步到这个项目的master分支，之后浏览器访问用户名.github.io就能看到hexo的博客界面了。\n\n连接github同步可以直接使用git命令或者github客户端，但是这样都需要hexo generate之后再使用git，还是有些麻烦。hexo-deployer-git是hexo的一个插件，可以直接使用hexo命令在生成博客文件后部署到github上。插件的github页面上已经有了详细方法，这里只列出一般情况下的流程。\n\n在此之前最好先检查一下用户目录~/上是否已经有ssh密钥文件夹.ssh，以免影响之前的使用ssh密钥的应用。这个文件夹是隐藏文件夹，可以直接打开finder使用command + shift + g快捷键进入该路径查看，也可以使用终端命令显示隐藏文件：\n\n 1\n 2\n$ defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder    //显示隐藏文件\n$ defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder    //重新隐藏有隐藏属性的文件\n怕记不住命令就干脆用applescript写成应用吧←_←\n\n首先进入到博客文件夹，安装hexo-deployer-git\n 1\n 2\n$ cd 博客文件夹\n$ npm install hexo-deployer-git --save\n然后在博客的配置文件_config.yml（注意不是主题中的）中添加\n\n 1\n 2\n 3\n 4\n 5\ndeploy:\n  type: git\n  repo:\n    github: 博客的git地址\n    //gitcafe: 可以像这样部署到多个git服务器上\ngit地址在git主页中可以看到，注意选择ssh的地址\n\n因为hexo-deployer-git插件使用ssh方式连接github，所以还要配置ssh，至于什么是ssh以及ssh的原理，可以参考我的github的ssh key部署及原理分析。\n\n设置github信息\n 1\n 2\n$ git config --global user.name \"你的用户名\"    //注意加引号\n$ git config --global user.email 你的邮箱    //不用加引号\n这个信息就是每次提交到github的时候的用户信息。如果是多帐号（比如公司一个自己一个）就不要用--global附加指令了，cd到项目文件夹逐一设置。\n\n在本地生成ssh密钥\n 1\n$ ssh-keygen -C 注册github所用的邮箱\n这里的邮箱必须是在注册帐号时的邮箱，github和gitcafe的文档都是这么规定的。如果两处的注册邮箱不同，那就再生成一个ssh密钥呗，注意避免重复命名覆盖文件~在命令运行的时候会有几处提示，Enter file in which to save the key指的是输入生成密钥的路径，默认是~/.ssh，也没必要改，回车跳过；Enter passphrase是设置密码，设置后每次使用这对密钥都会要求输入密码，嫌麻烦就回车跳过好了（不过OS X由钥匙串应用，挺方便的ww）。\n\n时候进入~/.ssh文件夹（终端里cd进去再ls也可以），可以看到id_rsa和id_rsa.pub两个文件，分别是私钥和公钥，下面就不用多解释了。此时还没有know_hosts文件，使用ssh连接后才会生成。\n\n之后读取生成密钥的公钥\n 1\n$ cat ~/id_rsa.pub\n把显示出来的内容复制下来，然后到github的网页上，进入到设置界面，找到ssh key，新建一个key，那刚才的内容粘贴进去。\n\n添加之后测试一下\n 1\n$ ssh -T git@github.com\n第一次使用ssh连接github会有提示，输入yes即可，之后如果出现success的字样说明连接正常，ssh配置成功。\n\n现在就可以使用hexo-deployer-git插件了，方法很简单，hexo generate之后，再使用hexo deploy就可以自动部署了。\n\nhexo短命令\nhexo支持短命令，使用起来不用输入太长的指令，只列出常用的：\n\n 1\n 2\n 3\n 4\n$ hexo s    //相当于hexo server在本机预览网页\n$ hexo g    //相当于hexo generate生成静态网页\n$ hexo d    //相当于hexo deploy部署网页到服务器\n$ hexo g -d    //hexo generate和hexo deploy的结合\n至此博客已经可以使用了，不过作为自己的博客还是要好好打理一下\n\n域名申请\ngithub会为建成的github pages提供一个用户名.github.io的二级域名，不过如果想提升逼格（就像我这样的←_←）的可以绑定自己的域名。因为我朝严格的审查制度，国内注册的域名，或者是提供web服务的服务器需要进行备份，备份很麻烦，而且总感觉自己的域名备份后就像是上交国家了一样，所以就别在国内申请域名了。我是在godaddy上申请的域名，有中文网页，还支持支付宝，促销活动也挺多。\n\n为了保证域名在国内的解析速度，可以使用国内的DNS解析服务，推荐DNSPod的DNS解析，速度快，而且免费的功能也完全足够用。需要到域名注册商更换DNS服务器，更换后需要过一段时间才会生效。之后到dnspod的页面添加DNS记录，添加cname记录，记录值即为github pages给我们的二级域名\n\n之后要让github接受这个域名解析到自己，在根目录下添加一个名为CNAME的文件，内容为我们自己的域名。因为hexo每次generate之后会删除掉非generate命令生成的文件，CNAME文件不能直接放在public目录下。可以把CNAME文件添加到主题文件夹中的source文件夹，每次generate都会把source文件夹的内容拷贝到public文件夹。其他想放在public目录但每次generate会删除的文件也可以放进去。\n\n网站分析\n用于分析网站流量，我使用的是Google Analytics。\n\n首先进入Google Analytics，没有Google帐号就注册一个。之后添加自己的域名并认证，添加跟踪代码。跟踪代码的添加与模板有关，基本上模板都会提供相应的接口，模板的文档上应该会有所介绍。\n\n这样就可以清楚的了解到网站的访问信息了。虽然在国内Google的分析代码可以运行，不过Google分析的管理网站在被~~**~~了，所以需要翻墙才能看到分析结果。觉得麻烦可以换用过国内的[百度统计] [baidu analytics]或者[站长统计] [zhanzhang analytics]。\n\n搜索引擎\n为了增加网站的曝光率，可以向搜索引擎提供sitemap，主动让网站出现在搜索引擎的搜索结果中。关于sitemap，可以看看Google的介绍。\n\n首先要生成sitemap文件，需要安装hexo sitemap插件：\n\n 1\n$ npm install hexo-generator-sitemap --save\n同时hexo配置文件_config.yml也要进行修改，添加\n\n 1\n 2\nsitemap:\n path: sitemap.xml\nsitemap换成其他名字也可以。。。这样再次generate在网站根目录就会生成sitemap.xml文件，然后到Google console登录，添加属性，也就是要提交sitemap的网站，验证。使用HTML文件验证即可，添加到网站目录，push到github上就可以了。同CNAME文件一样，每次generate会删除验证文件，添加到source文件夹即可。之后就是等待Google的爬虫根据站点地图的URL光临博客，建立索引，之后就可以在Google上搜索到我们的博客了。\n\n评论功能\n主题里肯定都会添加评论功能的接口，国内访问该是用多说吧，不同的主题配置方法也有出入，没法详细介绍。\n\nmarkdown编辑软件\n写文章才是搭建博客的目的，hexo中使用markdown格式书写文章，markdown是什么以及markdown语法，找篇文章看看就好，上手挺容易的，不过工具的确纠结了一阵子，开源免费的都用过了一遍，随后还是投奔了sublime text（别问我花没花钱买），预览问题可以通过安装OmniMarkupPreviewer插件解决，用到最后才发现，实时预览只会分散注意力，过分关注实际的渲染效果，没法把精力集中在写作本身了。并且sublime text页用习惯了，干什么都用一个工具也方便。OmniMarkupPreviewer的配置以及sublime text的使用可以参考这篇文章。\n\n","source":"_posts/hexo.md","raw":"---\ntitle: Hexo 的搭建过程\ndate: 2018-06-28 22:30:16\ntags: \ncategories:\n---\n\n使用Hexo在GitHub上搭建网站\n\n目录\nhexo&github\n为什么这么选择\n配置环境\n安装node.js&git\n安装hexo\n建立博客文件夹\n试着运行\n新建文章\n主题更换\n_config.yml配置文件\n生成网站文件\n将博客部署到github\nhexo短命令\n域名申请\n网站分析\n搜索引擎\n评论功能\nmarkdown编辑软件\nhexo&github\n正如文章标题，这个博客托管在github上，通过hexo框架搭建。github不用多说，github提供的github pages项目使得可以将静态网页托管在github上提供网站服务。至于hexo，直接引用它的作者tommy351的话：\n\nA fast, simple & powerful blog framework\n\n一个快速、简洁、强大的静态博客框架。\n\n为什么这么选择\n很简单，托管在github上就不用自己去买vps，vps要花钱的←_←\n\nhexo使用起来也很简单，配置好之后三个命令就足以应付日常写博客了。现成的博客框架也不用多操心网站的搭建，图方便十几分钟就能搞定；如果喜欢折腾，那么完全可以自己在框架上进行修改，玩几个月都不是问题。\n\n配置环境\n以下操作为OS X 11.3系统下进行的，不过不同系统间的差异性应该不大。\n\n无论是否已经搭建成功，都推荐看一看官方文档，官方文档一定是最好的学习资料。\n\n安装node.js&git\nOS X自带git，不用管，node.js建议从node.js官网下载安装器，连npm也安装了，省了不少事。\n\n安装hexo\n之后打开终端，使用npm安装hexo，需要root权限进行某些文件的写入\n\n \n```\n$ sudo npm install hexo-cli -g\n```\n建立博客文件夹\n和博客有关的资源需要放在一个文件夹中，新建一个文件夹后在终端进入该文件夹的目录中进行hexo及npm的初始化\n\n```\n$ hexo init\n$ npm install\n```\n之后打开刚才的文件夹，会看到这样的结构\n\n```\n.\n├── _config.yml     //hexo配置文件\n├── node_modules     //node.js运行库\n├── package.json\n├── scaffolds     //markdown模板\n├── source     //资源文件夹\n└── themes     //主题\n```\n\n试着运行\n```\n$ hexo server\n```\n用浏览器打开 http://localhost:4000/，\n\n打开的网页就是hexo所生成的，因为我们还没有进行任何修改，所以打开的是hexo默认的hello world\n\nhexo编译的时候会出现这样的报错：\n```\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n这是因为dtrace模块没有安装成功，按照官方文档所说的，换个姿势重新装一遍hexo即可\n```\n$ npm install hexo --no-optional\n```\n不过我觉得一定会有人像我一样多次重装还是报错（我一定不是一个人，对吧）。出现这个问题是因为我朝GFW，所以单纯地重装可能还是装不上dtrace模块，需要更换一下安装源，换成国内的淘宝镜像就行了（马云爸爸真可爱~）\n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n$ npm install hexo --no-optional\n```\n之后需要重新初始化文件夹，就没有报错了。不过dtrace基本用不上，不管报错继续用也不会有什么问题。\n新建文章\n```\nhexo new '文章名称'\n```\n之后就会在source/_posts/下生成一个文件，文件名就是我么所命名的，后缀为.md，因为hexo的博客使用markdown语法书写，至于怎么写markdown，之后会介绍的。文章名称不加单引号也可以，不过名称中有空格的时候必须加单引号。\n```\n---\ntitle: test\ndate: 2016-03-05 14:56:52\ntags:\n---\t\n```\n打开建好的文章后，会看到上面的字样，分别是标题、日期和标签。注意不要更改标题名称，新建文章的时候hexo根据标题建立了目录，更改了文章文件的标题会导致hexo错误。如果想更换标题，只能删掉重建。标签可以任意添加，便于归类文章，不同的主题对标签的实现方法也不一样。如果想写多个标签，可以这样书写\n```\ntags:\n\n- tag1\n- tag2\n- tag3\n```\n主题更换\nhexo默认的主题是landscape，如果不喜欢可以更换，hexo官网上就有不少漂亮的主题，如果还不满意可以自己修改甚至从头做起。下载好的主题放在themes文件夹中，之后在hexo的配置文件_config.yml中将theme后的名称改成想更改的主题名称即可。主题的配置因主题而异，在主题中同样有一个_config.yml文件，是配置主题设置的，不要与hexo的配置文件弄混。\n_config.yml配置文件\nhexo的相关配置在这个文件中都可以配置，详细介绍一下\n\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site        //网站基本信息\ntitle: Hexo        //网站名称\nsubtitle:        //副标题\ndescription:        //描述，会被搜索引擎抓取，分享文章的时候也会显示\nauthor: John Doe        //作者\nlanguage:        //语言\ntimezone:        //时区，留空为系统默认时区\n\n# URL        //网站URL信息\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com        //网站URL\nroot: /        //网站根目录，如果整个博客是一个网站的子目录，需要将根目录改为子目录的名称\npermalink: :year/:month/:day/:title/        //每篇文章的URL格式\npermalink_defaults:        //默认URL格式\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts        //默认新文章的名字\ndefault_layout: post        //默认文章布局\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab        //是否在新标签页打开链接\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:        //代码高亮设置\n  enable: true        //代码高亮开关\n  line_number: true        //是否显示行号\n  auto_detect: false        //是否自动判断语言\n  tab_replace:        //用空格替换tab\n\n# Category & Tag        //目录与标签设置\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format        //日期设置\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD        //日期格式\ntime_format: HH:mm:ss        //时间格式\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10        //每页的文章数目\npagination_dir: page        //页面路径\n\n# Extensions        //扩展配置，配置主题以及hexo插件信息\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape        //主题名称\n\n# Deployment        //发布相关配置，需要安装相应插件\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n生成网站文件\n 1\n$ hexo generate\n之后会生成一个public文件夹，文件夹中的文件即为生成的网页文件。\n\n将博客部署到github\n按照github pages的说明配置，申请一个github帐号，之后新建项目，注意项目名称为用户名.github.io否则之后是无法访问的，一个账户只能建一个github pages。之后将之前的public文件夹里的内容都同步到这个项目的master分支，之后浏览器访问用户名.github.io就能看到hexo的博客界面了。\n\n连接github同步可以直接使用git命令或者github客户端，但是这样都需要hexo generate之后再使用git，还是有些麻烦。hexo-deployer-git是hexo的一个插件，可以直接使用hexo命令在生成博客文件后部署到github上。插件的github页面上已经有了详细方法，这里只列出一般情况下的流程。\n\n在此之前最好先检查一下用户目录~/上是否已经有ssh密钥文件夹.ssh，以免影响之前的使用ssh密钥的应用。这个文件夹是隐藏文件夹，可以直接打开finder使用command + shift + g快捷键进入该路径查看，也可以使用终端命令显示隐藏文件：\n\n 1\n 2\n$ defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder    //显示隐藏文件\n$ defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder    //重新隐藏有隐藏属性的文件\n怕记不住命令就干脆用applescript写成应用吧←_←\n\n首先进入到博客文件夹，安装hexo-deployer-git\n 1\n 2\n$ cd 博客文件夹\n$ npm install hexo-deployer-git --save\n然后在博客的配置文件_config.yml（注意不是主题中的）中添加\n\n 1\n 2\n 3\n 4\n 5\ndeploy:\n  type: git\n  repo:\n    github: 博客的git地址\n    //gitcafe: 可以像这样部署到多个git服务器上\ngit地址在git主页中可以看到，注意选择ssh的地址\n\n因为hexo-deployer-git插件使用ssh方式连接github，所以还要配置ssh，至于什么是ssh以及ssh的原理，可以参考我的github的ssh key部署及原理分析。\n\n设置github信息\n 1\n 2\n$ git config --global user.name \"你的用户名\"    //注意加引号\n$ git config --global user.email 你的邮箱    //不用加引号\n这个信息就是每次提交到github的时候的用户信息。如果是多帐号（比如公司一个自己一个）就不要用--global附加指令了，cd到项目文件夹逐一设置。\n\n在本地生成ssh密钥\n 1\n$ ssh-keygen -C 注册github所用的邮箱\n这里的邮箱必须是在注册帐号时的邮箱，github和gitcafe的文档都是这么规定的。如果两处的注册邮箱不同，那就再生成一个ssh密钥呗，注意避免重复命名覆盖文件~在命令运行的时候会有几处提示，Enter file in which to save the key指的是输入生成密钥的路径，默认是~/.ssh，也没必要改，回车跳过；Enter passphrase是设置密码，设置后每次使用这对密钥都会要求输入密码，嫌麻烦就回车跳过好了（不过OS X由钥匙串应用，挺方便的ww）。\n\n时候进入~/.ssh文件夹（终端里cd进去再ls也可以），可以看到id_rsa和id_rsa.pub两个文件，分别是私钥和公钥，下面就不用多解释了。此时还没有know_hosts文件，使用ssh连接后才会生成。\n\n之后读取生成密钥的公钥\n 1\n$ cat ~/id_rsa.pub\n把显示出来的内容复制下来，然后到github的网页上，进入到设置界面，找到ssh key，新建一个key，那刚才的内容粘贴进去。\n\n添加之后测试一下\n 1\n$ ssh -T git@github.com\n第一次使用ssh连接github会有提示，输入yes即可，之后如果出现success的字样说明连接正常，ssh配置成功。\n\n现在就可以使用hexo-deployer-git插件了，方法很简单，hexo generate之后，再使用hexo deploy就可以自动部署了。\n\nhexo短命令\nhexo支持短命令，使用起来不用输入太长的指令，只列出常用的：\n\n 1\n 2\n 3\n 4\n$ hexo s    //相当于hexo server在本机预览网页\n$ hexo g    //相当于hexo generate生成静态网页\n$ hexo d    //相当于hexo deploy部署网页到服务器\n$ hexo g -d    //hexo generate和hexo deploy的结合\n至此博客已经可以使用了，不过作为自己的博客还是要好好打理一下\n\n域名申请\ngithub会为建成的github pages提供一个用户名.github.io的二级域名，不过如果想提升逼格（就像我这样的←_←）的可以绑定自己的域名。因为我朝严格的审查制度，国内注册的域名，或者是提供web服务的服务器需要进行备份，备份很麻烦，而且总感觉自己的域名备份后就像是上交国家了一样，所以就别在国内申请域名了。我是在godaddy上申请的域名，有中文网页，还支持支付宝，促销活动也挺多。\n\n为了保证域名在国内的解析速度，可以使用国内的DNS解析服务，推荐DNSPod的DNS解析，速度快，而且免费的功能也完全足够用。需要到域名注册商更换DNS服务器，更换后需要过一段时间才会生效。之后到dnspod的页面添加DNS记录，添加cname记录，记录值即为github pages给我们的二级域名\n\n之后要让github接受这个域名解析到自己，在根目录下添加一个名为CNAME的文件，内容为我们自己的域名。因为hexo每次generate之后会删除掉非generate命令生成的文件，CNAME文件不能直接放在public目录下。可以把CNAME文件添加到主题文件夹中的source文件夹，每次generate都会把source文件夹的内容拷贝到public文件夹。其他想放在public目录但每次generate会删除的文件也可以放进去。\n\n网站分析\n用于分析网站流量，我使用的是Google Analytics。\n\n首先进入Google Analytics，没有Google帐号就注册一个。之后添加自己的域名并认证，添加跟踪代码。跟踪代码的添加与模板有关，基本上模板都会提供相应的接口，模板的文档上应该会有所介绍。\n\n这样就可以清楚的了解到网站的访问信息了。虽然在国内Google的分析代码可以运行，不过Google分析的管理网站在被~~**~~了，所以需要翻墙才能看到分析结果。觉得麻烦可以换用过国内的[百度统计] [baidu analytics]或者[站长统计] [zhanzhang analytics]。\n\n搜索引擎\n为了增加网站的曝光率，可以向搜索引擎提供sitemap，主动让网站出现在搜索引擎的搜索结果中。关于sitemap，可以看看Google的介绍。\n\n首先要生成sitemap文件，需要安装hexo sitemap插件：\n\n 1\n$ npm install hexo-generator-sitemap --save\n同时hexo配置文件_config.yml也要进行修改，添加\n\n 1\n 2\nsitemap:\n path: sitemap.xml\nsitemap换成其他名字也可以。。。这样再次generate在网站根目录就会生成sitemap.xml文件，然后到Google console登录，添加属性，也就是要提交sitemap的网站，验证。使用HTML文件验证即可，添加到网站目录，push到github上就可以了。同CNAME文件一样，每次generate会删除验证文件，添加到source文件夹即可。之后就是等待Google的爬虫根据站点地图的URL光临博客，建立索引，之后就可以在Google上搜索到我们的博客了。\n\n评论功能\n主题里肯定都会添加评论功能的接口，国内访问该是用多说吧，不同的主题配置方法也有出入，没法详细介绍。\n\nmarkdown编辑软件\n写文章才是搭建博客的目的，hexo中使用markdown格式书写文章，markdown是什么以及markdown语法，找篇文章看看就好，上手挺容易的，不过工具的确纠结了一阵子，开源免费的都用过了一遍，随后还是投奔了sublime text（别问我花没花钱买），预览问题可以通过安装OmniMarkupPreviewer插件解决，用到最后才发现，实时预览只会分散注意力，过分关注实际的渲染效果，没法把精力集中在写作本身了。并且sublime text页用习惯了，干什么都用一个工具也方便。OmniMarkupPreviewer的配置以及sublime text的使用可以参考这篇文章。\n\n","slug":"hexo","published":1,"updated":"2018-08-04T06:32:45.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkbst0003m4cmlk87deoe","content":"<p>使用Hexo在GitHub上搭建网站</p>\n<p>目录<br>hexo&amp;github<br>为什么这么选择<br>配置环境<br>安装node.js&amp;git<br>安装hexo<br>建立博客文件夹<br>试着运行<br>新建文章<br>主题更换<br>_config.yml配置文件<br>生成网站文件<br>将博客部署到github<br>hexo短命令<br>域名申请<br>网站分析<br>搜索引擎<br>评论功能<br>markdown编辑软件<br>hexo&amp;github<br>正如文章标题，这个博客托管在github上，通过hexo框架搭建。github不用多说，github提供的github pages项目使得可以将静态网页托管在github上提供网站服务。至于hexo，直接引用它的作者tommy351的话：</p>\n<p>A fast, simple &amp; powerful blog framework</p>\n<p>一个快速、简洁、强大的静态博客框架。</p>\n<p>为什么这么选择<br>很简单，托管在github上就不用自己去买vps，vps要花钱的←_←</p>\n<p>hexo使用起来也很简单，配置好之后三个命令就足以应付日常写博客了。现成的博客框架也不用多操心网站的搭建，图方便十几分钟就能搞定；如果喜欢折腾，那么完全可以自己在框架上进行修改，玩几个月都不是问题。</p>\n<p>配置环境<br>以下操作为OS X 11.3系统下进行的，不过不同系统间的差异性应该不大。</p>\n<p>无论是否已经搭建成功，都推荐看一看官方文档，官方文档一定是最好的学习资料。</p>\n<p>安装node.js&amp;git<br>OS X自带git，不用管，node.js建议从node.js官网下载安装器，连npm也安装了，省了不少事。</p>\n<p>安装hexo<br>之后打开终端，使用npm安装hexo，需要root权限进行某些文件的写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>建立博客文件夹<br>和博客有关的资源需要放在一个文件夹中，新建一个文件夹后在终端进入该文件夹的目录中进行hexo及npm的初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>之后打开刚才的文件夹，会看到这样的结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml     //hexo配置文件</span><br><span class=\"line\">├── node_modules     //node.js运行库</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds     //markdown模板</span><br><span class=\"line\">├── source     //资源文件夹</span><br><span class=\"line\">└── themes     //主题</span><br></pre></td></tr></table></figure>\n<p>试着运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>用浏览器打开 <a href=\"http://localhost:4000/，\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，</a></p>\n<p>打开的网页就是hexo所生成的，因为我们还没有进行任何修改，所以打开的是hexo默认的hello world</p>\n<p>hexo编译的时候会出现这样的报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是因为dtrace模块没有安装成功，按照官方文档所说的，换个姿势重新装一遍hexo即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure></p>\n<p>不过我觉得一定会有人像我一样多次重装还是报错（我一定不是一个人，对吧）。出现这个问题是因为我朝GFW，所以单纯地重装可能还是装不上dtrace模块，需要更换一下安装源，换成国内的淘宝镜像就行了（马云爸爸真可爱~）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure></p>\n<p>之后需要重新初始化文件夹，就没有报错了。不过dtrace基本用不上，不管报错继续用也不会有什么问题。<br>新建文章<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &apos;文章名称&apos;</span><br></pre></td></tr></table></figure></p>\n<p>之后就会在source/_posts/下生成一个文件，文件名就是我么所命名的，后缀为.md，因为hexo的博客使用markdown语法书写，至于怎么写markdown，之后会介绍的。文章名称不加单引号也可以，不过名称中有空格的时候必须加单引号。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: test</span><br><span class=\"line\">date: 2016-03-05 14:56:52</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>打开建好的文章后，会看到上面的字样，分别是标题、日期和标签。注意不要更改标题名称，新建文章的时候hexo根据标题建立了目录，更改了文章文件的标题会导致hexo错误。如果想更换标题，只能删掉重建。标签可以任意添加，便于归类文章，不同的主题对标签的实现方法也不一样。如果想写多个标签，可以这样书写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags:</span><br><span class=\"line\"></span><br><span class=\"line\">- tag1</span><br><span class=\"line\">- tag2</span><br><span class=\"line\">- tag3</span><br></pre></td></tr></table></figure></p>\n<p>主题更换<br>hexo默认的主题是landscape，如果不喜欢可以更换，hexo官网上就有不少漂亮的主题，如果还不满意可以自己修改甚至从头做起。下载好的主题放在themes文件夹中，之后在hexo的配置文件_config.yml中将theme后的名称改成想更改的主题名称即可。主题的配置因主题而异，在主题中同样有一个_config.yml文件，是配置主题设置的，不要与hexo的配置文件弄混。<br>_config.yml配置文件<br>hexo的相关配置在这个文件中都可以配置，详细介绍一下</p>\n<h1 id=\"Hexo-Configuration\"><a href=\"#Hexo-Configuration\" class=\"headerlink\" title=\"Hexo Configuration\"></a>Hexo Configuration</h1><h2 id=\"Docs-https-hexo-io-docs-configuration-html\"><a href=\"#Docs-https-hexo-io-docs-configuration-html\" class=\"headerlink\" title=\"Docs: https://hexo.io/docs/configuration.html\"></a>Docs: <a href=\"https://hexo.io/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/configuration.html</a></h2><h2 id=\"Source-https-github-com-hexojs-hexo\"><a href=\"#Source-https-github-com-hexojs-hexo\" class=\"headerlink\" title=\"Source: https://github.com/hexojs/hexo/\"></a>Source: <a href=\"https://github.com/hexojs/hexo/\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo/</a></h2><h1 id=\"Site-网站基本信息\"><a href=\"#Site-网站基本信息\" class=\"headerlink\" title=\"Site        //网站基本信息\"></a>Site        //网站基本信息</h1><p>title: Hexo        //网站名称<br>subtitle:        //副标题<br>description:        //描述，会被搜索引擎抓取，分享文章的时候也会显示<br>author: John Doe        //作者<br>language:        //语言<br>timezone:        //时区，留空为系统默认时区</p>\n<h1 id=\"URL-网站URL信息\"><a href=\"#URL-网站URL信息\" class=\"headerlink\" title=\"URL        //网站URL信息\"></a>URL        //网站URL信息</h1><h2 id=\"If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘\"><a href=\"#If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘\" class=\"headerlink\" title=\"If your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘\"></a>If your site is put in a subdirectory, set url as ‘<a href=\"http://yoursite.com/child&#39;\" target=\"_blank\" rel=\"noopener\">http://yoursite.com/child&#39;</a> and root as ‘/child/‘</h2><p>url: <a href=\"http://yoursite.com\" target=\"_blank\" rel=\"noopener\">http://yoursite.com</a>        //网站URL<br>root: /        //网站根目录，如果整个博客是一个网站的子目录，需要将根目录改为子目录的名称<br>permalink: :year/:month/:day/:title/        //每篇文章的URL格式<br>permalink_defaults:        //默认URL格式</p>\n<h1 id=\"Directory\"><a href=\"#Directory\" class=\"headerlink\" title=\"Directory\"></a>Directory</h1><p>source_dir: source<br>public_dir: public<br>tag_dir: tags<br>archive_dir: archives<br>category_dir: categories<br>code_dir: downloads/code<br>i18n_dir: :lang<br>skip_render:</p>\n<h1 id=\"Writing\"><a href=\"#Writing\" class=\"headerlink\" title=\"Writing\"></a>Writing</h1><p>new_post_name: :title.md # File name of new posts        //默认新文章的名字<br>default_layout: post        //默认文章布局<br>titlecase: false # Transform title into titlecase<br>external_link: true # Open external links in new tab        //是否在新标签页打开链接<br>filename_case: 0<br>render_drafts: false<br>post_asset_folder: false<br>relative_link: false<br>future: true<br>highlight:        //代码高亮设置<br>  enable: true        //代码高亮开关<br>  line_number: true        //是否显示行号<br>  auto_detect: false        //是否自动判断语言<br>  tab_replace:        //用空格替换tab</p>\n<h1 id=\"Category-amp-Tag-目录与标签设置\"><a href=\"#Category-amp-Tag-目录与标签设置\" class=\"headerlink\" title=\"Category &amp; Tag        //目录与标签设置\"></a>Category &amp; Tag        //目录与标签设置</h1><p>default_category: uncategorized<br>category_map:<br>tag_map:</p>\n<h1 id=\"Date-Time-format-日期设置\"><a href=\"#Date-Time-format-日期设置\" class=\"headerlink\" title=\"Date / Time format        //日期设置\"></a>Date / Time format        //日期设置</h1><h2 id=\"Hexo-uses-Moment-js-to-parse-and-display-date\"><a href=\"#Hexo-uses-Moment-js-to-parse-and-display-date\" class=\"headerlink\" title=\"Hexo uses Moment.js to parse and display date\"></a>Hexo uses Moment.js to parse and display date</h2><h2 id=\"You-can-customize-the-date-format-as-defined-in\"><a href=\"#You-can-customize-the-date-format-as-defined-in\" class=\"headerlink\" title=\"You can customize the date format as defined in\"></a>You can customize the date format as defined in</h2><h2 id=\"http-momentjs-com-docs-displaying-format\"><a href=\"#http-momentjs-com-docs-displaying-format\" class=\"headerlink\" title=\"http://momentjs.com/docs/#/displaying/format/\"></a><a href=\"http://momentjs.com/docs/#/displaying/format/\" target=\"_blank\" rel=\"noopener\">http://momentjs.com/docs/#/displaying/format/</a></h2><p>date_format: YYYY-MM-DD        //日期格式<br>time_format: HH:mm:ss        //时间格式</p>\n<h1 id=\"Pagination\"><a href=\"#Pagination\" class=\"headerlink\" title=\"Pagination\"></a>Pagination</h1><h2 id=\"Set-per-page-to-0-to-disable-pagination\"><a href=\"#Set-per-page-to-0-to-disable-pagination\" class=\"headerlink\" title=\"Set per_page to 0 to disable pagination\"></a>Set per_page to 0 to disable pagination</h2><p>per_page: 10        //每页的文章数目<br>pagination_dir: page        //页面路径</p>\n<h1 id=\"Extensions-扩展配置，配置主题以及hexo插件信息\"><a href=\"#Extensions-扩展配置，配置主题以及hexo插件信息\" class=\"headerlink\" title=\"Extensions        //扩展配置，配置主题以及hexo插件信息\"></a>Extensions        //扩展配置，配置主题以及hexo插件信息</h1><h2 id=\"Plugins-https-hexo-io-plugins\"><a href=\"#Plugins-https-hexo-io-plugins\" class=\"headerlink\" title=\"Plugins: https://hexo.io/plugins/\"></a>Plugins: <a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/plugins/</a></h2><h2 id=\"Themes-https-hexo-io-themes\"><a href=\"#Themes-https-hexo-io-themes\" class=\"headerlink\" title=\"Themes: https://hexo.io/themes/\"></a>Themes: <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></h2><p>theme: landscape        //主题名称</p>\n<h1 id=\"Deployment-发布相关配置，需要安装相应插件\"><a href=\"#Deployment-发布相关配置，需要安装相应插件\" class=\"headerlink\" title=\"Deployment        //发布相关配置，需要安装相应插件\"></a>Deployment        //发布相关配置，需要安装相应插件</h1><h2 id=\"Docs-https-hexo-io-docs-deployment-html\"><a href=\"#Docs-https-hexo-io-docs-deployment-html\" class=\"headerlink\" title=\"Docs: https://hexo.io/docs/deployment.html\"></a>Docs: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>  type:</p>\n<p>生成网站文件<br> 1<br>$ hexo generate<br>之后会生成一个public文件夹，文件夹中的文件即为生成的网页文件。</p>\n<p>将博客部署到github<br>按照github pages的说明配置，申请一个github帐号，之后新建项目，注意项目名称为用户名.github.io否则之后是无法访问的，一个账户只能建一个github pages。之后将之前的public文件夹里的内容都同步到这个项目的master分支，之后浏览器访问用户名.github.io就能看到hexo的博客界面了。</p>\n<p>连接github同步可以直接使用git命令或者github客户端，但是这样都需要hexo generate之后再使用git，还是有些麻烦。hexo-deployer-git是hexo的一个插件，可以直接使用hexo命令在生成博客文件后部署到github上。插件的github页面上已经有了详细方法，这里只列出一般情况下的流程。</p>\n<p>在此之前最好先检查一下用户目录~/上是否已经有ssh密钥文件夹.ssh，以免影响之前的使用ssh密钥的应用。这个文件夹是隐藏文件夹，可以直接打开finder使用command + shift + g快捷键进入该路径查看，也可以使用终端命令显示隐藏文件：</p>\n<p> 1<br> 2<br>$ defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder    //显示隐藏文件<br>$ defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder    //重新隐藏有隐藏属性的文件<br>怕记不住命令就干脆用applescript写成应用吧←_←</p>\n<p>首先进入到博客文件夹，安装hexo-deployer-git<br> 1<br> 2<br>$ cd 博客文件夹<br>$ npm install hexo-deployer-git –save<br>然后在博客的配置文件_config.yml（注意不是主题中的）中添加</p>\n<p> 1<br> 2<br> 3<br> 4<br> 5<br>deploy:<br>  type: git<br>  repo:<br>    github: 博客的git地址<br>    //gitcafe: 可以像这样部署到多个git服务器上<br>git地址在git主页中可以看到，注意选择ssh的地址</p>\n<p>因为hexo-deployer-git插件使用ssh方式连接github，所以还要配置ssh，至于什么是ssh以及ssh的原理，可以参考我的github的ssh key部署及原理分析。</p>\n<p>设置github信息<br> 1<br> 2<br>$ git config –global user.name “你的用户名”    //注意加引号<br>$ git config –global user.email 你的邮箱    //不用加引号<br>这个信息就是每次提交到github的时候的用户信息。如果是多帐号（比如公司一个自己一个）就不要用–global附加指令了，cd到项目文件夹逐一设置。</p>\n<p>在本地生成ssh密钥<br> 1<br>$ ssh-keygen -C 注册github所用的邮箱<br>这里的邮箱必须是在注册帐号时的邮箱，github和gitcafe的文档都是这么规定的。如果两处的注册邮箱不同，那就再生成一个ssh密钥呗，注意避免重复命名覆盖文件~在命令运行的时候会有几处提示，Enter file in which to save the key指的是输入生成密钥的路径，默认是~/.ssh，也没必要改，回车跳过；Enter passphrase是设置密码，设置后每次使用这对密钥都会要求输入密码，嫌麻烦就回车跳过好了（不过OS X由钥匙串应用，挺方便的ww）。</p>\n<p>时候进入~/.ssh文件夹（终端里cd进去再ls也可以），可以看到id_rsa和id_rsa.pub两个文件，分别是私钥和公钥，下面就不用多解释了。此时还没有know_hosts文件，使用ssh连接后才会生成。</p>\n<p>之后读取生成密钥的公钥<br> 1<br>$ cat ~/id_rsa.pub<br>把显示出来的内容复制下来，然后到github的网页上，进入到设置界面，找到ssh key，新建一个key，那刚才的内容粘贴进去。</p>\n<p>添加之后测试一下<br> 1<br>$ ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>第一次使用ssh连接github会有提示，输入yes即可，之后如果出现success的字样说明连接正常，ssh配置成功。</p>\n<p>现在就可以使用hexo-deployer-git插件了，方法很简单，hexo generate之后，再使用hexo deploy就可以自动部署了。</p>\n<p>hexo短命令<br>hexo支持短命令，使用起来不用输入太长的指令，只列出常用的：</p>\n<p> 1<br> 2<br> 3<br> 4<br>$ hexo s    //相当于hexo server在本机预览网页<br>$ hexo g    //相当于hexo generate生成静态网页<br>$ hexo d    //相当于hexo deploy部署网页到服务器<br>$ hexo g -d    //hexo generate和hexo deploy的结合<br>至此博客已经可以使用了，不过作为自己的博客还是要好好打理一下</p>\n<p>域名申请<br>github会为建成的github pages提供一个用户名.github.io的二级域名，不过如果想提升逼格（就像我这样的←_←）的可以绑定自己的域名。因为我朝严格的审查制度，国内注册的域名，或者是提供web服务的服务器需要进行备份，备份很麻烦，而且总感觉自己的域名备份后就像是上交国家了一样，所以就别在国内申请域名了。我是在godaddy上申请的域名，有中文网页，还支持支付宝，促销活动也挺多。</p>\n<p>为了保证域名在国内的解析速度，可以使用国内的DNS解析服务，推荐DNSPod的DNS解析，速度快，而且免费的功能也完全足够用。需要到域名注册商更换DNS服务器，更换后需要过一段时间才会生效。之后到dnspod的页面添加DNS记录，添加cname记录，记录值即为github pages给我们的二级域名</p>\n<p>之后要让github接受这个域名解析到自己，在根目录下添加一个名为CNAME的文件，内容为我们自己的域名。因为hexo每次generate之后会删除掉非generate命令生成的文件，CNAME文件不能直接放在public目录下。可以把CNAME文件添加到主题文件夹中的source文件夹，每次generate都会把source文件夹的内容拷贝到public文件夹。其他想放在public目录但每次generate会删除的文件也可以放进去。</p>\n<p>网站分析<br>用于分析网站流量，我使用的是Google Analytics。</p>\n<p>首先进入Google Analytics，没有Google帐号就注册一个。之后添加自己的域名并认证，添加跟踪代码。跟踪代码的添加与模板有关，基本上模板都会提供相应的接口，模板的文档上应该会有所介绍。</p>\n<p>这样就可以清楚的了解到网站的访问信息了。虽然在国内Google的分析代码可以运行，不过Google分析的管理网站在被<del>**</del>了，所以需要翻墙才能看到分析结果。觉得麻烦可以换用过国内的[百度统计] [baidu analytics]或者[站长统计] [zhanzhang analytics]。</p>\n<p>搜索引擎<br>为了增加网站的曝光率，可以向搜索引擎提供sitemap，主动让网站出现在搜索引擎的搜索结果中。关于sitemap，可以看看Google的介绍。</p>\n<p>首先要生成sitemap文件，需要安装hexo sitemap插件：</p>\n<p> 1<br>$ npm install hexo-generator-sitemap –save<br>同时hexo配置文件_config.yml也要进行修改，添加</p>\n<p> 1<br> 2<br>sitemap:<br> path: sitemap.xml<br>sitemap换成其他名字也可以。。。这样再次generate在网站根目录就会生成sitemap.xml文件，然后到Google console登录，添加属性，也就是要提交sitemap的网站，验证。使用HTML文件验证即可，添加到网站目录，push到github上就可以了。同CNAME文件一样，每次generate会删除验证文件，添加到source文件夹即可。之后就是等待Google的爬虫根据站点地图的URL光临博客，建立索引，之后就可以在Google上搜索到我们的博客了。</p>\n<p>评论功能<br>主题里肯定都会添加评论功能的接口，国内访问该是用多说吧，不同的主题配置方法也有出入，没法详细介绍。</p>\n<p>markdown编辑软件<br>写文章才是搭建博客的目的，hexo中使用markdown格式书写文章，markdown是什么以及markdown语法，找篇文章看看就好，上手挺容易的，不过工具的确纠结了一阵子，开源免费的都用过了一遍，随后还是投奔了sublime text（别问我花没花钱买），预览问题可以通过安装OmniMarkupPreviewer插件解决，用到最后才发现，实时预览只会分散注意力，过分关注实际的渲染效果，没法把精力集中在写作本身了。并且sublime text页用习惯了，干什么都用一个工具也方便。OmniMarkupPreviewer的配置以及sublime text的使用可以参考这篇文章。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用Hexo在GitHub上搭建网站</p>\n<p>目录<br>hexo&amp;github<br>为什么这么选择<br>配置环境<br>安装node.js&amp;git<br>安装hexo<br>建立博客文件夹<br>试着运行<br>新建文章<br>主题更换<br>_config.yml配置文件<br>生成网站文件<br>将博客部署到github<br>hexo短命令<br>域名申请<br>网站分析<br>搜索引擎<br>评论功能<br>markdown编辑软件<br>hexo&amp;github<br>正如文章标题，这个博客托管在github上，通过hexo框架搭建。github不用多说，github提供的github pages项目使得可以将静态网页托管在github上提供网站服务。至于hexo，直接引用它的作者tommy351的话：</p>\n<p>A fast, simple &amp; powerful blog framework</p>\n<p>一个快速、简洁、强大的静态博客框架。</p>\n<p>为什么这么选择<br>很简单，托管在github上就不用自己去买vps，vps要花钱的←_←</p>\n<p>hexo使用起来也很简单，配置好之后三个命令就足以应付日常写博客了。现成的博客框架也不用多操心网站的搭建，图方便十几分钟就能搞定；如果喜欢折腾，那么完全可以自己在框架上进行修改，玩几个月都不是问题。</p>\n<p>配置环境<br>以下操作为OS X 11.3系统下进行的，不过不同系统间的差异性应该不大。</p>\n<p>无论是否已经搭建成功，都推荐看一看官方文档，官方文档一定是最好的学习资料。</p>\n<p>安装node.js&amp;git<br>OS X自带git，不用管，node.js建议从node.js官网下载安装器，连npm也安装了，省了不少事。</p>\n<p>安装hexo<br>之后打开终端，使用npm安装hexo，需要root权限进行某些文件的写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>建立博客文件夹<br>和博客有关的资源需要放在一个文件夹中，新建一个文件夹后在终端进入该文件夹的目录中进行hexo及npm的初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>之后打开刚才的文件夹，会看到这样的结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml     //hexo配置文件</span><br><span class=\"line\">├── node_modules     //node.js运行库</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds     //markdown模板</span><br><span class=\"line\">├── source     //资源文件夹</span><br><span class=\"line\">└── themes     //主题</span><br></pre></td></tr></table></figure>\n<p>试着运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>用浏览器打开 <a href=\"http://localhost:4000/，\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，</a></p>\n<p>打开的网页就是hexo所生成的，因为我们还没有进行任何修改，所以打开的是hexo默认的hello world</p>\n<p>hexo编译的时候会出现这样的报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是因为dtrace模块没有安装成功，按照官方文档所说的，换个姿势重新装一遍hexo即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure></p>\n<p>不过我觉得一定会有人像我一样多次重装还是报错（我一定不是一个人，对吧）。出现这个问题是因为我朝GFW，所以单纯地重装可能还是装不上dtrace模块，需要更换一下安装源，换成国内的淘宝镜像就行了（马云爸爸真可爱~）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure></p>\n<p>之后需要重新初始化文件夹，就没有报错了。不过dtrace基本用不上，不管报错继续用也不会有什么问题。<br>新建文章<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &apos;文章名称&apos;</span><br></pre></td></tr></table></figure></p>\n<p>之后就会在source/_posts/下生成一个文件，文件名就是我么所命名的，后缀为.md，因为hexo的博客使用markdown语法书写，至于怎么写markdown，之后会介绍的。文章名称不加单引号也可以，不过名称中有空格的时候必须加单引号。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: test</span><br><span class=\"line\">date: 2016-03-05 14:56:52</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>打开建好的文章后，会看到上面的字样，分别是标题、日期和标签。注意不要更改标题名称，新建文章的时候hexo根据标题建立了目录，更改了文章文件的标题会导致hexo错误。如果想更换标题，只能删掉重建。标签可以任意添加，便于归类文章，不同的主题对标签的实现方法也不一样。如果想写多个标签，可以这样书写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags:</span><br><span class=\"line\"></span><br><span class=\"line\">- tag1</span><br><span class=\"line\">- tag2</span><br><span class=\"line\">- tag3</span><br></pre></td></tr></table></figure></p>\n<p>主题更换<br>hexo默认的主题是landscape，如果不喜欢可以更换，hexo官网上就有不少漂亮的主题，如果还不满意可以自己修改甚至从头做起。下载好的主题放在themes文件夹中，之后在hexo的配置文件_config.yml中将theme后的名称改成想更改的主题名称即可。主题的配置因主题而异，在主题中同样有一个_config.yml文件，是配置主题设置的，不要与hexo的配置文件弄混。<br>_config.yml配置文件<br>hexo的相关配置在这个文件中都可以配置，详细介绍一下</p>\n<h1 id=\"Hexo-Configuration\"><a href=\"#Hexo-Configuration\" class=\"headerlink\" title=\"Hexo Configuration\"></a>Hexo Configuration</h1><h2 id=\"Docs-https-hexo-io-docs-configuration-html\"><a href=\"#Docs-https-hexo-io-docs-configuration-html\" class=\"headerlink\" title=\"Docs: https://hexo.io/docs/configuration.html\"></a>Docs: <a href=\"https://hexo.io/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/configuration.html</a></h2><h2 id=\"Source-https-github-com-hexojs-hexo\"><a href=\"#Source-https-github-com-hexojs-hexo\" class=\"headerlink\" title=\"Source: https://github.com/hexojs/hexo/\"></a>Source: <a href=\"https://github.com/hexojs/hexo/\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo/</a></h2><h1 id=\"Site-网站基本信息\"><a href=\"#Site-网站基本信息\" class=\"headerlink\" title=\"Site        //网站基本信息\"></a>Site        //网站基本信息</h1><p>title: Hexo        //网站名称<br>subtitle:        //副标题<br>description:        //描述，会被搜索引擎抓取，分享文章的时候也会显示<br>author: John Doe        //作者<br>language:        //语言<br>timezone:        //时区，留空为系统默认时区</p>\n<h1 id=\"URL-网站URL信息\"><a href=\"#URL-网站URL信息\" class=\"headerlink\" title=\"URL        //网站URL信息\"></a>URL        //网站URL信息</h1><h2 id=\"If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘\"><a href=\"#If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘\" class=\"headerlink\" title=\"If your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘\"></a>If your site is put in a subdirectory, set url as ‘<a href=\"http://yoursite.com/child&#39;\" target=\"_blank\" rel=\"noopener\">http://yoursite.com/child&#39;</a> and root as ‘/child/‘</h2><p>url: <a href=\"http://yoursite.com\" target=\"_blank\" rel=\"noopener\">http://yoursite.com</a>        //网站URL<br>root: /        //网站根目录，如果整个博客是一个网站的子目录，需要将根目录改为子目录的名称<br>permalink: :year/:month/:day/:title/        //每篇文章的URL格式<br>permalink_defaults:        //默认URL格式</p>\n<h1 id=\"Directory\"><a href=\"#Directory\" class=\"headerlink\" title=\"Directory\"></a>Directory</h1><p>source_dir: source<br>public_dir: public<br>tag_dir: tags<br>archive_dir: archives<br>category_dir: categories<br>code_dir: downloads/code<br>i18n_dir: :lang<br>skip_render:</p>\n<h1 id=\"Writing\"><a href=\"#Writing\" class=\"headerlink\" title=\"Writing\"></a>Writing</h1><p>new_post_name: :title.md # File name of new posts        //默认新文章的名字<br>default_layout: post        //默认文章布局<br>titlecase: false # Transform title into titlecase<br>external_link: true # Open external links in new tab        //是否在新标签页打开链接<br>filename_case: 0<br>render_drafts: false<br>post_asset_folder: false<br>relative_link: false<br>future: true<br>highlight:        //代码高亮设置<br>  enable: true        //代码高亮开关<br>  line_number: true        //是否显示行号<br>  auto_detect: false        //是否自动判断语言<br>  tab_replace:        //用空格替换tab</p>\n<h1 id=\"Category-amp-Tag-目录与标签设置\"><a href=\"#Category-amp-Tag-目录与标签设置\" class=\"headerlink\" title=\"Category &amp; Tag        //目录与标签设置\"></a>Category &amp; Tag        //目录与标签设置</h1><p>default_category: uncategorized<br>category_map:<br>tag_map:</p>\n<h1 id=\"Date-Time-format-日期设置\"><a href=\"#Date-Time-format-日期设置\" class=\"headerlink\" title=\"Date / Time format        //日期设置\"></a>Date / Time format        //日期设置</h1><h2 id=\"Hexo-uses-Moment-js-to-parse-and-display-date\"><a href=\"#Hexo-uses-Moment-js-to-parse-and-display-date\" class=\"headerlink\" title=\"Hexo uses Moment.js to parse and display date\"></a>Hexo uses Moment.js to parse and display date</h2><h2 id=\"You-can-customize-the-date-format-as-defined-in\"><a href=\"#You-can-customize-the-date-format-as-defined-in\" class=\"headerlink\" title=\"You can customize the date format as defined in\"></a>You can customize the date format as defined in</h2><h2 id=\"http-momentjs-com-docs-displaying-format\"><a href=\"#http-momentjs-com-docs-displaying-format\" class=\"headerlink\" title=\"http://momentjs.com/docs/#/displaying/format/\"></a><a href=\"http://momentjs.com/docs/#/displaying/format/\" target=\"_blank\" rel=\"noopener\">http://momentjs.com/docs/#/displaying/format/</a></h2><p>date_format: YYYY-MM-DD        //日期格式<br>time_format: HH:mm:ss        //时间格式</p>\n<h1 id=\"Pagination\"><a href=\"#Pagination\" class=\"headerlink\" title=\"Pagination\"></a>Pagination</h1><h2 id=\"Set-per-page-to-0-to-disable-pagination\"><a href=\"#Set-per-page-to-0-to-disable-pagination\" class=\"headerlink\" title=\"Set per_page to 0 to disable pagination\"></a>Set per_page to 0 to disable pagination</h2><p>per_page: 10        //每页的文章数目<br>pagination_dir: page        //页面路径</p>\n<h1 id=\"Extensions-扩展配置，配置主题以及hexo插件信息\"><a href=\"#Extensions-扩展配置，配置主题以及hexo插件信息\" class=\"headerlink\" title=\"Extensions        //扩展配置，配置主题以及hexo插件信息\"></a>Extensions        //扩展配置，配置主题以及hexo插件信息</h1><h2 id=\"Plugins-https-hexo-io-plugins\"><a href=\"#Plugins-https-hexo-io-plugins\" class=\"headerlink\" title=\"Plugins: https://hexo.io/plugins/\"></a>Plugins: <a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/plugins/</a></h2><h2 id=\"Themes-https-hexo-io-themes\"><a href=\"#Themes-https-hexo-io-themes\" class=\"headerlink\" title=\"Themes: https://hexo.io/themes/\"></a>Themes: <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></h2><p>theme: landscape        //主题名称</p>\n<h1 id=\"Deployment-发布相关配置，需要安装相应插件\"><a href=\"#Deployment-发布相关配置，需要安装相应插件\" class=\"headerlink\" title=\"Deployment        //发布相关配置，需要安装相应插件\"></a>Deployment        //发布相关配置，需要安装相应插件</h1><h2 id=\"Docs-https-hexo-io-docs-deployment-html\"><a href=\"#Docs-https-hexo-io-docs-deployment-html\" class=\"headerlink\" title=\"Docs: https://hexo.io/docs/deployment.html\"></a>Docs: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>  type:</p>\n<p>生成网站文件<br> 1<br>$ hexo generate<br>之后会生成一个public文件夹，文件夹中的文件即为生成的网页文件。</p>\n<p>将博客部署到github<br>按照github pages的说明配置，申请一个github帐号，之后新建项目，注意项目名称为用户名.github.io否则之后是无法访问的，一个账户只能建一个github pages。之后将之前的public文件夹里的内容都同步到这个项目的master分支，之后浏览器访问用户名.github.io就能看到hexo的博客界面了。</p>\n<p>连接github同步可以直接使用git命令或者github客户端，但是这样都需要hexo generate之后再使用git，还是有些麻烦。hexo-deployer-git是hexo的一个插件，可以直接使用hexo命令在生成博客文件后部署到github上。插件的github页面上已经有了详细方法，这里只列出一般情况下的流程。</p>\n<p>在此之前最好先检查一下用户目录~/上是否已经有ssh密钥文件夹.ssh，以免影响之前的使用ssh密钥的应用。这个文件夹是隐藏文件夹，可以直接打开finder使用command + shift + g快捷键进入该路径查看，也可以使用终端命令显示隐藏文件：</p>\n<p> 1<br> 2<br>$ defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder    //显示隐藏文件<br>$ defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder    //重新隐藏有隐藏属性的文件<br>怕记不住命令就干脆用applescript写成应用吧←_←</p>\n<p>首先进入到博客文件夹，安装hexo-deployer-git<br> 1<br> 2<br>$ cd 博客文件夹<br>$ npm install hexo-deployer-git –save<br>然后在博客的配置文件_config.yml（注意不是主题中的）中添加</p>\n<p> 1<br> 2<br> 3<br> 4<br> 5<br>deploy:<br>  type: git<br>  repo:<br>    github: 博客的git地址<br>    //gitcafe: 可以像这样部署到多个git服务器上<br>git地址在git主页中可以看到，注意选择ssh的地址</p>\n<p>因为hexo-deployer-git插件使用ssh方式连接github，所以还要配置ssh，至于什么是ssh以及ssh的原理，可以参考我的github的ssh key部署及原理分析。</p>\n<p>设置github信息<br> 1<br> 2<br>$ git config –global user.name “你的用户名”    //注意加引号<br>$ git config –global user.email 你的邮箱    //不用加引号<br>这个信息就是每次提交到github的时候的用户信息。如果是多帐号（比如公司一个自己一个）就不要用–global附加指令了，cd到项目文件夹逐一设置。</p>\n<p>在本地生成ssh密钥<br> 1<br>$ ssh-keygen -C 注册github所用的邮箱<br>这里的邮箱必须是在注册帐号时的邮箱，github和gitcafe的文档都是这么规定的。如果两处的注册邮箱不同，那就再生成一个ssh密钥呗，注意避免重复命名覆盖文件~在命令运行的时候会有几处提示，Enter file in which to save the key指的是输入生成密钥的路径，默认是~/.ssh，也没必要改，回车跳过；Enter passphrase是设置密码，设置后每次使用这对密钥都会要求输入密码，嫌麻烦就回车跳过好了（不过OS X由钥匙串应用，挺方便的ww）。</p>\n<p>时候进入~/.ssh文件夹（终端里cd进去再ls也可以），可以看到id_rsa和id_rsa.pub两个文件，分别是私钥和公钥，下面就不用多解释了。此时还没有know_hosts文件，使用ssh连接后才会生成。</p>\n<p>之后读取生成密钥的公钥<br> 1<br>$ cat ~/id_rsa.pub<br>把显示出来的内容复制下来，然后到github的网页上，进入到设置界面，找到ssh key，新建一个key，那刚才的内容粘贴进去。</p>\n<p>添加之后测试一下<br> 1<br>$ ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>第一次使用ssh连接github会有提示，输入yes即可，之后如果出现success的字样说明连接正常，ssh配置成功。</p>\n<p>现在就可以使用hexo-deployer-git插件了，方法很简单，hexo generate之后，再使用hexo deploy就可以自动部署了。</p>\n<p>hexo短命令<br>hexo支持短命令，使用起来不用输入太长的指令，只列出常用的：</p>\n<p> 1<br> 2<br> 3<br> 4<br>$ hexo s    //相当于hexo server在本机预览网页<br>$ hexo g    //相当于hexo generate生成静态网页<br>$ hexo d    //相当于hexo deploy部署网页到服务器<br>$ hexo g -d    //hexo generate和hexo deploy的结合<br>至此博客已经可以使用了，不过作为自己的博客还是要好好打理一下</p>\n<p>域名申请<br>github会为建成的github pages提供一个用户名.github.io的二级域名，不过如果想提升逼格（就像我这样的←_←）的可以绑定自己的域名。因为我朝严格的审查制度，国内注册的域名，或者是提供web服务的服务器需要进行备份，备份很麻烦，而且总感觉自己的域名备份后就像是上交国家了一样，所以就别在国内申请域名了。我是在godaddy上申请的域名，有中文网页，还支持支付宝，促销活动也挺多。</p>\n<p>为了保证域名在国内的解析速度，可以使用国内的DNS解析服务，推荐DNSPod的DNS解析，速度快，而且免费的功能也完全足够用。需要到域名注册商更换DNS服务器，更换后需要过一段时间才会生效。之后到dnspod的页面添加DNS记录，添加cname记录，记录值即为github pages给我们的二级域名</p>\n<p>之后要让github接受这个域名解析到自己，在根目录下添加一个名为CNAME的文件，内容为我们自己的域名。因为hexo每次generate之后会删除掉非generate命令生成的文件，CNAME文件不能直接放在public目录下。可以把CNAME文件添加到主题文件夹中的source文件夹，每次generate都会把source文件夹的内容拷贝到public文件夹。其他想放在public目录但每次generate会删除的文件也可以放进去。</p>\n<p>网站分析<br>用于分析网站流量，我使用的是Google Analytics。</p>\n<p>首先进入Google Analytics，没有Google帐号就注册一个。之后添加自己的域名并认证，添加跟踪代码。跟踪代码的添加与模板有关，基本上模板都会提供相应的接口，模板的文档上应该会有所介绍。</p>\n<p>这样就可以清楚的了解到网站的访问信息了。虽然在国内Google的分析代码可以运行，不过Google分析的管理网站在被<del>**</del>了，所以需要翻墙才能看到分析结果。觉得麻烦可以换用过国内的[百度统计] [baidu analytics]或者[站长统计] [zhanzhang analytics]。</p>\n<p>搜索引擎<br>为了增加网站的曝光率，可以向搜索引擎提供sitemap，主动让网站出现在搜索引擎的搜索结果中。关于sitemap，可以看看Google的介绍。</p>\n<p>首先要生成sitemap文件，需要安装hexo sitemap插件：</p>\n<p> 1<br>$ npm install hexo-generator-sitemap –save<br>同时hexo配置文件_config.yml也要进行修改，添加</p>\n<p> 1<br> 2<br>sitemap:<br> path: sitemap.xml<br>sitemap换成其他名字也可以。。。这样再次generate在网站根目录就会生成sitemap.xml文件，然后到Google console登录，添加属性，也就是要提交sitemap的网站，验证。使用HTML文件验证即可，添加到网站目录，push到github上就可以了。同CNAME文件一样，每次generate会删除验证文件，添加到source文件夹即可。之后就是等待Google的爬虫根据站点地图的URL光临博客，建立索引，之后就可以在Google上搜索到我们的博客了。</p>\n<p>评论功能<br>主题里肯定都会添加评论功能的接口，国内访问该是用多说吧，不同的主题配置方法也有出入，没法详细介绍。</p>\n<p>markdown编辑软件<br>写文章才是搭建博客的目的，hexo中使用markdown格式书写文章，markdown是什么以及markdown语法，找篇文章看看就好，上手挺容易的，不过工具的确纠结了一阵子，开源免费的都用过了一遍，随后还是投奔了sublime text（别问我花没花钱买），预览问题可以通过安装OmniMarkupPreviewer插件解决，用到最后才发现，实时预览只会分散注意力，过分关注实际的渲染效果，没法把精力集中在写作本身了。并且sublime text页用习惯了，干什么都用一个工具也方便。OmniMarkupPreviewer的配置以及sublime text的使用可以参考这篇文章。</p>\n"},{"title":"修改形参对象值，会影响实参","date":"2018-07-21T05:54:17.000Z","_content":"\n> 这个问题是在写工具类的时候碰到的，\n有时候为了方便，直接操作形参，可能会导致函数外实参的改变，\n然后bug就这样诞生了\n\n```java\nTimestamp now = new Timestamp(System.currentTimeMillis());\nSystem.out.println(\"now====\" + now.toString());\nTimestamp nextTime = DateUtils.getNextTime(now, Calendar.MONDAY, 2, 12, 23, 31, TaskTypeEnums.EVERY_MONTH.getCode());\n\nSystem.out.println(\"now after====\" + now.toString());\n// 周一，2号，12：23：31，每月\nSystem.out.println(\"nextTime=====\"+nextTime.toString());\n\n ```\n\n打印出来的结果是\n```\nnow====2018-07-21 13:52:29.2\nnow after====2018-07-02 12:23:31.2\nnextTime=====2018-07-02 12:23:31.2\n```\n\n\n## 提供一段伪代码 \n\n> 当形参是对象时，形参指向的是实参的堆地址值，直接在函数中操作形参自然会影响到实参\n但是，当形参是基础类型时，实参值不受影响\n\n``` java\nClass Monitor{\n\tprivate String cpuUsed;\n\tString getCpuUsed(){\n\t\treturn cpuUsed;\n\t}\n}\n\nmain(){\n\tint flag = 2;\n\tMonitor a = new Monitor();\n\tflagObject.setCpuUsed(\"11111111111111\");\n\n\tSystem.out.println(\"before===flag== \"+flag+\",a== \"+a.getCpuUsed());\n\n\taaa(flag,a);\n\n\tSystem.out.println(\"after===flag== \"+flag+\",a== \"+a.getCpuUsed());\n\n}\n\npublic static void aaa(int a, Monitor a1){\n  a+=1;\n  a1.setCpuUsed(\"22222222222\");\n\n}\n```\n结果\n```java\nbefore===flag== 2,a==11111111111111 \nafter===flag== 2,a==22222222222\n```","source":"_posts/修改形参对象值，会影响实参.md","raw":"---\ntitle: 修改形参对象值，会影响实参\ndate: 2018-07-21 13:54:17\ntags:\n---\n\n> 这个问题是在写工具类的时候碰到的，\n有时候为了方便，直接操作形参，可能会导致函数外实参的改变，\n然后bug就这样诞生了\n\n```java\nTimestamp now = new Timestamp(System.currentTimeMillis());\nSystem.out.println(\"now====\" + now.toString());\nTimestamp nextTime = DateUtils.getNextTime(now, Calendar.MONDAY, 2, 12, 23, 31, TaskTypeEnums.EVERY_MONTH.getCode());\n\nSystem.out.println(\"now after====\" + now.toString());\n// 周一，2号，12：23：31，每月\nSystem.out.println(\"nextTime=====\"+nextTime.toString());\n\n ```\n\n打印出来的结果是\n```\nnow====2018-07-21 13:52:29.2\nnow after====2018-07-02 12:23:31.2\nnextTime=====2018-07-02 12:23:31.2\n```\n\n\n## 提供一段伪代码 \n\n> 当形参是对象时，形参指向的是实参的堆地址值，直接在函数中操作形参自然会影响到实参\n但是，当形参是基础类型时，实参值不受影响\n\n``` java\nClass Monitor{\n\tprivate String cpuUsed;\n\tString getCpuUsed(){\n\t\treturn cpuUsed;\n\t}\n}\n\nmain(){\n\tint flag = 2;\n\tMonitor a = new Monitor();\n\tflagObject.setCpuUsed(\"11111111111111\");\n\n\tSystem.out.println(\"before===flag== \"+flag+\",a== \"+a.getCpuUsed());\n\n\taaa(flag,a);\n\n\tSystem.out.println(\"after===flag== \"+flag+\",a== \"+a.getCpuUsed());\n\n}\n\npublic static void aaa(int a, Monitor a1){\n  a+=1;\n  a1.setCpuUsed(\"22222222222\");\n\n}\n```\n结果\n```java\nbefore===flag== 2,a==11111111111111 \nafter===flag== 2,a==22222222222\n```","slug":"修改形参对象值，会影响实参","published":1,"updated":"2018-08-04T06:32:45.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkbsx0004m4cm7g85syxu","content":"<blockquote>\n<p>这个问题是在写工具类的时候碰到的，<br>有时候为了方便，直接操作形参，可能会导致函数外实参的改变，<br>然后bug就这样诞生了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Timestamp now = <span class=\"keyword\">new</span> Timestamp(System.currentTimeMillis());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"now====\"</span> + now.toString());</span><br><span class=\"line\">Timestamp nextTime = DateUtils.getNextTime(now, Calendar.MONDAY, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">31</span>, TaskTypeEnums.EVERY_MONTH.getCode());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"now after====\"</span> + now.toString());</span><br><span class=\"line\"><span class=\"comment\">// 周一，2号，12：23：31，每月</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"nextTime=====\"</span>+nextTime.toString());</span><br></pre></td></tr></table></figure>\n<p>打印出来的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now====2018-07-21 13:52:29.2</span><br><span class=\"line\">now after====2018-07-02 12:23:31.2</span><br><span class=\"line\">nextTime=====2018-07-02 12:23:31.2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"提供一段伪代码\"><a href=\"#提供一段伪代码\" class=\"headerlink\" title=\"提供一段伪代码\"></a>提供一段伪代码</h2><blockquote>\n<p>当形参是对象时，形参指向的是实参的堆地址值，直接在函数中操作形参自然会影响到实参<br>但是，当形参是基础类型时，实参值不受影响</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Monitor&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String cpuUsed;</span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">getCpuUsed</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cpuUsed;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> flag = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tMonitor a = <span class=\"keyword\">new</span> Monitor();</span><br><span class=\"line\">\tflagObject.setCpuUsed(<span class=\"string\">\"11111111111111\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"before===flag== \"</span>+flag+<span class=\"string\">\",a== \"</span>+a.getCpuUsed());</span><br><span class=\"line\"></span><br><span class=\"line\">\taaa(flag,a);</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"after===flag== \"</span>+flag+<span class=\"string\">\",a== \"</span>+a.getCpuUsed());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">aaa</span><span class=\"params\">(<span class=\"keyword\">int</span> a, Monitor a1)</span></span>&#123;</span><br><span class=\"line\">  a+=<span class=\"number\">1</span>;</span><br><span class=\"line\">  a1.setCpuUsed(<span class=\"string\">\"22222222222\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before===flag== <span class=\"number\">2</span>,a==<span class=\"number\">11111111111111</span> </span><br><span class=\"line\">after===flag== <span class=\"number\">2</span>,a==<span class=\"number\">22222222222</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这个问题是在写工具类的时候碰到的，<br>有时候为了方便，直接操作形参，可能会导致函数外实参的改变，<br>然后bug就这样诞生了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Timestamp now = <span class=\"keyword\">new</span> Timestamp(System.currentTimeMillis());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"now====\"</span> + now.toString());</span><br><span class=\"line\">Timestamp nextTime = DateUtils.getNextTime(now, Calendar.MONDAY, <span class=\"number\">2</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">31</span>, TaskTypeEnums.EVERY_MONTH.getCode());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"now after====\"</span> + now.toString());</span><br><span class=\"line\"><span class=\"comment\">// 周一，2号，12：23：31，每月</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"nextTime=====\"</span>+nextTime.toString());</span><br></pre></td></tr></table></figure>\n<p>打印出来的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now====2018-07-21 13:52:29.2</span><br><span class=\"line\">now after====2018-07-02 12:23:31.2</span><br><span class=\"line\">nextTime=====2018-07-02 12:23:31.2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"提供一段伪代码\"><a href=\"#提供一段伪代码\" class=\"headerlink\" title=\"提供一段伪代码\"></a>提供一段伪代码</h2><blockquote>\n<p>当形参是对象时，形参指向的是实参的堆地址值，直接在函数中操作形参自然会影响到实参<br>但是，当形参是基础类型时，实参值不受影响</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Monitor&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String cpuUsed;</span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">getCpuUsed</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cpuUsed;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> flag = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tMonitor a = <span class=\"keyword\">new</span> Monitor();</span><br><span class=\"line\">\tflagObject.setCpuUsed(<span class=\"string\">\"11111111111111\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"before===flag== \"</span>+flag+<span class=\"string\">\",a== \"</span>+a.getCpuUsed());</span><br><span class=\"line\"></span><br><span class=\"line\">\taaa(flag,a);</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"after===flag== \"</span>+flag+<span class=\"string\">\",a== \"</span>+a.getCpuUsed());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">aaa</span><span class=\"params\">(<span class=\"keyword\">int</span> a, Monitor a1)</span></span>&#123;</span><br><span class=\"line\">  a+=<span class=\"number\">1</span>;</span><br><span class=\"line\">  a1.setCpuUsed(<span class=\"string\">\"22222222222\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before===flag== <span class=\"number\">2</span>,a==<span class=\"number\">11111111111111</span> </span><br><span class=\"line\">after===flag== <span class=\"number\">2</span>,a==<span class=\"number\">22222222222</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"arch安装笔记","date":"2015-12-21T10:55:56.000Z","_content":"\n ——(2)为解决问题(不定期更新)\n\n2015年1月29日\n\n下午，心血来潮，决定试着在装一次arch。\n基本装完界面后，找到竹子。在大神的帮助下，开始解决之前不能解决的问题以下的出现的问题，及解决办法：\n\n**Q：pacman -S sudo后，发现 sudo 不能用。出现提示：“不在SUDOERS文件中，此事将被报告。”**\n\n```\nnano /etc/sudoers  找到 \n## Same thing without a password#  %wheel ALL=(ALL) NOPASSWD:ALL\n```\n\n取消“ #  %wheel ALL=(ALL) NOPASSWD:ALL”前面的“#”。\n\n> %wheel：表示一个组的名称\n\n前提是你必须在这个用户组，如果不是过不确定，那就改成“你的名字”\n\n**eg： “rabbit ALL=(ALL) NOPASSWD:ALL”  ，将“%wheel”改成“rabbit”，“%wheel”是一个用户组。**\n\n**重启ARCH后不能上网**\n```\nsudo dhcpcd wlp3s0   ##（wlp3s0是我的无线网卡）。\n```\n\n【前提是你在重启前安装了dialog，“pacman -S  dialog”】\n若提示 NetworkManager的问题，意为“启动网络管理器”。则\n```\nsudo systemctl enable NetworkManager\nsudo systemctl start NetworkManager\n```\n**Q：添加ARCHLINUXCN源**\n可参考  [Archlinux CN 镜像源使用帮助](https://lug.ustc.edu.cn/wiki/mirrors/help/archlinuxcn)，[Arch Linux 中文社区仓库 / 镜像加速源](https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/)\n\n```\nnano /etc/pacman.conf\n在 /etc/pacman.conf 文件末尾添加两行：\n\n[archlinuxcn]SigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n\n然后请安装 archlinuxcn-keyring 包以导入 GPG key。\n具体做法为：\n\n```\npacman -Syu   （刷新源）\npacman -S archlinuxcn-keyring　（安装archlinuxcn-keyring）\n```\n\n**Q：安装YAOURT  （前提，建议先添加ARCHLINUXCN源）**\n****\n```\nsudo pacman -S yaourt\n```\n**注：**若是找不到wine软件，则**nano /etc/pacman.conf** 找到\n\n```\nInclude = /etc/pacman.d/mirrorlist\n```\n取消注释，再刷新一下，如果想找软件，yaourt  描述如果想安装软件\n\n```\nyaourt -Ｓ 包名\n```\n\n记得“**yaourt -Syu**”一下\n\n**Q： 安装CHROME　（前提，已安装YAOURT）**\n```\nyaourt -S google-chrome\n```\n\n**Q：安装搜狗输入法**\n\n```\nyaourt sogou\n```\n\n安装过程中遇到编辑 ，回车忽略。一般来说，aur的内容不需要编辑。\n\n然后安装“fcitx-qt5”和　kcm-fcitx（如果不是kde桌面，就不用安装kcm-fcitx）\n**注：**记得卸载ibus　命令：\n\n```\nyaourt -Rscn　ibus\n```\n\n附带依赖和配置文件，都删除\n***\n启动输入法：\n记得安装“**ttf-dejavu**”\n配置：参考“wiki.archlinux.org”，**nano /.xprofile**     文尾加入\n```\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=”@im=fcitx”\n```\n\n重启电脑，完成\n\n**Q：安装WINE**\n```\nyaourt -S wine-staging ##（听说目前的测试版比较稳定）\n```\n\n\n\n**Q：安装WINEQQ（这里使用“百度  清风博主 WINEQQ”）参考“[https://phpcj.org/wineqq/](http://phpcj.org/wineqq/)”**\n****\n第一步，安装wine\n第二步，找到下载的安装包（tar.xz）的路径\n终端使用“cd”一直不断进入到安装包所在的文件夹下，在该文件夹下输入：\n```\ntar xvf wineQQ8.1O17216.tar.xz -C ~/\n```\n\n***\n***原文为：“~ $tar xvf wineQQ8.1O17216.tar.xz -C ~/” 中的“～$”为普通用户，“～#”为root下。***\n\n**Q： 安装深度影音，深度影院**\n***\n```\nyaourt deepin\n```\n\n在里面自己找，有music 、moive就是了。安装多个可以用空格隔开，如：1 3 5 52\n\n***\n深度影院安装后会出现打不开现象，终端执行：\n```\ndeepin-movie\n```\n\n查看里面什么没有组建没安装，如“XXXX is not installed”下图：\n\ngoogle了一下这个module，加上了arch。然后搜到arch的仓库。\n可得，执行\n```\nyaourt -S qt5-quickcontrols\n```\n\n\n\n**Q：修改GNOME桌面的样式，3.18已经不支持修改CSS来更换**\n****\n下载gnome-tweak-tools 优化工具，然后在“扩展-user them-启动”，重启优化工具，进入“外观-主题”选择你已经下载的主题\n\n\n\n**Q：字体好奇怪，装完了文泉驿字体也是好奇怪。**\n****\n**nano /etc/pacman.conf **把下面的内容添加进去\n\n```\n[infinality-bundle]\nSigLevel = Never\nServer= http://bohoomil.com/repo/$arch\n\n[infinality-bundle-multilib]\nSigLevel = Never\nServer= http://bohoomil.com/repo/multilib/$arch\n\n[infinality-bundle-fonts]\nSigLevel = Never\nServer= http://bohoomil.com/repo/fonts\n```\n\n然后保存，并执行\n```\nsudo pacman -Syu infinality-bundle infinality-bundle-multilib ibfonts-meta-extended\n```\n\n因为是打补丁，所以会出现很多冲突，全部选择删除\n\n\n\n**Q：添加WIN7启动项**\n****\n\n```\nyaourt -S os-prober\nsudo grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n可能出现“无法获取某些文件”，便多重试几次，这个网站是外国的，网速连接慢……（竹子说他曾经重试了十次）\n***\n推荐将win下的字体复制到“.fonts”。路径为“/home/你的用户名/.fonts”，该文件夹默认隐藏（“.”就是隐藏的意思）然后刷新字体缓存，\n```\nsudo fc-cache -fsv\n```\n\n\n\n**Q：GNOME3.18的桌面，将任务放到右上角（如UBUNTU一样）**\n****\n\n```\nyaourt topicon\n```\n\n安装后，重启一下优化工具，“扩展-User themes”的上面就会出现“topicons”选项，启动它。\n然后，键盘“alt+f2” ，输入“r”，回车。\n**注：优化工具不会自动刷新的**\n***\n**Q：安装DEEPIN桌面环境（参考“ WIKI.ARCHLINUX.ORG ”）搜索“ DEEPIN DESKTOP ENVIRONMENT ”**\n\n\n```\npacman -S deepin deepin-extra\n```\n\n**注：启动Deepin 桌面环境，使用登录管理器**\n\ndeepin默认lightdm greeter是lightdm-deepin-greeter，可通过pacman安装，安装后需编辑lightdm.conf:\n\n```\nsudo nano /etc/lightdm/lightdm.conf\n```\n\n然后找到，并修改\n```\n[SeatDefaults]\n…\ngreeter-session=lightdm-deepin-greeter\n```\n\n之后终端执行\n\n```\nsystemctl enable lightdm -f\n```\n\n重启\n***\n在进入deepin桌面后，可能出现设置部分英文现象。\n终端执行\n```\nnano ~/.pam_environment\n```\n\n把 **en_US**  改成 **zh_CN**\n两行都要，然后注销\n\n**Q：安装ZSH**\n\n```\nyaourt -S zsh oh-my-zsh-git\n```\n\n安装完毕后会有让你cp一个文件，复制一下哪个命令\n```\ncp /usr/share/oh-my-zsh/zshrc ~/.zshrc\n```\n\n然后输入“ chsh ”\n输入密码\n输入“ /bin/zsh ”\n***\n每次进入终端，输入zsh后，会出现“ ～ ” ，说明进入zsh了，双击tab可补全命令。\n\n**Q：删除base软件包组以外的所有软件包**\n\n[参考网址](https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E5.88.A0.E9.99.A4base.E8.BD.AF.E4.BB.B6.E5.8C.85.E7.BB.84.E4.BB.A5.E5.A4.96.E7.9A.84.E6.89.80.E6.9C.89.E8.BD.AF.E4.BB.B6.E5.8C.85)\n\n```\npacman -Rs $(comm -23 <(pacman -Qeq|sort) <((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d ' ' -f 1))\n```\n\n\n\n> [帖子来源](https://bbs.archlinux.org/viewtopic.php?id=130176)\n\n\n\nQ：激活“ KEYBOARD SHORTCUTS ”(传说中的魔术键)，参考“[HTTPS://WIKI.ARCHLINUX.ORG/INDEX.PHP/KEYBOARD_SHORTCUTS](https://wiki.archlinux.org/index.php/Keyboard_shortcuts)”**\n\n终端输入将临时启用\n\n```\nsysctl kernel.sysrq=1\n```\n\n或是\n```\necho “1” > /proc/sys/kernel/sysrq\n```\n\n希望在系统启动时就开启，编辑“/etc/sysctl.d/99-sysctl.conf”文件\n```\nnano /etc/sysctl.d/99-sysctl.conf\n```\n\n文件中输入\n```\nkernel.sysrq = 1\n```\n\n保存\n\n**注：**记住这个激活命令的通用口诀是 “Reboot Even If System Utterly Broken” (或者”REISUB”)。\n\n 最后更新于2016年3月15日\n","source":"_posts/linux/arch-arch安装笔记.md","raw":"---\ntitle: arch安装笔记\ndate: 2015-12-21 18:55:56\ntags: arch\ncategories: 系统 Linux\n---\n\n ——(2)为解决问题(不定期更新)\n\n2015年1月29日\n\n下午，心血来潮，决定试着在装一次arch。\n基本装完界面后，找到竹子。在大神的帮助下，开始解决之前不能解决的问题以下的出现的问题，及解决办法：\n\n**Q：pacman -S sudo后，发现 sudo 不能用。出现提示：“不在SUDOERS文件中，此事将被报告。”**\n\n```\nnano /etc/sudoers  找到 \n## Same thing without a password#  %wheel ALL=(ALL) NOPASSWD:ALL\n```\n\n取消“ #  %wheel ALL=(ALL) NOPASSWD:ALL”前面的“#”。\n\n> %wheel：表示一个组的名称\n\n前提是你必须在这个用户组，如果不是过不确定，那就改成“你的名字”\n\n**eg： “rabbit ALL=(ALL) NOPASSWD:ALL”  ，将“%wheel”改成“rabbit”，“%wheel”是一个用户组。**\n\n**重启ARCH后不能上网**\n```\nsudo dhcpcd wlp3s0   ##（wlp3s0是我的无线网卡）。\n```\n\n【前提是你在重启前安装了dialog，“pacman -S  dialog”】\n若提示 NetworkManager的问题，意为“启动网络管理器”。则\n```\nsudo systemctl enable NetworkManager\nsudo systemctl start NetworkManager\n```\n**Q：添加ARCHLINUXCN源**\n可参考  [Archlinux CN 镜像源使用帮助](https://lug.ustc.edu.cn/wiki/mirrors/help/archlinuxcn)，[Arch Linux 中文社区仓库 / 镜像加速源](https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/)\n\n```\nnano /etc/pacman.conf\n在 /etc/pacman.conf 文件末尾添加两行：\n\n[archlinuxcn]SigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n\n然后请安装 archlinuxcn-keyring 包以导入 GPG key。\n具体做法为：\n\n```\npacman -Syu   （刷新源）\npacman -S archlinuxcn-keyring　（安装archlinuxcn-keyring）\n```\n\n**Q：安装YAOURT  （前提，建议先添加ARCHLINUXCN源）**\n****\n```\nsudo pacman -S yaourt\n```\n**注：**若是找不到wine软件，则**nano /etc/pacman.conf** 找到\n\n```\nInclude = /etc/pacman.d/mirrorlist\n```\n取消注释，再刷新一下，如果想找软件，yaourt  描述如果想安装软件\n\n```\nyaourt -Ｓ 包名\n```\n\n记得“**yaourt -Syu**”一下\n\n**Q： 安装CHROME　（前提，已安装YAOURT）**\n```\nyaourt -S google-chrome\n```\n\n**Q：安装搜狗输入法**\n\n```\nyaourt sogou\n```\n\n安装过程中遇到编辑 ，回车忽略。一般来说，aur的内容不需要编辑。\n\n然后安装“fcitx-qt5”和　kcm-fcitx（如果不是kde桌面，就不用安装kcm-fcitx）\n**注：**记得卸载ibus　命令：\n\n```\nyaourt -Rscn　ibus\n```\n\n附带依赖和配置文件，都删除\n***\n启动输入法：\n记得安装“**ttf-dejavu**”\n配置：参考“wiki.archlinux.org”，**nano /.xprofile**     文尾加入\n```\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=”@im=fcitx”\n```\n\n重启电脑，完成\n\n**Q：安装WINE**\n```\nyaourt -S wine-staging ##（听说目前的测试版比较稳定）\n```\n\n\n\n**Q：安装WINEQQ（这里使用“百度  清风博主 WINEQQ”）参考“[https://phpcj.org/wineqq/](http://phpcj.org/wineqq/)”**\n****\n第一步，安装wine\n第二步，找到下载的安装包（tar.xz）的路径\n终端使用“cd”一直不断进入到安装包所在的文件夹下，在该文件夹下输入：\n```\ntar xvf wineQQ8.1O17216.tar.xz -C ~/\n```\n\n***\n***原文为：“~ $tar xvf wineQQ8.1O17216.tar.xz -C ~/” 中的“～$”为普通用户，“～#”为root下。***\n\n**Q： 安装深度影音，深度影院**\n***\n```\nyaourt deepin\n```\n\n在里面自己找，有music 、moive就是了。安装多个可以用空格隔开，如：1 3 5 52\n\n***\n深度影院安装后会出现打不开现象，终端执行：\n```\ndeepin-movie\n```\n\n查看里面什么没有组建没安装，如“XXXX is not installed”下图：\n\ngoogle了一下这个module，加上了arch。然后搜到arch的仓库。\n可得，执行\n```\nyaourt -S qt5-quickcontrols\n```\n\n\n\n**Q：修改GNOME桌面的样式，3.18已经不支持修改CSS来更换**\n****\n下载gnome-tweak-tools 优化工具，然后在“扩展-user them-启动”，重启优化工具，进入“外观-主题”选择你已经下载的主题\n\n\n\n**Q：字体好奇怪，装完了文泉驿字体也是好奇怪。**\n****\n**nano /etc/pacman.conf **把下面的内容添加进去\n\n```\n[infinality-bundle]\nSigLevel = Never\nServer= http://bohoomil.com/repo/$arch\n\n[infinality-bundle-multilib]\nSigLevel = Never\nServer= http://bohoomil.com/repo/multilib/$arch\n\n[infinality-bundle-fonts]\nSigLevel = Never\nServer= http://bohoomil.com/repo/fonts\n```\n\n然后保存，并执行\n```\nsudo pacman -Syu infinality-bundle infinality-bundle-multilib ibfonts-meta-extended\n```\n\n因为是打补丁，所以会出现很多冲突，全部选择删除\n\n\n\n**Q：添加WIN7启动项**\n****\n\n```\nyaourt -S os-prober\nsudo grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n可能出现“无法获取某些文件”，便多重试几次，这个网站是外国的，网速连接慢……（竹子说他曾经重试了十次）\n***\n推荐将win下的字体复制到“.fonts”。路径为“/home/你的用户名/.fonts”，该文件夹默认隐藏（“.”就是隐藏的意思）然后刷新字体缓存，\n```\nsudo fc-cache -fsv\n```\n\n\n\n**Q：GNOME3.18的桌面，将任务放到右上角（如UBUNTU一样）**\n****\n\n```\nyaourt topicon\n```\n\n安装后，重启一下优化工具，“扩展-User themes”的上面就会出现“topicons”选项，启动它。\n然后，键盘“alt+f2” ，输入“r”，回车。\n**注：优化工具不会自动刷新的**\n***\n**Q：安装DEEPIN桌面环境（参考“ WIKI.ARCHLINUX.ORG ”）搜索“ DEEPIN DESKTOP ENVIRONMENT ”**\n\n\n```\npacman -S deepin deepin-extra\n```\n\n**注：启动Deepin 桌面环境，使用登录管理器**\n\ndeepin默认lightdm greeter是lightdm-deepin-greeter，可通过pacman安装，安装后需编辑lightdm.conf:\n\n```\nsudo nano /etc/lightdm/lightdm.conf\n```\n\n然后找到，并修改\n```\n[SeatDefaults]\n…\ngreeter-session=lightdm-deepin-greeter\n```\n\n之后终端执行\n\n```\nsystemctl enable lightdm -f\n```\n\n重启\n***\n在进入deepin桌面后，可能出现设置部分英文现象。\n终端执行\n```\nnano ~/.pam_environment\n```\n\n把 **en_US**  改成 **zh_CN**\n两行都要，然后注销\n\n**Q：安装ZSH**\n\n```\nyaourt -S zsh oh-my-zsh-git\n```\n\n安装完毕后会有让你cp一个文件，复制一下哪个命令\n```\ncp /usr/share/oh-my-zsh/zshrc ~/.zshrc\n```\n\n然后输入“ chsh ”\n输入密码\n输入“ /bin/zsh ”\n***\n每次进入终端，输入zsh后，会出现“ ～ ” ，说明进入zsh了，双击tab可补全命令。\n\n**Q：删除base软件包组以外的所有软件包**\n\n[参考网址](https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E5.88.A0.E9.99.A4base.E8.BD.AF.E4.BB.B6.E5.8C.85.E7.BB.84.E4.BB.A5.E5.A4.96.E7.9A.84.E6.89.80.E6.9C.89.E8.BD.AF.E4.BB.B6.E5.8C.85)\n\n```\npacman -Rs $(comm -23 <(pacman -Qeq|sort) <((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d ' ' -f 1))\n```\n\n\n\n> [帖子来源](https://bbs.archlinux.org/viewtopic.php?id=130176)\n\n\n\nQ：激活“ KEYBOARD SHORTCUTS ”(传说中的魔术键)，参考“[HTTPS://WIKI.ARCHLINUX.ORG/INDEX.PHP/KEYBOARD_SHORTCUTS](https://wiki.archlinux.org/index.php/Keyboard_shortcuts)”**\n\n终端输入将临时启用\n\n```\nsysctl kernel.sysrq=1\n```\n\n或是\n```\necho “1” > /proc/sys/kernel/sysrq\n```\n\n希望在系统启动时就开启，编辑“/etc/sysctl.d/99-sysctl.conf”文件\n```\nnano /etc/sysctl.d/99-sysctl.conf\n```\n\n文件中输入\n```\nkernel.sysrq = 1\n```\n\n保存\n\n**注：**记住这个激活命令的通用口诀是 “Reboot Even If System Utterly Broken” (或者”REISUB”)。\n\n 最后更新于2016年3月15日\n","slug":"linux/arch-arch安装笔记","published":1,"updated":"2018-06-28T14:12:11.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc3f0006m4cmjtrmbes2","content":"<p> ——(2)为解决问题(不定期更新)</p>\n<p>2015年1月29日</p>\n<p>下午，心血来潮，决定试着在装一次arch。<br>基本装完界面后，找到竹子。在大神的帮助下，开始解决之前不能解决的问题以下的出现的问题，及解决办法：</p>\n<p><strong>Q：pacman -S sudo后，发现 sudo 不能用。出现提示：“不在SUDOERS文件中，此事将被报告。”</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/sudoers  找到 </span><br><span class=\"line\">## Same thing without a password#  %wheel ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>\n<p>取消“ #  %wheel ALL=(ALL) NOPASSWD:ALL”前面的“#”。</p>\n<blockquote>\n<p>%wheel：表示一个组的名称</p>\n</blockquote>\n<p>前提是你必须在这个用户组，如果不是过不确定，那就改成“你的名字”</p>\n<p><strong>eg： “rabbit ALL=(ALL) NOPASSWD:ALL”  ，将“%wheel”改成“rabbit”，“%wheel”是一个用户组。</strong></p>\n<p><strong>重启ARCH后不能上网</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dhcpcd wlp3s0   ##（wlp3s0是我的无线网卡）。</span><br></pre></td></tr></table></figure></p>\n<p>【前提是你在重启前安装了dialog，“pacman -S  dialog”】<br>若提示 NetworkManager的问题，意为“启动网络管理器”。则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable NetworkManager</span><br><span class=\"line\">sudo systemctl start NetworkManager</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：添加ARCHLINUXCN源</strong><br>可参考  <a href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/archlinuxcn\" target=\"_blank\" rel=\"noopener\">Archlinux CN 镜像源使用帮助</a>，<a href=\"https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/\" target=\"_blank\" rel=\"noopener\">Arch Linux 中文社区仓库 / 镜像加速源</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/pacman.conf</span><br><span class=\"line\">在 /etc/pacman.conf 文件末尾添加两行：</span><br><span class=\"line\"></span><br><span class=\"line\">[archlinuxcn]SigLevel = Optional TrustAll</span><br><span class=\"line\">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>\n<p>然后请安装 archlinuxcn-keyring 包以导入 GPG key。<br>具体做法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Syu   （刷新源）</span><br><span class=\"line\">pacman -S archlinuxcn-keyring　（安装archlinuxcn-keyring）</span><br></pre></td></tr></table></figure>\n<p><strong>Q：安装YAOURT  （前提，建议先添加ARCHLINUXCN源）</strong></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S yaourt</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong>若是找不到wine软件，则<strong>nano /etc/pacman.conf</strong> 找到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>\n<p>取消注释，再刷新一下，如果想找软件，yaourt  描述如果想安装软件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -Ｓ 包名</span><br></pre></td></tr></table></figure>\n<p>记得“<strong>yaourt -Syu</strong>”一下</p>\n<p><strong>Q： 安装CHROME　（前提，已安装YAOURT）</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S google-chrome</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：安装搜狗输入法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt sogou</span><br></pre></td></tr></table></figure>\n<p>安装过程中遇到编辑 ，回车忽略。一般来说，aur的内容不需要编辑。</p>\n<p>然后安装“fcitx-qt5”和　kcm-fcitx（如果不是kde桌面，就不用安装kcm-fcitx）<br><strong>注：</strong>记得卸载ibus　命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -Rscn　ibus</span><br></pre></td></tr></table></figure>\n<p>附带依赖和配置文件，都删除</p>\n<hr>\n<p>启动输入法：<br>记得安装“<strong>ttf-dejavu</strong>”<br>配置：参考“wiki.archlinux.org”，<strong>nano /.xprofile</strong>     文尾加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=”@im=fcitx”</span><br></pre></td></tr></table></figure></p>\n<p>重启电脑，完成</p>\n<p><strong>Q：安装WINE</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S wine-staging ##（听说目前的测试版比较稳定）</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：安装WINEQQ（这里使用“百度  清风博主 WINEQQ”）参考“<a href=\"http://phpcj.org/wineqq/\" target=\"_blank\" rel=\"noopener\">https://phpcj.org/wineqq/</a>”</strong></p>\n<hr>\n<p>第一步，安装wine<br>第二步，找到下载的安装包（tar.xz）的路径<br>终端使用“cd”一直不断进入到安装包所在的文件夹下，在该文件夹下输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf wineQQ8.1O17216.tar.xz -C ~/</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>原文为：“~ $tar xvf wineQQ8.1O17216.tar.xz -C ~/” 中的“～$”为普通用户，“～#”为root下。</em></strong></p>\n<p><strong>Q： 安装深度影音，深度影院</strong></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt deepin</span><br></pre></td></tr></table></figure>\n<p>在里面自己找，有music 、moive就是了。安装多个可以用空格隔开，如：1 3 5 52</p>\n<hr>\n<p>深度影院安装后会出现打不开现象，终端执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deepin-movie</span><br></pre></td></tr></table></figure></p>\n<p>查看里面什么没有组建没安装，如“XXXX is not installed”下图：</p>\n<p>google了一下这个module，加上了arch。然后搜到arch的仓库。<br>可得，执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S qt5-quickcontrols</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：修改GNOME桌面的样式，3.18已经不支持修改CSS来更换</strong></p>\n<hr>\n<p>下载gnome-tweak-tools 优化工具，然后在“扩展-user them-启动”，重启优化工具，进入“外观-主题”选择你已经下载的主题</p>\n<p><strong>Q：字体好奇怪，装完了文泉驿字体也是好奇怪。</strong></p>\n<hr>\n<p><strong>nano /etc/pacman.conf </strong>把下面的内容添加进去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[infinality-bundle]</span><br><span class=\"line\">SigLevel = Never</span><br><span class=\"line\">Server= http://bohoomil.com/repo/$arch</span><br><span class=\"line\"></span><br><span class=\"line\">[infinality-bundle-multilib]</span><br><span class=\"line\">SigLevel = Never</span><br><span class=\"line\">Server= http://bohoomil.com/repo/multilib/$arch</span><br><span class=\"line\"></span><br><span class=\"line\">[infinality-bundle-fonts]</span><br><span class=\"line\">SigLevel = Never</span><br><span class=\"line\">Server= http://bohoomil.com/repo/fonts</span><br></pre></td></tr></table></figure>\n<p>然后保存，并执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syu infinality-bundle infinality-bundle-multilib ibfonts-meta-extended</span><br></pre></td></tr></table></figure></p>\n<p>因为是打补丁，所以会出现很多冲突，全部选择删除</p>\n<p><strong>Q：添加WIN7启动项</strong></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S os-prober</span><br><span class=\"line\">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n<p>可能出现“无法获取某些文件”，便多重试几次，这个网站是外国的，网速连接慢……（竹子说他曾经重试了十次）</p>\n<hr>\n<p>推荐将win下的字体复制到“.fonts”。路径为“/home/你的用户名/.fonts”，该文件夹默认隐藏（“.”就是隐藏的意思）然后刷新字体缓存，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fc-cache -fsv</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：GNOME3.18的桌面，将任务放到右上角（如UBUNTU一样）</strong></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt topicon</span><br></pre></td></tr></table></figure>\n<p>安装后，重启一下优化工具，“扩展-User themes”的上面就会出现“topicons”选项，启动它。<br>然后，键盘“alt+f2” ，输入“r”，回车。<br><strong>注：优化工具不会自动刷新的</strong></p>\n<hr>\n<p><strong>Q：安装DEEPIN桌面环境（参考“ WIKI.ARCHLINUX.ORG ”）搜索“ DEEPIN DESKTOP ENVIRONMENT ”</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S deepin deepin-extra</span><br></pre></td></tr></table></figure>\n<p><strong>注：启动Deepin 桌面环境，使用登录管理器</strong></p>\n<p>deepin默认lightdm greeter是lightdm-deepin-greeter，可通过pacman安装，安装后需编辑lightdm.conf:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure>\n<p>然后找到，并修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SeatDefaults]</span><br><span class=\"line\">…</span><br><span class=\"line\">greeter-session=lightdm-deepin-greeter</span><br></pre></td></tr></table></figure></p>\n<p>之后终端执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable lightdm -f</span><br></pre></td></tr></table></figure>\n<p>重启</p>\n<hr>\n<p>在进入deepin桌面后，可能出现设置部分英文现象。<br>终端执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/.pam_environment</span><br></pre></td></tr></table></figure></p>\n<p>把 <strong>en_US</strong>  改成 <strong>zh_CN</strong><br>两行都要，然后注销</p>\n<p><strong>Q：安装ZSH</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S zsh oh-my-zsh-git</span><br></pre></td></tr></table></figure>\n<p>安装完毕后会有让你cp一个文件，复制一下哪个命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/oh-my-zsh/zshrc ~/.zshrc</span><br></pre></td></tr></table></figure></p>\n<p>然后输入“ chsh ”<br>输入密码<br>输入“ /bin/zsh ”</p>\n<hr>\n<p>每次进入终端，输入zsh后，会出现“ ～ ” ，说明进入zsh了，双击tab可补全命令。</p>\n<p><strong>Q：删除base软件包组以外的所有软件包</strong></p>\n<p><a href=\"https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">参考网址</a>#.E5.88.A0.E9.99.A4base.E8.BD.AF.E4.BB.B6.E5.8C.85.E7.BB.84.E4.BB.A5.E5.A4.96.E7.9A.84.E6.89.80.E6.9C.89.E8.BD.AF.E4.BB.B6.E5.8C.85)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Rs $(comm -23 &lt;(pacman -Qeq|sort) &lt;((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d &apos; &apos; -f 1))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://bbs.archlinux.org/viewtopic.php?id=130176\" target=\"_blank\" rel=\"noopener\">帖子来源</a></p>\n</blockquote>\n<p>Q：激活“ KEYBOARD SHORTCUTS ”(传说中的魔术键)，参考“<a href=\"https://wiki.archlinux.org/index.php/Keyboard_shortcuts\" target=\"_blank\" rel=\"noopener\">HTTPS://WIKI.ARCHLINUX.ORG/INDEX.PHP/KEYBOARD_SHORTCUTS</a>”**</p>\n<p>终端输入将临时启用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl kernel.sysrq=1</span><br></pre></td></tr></table></figure>\n<p>或是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo “1” &gt; /proc/sys/kernel/sysrq</span><br></pre></td></tr></table></figure></p>\n<p>希望在系统启动时就开启，编辑“/etc/sysctl.d/99-sysctl.conf”文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/sysctl.d/99-sysctl.conf</span><br></pre></td></tr></table></figure></p>\n<p>文件中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kernel.sysrq = 1</span><br></pre></td></tr></table></figure></p>\n<p>保存</p>\n<p><strong>注：</strong>记住这个激活命令的通用口诀是 “Reboot Even If System Utterly Broken” (或者”REISUB”)。</p>\n<p> 最后更新于2016年3月15日</p>\n","site":{"data":{}},"excerpt":"","more":"<p> ——(2)为解决问题(不定期更新)</p>\n<p>2015年1月29日</p>\n<p>下午，心血来潮，决定试着在装一次arch。<br>基本装完界面后，找到竹子。在大神的帮助下，开始解决之前不能解决的问题以下的出现的问题，及解决办法：</p>\n<p><strong>Q：pacman -S sudo后，发现 sudo 不能用。出现提示：“不在SUDOERS文件中，此事将被报告。”</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/sudoers  找到 </span><br><span class=\"line\">## Same thing without a password#  %wheel ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>\n<p>取消“ #  %wheel ALL=(ALL) NOPASSWD:ALL”前面的“#”。</p>\n<blockquote>\n<p>%wheel：表示一个组的名称</p>\n</blockquote>\n<p>前提是你必须在这个用户组，如果不是过不确定，那就改成“你的名字”</p>\n<p><strong>eg： “rabbit ALL=(ALL) NOPASSWD:ALL”  ，将“%wheel”改成“rabbit”，“%wheel”是一个用户组。</strong></p>\n<p><strong>重启ARCH后不能上网</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dhcpcd wlp3s0   ##（wlp3s0是我的无线网卡）。</span><br></pre></td></tr></table></figure></p>\n<p>【前提是你在重启前安装了dialog，“pacman -S  dialog”】<br>若提示 NetworkManager的问题，意为“启动网络管理器”。则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable NetworkManager</span><br><span class=\"line\">sudo systemctl start NetworkManager</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：添加ARCHLINUXCN源</strong><br>可参考  <a href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/archlinuxcn\" target=\"_blank\" rel=\"noopener\">Archlinux CN 镜像源使用帮助</a>，<a href=\"https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/\" target=\"_blank\" rel=\"noopener\">Arch Linux 中文社区仓库 / 镜像加速源</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/pacman.conf</span><br><span class=\"line\">在 /etc/pacman.conf 文件末尾添加两行：</span><br><span class=\"line\"></span><br><span class=\"line\">[archlinuxcn]SigLevel = Optional TrustAll</span><br><span class=\"line\">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>\n<p>然后请安装 archlinuxcn-keyring 包以导入 GPG key。<br>具体做法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Syu   （刷新源）</span><br><span class=\"line\">pacman -S archlinuxcn-keyring　（安装archlinuxcn-keyring）</span><br></pre></td></tr></table></figure>\n<p><strong>Q：安装YAOURT  （前提，建议先添加ARCHLINUXCN源）</strong></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S yaourt</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong>若是找不到wine软件，则<strong>nano /etc/pacman.conf</strong> 找到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>\n<p>取消注释，再刷新一下，如果想找软件，yaourt  描述如果想安装软件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -Ｓ 包名</span><br></pre></td></tr></table></figure>\n<p>记得“<strong>yaourt -Syu</strong>”一下</p>\n<p><strong>Q： 安装CHROME　（前提，已安装YAOURT）</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S google-chrome</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：安装搜狗输入法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt sogou</span><br></pre></td></tr></table></figure>\n<p>安装过程中遇到编辑 ，回车忽略。一般来说，aur的内容不需要编辑。</p>\n<p>然后安装“fcitx-qt5”和　kcm-fcitx（如果不是kde桌面，就不用安装kcm-fcitx）<br><strong>注：</strong>记得卸载ibus　命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -Rscn　ibus</span><br></pre></td></tr></table></figure>\n<p>附带依赖和配置文件，都删除</p>\n<hr>\n<p>启动输入法：<br>记得安装“<strong>ttf-dejavu</strong>”<br>配置：参考“wiki.archlinux.org”，<strong>nano /.xprofile</strong>     文尾加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GTK_IM_MODULE=fcitx</span><br><span class=\"line\">export QT_IM_MODULE=fcitx</span><br><span class=\"line\">export XMODIFIERS=”@im=fcitx”</span><br></pre></td></tr></table></figure></p>\n<p>重启电脑，完成</p>\n<p><strong>Q：安装WINE</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S wine-staging ##（听说目前的测试版比较稳定）</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：安装WINEQQ（这里使用“百度  清风博主 WINEQQ”）参考“<a href=\"http://phpcj.org/wineqq/\" target=\"_blank\" rel=\"noopener\">https://phpcj.org/wineqq/</a>”</strong></p>\n<hr>\n<p>第一步，安装wine<br>第二步，找到下载的安装包（tar.xz）的路径<br>终端使用“cd”一直不断进入到安装包所在的文件夹下，在该文件夹下输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf wineQQ8.1O17216.tar.xz -C ~/</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>原文为：“~ $tar xvf wineQQ8.1O17216.tar.xz -C ~/” 中的“～$”为普通用户，“～#”为root下。</em></strong></p>\n<p><strong>Q： 安装深度影音，深度影院</strong></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt deepin</span><br></pre></td></tr></table></figure>\n<p>在里面自己找，有music 、moive就是了。安装多个可以用空格隔开，如：1 3 5 52</p>\n<hr>\n<p>深度影院安装后会出现打不开现象，终端执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deepin-movie</span><br></pre></td></tr></table></figure></p>\n<p>查看里面什么没有组建没安装，如“XXXX is not installed”下图：</p>\n<p>google了一下这个module，加上了arch。然后搜到arch的仓库。<br>可得，执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S qt5-quickcontrols</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：修改GNOME桌面的样式，3.18已经不支持修改CSS来更换</strong></p>\n<hr>\n<p>下载gnome-tweak-tools 优化工具，然后在“扩展-user them-启动”，重启优化工具，进入“外观-主题”选择你已经下载的主题</p>\n<p><strong>Q：字体好奇怪，装完了文泉驿字体也是好奇怪。</strong></p>\n<hr>\n<p><strong>nano /etc/pacman.conf </strong>把下面的内容添加进去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[infinality-bundle]</span><br><span class=\"line\">SigLevel = Never</span><br><span class=\"line\">Server= http://bohoomil.com/repo/$arch</span><br><span class=\"line\"></span><br><span class=\"line\">[infinality-bundle-multilib]</span><br><span class=\"line\">SigLevel = Never</span><br><span class=\"line\">Server= http://bohoomil.com/repo/multilib/$arch</span><br><span class=\"line\"></span><br><span class=\"line\">[infinality-bundle-fonts]</span><br><span class=\"line\">SigLevel = Never</span><br><span class=\"line\">Server= http://bohoomil.com/repo/fonts</span><br></pre></td></tr></table></figure>\n<p>然后保存，并执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syu infinality-bundle infinality-bundle-multilib ibfonts-meta-extended</span><br></pre></td></tr></table></figure></p>\n<p>因为是打补丁，所以会出现很多冲突，全部选择删除</p>\n<p><strong>Q：添加WIN7启动项</strong></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S os-prober</span><br><span class=\"line\">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n<p>可能出现“无法获取某些文件”，便多重试几次，这个网站是外国的，网速连接慢……（竹子说他曾经重试了十次）</p>\n<hr>\n<p>推荐将win下的字体复制到“.fonts”。路径为“/home/你的用户名/.fonts”，该文件夹默认隐藏（“.”就是隐藏的意思）然后刷新字体缓存，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fc-cache -fsv</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q：GNOME3.18的桌面，将任务放到右上角（如UBUNTU一样）</strong></p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt topicon</span><br></pre></td></tr></table></figure>\n<p>安装后，重启一下优化工具，“扩展-User themes”的上面就会出现“topicons”选项，启动它。<br>然后，键盘“alt+f2” ，输入“r”，回车。<br><strong>注：优化工具不会自动刷新的</strong></p>\n<hr>\n<p><strong>Q：安装DEEPIN桌面环境（参考“ WIKI.ARCHLINUX.ORG ”）搜索“ DEEPIN DESKTOP ENVIRONMENT ”</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S deepin deepin-extra</span><br></pre></td></tr></table></figure>\n<p><strong>注：启动Deepin 桌面环境，使用登录管理器</strong></p>\n<p>deepin默认lightdm greeter是lightdm-deepin-greeter，可通过pacman安装，安装后需编辑lightdm.conf:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure>\n<p>然后找到，并修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SeatDefaults]</span><br><span class=\"line\">…</span><br><span class=\"line\">greeter-session=lightdm-deepin-greeter</span><br></pre></td></tr></table></figure></p>\n<p>之后终端执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable lightdm -f</span><br></pre></td></tr></table></figure>\n<p>重启</p>\n<hr>\n<p>在进入deepin桌面后，可能出现设置部分英文现象。<br>终端执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/.pam_environment</span><br></pre></td></tr></table></figure></p>\n<p>把 <strong>en_US</strong>  改成 <strong>zh_CN</strong><br>两行都要，然后注销</p>\n<p><strong>Q：安装ZSH</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S zsh oh-my-zsh-git</span><br></pre></td></tr></table></figure>\n<p>安装完毕后会有让你cp一个文件，复制一下哪个命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/oh-my-zsh/zshrc ~/.zshrc</span><br></pre></td></tr></table></figure></p>\n<p>然后输入“ chsh ”<br>输入密码<br>输入“ /bin/zsh ”</p>\n<hr>\n<p>每次进入终端，输入zsh后，会出现“ ～ ” ，说明进入zsh了，双击tab可补全命令。</p>\n<p><strong>Q：删除base软件包组以外的所有软件包</strong></p>\n<p><a href=\"https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">参考网址</a>#.E5.88.A0.E9.99.A4base.E8.BD.AF.E4.BB.B6.E5.8C.85.E7.BB.84.E4.BB.A5.E5.A4.96.E7.9A.84.E6.89.80.E6.9C.89.E8.BD.AF.E4.BB.B6.E5.8C.85)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Rs $(comm -23 &lt;(pacman -Qeq|sort) &lt;((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d &apos; &apos; -f 1))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://bbs.archlinux.org/viewtopic.php?id=130176\" target=\"_blank\" rel=\"noopener\">帖子来源</a></p>\n</blockquote>\n<p>Q：激活“ KEYBOARD SHORTCUTS ”(传说中的魔术键)，参考“<a href=\"https://wiki.archlinux.org/index.php/Keyboard_shortcuts\" target=\"_blank\" rel=\"noopener\">HTTPS://WIKI.ARCHLINUX.ORG/INDEX.PHP/KEYBOARD_SHORTCUTS</a>”**</p>\n<p>终端输入将临时启用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl kernel.sysrq=1</span><br></pre></td></tr></table></figure>\n<p>或是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo “1” &gt; /proc/sys/kernel/sysrq</span><br></pre></td></tr></table></figure></p>\n<p>希望在系统启动时就开启，编辑“/etc/sysctl.d/99-sysctl.conf”文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/sysctl.d/99-sysctl.conf</span><br></pre></td></tr></table></figure></p>\n<p>文件中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kernel.sysrq = 1</span><br></pre></td></tr></table></figure></p>\n<p>保存</p>\n<p><strong>注：</strong>记住这个激活命令的通用口诀是 “Reboot Even If System Utterly Broken” (或者”REISUB”)。</p>\n<p> 最后更新于2016年3月15日</p>\n"},{"title":"docker命令","date":"2017-01-20T08:01:00.000Z","_content":"\n\ncommand:\n>docker pull  //get a image by dockerHub\n\n>docker build  //create image\n\n>docker images  //show all images in your pc\n\n>docker run    // run a container\n\n>docker ps  //show containers  if then running now\n\n>docker rm   //delete container \n\n>docker rmi  //delete image\n\n>docker cp   // copy the file  between the host and container\n\n>docker commit  // save a image when the image been modify\n\n\n\n\n\n\n\n\n","source":"_posts/docker/docker.md","raw":"---\ntitle: docker命令\ndate:  2017.01.20 16:01\ntags: docker linux\ncategories: Program\n---\n\n\ncommand:\n>docker pull  //get a image by dockerHub\n\n>docker build  //create image\n\n>docker images  //show all images in your pc\n\n>docker run    // run a container\n\n>docker ps  //show containers  if then running now\n\n>docker rm   //delete container \n\n>docker rmi  //delete image\n\n>docker cp   // copy the file  between the host and container\n\n>docker commit  // save a image when the image been modify\n\n\n\n\n\n\n\n\n","slug":"docker/docker","published":1,"updated":"2018-06-28T14:12:11.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc3h0007m4cmra4vkxoc","content":"<p>command:</p>\n<blockquote>\n<p>docker pull  //get a image by dockerHub</p>\n</blockquote>\n<blockquote>\n<p>docker build  //create image</p>\n</blockquote>\n<blockquote>\n<p>docker images  //show all images in your pc</p>\n</blockquote>\n<blockquote>\n<p>docker run    // run a container</p>\n</blockquote>\n<blockquote>\n<p>docker ps  //show containers  if then running now</p>\n</blockquote>\n<blockquote>\n<p>docker rm   //delete container </p>\n</blockquote>\n<blockquote>\n<p>docker rmi  //delete image</p>\n</blockquote>\n<blockquote>\n<p>docker cp   // copy the file  between the host and container</p>\n</blockquote>\n<blockquote>\n<p>docker commit  // save a image when the image been modify</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>command:</p>\n<blockquote>\n<p>docker pull  //get a image by dockerHub</p>\n</blockquote>\n<blockquote>\n<p>docker build  //create image</p>\n</blockquote>\n<blockquote>\n<p>docker images  //show all images in your pc</p>\n</blockquote>\n<blockquote>\n<p>docker run    // run a container</p>\n</blockquote>\n<blockquote>\n<p>docker ps  //show containers  if then running now</p>\n</blockquote>\n<blockquote>\n<p>docker rm   //delete container </p>\n</blockquote>\n<blockquote>\n<p>docker rmi  //delete image</p>\n</blockquote>\n<blockquote>\n<p>docker cp   // copy the file  between the host and container</p>\n</blockquote>\n<blockquote>\n<p>docker commit  // save a image when the image been modify</p>\n</blockquote>\n"},{"title":"arch分swap","date":"2016-03-06T11:30:00.000Z","_content":"\n安装gparted在硬盘里划出一定量的空间，并格式化为swap（linux-swap）\n\n```\nsudo swapon /dev/sda9    //把我的swap挂在上\nsudo mv /etc/fstab /etc/fstab.bak && sudo genfstab / > /etc/fstab\n```\n\n**注：若出现“ mv：无法获取’/etc/fstab’的文件状态(stat):没有那个文件或目录 ”，则直接执行“&&”后面的语句……若还是出现相关问题**\n```\nyaourt -S arch-install-scripts\n```\n\n之后\n```\ngenfstab -U -p / >> /etc/fstab\ncat /etc/fstab\n```\n\n![ ](http://upload-images.jianshu.io/upload_images/1171873-a1462beff9a45e15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n重启，出现开机错误（前提：我的boot不是单独分的）\n![](http://upload-images.jianshu.io/upload_images/1171873-df7214833d0582f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n在grub倒计时时按下e，进入编辑模式\n![  ](http://upload-images.jianshu.io/upload_images/1171873-ccab91cfa0b09b76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n倒数第三行，**rw后面，空格，写上  init=/bin/bash ** ，F10引导\nnano /etc/fstab\n```\n\n然后把中间的两行gvf用#注释掉，留下一个“ / ”和最后一个swap\n\nctrl+alt+del  重启\n","source":"_posts/linux/arch分swap.md","raw":"---\ntitle: arch分swap\ndate:  2016.03.06 19:30\ntags: linux\ncategories: 系统\n---\n\n安装gparted在硬盘里划出一定量的空间，并格式化为swap（linux-swap）\n\n```\nsudo swapon /dev/sda9    //把我的swap挂在上\nsudo mv /etc/fstab /etc/fstab.bak && sudo genfstab / > /etc/fstab\n```\n\n**注：若出现“ mv：无法获取’/etc/fstab’的文件状态(stat):没有那个文件或目录 ”，则直接执行“&&”后面的语句……若还是出现相关问题**\n```\nyaourt -S arch-install-scripts\n```\n\n之后\n```\ngenfstab -U -p / >> /etc/fstab\ncat /etc/fstab\n```\n\n![ ](http://upload-images.jianshu.io/upload_images/1171873-a1462beff9a45e15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n重启，出现开机错误（前提：我的boot不是单独分的）\n![](http://upload-images.jianshu.io/upload_images/1171873-df7214833d0582f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n在grub倒计时时按下e，进入编辑模式\n![  ](http://upload-images.jianshu.io/upload_images/1171873-ccab91cfa0b09b76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n倒数第三行，**rw后面，空格，写上  init=/bin/bash ** ，F10引导\nnano /etc/fstab\n```\n\n然后把中间的两行gvf用#注释掉，留下一个“ / ”和最后一个swap\n\nctrl+alt+del  重启\n","slug":"linux/arch分swap","published":1,"updated":"2018-06-28T14:12:11.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc3t000am4cmaix8wi64","content":"<p>安装gparted在硬盘里划出一定量的空间，并格式化为swap（linux-swap）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapon /dev/sda9    //把我的swap挂在上</span><br><span class=\"line\">sudo mv /etc/fstab /etc/fstab.bak &amp;&amp; sudo genfstab / &gt; /etc/fstab</span><br></pre></td></tr></table></figure>\n<p><strong>注：若出现“ mv：无法获取’/etc/fstab’的文件状态(stat):没有那个文件或目录 ”，则直接执行“&amp;&amp;”后面的语句……若还是出现相关问题</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S arch-install-scripts</span><br></pre></td></tr></table></figure></p>\n<p>之后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genfstab -U -p / &gt;&gt; /etc/fstab</span><br><span class=\"line\">cat /etc/fstab</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a1462beff9a45e15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></p>\n<p>重启，出现开机错误（前提：我的boot不是单独分的）<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-df7214833d0582f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在grub倒计时时按下e，进入编辑模式<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-ccab91cfa0b09b76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"  \"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">倒数第三行，**rw后面，空格，写上  init=/bin/bash ** ，F10引导</span><br><span class=\"line\">nano /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>然后把中间的两行gvf用#注释掉，留下一个“ / ”和最后一个swap</p>\n<p>ctrl+alt+del  重启</p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装gparted在硬盘里划出一定量的空间，并格式化为swap（linux-swap）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapon /dev/sda9    //把我的swap挂在上</span><br><span class=\"line\">sudo mv /etc/fstab /etc/fstab.bak &amp;&amp; sudo genfstab / &gt; /etc/fstab</span><br></pre></td></tr></table></figure>\n<p><strong>注：若出现“ mv：无法获取’/etc/fstab’的文件状态(stat):没有那个文件或目录 ”，则直接执行“&amp;&amp;”后面的语句……若还是出现相关问题</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaourt -S arch-install-scripts</span><br></pre></td></tr></table></figure></p>\n<p>之后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genfstab -U -p / &gt;&gt; /etc/fstab</span><br><span class=\"line\">cat /etc/fstab</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a1462beff9a45e15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></p>\n<p>重启，出现开机错误（前提：我的boot不是单独分的）<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-df7214833d0582f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在grub倒计时时按下e，进入编辑模式<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-ccab91cfa0b09b76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"  \"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">倒数第三行，**rw后面，空格，写上  init=/bin/bash ** ，F10引导</span><br><span class=\"line\">nano /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>然后把中间的两行gvf用#注释掉，留下一个“ / ”和最后一个swap</p>\n<p>ctrl+alt+del  重启</p>\n"},{"title":"arch打包sogou","date":"2016-03-04T13:39:00.000Z","_content":"\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-6b9207c12b5b1acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/)\n\n[2016年3月4日](http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/) / [芽蜜](http://yamida.org/author/rabbit/) / [2 COMMENTS](http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/#comments)\n\n几天前，搜狗输入法不知发什么疯了。尝试重装sogou的时候发现yaourt不到sogou。在竹子的帮助下，学会了打包。这以后应该会方便多了吧～\n\n在[arch网站](https://www.archlinux.org/)里面找到[aur](https://aur.archlinux.org/)页面，搜sogou\n\n![](http://upload-images.jianshu.io/upload_images/1171873-864fd484ef046f03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n***\n![](http://upload-images.jianshu.io/upload_images/1171873-48525df6a6ab9650.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n\n点击“  [Download snapshot](https://aur.archlinux.org/cgit/aur.git/snapshot/fcitx-sogoupinyin.tar.gz)  ”\n\n![](http://upload-images.jianshu.io/upload_images/1171873-f720721281390d3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下载后解压……\n\n>题外话：当时电脑还不能解压tar\n>yaourt -S file-roller   //这是gnome的归档管理器\n\n>![](http://upload-images.jianshu.io/upload_images/1171873-165e55638ef02c7b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n安装上所有的依赖，可奇怪的还是不能用，双击解压包后鼠标一直转啊转，然后就没有然后了\n解压命令：tar -xzvf 文件名\n//文件名用tab补全，这样不容易出错\n```\n解压后，\n```\nmakepkg     //打包\nsudo pacman -U 文件名.tar   //安装\n```\n\n装好搜狗了。第二次重装系统的过程也是不顺利，输入法一直不听话……（干嘛？～我就要用搜狗，你管我啊～）\n搜狗问题，见文《[sogou输入配置](http://www.jianshu.com/p/f2bbff538856)》\n> 这篇的重点不是装搜狗，而是如何打包……\n","source":"_posts/linux/arch打包sogou.md","raw":"---\ntitle: arch打包sogou\ndate:  2016.03.04 21:39\ntags: linux sogou\ncategories: 系统 Linux\n---\n\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-6b9207c12b5b1acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/)\n\n[2016年3月4日](http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/) / [芽蜜](http://yamida.org/author/rabbit/) / [2 COMMENTS](http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/#comments)\n\n几天前，搜狗输入法不知发什么疯了。尝试重装sogou的时候发现yaourt不到sogou。在竹子的帮助下，学会了打包。这以后应该会方便多了吧～\n\n在[arch网站](https://www.archlinux.org/)里面找到[aur](https://aur.archlinux.org/)页面，搜sogou\n\n![](http://upload-images.jianshu.io/upload_images/1171873-864fd484ef046f03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n***\n![](http://upload-images.jianshu.io/upload_images/1171873-48525df6a6ab9650.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n\n点击“  [Download snapshot](https://aur.archlinux.org/cgit/aur.git/snapshot/fcitx-sogoupinyin.tar.gz)  ”\n\n![](http://upload-images.jianshu.io/upload_images/1171873-f720721281390d3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下载后解压……\n\n>题外话：当时电脑还不能解压tar\n>yaourt -S file-roller   //这是gnome的归档管理器\n\n>![](http://upload-images.jianshu.io/upload_images/1171873-165e55638ef02c7b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n安装上所有的依赖，可奇怪的还是不能用，双击解压包后鼠标一直转啊转，然后就没有然后了\n解压命令：tar -xzvf 文件名\n//文件名用tab补全，这样不容易出错\n```\n解压后，\n```\nmakepkg     //打包\nsudo pacman -U 文件名.tar   //安装\n```\n\n装好搜狗了。第二次重装系统的过程也是不顺利，输入法一直不听话……（干嘛？～我就要用搜狗，你管我啊～）\n搜狗问题，见文《[sogou输入配置](http://www.jianshu.com/p/f2bbff538856)》\n> 这篇的重点不是装搜狗，而是如何打包……\n","slug":"linux/arch打包sogou","published":1,"updated":"2018-06-28T14:12:11.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc3v000bm4cmc6tgmihk","content":"<p><a href=\"http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-6b9207c12b5b1acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p><a href=\"http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/\" target=\"_blank\" rel=\"noopener\">2016年3月4日</a> / <a href=\"http://yamida.org/author/rabbit/\" target=\"_blank\" rel=\"noopener\">芽蜜</a> / <a href=\"http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/#comments\" target=\"_blank\" rel=\"noopener\">2 COMMENTS</a></p>\n<p>几天前，搜狗输入法不知发什么疯了。尝试重装sogou的时候发现yaourt不到sogou。在竹子的帮助下，学会了打包。这以后应该会方便多了吧～</p>\n<p>在<a href=\"https://www.archlinux.org/\" target=\"_blank\" rel=\"noopener\">arch网站</a>里面找到<a href=\"https://aur.archlinux.org/\" target=\"_blank\" rel=\"noopener\">aur</a>页面，搜sogou</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-864fd484ef046f03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-48525df6a6ab9650.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>点击“  <a href=\"https://aur.archlinux.org/cgit/aur.git/snapshot/fcitx-sogoupinyin.tar.gz\" target=\"_blank\" rel=\"noopener\">Download snapshot</a>  ”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f720721281390d3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>下载后解压……</p>\n<blockquote>\n<p>题外话：当时电脑还不能解压tar<br>yaourt -S file-roller   //这是gnome的归档管理器</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-165e55638ef02c7b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装上所有的依赖，可奇怪的还是不能用，双击解压包后鼠标一直转啊转，然后就没有然后了</span><br><span class=\"line\">解压命令：tar -xzvf 文件名</span><br><span class=\"line\">//文件名用tab补全，这样不容易出错</span><br></pre></td></tr></table></figure>\n<p>解压后，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">makepkg     //打包</span><br><span class=\"line\">sudo pacman -U 文件名.tar   //安装</span><br></pre></td></tr></table></figure></p>\n<p>装好搜狗了。第二次重装系统的过程也是不顺利，输入法一直不听话……（干嘛？～我就要用搜狗，你管我啊～）<br>搜狗问题，见文《<a href=\"http://www.jianshu.com/p/f2bbff538856\" target=\"_blank\" rel=\"noopener\">sogou输入配置</a>》</p>\n<blockquote>\n<p>这篇的重点不是装搜狗，而是如何打包……</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-6b9207c12b5b1acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p><a href=\"http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/\" target=\"_blank\" rel=\"noopener\">2016年3月4日</a> / <a href=\"http://yamida.org/author/rabbit/\" target=\"_blank\" rel=\"noopener\">芽蜜</a> / <a href=\"http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/#comments\" target=\"_blank\" rel=\"noopener\">2 COMMENTS</a></p>\n<p>几天前，搜狗输入法不知发什么疯了。尝试重装sogou的时候发现yaourt不到sogou。在竹子的帮助下，学会了打包。这以后应该会方便多了吧～</p>\n<p>在<a href=\"https://www.archlinux.org/\" target=\"_blank\" rel=\"noopener\">arch网站</a>里面找到<a href=\"https://aur.archlinux.org/\" target=\"_blank\" rel=\"noopener\">aur</a>页面，搜sogou</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-864fd484ef046f03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-48525df6a6ab9650.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>点击“  <a href=\"https://aur.archlinux.org/cgit/aur.git/snapshot/fcitx-sogoupinyin.tar.gz\" target=\"_blank\" rel=\"noopener\">Download snapshot</a>  ”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f720721281390d3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>下载后解压……</p>\n<blockquote>\n<p>题外话：当时电脑还不能解压tar<br>yaourt -S file-roller   //这是gnome的归档管理器</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-165e55638ef02c7b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装上所有的依赖，可奇怪的还是不能用，双击解压包后鼠标一直转啊转，然后就没有然后了</span><br><span class=\"line\">解压命令：tar -xzvf 文件名</span><br><span class=\"line\">//文件名用tab补全，这样不容易出错</span><br></pre></td></tr></table></figure>\n<p>解压后，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">makepkg     //打包</span><br><span class=\"line\">sudo pacman -U 文件名.tar   //安装</span><br></pre></td></tr></table></figure></p>\n<p>装好搜狗了。第二次重装系统的过程也是不顺利，输入法一直不听话……（干嘛？～我就要用搜狗，你管我啊～）<br>搜狗问题，见文《<a href=\"http://www.jianshu.com/p/f2bbff538856\" target=\"_blank\" rel=\"noopener\">sogou输入配置</a>》</p>\n<blockquote>\n<p>这篇的重点不是装搜狗，而是如何打包……</p>\n</blockquote>\n"},{"title":"PPPOE上网","date":"2016-04-07T13:39:00.000Z","_content":"\n*韶华易逝，望能有松的坚强，山的稳重*\n***\n好吧～我承认这很傻逼，现在才知道怎么越过学校上网客户端上网。因为之前总觉得这些客户端都很高大上的，管着几千几万学生。\n\n几天前一网友得知我是用pppoe拨号，语音里大笑  “这很简单啊～自己弄去”\n\n在学校开网以后会得到一个拨号器软件—— “蝴蝶” ，安装中还需依赖插件——“ [winpcap](https://en.wikipedia.org/wiki/Pcap#WinPcap) ”，才能上网。\n\n国内大部分高校均采用IEEE 802.1X认证方式对校内宽带接入进行认证，在802.1X认证下，一般的路由器无法使用。\n\n>笔者学校称之为 “ 蝴蝶 ”……类似的有安腾、安朗、锐捷……（某朋友竟然无聊到跟我争论广东地区只用“ 锐捷 ”……-_-||  ……）\n\n@_@……我arch大法就这样复活了\n\n\n```\npppoe-setup     //设置pppoe\n输入账号、\n网卡名字、\nDNS、\n密码、\n0-2 （我设置“ 0 ”）、\ny\npppoe-start    //启动\n…Connected!【一般没说超时（timeout）就是好了】\n```\n\n>看网上的说明，说是要装“ rp-pppoe ”，可是我装了也没什么用好像  -_-||\n（呃，后来亲测还是要装的，不然连pppoe-setup都不能用——补充于20160515）\n\ngnome下设置\n“ 添加配置 ”\n![2016-04-07](http://upload-images.jianshu.io/upload_images/1171873-2489474018dcd8e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![2016-04-07-1](http://upload-images.jianshu.io/upload_images/1171873-6a05f5b9104869ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n做以记录～\n","source":"_posts/linux/pppoe上网.md","raw":"---\ntitle: PPPOE上网\ndate:  2016.04.07 21:39\ntags: linux 网络\ncategories: 系统\n---\n\n*韶华易逝，望能有松的坚强，山的稳重*\n***\n好吧～我承认这很傻逼，现在才知道怎么越过学校上网客户端上网。因为之前总觉得这些客户端都很高大上的，管着几千几万学生。\n\n几天前一网友得知我是用pppoe拨号，语音里大笑  “这很简单啊～自己弄去”\n\n在学校开网以后会得到一个拨号器软件—— “蝴蝶” ，安装中还需依赖插件——“ [winpcap](https://en.wikipedia.org/wiki/Pcap#WinPcap) ”，才能上网。\n\n国内大部分高校均采用IEEE 802.1X认证方式对校内宽带接入进行认证，在802.1X认证下，一般的路由器无法使用。\n\n>笔者学校称之为 “ 蝴蝶 ”……类似的有安腾、安朗、锐捷……（某朋友竟然无聊到跟我争论广东地区只用“ 锐捷 ”……-_-||  ……）\n\n@_@……我arch大法就这样复活了\n\n\n```\npppoe-setup     //设置pppoe\n输入账号、\n网卡名字、\nDNS、\n密码、\n0-2 （我设置“ 0 ”）、\ny\npppoe-start    //启动\n…Connected!【一般没说超时（timeout）就是好了】\n```\n\n>看网上的说明，说是要装“ rp-pppoe ”，可是我装了也没什么用好像  -_-||\n（呃，后来亲测还是要装的，不然连pppoe-setup都不能用——补充于20160515）\n\ngnome下设置\n“ 添加配置 ”\n![2016-04-07](http://upload-images.jianshu.io/upload_images/1171873-2489474018dcd8e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![2016-04-07-1](http://upload-images.jianshu.io/upload_images/1171873-6a05f5b9104869ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n做以记录～\n","slug":"linux/pppoe上网","published":1,"updated":"2018-06-28T14:12:11.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc3x000cm4cmzfh06b7j","content":"<p><em>韶华易逝，望能有松的坚强，山的稳重</em></p>\n<hr>\n<p>好吧～我承认这很傻逼，现在才知道怎么越过学校上网客户端上网。因为之前总觉得这些客户端都很高大上的，管着几千几万学生。</p>\n<p>几天前一网友得知我是用pppoe拨号，语音里大笑  “这很简单啊～自己弄去”</p>\n<p>在学校开网以后会得到一个拨号器软件—— “蝴蝶” ，安装中还需依赖插件——“ <a href=\"https://en.wikipedia.org/wiki/Pcap#WinPcap\" target=\"_blank\" rel=\"noopener\">winpcap</a> ”，才能上网。</p>\n<p>国内大部分高校均采用IEEE 802.1X认证方式对校内宽带接入进行认证，在802.1X认证下，一般的路由器无法使用。</p>\n<blockquote>\n<p>笔者学校称之为 “ 蝴蝶 ”……类似的有安腾、安朗、锐捷……（某朋友竟然无聊到跟我争论广东地区只用“ 锐捷 ”……-_-||  ……）</p>\n</blockquote>\n<p>@_@……我arch大法就这样复活了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pppoe-setup     //设置pppoe</span><br><span class=\"line\">输入账号、</span><br><span class=\"line\">网卡名字、</span><br><span class=\"line\">DNS、</span><br><span class=\"line\">密码、</span><br><span class=\"line\">0-2 （我设置“ 0 ”）、</span><br><span class=\"line\">y</span><br><span class=\"line\">pppoe-start    //启动</span><br><span class=\"line\">…Connected!【一般没说超时（timeout）就是好了】</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看网上的说明，说是要装“ rp-pppoe ”，可是我装了也没什么用好像  -_-||<br>（呃，后来亲测还是要装的，不然连pppoe-setup都不能用——补充于20160515）</p>\n</blockquote>\n<p>gnome下设置<br>“ 添加配置 ”<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-2489474018dcd8e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2016-04-07\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-6a05f5b9104869ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2016-04-07-1\"></p>\n<p>做以记录～</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>韶华易逝，望能有松的坚强，山的稳重</em></p>\n<hr>\n<p>好吧～我承认这很傻逼，现在才知道怎么越过学校上网客户端上网。因为之前总觉得这些客户端都很高大上的，管着几千几万学生。</p>\n<p>几天前一网友得知我是用pppoe拨号，语音里大笑  “这很简单啊～自己弄去”</p>\n<p>在学校开网以后会得到一个拨号器软件—— “蝴蝶” ，安装中还需依赖插件——“ <a href=\"https://en.wikipedia.org/wiki/Pcap#WinPcap\" target=\"_blank\" rel=\"noopener\">winpcap</a> ”，才能上网。</p>\n<p>国内大部分高校均采用IEEE 802.1X认证方式对校内宽带接入进行认证，在802.1X认证下，一般的路由器无法使用。</p>\n<blockquote>\n<p>笔者学校称之为 “ 蝴蝶 ”……类似的有安腾、安朗、锐捷……（某朋友竟然无聊到跟我争论广东地区只用“ 锐捷 ”……-_-||  ……）</p>\n</blockquote>\n<p>@_@……我arch大法就这样复活了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pppoe-setup     //设置pppoe</span><br><span class=\"line\">输入账号、</span><br><span class=\"line\">网卡名字、</span><br><span class=\"line\">DNS、</span><br><span class=\"line\">密码、</span><br><span class=\"line\">0-2 （我设置“ 0 ”）、</span><br><span class=\"line\">y</span><br><span class=\"line\">pppoe-start    //启动</span><br><span class=\"line\">…Connected!【一般没说超时（timeout）就是好了】</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看网上的说明，说是要装“ rp-pppoe ”，可是我装了也没什么用好像  -_-||<br>（呃，后来亲测还是要装的，不然连pppoe-setup都不能用——补充于20160515）</p>\n</blockquote>\n<p>gnome下设置<br>“ 添加配置 ”<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-2489474018dcd8e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2016-04-07\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-6a05f5b9104869ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2016-04-07-1\"></p>\n<p>做以记录～</p>\n"},{"title":"sogou输入配置","date":"2016-09-07T13:39:00.000Z","_content":"\n\n[![-1982943483](http://upload-images.jianshu.io/upload_images/1171873-7bda27d363237693.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/)\n\n[2016年3月7日](http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/) / [芽蜜](http://yamida.org/author/rabbit/) / [1 COMMENT](http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/#comments)\n\n参考“[arch的wiki词条fctix](https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))”\n\n装完sogou后，装上“ fctix-im ”“ fctix-qt5 ”。\n\n在~.xprofile，~.bashrc，~.zshrc里面都写上以下三行代码【这里的”~”是指“/home/用户名/”下的，之前弄成在”/”下了，怪不得一直找不到.xprofile文件】(手动滑稽～)\n\n>export GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=”@im=fcitx”\n\n![](http://upload-images.jianshu.io/upload_images/1171873-4d080c26087320c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n>第二次装遇到最大的问题就是这个，哎～\n\n","source":"_posts/linux/sogou输入配置.md","raw":"---\ntitle: sogou输入配置\ndate:  2016.09.07 21:39\ntags: linux sogou\ncategories: 系统 Linux\n---\n\n\n[![-1982943483](http://upload-images.jianshu.io/upload_images/1171873-7bda27d363237693.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/)\n\n[2016年3月7日](http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/) / [芽蜜](http://yamida.org/author/rabbit/) / [1 COMMENT](http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/#comments)\n\n参考“[arch的wiki词条fctix](https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))”\n\n装完sogou后，装上“ fctix-im ”“ fctix-qt5 ”。\n\n在~.xprofile，~.bashrc，~.zshrc里面都写上以下三行代码【这里的”~”是指“/home/用户名/”下的，之前弄成在”/”下了，怪不得一直找不到.xprofile文件】(手动滑稽～)\n\n>export GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=”@im=fcitx”\n\n![](http://upload-images.jianshu.io/upload_images/1171873-4d080c26087320c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n>第二次装遇到最大的问题就是这个，哎～\n\n","slug":"linux/sogou输入配置","published":1,"updated":"2018-06-28T14:12:11.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc42000gm4cmz7gcbd4q","content":"<p><a href=\"http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-7bda27d363237693.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"-1982943483\"></a></p>\n<p><a href=\"http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/\" target=\"_blank\" rel=\"noopener\">2016年3月7日</a> / <a href=\"http://yamida.org/author/rabbit/\" target=\"_blank\" rel=\"noopener\">芽蜜</a> / <a href=\"http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/#comments\" target=\"_blank\" rel=\"noopener\">1 COMMENT</a></p>\n<p>参考“<a href=\"https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">arch的wiki词条fctix</a>)”</p>\n<p>装完sogou后，装上“ fctix-im ”“ fctix-qt5 ”。</p>\n<p>在~.xprofile，~.bashrc，~.zshrc里面都写上以下三行代码【这里的”~”是指“/home/用户名/”下的，之前弄成在”/”下了，怪不得一直找不到.xprofile文件】(手动滑稽～)</p>\n<blockquote>\n<p>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XMODIFIERS=”@im=fcitx”</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-4d080c26087320c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>第二次装遇到最大的问题就是这个，哎～</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-7bda27d363237693.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"-1982943483\"></a></p>\n<p><a href=\"http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/\" target=\"_blank\" rel=\"noopener\">2016年3月7日</a> / <a href=\"http://yamida.org/author/rabbit/\" target=\"_blank\" rel=\"noopener\">芽蜜</a> / <a href=\"http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/#comments\" target=\"_blank\" rel=\"noopener\">1 COMMENT</a></p>\n<p>参考“<a href=\"https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">arch的wiki词条fctix</a>)”</p>\n<p>装完sogou后，装上“ fctix-im ”“ fctix-qt5 ”。</p>\n<p>在~.xprofile，~.bashrc，~.zshrc里面都写上以下三行代码【这里的”~”是指“/home/用户名/”下的，之前弄成在”/”下了，怪不得一直找不到.xprofile文件】(手动滑稽～)</p>\n<blockquote>\n<p>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XMODIFIERS=”@im=fcitx”</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-4d080c26087320c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>第二次装遇到最大的问题就是这个，哎～</p>\n</blockquote>\n"},{"title":"ubuntu修改SSH端口","date":"2016-09-11T13:25:00.000Z","_content":"\n\n修改**/etc/ssh/sshd_config**，在***Port 22***下添加你的端口\n\n```\nPort 22\n```\nPort YOUR_PORT\n\n修改/etc/ssh/ssh_config，在Host *下添加你的端口\n```\nHost *\nPort 22\nPort YOUR_PORT\n\\#   ForwardAgent no\n```\n\n重启ssh\n\n```service ssh restart```\n\n再ssh连接新的端口，成功连接后再修改上面的配置把22端口注释掉\n再在本机~/.ssh/下新建一个config文件，文件内容为：\n```\nHost YOUR_HOST\n    User YOUR_USER_NAME\n    Port YOUR_NEW_PORT\n```\n这样下次连接就只需要**ssh YOUR_HOST**就ok了。\n\n修改ssh默认端口后git的一些远程操作会失败，解决办法也是修改config文件：\n\n```\nHost github.com\nHostName github.com\nPort 22\nHost bitbucket.org\nHostName bitbucket.org\nPort 22\n```\n原文摘自“[阿小信的博客](http://note.axiaoxin.com/contents/change-ubuntu-ssh-port.html)”\n***\n中午朋友说我服务器被人攻击，还成功登录了。丫的，密码设linux就是在作死啊……\n","source":"_posts/linux/ubuntu修改ssh端口.md","raw":"---\ntitle: ubuntu修改SSH端口\ndate:  2016.09.11 21:25\ntags: linux ssh\ncategories: 系统 Linux\n---\n\n\n修改**/etc/ssh/sshd_config**，在***Port 22***下添加你的端口\n\n```\nPort 22\n```\nPort YOUR_PORT\n\n修改/etc/ssh/ssh_config，在Host *下添加你的端口\n```\nHost *\nPort 22\nPort YOUR_PORT\n\\#   ForwardAgent no\n```\n\n重启ssh\n\n```service ssh restart```\n\n再ssh连接新的端口，成功连接后再修改上面的配置把22端口注释掉\n再在本机~/.ssh/下新建一个config文件，文件内容为：\n```\nHost YOUR_HOST\n    User YOUR_USER_NAME\n    Port YOUR_NEW_PORT\n```\n这样下次连接就只需要**ssh YOUR_HOST**就ok了。\n\n修改ssh默认端口后git的一些远程操作会失败，解决办法也是修改config文件：\n\n```\nHost github.com\nHostName github.com\nPort 22\nHost bitbucket.org\nHostName bitbucket.org\nPort 22\n```\n原文摘自“[阿小信的博客](http://note.axiaoxin.com/contents/change-ubuntu-ssh-port.html)”\n***\n中午朋友说我服务器被人攻击，还成功登录了。丫的，密码设linux就是在作死啊……\n","slug":"linux/ubuntu修改ssh端口","published":1,"updated":"2018-06-28T14:12:11.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc45000hm4cmwottf6x4","content":"<p>修改<strong>/etc/ssh/sshd_config</strong>，在<strong><em>Port 22</em></strong>下添加你的端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Port 22</span><br></pre></td></tr></table></figure>\n<p>Port YOUR_PORT</p>\n<p>修改/etc/ssh/ssh_config，在Host *下添加你的端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host *</span><br><span class=\"line\">Port 22</span><br><span class=\"line\">Port YOUR_PORT</span><br><span class=\"line\">\\#   ForwardAgent no</span><br></pre></td></tr></table></figure></p>\n<p>重启ssh</p>\n<figure class=\"highlight plain\"><figcaption><span>ssh restart```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">再ssh连接新的端口，成功连接后再修改上面的配置把22端口注释掉</span><br><span class=\"line\">再在本机~/.ssh/下新建一个config文件，文件内容为：</span><br></pre></td></tr></table></figure>\n<p>Host YOUR_HOST<br>    User YOUR_USER_NAME<br>    Port YOUR_NEW_PORT<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这样下次连接就只需要**ssh YOUR_HOST**就ok了。</span><br><span class=\"line\"></span><br><span class=\"line\">修改ssh默认端口后git的一些远程操作会失败，解决办法也是修改config文件：</span><br></pre></td></tr></table></figure></p>\n<p>Host github.com<br>HostName github.com<br>Port 22<br>Host bitbucket.org<br>HostName bitbucket.org<br>Port 22<br><code>`</code><br>原文摘自“<a href=\"http://note.axiaoxin.com/contents/change-ubuntu-ssh-port.html\" target=\"_blank\" rel=\"noopener\">阿小信的博客</a>”</p>\n<hr>\n<p>中午朋友说我服务器被人攻击，还成功登录了。丫的，密码设linux就是在作死啊……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>修改<strong>/etc/ssh/sshd_config</strong>，在<strong><em>Port 22</em></strong>下添加你的端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Port 22</span><br></pre></td></tr></table></figure>\n<p>Port YOUR_PORT</p>\n<p>修改/etc/ssh/ssh_config，在Host *下添加你的端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host *</span><br><span class=\"line\">Port 22</span><br><span class=\"line\">Port YOUR_PORT</span><br><span class=\"line\">\\#   ForwardAgent no</span><br></pre></td></tr></table></figure></p>\n<p>重启ssh</p>\n<figure class=\"highlight plain\"><figcaption><span>ssh restart```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">再ssh连接新的端口，成功连接后再修改上面的配置把22端口注释掉</span><br><span class=\"line\">再在本机~/.ssh/下新建一个config文件，文件内容为：</span><br></pre></td></tr></table></figure>\n<p>Host YOUR_HOST<br>    User YOUR_USER_NAME<br>    Port YOUR_NEW_PORT<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这样下次连接就只需要**ssh YOUR_HOST**就ok了。</span><br><span class=\"line\"></span><br><span class=\"line\">修改ssh默认端口后git的一些远程操作会失败，解决办法也是修改config文件：</span><br></pre></td></tr></table></figure></p>\n<p>Host github.com<br>HostName github.com<br>Port 22<br>Host bitbucket.org<br>HostName bitbucket.org<br>Port 22<br><code>`</code><br>原文摘自“<a href=\"http://note.axiaoxin.com/contents/change-ubuntu-ssh-port.html\" target=\"_blank\" rel=\"noopener\">阿小信的博客</a>”</p>\n<hr>\n<p>中午朋友说我服务器被人攻击，还成功登录了。丫的，密码设linux就是在作死啊……</p>\n"},{"_content":"\n\n[jib Official：GoogleContainerTools/jib](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib)\n\n\n[本文示例完整demo github地址 github.com/moxingwang/…](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmoxingwang%2Fjib)\n\n\n想要了解并且使用jib，首先你得知道或者使用过docker，在这个基础上才能够明白jib是干什么得，解决了什么问题。\n\n首先我们先看一个例子，如何将一个spring-boot项目简单容器化，如果你从未操作过，可以动手自己实现，或者仔细阅读这篇文章[第一个 spring Boot 应用通过Docker 来实现构建、运行、发布](https://link.juejin.im/?target=https%3A%2F%2Fblog.csdn.net%2Fu010046908%2Farticle%2Fdetails%2F56008445)。你可能发现如果需要把一个java项目容器化这是一个麻烦和相对复杂的过程，首先你需要编写dockerfile，然后在build dockefile，如过需要push到registries，还需要经过push操作。虽然build和push还是非常简单得。但是写一个dockerfile真的比较麻烦，学习成本也高，看看官网[Dockerfile reference](https://link.juejin.im/?target=https%3A%2F%2Fdocs.docker.com%2Fengine%2Freference%2Fbuilder%2F%23usage)就不想学了。那么有没有简单得办法呢，记住几个简单得命令就可以运行了，如同‘mvn spring-boot:run’这么简单得命令，这个时候jib出场了，他就是来完成这个伟大得使命。\n如果你还没明白jib是用来做什么事情得，推荐你阅读[谷歌开源Java镜像构建工具Jib](https://link.juejin.im/?target=http%3A%2F%2Fwww.infoq.com%2Fcn%2Fnews%2F2018%2F07%2Fgoogle-opensource-Jib)的前半部分，或者阅读[jib Official：GoogleContainerTools/jib](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib)。\n接下来主要介绍具体如何使用(maven的方式)。\n将java项目容器化push到registries\njib的引入非常简单，已maven plugin的方式集成到项目中，只需要在你的项目中引入下面代码即可\n```\n<plugin>\n    <groupId>com.google.cloud.tools</groupId>\n    <artifactId>jib-maven-plugin</artifactId>\n    <version>0.9.6</version>\n    <configuration>\n        <from>\n            <!--base image-->\n            <image>openjdk:alpine</image>\n        </from>\n        <to>\n            <!--<image>registry.cn-hangzhou.aliyuncs.com/m65536/jibtest</image>-->\n            <!--目标镜像registry地址，为了方便测试，你需要换成自己的地址，如果你的网络不好，可以选用国内加速器，比如阿里云的-->\n            <image>registry.hub.docker.com/moxingwang/jibtest</image>\n        </to>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>build</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n复制代码这只是一个最简单的配置，比如registry认证配置，jvm配置等等，可以参考github jib详细说明[jib/jib-maven-plugin/](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib%2Ftree%2Fmaster%2Fjib-maven-plugin%23from-object)。\n构建你的镜像\nmvn compile jib:build\n复制代码可能你刚刚运行玩这一步就出现错误，提示Unauthorized，不用担心，这个命令需要把构建出来的image commit并且push到你远程的registry（我这里是registry.hub.docker.com），你可以按照【常见错误1】的方法解决问题。\n如果你的网速慢一点可能会在最后步骤'Finalizing...',不过没有关系，稍微多等一会就ok，直到'BUILD SUCCESS'出现。最终一个完整的java project被实例化成镜像并且push到了registry里。接下来你可以测试刚刚完成push的镜像。\n打开[hub.docker.com/](https://link.juejin.im/?target=https%3A%2F%2Fhub.docker.com%2F),你会发现你的image已经构建成功。\n\n\ndocker使用镜像\n\ndocker run -it --rm -p8080:8080 registry.hub.docker.com/moxingwang/jibtest\n复制代码\n一个spring-boot的image这样就被启动成功了。本文示例demo中集成了swagger-iu, 项目启动成功后我们可以通过[http://localhost:8080/sw/swagger-ui.html](https://link.juejin.im/?target=http%3A%2F%2Flocalhost%3A8080%2Fsw%2Fswagger-ui.html)访问，可以成功在浏览器打开swagger。\n\n把镜像直接构建到本地docker中\n使用这种构建方式，首先你要确保本已经安装docker并且环境变量都配置正确，因为这种方式jib依赖docker 命令执行，你还需要保证已经启动服务（在terminal中执行 docker --version 能够正确返回）。\nmvn compile jib:dockerBuild\n复制代码接下来直接操作，首先查看本地已有images\ndocker iamges\n复制代码\n执行mvn compile jib:dockerBuild\n\n可以看到本地image已经build成功。可以直接启动使用\ndocker run -it --rm -p8080:8080 moxingwang/jibtest\n复制代码启动成功后同样可以直接访问http://localhost:8080/sw/swagger-ui.htmlswagger页面。\n常见错误\n常见错误1  Failed to execute goal com.google.cloud.tools:jib-maven-plugin:0.9.6:build (default-cli) on project jib: Build image failed, perhaps you should set a credential helper name with the configuration '' or set credentials for 'registry.hub.docker.com' in your Maven settings: Unauthorized for registry.hub.docker.com/moxingwang/jibtest: 401 Unauthorized\n\n当你从私有的registries pull或者push的时候需要认证机制。阅读官方说明按照步骤操作即可。[Authentication Methods](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib%2Fblob%2Fmaster%2Fjib-maven-plugin%2FREADME.md)。\n如果帮你本机已经按照docker，那么操作更简单，可以通过docker命令直接登陆registries，然后继续其他jib的操作。\n\n\nregistry.hub.docker.com\n\ndocker login --username=你的hub.docker的用户名 registry.hub.docker.com\n复制代码\nregistry.cn-hangzhou.aliyuncs.com\n\ndocker login --username=阿里云docker用户名 registry.cn-hangzhou.aliyuncs.com\n\n作者：m65536\n链接：https://juejin.im/post/5b4e9c316fb9a04fa01d39d6\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/搭建笔记/Jib构建你的第一个java镜像.md","raw":"\n\n[jib Official：GoogleContainerTools/jib](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib)\n\n\n[本文示例完整demo github地址 github.com/moxingwang/…](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmoxingwang%2Fjib)\n\n\n想要了解并且使用jib，首先你得知道或者使用过docker，在这个基础上才能够明白jib是干什么得，解决了什么问题。\n\n首先我们先看一个例子，如何将一个spring-boot项目简单容器化，如果你从未操作过，可以动手自己实现，或者仔细阅读这篇文章[第一个 spring Boot 应用通过Docker 来实现构建、运行、发布](https://link.juejin.im/?target=https%3A%2F%2Fblog.csdn.net%2Fu010046908%2Farticle%2Fdetails%2F56008445)。你可能发现如果需要把一个java项目容器化这是一个麻烦和相对复杂的过程，首先你需要编写dockerfile，然后在build dockefile，如过需要push到registries，还需要经过push操作。虽然build和push还是非常简单得。但是写一个dockerfile真的比较麻烦，学习成本也高，看看官网[Dockerfile reference](https://link.juejin.im/?target=https%3A%2F%2Fdocs.docker.com%2Fengine%2Freference%2Fbuilder%2F%23usage)就不想学了。那么有没有简单得办法呢，记住几个简单得命令就可以运行了，如同‘mvn spring-boot:run’这么简单得命令，这个时候jib出场了，他就是来完成这个伟大得使命。\n如果你还没明白jib是用来做什么事情得，推荐你阅读[谷歌开源Java镜像构建工具Jib](https://link.juejin.im/?target=http%3A%2F%2Fwww.infoq.com%2Fcn%2Fnews%2F2018%2F07%2Fgoogle-opensource-Jib)的前半部分，或者阅读[jib Official：GoogleContainerTools/jib](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib)。\n接下来主要介绍具体如何使用(maven的方式)。\n将java项目容器化push到registries\njib的引入非常简单，已maven plugin的方式集成到项目中，只需要在你的项目中引入下面代码即可\n```\n<plugin>\n    <groupId>com.google.cloud.tools</groupId>\n    <artifactId>jib-maven-plugin</artifactId>\n    <version>0.9.6</version>\n    <configuration>\n        <from>\n            <!--base image-->\n            <image>openjdk:alpine</image>\n        </from>\n        <to>\n            <!--<image>registry.cn-hangzhou.aliyuncs.com/m65536/jibtest</image>-->\n            <!--目标镜像registry地址，为了方便测试，你需要换成自己的地址，如果你的网络不好，可以选用国内加速器，比如阿里云的-->\n            <image>registry.hub.docker.com/moxingwang/jibtest</image>\n        </to>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>build</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n复制代码这只是一个最简单的配置，比如registry认证配置，jvm配置等等，可以参考github jib详细说明[jib/jib-maven-plugin/](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib%2Ftree%2Fmaster%2Fjib-maven-plugin%23from-object)。\n构建你的镜像\nmvn compile jib:build\n复制代码可能你刚刚运行玩这一步就出现错误，提示Unauthorized，不用担心，这个命令需要把构建出来的image commit并且push到你远程的registry（我这里是registry.hub.docker.com），你可以按照【常见错误1】的方法解决问题。\n如果你的网速慢一点可能会在最后步骤'Finalizing...',不过没有关系，稍微多等一会就ok，直到'BUILD SUCCESS'出现。最终一个完整的java project被实例化成镜像并且push到了registry里。接下来你可以测试刚刚完成push的镜像。\n打开[hub.docker.com/](https://link.juejin.im/?target=https%3A%2F%2Fhub.docker.com%2F),你会发现你的image已经构建成功。\n\n\ndocker使用镜像\n\ndocker run -it --rm -p8080:8080 registry.hub.docker.com/moxingwang/jibtest\n复制代码\n一个spring-boot的image这样就被启动成功了。本文示例demo中集成了swagger-iu, 项目启动成功后我们可以通过[http://localhost:8080/sw/swagger-ui.html](https://link.juejin.im/?target=http%3A%2F%2Flocalhost%3A8080%2Fsw%2Fswagger-ui.html)访问，可以成功在浏览器打开swagger。\n\n把镜像直接构建到本地docker中\n使用这种构建方式，首先你要确保本已经安装docker并且环境变量都配置正确，因为这种方式jib依赖docker 命令执行，你还需要保证已经启动服务（在terminal中执行 docker --version 能够正确返回）。\nmvn compile jib:dockerBuild\n复制代码接下来直接操作，首先查看本地已有images\ndocker iamges\n复制代码\n执行mvn compile jib:dockerBuild\n\n可以看到本地image已经build成功。可以直接启动使用\ndocker run -it --rm -p8080:8080 moxingwang/jibtest\n复制代码启动成功后同样可以直接访问http://localhost:8080/sw/swagger-ui.htmlswagger页面。\n常见错误\n常见错误1  Failed to execute goal com.google.cloud.tools:jib-maven-plugin:0.9.6:build (default-cli) on project jib: Build image failed, perhaps you should set a credential helper name with the configuration '' or set credentials for 'registry.hub.docker.com' in your Maven settings: Unauthorized for registry.hub.docker.com/moxingwang/jibtest: 401 Unauthorized\n\n当你从私有的registries pull或者push的时候需要认证机制。阅读官方说明按照步骤操作即可。[Authentication Methods](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib%2Fblob%2Fmaster%2Fjib-maven-plugin%2FREADME.md)。\n如果帮你本机已经按照docker，那么操作更简单，可以通过docker命令直接登陆registries，然后继续其他jib的操作。\n\n\nregistry.hub.docker.com\n\ndocker login --username=你的hub.docker的用户名 registry.hub.docker.com\n复制代码\nregistry.cn-hangzhou.aliyuncs.com\n\ndocker login --username=阿里云docker用户名 registry.cn-hangzhou.aliyuncs.com\n\n作者：m65536\n链接：https://juejin.im/post/5b4e9c316fb9a04fa01d39d6\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"搭建笔记/Jib构建你的第一个java镜像","published":1,"date":"2018-08-04T08:24:15.481Z","updated":"2018-08-04T06:32:45.608Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc48000lm4cmhmv6uqix","content":"<p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib\" target=\"_blank\" rel=\"noopener\">jib Official：GoogleContainerTools/jib</a></p>\n<p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmoxingwang%2Fjib\" target=\"_blank\" rel=\"noopener\">本文示例完整demo github地址 github.com/moxingwang/…</a></p>\n<p>想要了解并且使用jib，首先你得知道或者使用过docker，在这个基础上才能够明白jib是干什么得，解决了什么问题。</p>\n<p>首先我们先看一个例子，如何将一个spring-boot项目简单容器化，如果你从未操作过，可以动手自己实现，或者仔细阅读这篇文章<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fblog.csdn.net%2Fu010046908%2Farticle%2Fdetails%2F56008445\" target=\"_blank\" rel=\"noopener\">第一个 spring Boot 应用通过Docker 来实现构建、运行、发布</a>。你可能发现如果需要把一个java项目容器化这是一个麻烦和相对复杂的过程，首先你需要编写dockerfile，然后在build dockefile，如过需要push到registries，还需要经过push操作。虽然build和push还是非常简单得。但是写一个dockerfile真的比较麻烦，学习成本也高，看看官网<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fdocs.docker.com%2Fengine%2Freference%2Fbuilder%2F%23usage\" target=\"_blank\" rel=\"noopener\">Dockerfile reference</a>就不想学了。那么有没有简单得办法呢，记住几个简单得命令就可以运行了，如同‘mvn spring-boot:run’这么简单得命令，这个时候jib出场了，他就是来完成这个伟大得使命。<br>如果你还没明白jib是用来做什么事情得，推荐你阅读<a href=\"https://link.juejin.im/?target=http%3A%2F%2Fwww.infoq.com%2Fcn%2Fnews%2F2018%2F07%2Fgoogle-opensource-Jib\" target=\"_blank\" rel=\"noopener\">谷歌开源Java镜像构建工具Jib</a>的前半部分，或者阅读<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib\" target=\"_blank\" rel=\"noopener\">jib Official：GoogleContainerTools/jib</a>。<br>接下来主要介绍具体如何使用(maven的方式)。<br>将java项目容器化push到registries<br>jib的引入非常简单，已maven plugin的方式集成到项目中，只需要在你的项目中引入下面代码即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.9.6&lt;/version&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;from&gt;</span><br><span class=\"line\">            &lt;!--base image--&gt;</span><br><span class=\"line\">            &lt;image&gt;openjdk:alpine&lt;/image&gt;</span><br><span class=\"line\">        &lt;/from&gt;</span><br><span class=\"line\">        &lt;to&gt;</span><br><span class=\"line\">            &lt;!--&lt;image&gt;registry.cn-hangzhou.aliyuncs.com/m65536/jibtest&lt;/image&gt;--&gt;</span><br><span class=\"line\">            &lt;!--目标镜像registry地址，为了方便测试，你需要换成自己的地址，如果你的网络不好，可以选用国内加速器，比如阿里云的--&gt;</span><br><span class=\"line\">            &lt;image&gt;registry.hub.docker.com/moxingwang/jibtest&lt;/image&gt;</span><br><span class=\"line\">        &lt;/to&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;build&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>复制代码这只是一个最简单的配置，比如registry认证配置，jvm配置等等，可以参考github jib详细说明<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib%2Ftree%2Fmaster%2Fjib-maven-plugin%23from-object\" target=\"_blank\" rel=\"noopener\">jib/jib-maven-plugin/</a>。<br>构建你的镜像<br>mvn compile jib:build<br>复制代码可能你刚刚运行玩这一步就出现错误，提示Unauthorized，不用担心，这个命令需要把构建出来的image commit并且push到你远程的registry（我这里是registry.hub.docker.com），你可以按照【常见错误1】的方法解决问题。<br>如果你的网速慢一点可能会在最后步骤’Finalizing…’,不过没有关系，稍微多等一会就ok，直到’BUILD SUCCESS’出现。最终一个完整的java project被实例化成镜像并且push到了registry里。接下来你可以测试刚刚完成push的镜像。<br>打开<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fhub.docker.com%2F\" target=\"_blank\" rel=\"noopener\">hub.docker.com/</a>,你会发现你的image已经构建成功。</p>\n<p>docker使用镜像</p>\n<p>docker run -it –rm -p8080:8080 registry.hub.docker.com/moxingwang/jibtest<br>复制代码<br>一个spring-boot的image这样就被启动成功了。本文示例demo中集成了swagger-iu, 项目启动成功后我们可以通过<a href=\"https://link.juejin.im/?target=http%3A%2F%2Flocalhost%3A8080%2Fsw%2Fswagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/sw/swagger-ui.html</a>访问，可以成功在浏览器打开swagger。</p>\n<p>把镜像直接构建到本地docker中<br>使用这种构建方式，首先你要确保本已经安装docker并且环境变量都配置正确，因为这种方式jib依赖docker 命令执行，你还需要保证已经启动服务（在terminal中执行 docker –version 能够正确返回）。<br>mvn compile jib:dockerBuild<br>复制代码接下来直接操作，首先查看本地已有images<br>docker iamges<br>复制代码<br>执行mvn compile jib:dockerBuild</p>\n<p>可以看到本地image已经build成功。可以直接启动使用<br>docker run -it –rm -p8080:8080 moxingwang/jibtest<br>复制代码启动成功后同样可以直接访问<a href=\"http://localhost:8080/sw/swagger-ui.htmlswagger页面。\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/sw/swagger-ui.htmlswagger页面。</a><br>常见错误<br>常见错误1  Failed to execute goal com.google.cloud.tools:jib-maven-plugin:0.9.6:build (default-cli) on project jib: Build image failed, perhaps you should set a credential helper name with the configuration ‘’ or set credentials for ‘registry.hub.docker.com’ in your Maven settings: Unauthorized for registry.hub.docker.com/moxingwang/jibtest: 401 Unauthorized</p>\n<p>当你从私有的registries pull或者push的时候需要认证机制。阅读官方说明按照步骤操作即可。<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib%2Fblob%2Fmaster%2Fjib-maven-plugin%2FREADME.md\" target=\"_blank\" rel=\"noopener\">Authentication Methods</a>。<br>如果帮你本机已经按照docker，那么操作更简单，可以通过docker命令直接登陆registries，然后继续其他jib的操作。</p>\n<p>registry.hub.docker.com</p>\n<p>docker login –username=你的hub.docker的用户名 registry.hub.docker.com<br>复制代码<br>registry.cn-hangzhou.aliyuncs.com</p>\n<p>docker login –username=阿里云docker用户名 registry.cn-hangzhou.aliyuncs.com</p>\n<p>作者：m65536<br>链接：<a href=\"https://juejin.im/post/5b4e9c316fb9a04fa01d39d6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b4e9c316fb9a04fa01d39d6</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib\" target=\"_blank\" rel=\"noopener\">jib Official：GoogleContainerTools/jib</a></p>\n<p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmoxingwang%2Fjib\" target=\"_blank\" rel=\"noopener\">本文示例完整demo github地址 github.com/moxingwang/…</a></p>\n<p>想要了解并且使用jib，首先你得知道或者使用过docker，在这个基础上才能够明白jib是干什么得，解决了什么问题。</p>\n<p>首先我们先看一个例子，如何将一个spring-boot项目简单容器化，如果你从未操作过，可以动手自己实现，或者仔细阅读这篇文章<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fblog.csdn.net%2Fu010046908%2Farticle%2Fdetails%2F56008445\" target=\"_blank\" rel=\"noopener\">第一个 spring Boot 应用通过Docker 来实现构建、运行、发布</a>。你可能发现如果需要把一个java项目容器化这是一个麻烦和相对复杂的过程，首先你需要编写dockerfile，然后在build dockefile，如过需要push到registries，还需要经过push操作。虽然build和push还是非常简单得。但是写一个dockerfile真的比较麻烦，学习成本也高，看看官网<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fdocs.docker.com%2Fengine%2Freference%2Fbuilder%2F%23usage\" target=\"_blank\" rel=\"noopener\">Dockerfile reference</a>就不想学了。那么有没有简单得办法呢，记住几个简单得命令就可以运行了，如同‘mvn spring-boot:run’这么简单得命令，这个时候jib出场了，他就是来完成这个伟大得使命。<br>如果你还没明白jib是用来做什么事情得，推荐你阅读<a href=\"https://link.juejin.im/?target=http%3A%2F%2Fwww.infoq.com%2Fcn%2Fnews%2F2018%2F07%2Fgoogle-opensource-Jib\" target=\"_blank\" rel=\"noopener\">谷歌开源Java镜像构建工具Jib</a>的前半部分，或者阅读<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib\" target=\"_blank\" rel=\"noopener\">jib Official：GoogleContainerTools/jib</a>。<br>接下来主要介绍具体如何使用(maven的方式)。<br>将java项目容器化push到registries<br>jib的引入非常简单，已maven plugin的方式集成到项目中，只需要在你的项目中引入下面代码即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.9.6&lt;/version&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;from&gt;</span><br><span class=\"line\">            &lt;!--base image--&gt;</span><br><span class=\"line\">            &lt;image&gt;openjdk:alpine&lt;/image&gt;</span><br><span class=\"line\">        &lt;/from&gt;</span><br><span class=\"line\">        &lt;to&gt;</span><br><span class=\"line\">            &lt;!--&lt;image&gt;registry.cn-hangzhou.aliyuncs.com/m65536/jibtest&lt;/image&gt;--&gt;</span><br><span class=\"line\">            &lt;!--目标镜像registry地址，为了方便测试，你需要换成自己的地址，如果你的网络不好，可以选用国内加速器，比如阿里云的--&gt;</span><br><span class=\"line\">            &lt;image&gt;registry.hub.docker.com/moxingwang/jibtest&lt;/image&gt;</span><br><span class=\"line\">        &lt;/to&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;build&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>复制代码这只是一个最简单的配置，比如registry认证配置，jvm配置等等，可以参考github jib详细说明<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib%2Ftree%2Fmaster%2Fjib-maven-plugin%23from-object\" target=\"_blank\" rel=\"noopener\">jib/jib-maven-plugin/</a>。<br>构建你的镜像<br>mvn compile jib:build<br>复制代码可能你刚刚运行玩这一步就出现错误，提示Unauthorized，不用担心，这个命令需要把构建出来的image commit并且push到你远程的registry（我这里是registry.hub.docker.com），你可以按照【常见错误1】的方法解决问题。<br>如果你的网速慢一点可能会在最后步骤’Finalizing…’,不过没有关系，稍微多等一会就ok，直到’BUILD SUCCESS’出现。最终一个完整的java project被实例化成镜像并且push到了registry里。接下来你可以测试刚刚完成push的镜像。<br>打开<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fhub.docker.com%2F\" target=\"_blank\" rel=\"noopener\">hub.docker.com/</a>,你会发现你的image已经构建成功。</p>\n<p>docker使用镜像</p>\n<p>docker run -it –rm -p8080:8080 registry.hub.docker.com/moxingwang/jibtest<br>复制代码<br>一个spring-boot的image这样就被启动成功了。本文示例demo中集成了swagger-iu, 项目启动成功后我们可以通过<a href=\"https://link.juejin.im/?target=http%3A%2F%2Flocalhost%3A8080%2Fsw%2Fswagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/sw/swagger-ui.html</a>访问，可以成功在浏览器打开swagger。</p>\n<p>把镜像直接构建到本地docker中<br>使用这种构建方式，首先你要确保本已经安装docker并且环境变量都配置正确，因为这种方式jib依赖docker 命令执行，你还需要保证已经启动服务（在terminal中执行 docker –version 能够正确返回）。<br>mvn compile jib:dockerBuild<br>复制代码接下来直接操作，首先查看本地已有images<br>docker iamges<br>复制代码<br>执行mvn compile jib:dockerBuild</p>\n<p>可以看到本地image已经build成功。可以直接启动使用<br>docker run -it –rm -p8080:8080 moxingwang/jibtest<br>复制代码启动成功后同样可以直接访问<a href=\"http://localhost:8080/sw/swagger-ui.htmlswagger页面。\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/sw/swagger-ui.htmlswagger页面。</a><br>常见错误<br>常见错误1  Failed to execute goal com.google.cloud.tools:jib-maven-plugin:0.9.6:build (default-cli) on project jib: Build image failed, perhaps you should set a credential helper name with the configuration ‘’ or set credentials for ‘registry.hub.docker.com’ in your Maven settings: Unauthorized for registry.hub.docker.com/moxingwang/jibtest: 401 Unauthorized</p>\n<p>当你从私有的registries pull或者push的时候需要认证机制。阅读官方说明按照步骤操作即可。<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib%2Fblob%2Fmaster%2Fjib-maven-plugin%2FREADME.md\" target=\"_blank\" rel=\"noopener\">Authentication Methods</a>。<br>如果帮你本机已经按照docker，那么操作更简单，可以通过docker命令直接登陆registries，然后继续其他jib的操作。</p>\n<p>registry.hub.docker.com</p>\n<p>docker login –username=你的hub.docker的用户名 registry.hub.docker.com<br>复制代码<br>registry.cn-hangzhou.aliyuncs.com</p>\n<p>docker login –username=阿里云docker用户名 registry.cn-hangzhou.aliyuncs.com</p>\n<p>作者：m65536<br>链接：<a href=\"https://juejin.im/post/5b4e9c316fb9a04fa01d39d6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b4e9c316fb9a04fa01d39d6</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"解决CentOS（6和7版本），-etc-sysconfig-下没有iptables的问题","date":"2017-05-23T14:38:00.000Z","_content":"\n##一、Centos 6版本解决办法：\n\n1. 任意运行一条iptables防火墙规则配置命令：\n> iptables -P OUTPUT ACCEPT  \n\n2. 对iptables服务进行保存：\n>service iptables save  \n\n3. 重启iptables服务：\n>service iptables restart \n\n##二、Centos 7版本解决办法：\n\n1. 停止并屏蔽firewalld服务\n>systemctl stop firewalld\nsystemctl mask firewalld\n\n2. 安装iptables-services软件包\n>yum install iptables-services\n\n3. 在引导时启用iptables服务\n>systemctl enable iptables\n\n4. 启动iptables服务\n>systemctl start iptables\n\n5. 保存防火墙规则\n>service iptables save\n或\n/usr/libexec/iptables/iptables.init save\n\n**另外：管理iptables服务**\n>systemctl [stop|start|restart] iptables\n\n***\n注：原文摘自==>[解决CentOS（6和7版本），/etc/sysconfig/下没有iptables的问题](http://blog.csdn.net/CSDN_LQR/article/details/53885808)\n","source":"_posts/linux/解决CentOS（6和7版本），-etc-sysconfig-下没有iptables的问题.md","raw":"---\ntitle: 解决CentOS（6和7版本），-etc-sysconfig-下没有iptables的问题\ndate:  2017.05.23 22:38\ntags: linux centos\ncategories: 系统 Linux\n---\n\n##一、Centos 6版本解决办法：\n\n1. 任意运行一条iptables防火墙规则配置命令：\n> iptables -P OUTPUT ACCEPT  \n\n2. 对iptables服务进行保存：\n>service iptables save  \n\n3. 重启iptables服务：\n>service iptables restart \n\n##二、Centos 7版本解决办法：\n\n1. 停止并屏蔽firewalld服务\n>systemctl stop firewalld\nsystemctl mask firewalld\n\n2. 安装iptables-services软件包\n>yum install iptables-services\n\n3. 在引导时启用iptables服务\n>systemctl enable iptables\n\n4. 启动iptables服务\n>systemctl start iptables\n\n5. 保存防火墙规则\n>service iptables save\n或\n/usr/libexec/iptables/iptables.init save\n\n**另外：管理iptables服务**\n>systemctl [stop|start|restart] iptables\n\n***\n注：原文摘自==>[解决CentOS（6和7版本），/etc/sysconfig/下没有iptables的问题](http://blog.csdn.net/CSDN_LQR/article/details/53885808)\n","slug":"linux/解决CentOS（6和7版本），-etc-sysconfig-下没有iptables的问题","published":1,"updated":"2018-06-28T14:12:11.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4a000om4cmztzk5u0l","content":"<p>##一、Centos 6版本解决办法：</p>\n<ol>\n<li><p>任意运行一条iptables防火墙规则配置命令：</p>\n<blockquote>\n<p>iptables -P OUTPUT ACCEPT  </p>\n</blockquote>\n</li>\n<li><p>对iptables服务进行保存：</p>\n<blockquote>\n<p>service iptables save  </p>\n</blockquote>\n</li>\n<li><p>重启iptables服务：</p>\n<blockquote>\n<p>service iptables restart </p>\n</blockquote>\n</li>\n</ol>\n<p>##二、Centos 7版本解决办法：</p>\n<ol>\n<li><p>停止并屏蔽firewalld服务</p>\n<blockquote>\n<p>systemctl stop firewalld<br>systemctl mask firewalld</p>\n</blockquote>\n</li>\n<li><p>安装iptables-services软件包</p>\n<blockquote>\n<p>yum install iptables-services</p>\n</blockquote>\n</li>\n<li><p>在引导时启用iptables服务</p>\n<blockquote>\n<p>systemctl enable iptables</p>\n</blockquote>\n</li>\n<li><p>启动iptables服务</p>\n<blockquote>\n<p>systemctl start iptables</p>\n</blockquote>\n</li>\n<li><p>保存防火墙规则</p>\n<blockquote>\n<p>service iptables save<br>或<br>/usr/libexec/iptables/iptables.init save</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>另外：管理iptables服务</strong></p>\n<blockquote>\n<p>systemctl [stop|start|restart] iptables</p>\n</blockquote>\n<hr>\n<p>注：原文摘自==&gt;<a href=\"http://blog.csdn.net/CSDN_LQR/article/details/53885808\" target=\"_blank\" rel=\"noopener\">解决CentOS（6和7版本），/etc/sysconfig/下没有iptables的问题</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##一、Centos 6版本解决办法：</p>\n<ol>\n<li><p>任意运行一条iptables防火墙规则配置命令：</p>\n<blockquote>\n<p>iptables -P OUTPUT ACCEPT  </p>\n</blockquote>\n</li>\n<li><p>对iptables服务进行保存：</p>\n<blockquote>\n<p>service iptables save  </p>\n</blockquote>\n</li>\n<li><p>重启iptables服务：</p>\n<blockquote>\n<p>service iptables restart </p>\n</blockquote>\n</li>\n</ol>\n<p>##二、Centos 7版本解决办法：</p>\n<ol>\n<li><p>停止并屏蔽firewalld服务</p>\n<blockquote>\n<p>systemctl stop firewalld<br>systemctl mask firewalld</p>\n</blockquote>\n</li>\n<li><p>安装iptables-services软件包</p>\n<blockquote>\n<p>yum install iptables-services</p>\n</blockquote>\n</li>\n<li><p>在引导时启用iptables服务</p>\n<blockquote>\n<p>systemctl enable iptables</p>\n</blockquote>\n</li>\n<li><p>启动iptables服务</p>\n<blockquote>\n<p>systemctl start iptables</p>\n</blockquote>\n</li>\n<li><p>保存防火墙规则</p>\n<blockquote>\n<p>service iptables save<br>或<br>/usr/libexec/iptables/iptables.init save</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>另外：管理iptables服务</strong></p>\n<blockquote>\n<p>systemctl [stop|start|restart] iptables</p>\n</blockquote>\n<hr>\n<p>注：原文摘自==&gt;<a href=\"http://blog.csdn.net/CSDN_LQR/article/details/53885808\" target=\"_blank\" rel=\"noopener\">解决CentOS（6和7版本），/etc/sysconfig/下没有iptables的问题</a></p>\n"},{"_content":"1. 安装 Maven\n任务时间：10min ~ 15min\n\nMaven 简介\nApache Maven 是一个软件项目管理及自动构建工具，由 Apache 软件基金会所提供。基于项目对象模型（缩写：POM）概念，Maven 利用一小段描述信息能管理一个项目的构建、报告和文档等步骤。\n\nJava 安装\n首先我们需要准备 Java 开发环境，使用下面命令来安装 Java：\n\nyum -y install java-1.8.0-openjdk-devel\nMaven 下载\n我们可以从官网下载页获取最新的下载链接（Binary tar.gz archive）。\n\n然后我们使用 wget 命令将其下载：\n\ncd /home\nwget http://mirrors.shuosc.org/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz\n解压压缩包：\n\ntar xzvf apache-maven-3.5.4-bin.tar.gz\n将文件夹移动至 /usr/local/ 目录：\n\nmv apache-maven-3.5.4 /usr/local/apache-maven\n配置环境变量\n编辑 /etc/profile，在最下方添加：\n\nMAVEN_HOME=/usr/local/apache-maven\nexport MAVEN_HOME\nexport PATH=${PATH}:${MAVEN_HOME}/bin\nCtrl + S 保存文件，并运行如下命令使环境变量生效：\n\nsource /etc/profile\n检查 Maven 是否成功安装：\n\nmvn -version\n\n\n\n\n\n\n2. Maven 简单使用\n任务时间：25min ~ 30min\n\n构建\n我们可以通过 archetype:generate 命令快速构建出项目骨架。\n\nHello World\n我们使用该命令创建一个 helloworld 项目。过程中可一路回车键选择默认值。\n\ncd /home\nmvn archetype:generate -DgroupId=helloworld -DartifactId=helloworld\n mvn 指令首次执行时，会从远程“中央仓库”下载一些必需的文件，请耐心等待。\n项目结构\n点击 /home/helloworld 查看项目结构。\n\n其中：\n\n/pom.xml 为项目对象模型（Maven 项目配置）\n/src/main/java 用于存放源代码\n/src/test/java 用于存放单元测试代码\n/src/target 用于存放编译、打包后的输出文件\n编译\n进入项目目录：\n\ncd /home/helloworld\n执行编译：\n\nmvn compile\n重新开启 helloworld 项目文件夹，可以看到生成 target 目录。\n\n运行\n你可以使用 mvn 指明 mainClass 来运行项目：\n\nmvn exec:java -Dexec.mainClass=\"helloworld.App\"\n完成后可看到终端输出了：\n\nHello World!\n\n测试\n我们可以通过 test 指令来运行单元测试代码。\n\nmvn test\n完成后可看到终端输出测试结果。\n\n打包\n通过 package 指令来执行打包。\n\nmvn package\n重新开启 target 目录，可看到生成了 .jar 文件。\n\n从输出的日志可以看到，执行 package 前，会先执行 compile 及 test，最后执行了打包。\n完成实验\n恭喜！您已经成功完成了 Maven 安装与入门 的实验任务，您可以选择 留用 继续使用该环境。","source":"_posts/搭建笔记/Maven 安装与入门.md","raw":"1. 安装 Maven\n任务时间：10min ~ 15min\n\nMaven 简介\nApache Maven 是一个软件项目管理及自动构建工具，由 Apache 软件基金会所提供。基于项目对象模型（缩写：POM）概念，Maven 利用一小段描述信息能管理一个项目的构建、报告和文档等步骤。\n\nJava 安装\n首先我们需要准备 Java 开发环境，使用下面命令来安装 Java：\n\nyum -y install java-1.8.0-openjdk-devel\nMaven 下载\n我们可以从官网下载页获取最新的下载链接（Binary tar.gz archive）。\n\n然后我们使用 wget 命令将其下载：\n\ncd /home\nwget http://mirrors.shuosc.org/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz\n解压压缩包：\n\ntar xzvf apache-maven-3.5.4-bin.tar.gz\n将文件夹移动至 /usr/local/ 目录：\n\nmv apache-maven-3.5.4 /usr/local/apache-maven\n配置环境变量\n编辑 /etc/profile，在最下方添加：\n\nMAVEN_HOME=/usr/local/apache-maven\nexport MAVEN_HOME\nexport PATH=${PATH}:${MAVEN_HOME}/bin\nCtrl + S 保存文件，并运行如下命令使环境变量生效：\n\nsource /etc/profile\n检查 Maven 是否成功安装：\n\nmvn -version\n\n\n\n\n\n\n2. Maven 简单使用\n任务时间：25min ~ 30min\n\n构建\n我们可以通过 archetype:generate 命令快速构建出项目骨架。\n\nHello World\n我们使用该命令创建一个 helloworld 项目。过程中可一路回车键选择默认值。\n\ncd /home\nmvn archetype:generate -DgroupId=helloworld -DartifactId=helloworld\n mvn 指令首次执行时，会从远程“中央仓库”下载一些必需的文件，请耐心等待。\n项目结构\n点击 /home/helloworld 查看项目结构。\n\n其中：\n\n/pom.xml 为项目对象模型（Maven 项目配置）\n/src/main/java 用于存放源代码\n/src/test/java 用于存放单元测试代码\n/src/target 用于存放编译、打包后的输出文件\n编译\n进入项目目录：\n\ncd /home/helloworld\n执行编译：\n\nmvn compile\n重新开启 helloworld 项目文件夹，可以看到生成 target 目录。\n\n运行\n你可以使用 mvn 指明 mainClass 来运行项目：\n\nmvn exec:java -Dexec.mainClass=\"helloworld.App\"\n完成后可看到终端输出了：\n\nHello World!\n\n测试\n我们可以通过 test 指令来运行单元测试代码。\n\nmvn test\n完成后可看到终端输出测试结果。\n\n打包\n通过 package 指令来执行打包。\n\nmvn package\n重新开启 target 目录，可看到生成了 .jar 文件。\n\n从输出的日志可以看到，执行 package 前，会先执行 compile 及 test，最后执行了打包。\n完成实验\n恭喜！您已经成功完成了 Maven 安装与入门 的实验任务，您可以选择 留用 继续使用该环境。","slug":"搭建笔记/Maven 安装与入门","published":1,"date":"2018-08-04T08:24:15.481Z","updated":"2018-08-04T06:32:45.609Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4e000sm4cm4zhoj1tn","content":"<ol>\n<li>安装 Maven<br>任务时间：10min ~ 15min</li>\n</ol>\n<p>Maven 简介<br>Apache Maven 是一个软件项目管理及自动构建工具，由 Apache 软件基金会所提供。基于项目对象模型（缩写：POM）概念，Maven 利用一小段描述信息能管理一个项目的构建、报告和文档等步骤。</p>\n<p>Java 安装<br>首先我们需要准备 Java 开发环境，使用下面命令来安装 Java：</p>\n<p>yum -y install java-1.8.0-openjdk-devel<br>Maven 下载<br>我们可以从官网下载页获取最新的下载链接（Binary tar.gz archive）。</p>\n<p>然后我们使用 wget 命令将其下载：</p>\n<p>cd /home<br>wget <a href=\"http://mirrors.shuosc.org/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz\" target=\"_blank\" rel=\"noopener\">http://mirrors.shuosc.org/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</a><br>解压压缩包：</p>\n<p>tar xzvf apache-maven-3.5.4-bin.tar.gz<br>将文件夹移动至 /usr/local/ 目录：</p>\n<p>mv apache-maven-3.5.4 /usr/local/apache-maven<br>配置环境变量<br>编辑 /etc/profile，在最下方添加：</p>\n<p>MAVEN_HOME=/usr/local/apache-maven<br>export MAVEN_HOME<br>export PATH=${PATH}:${MAVEN_HOME}/bin<br>Ctrl + S 保存文件，并运行如下命令使环境变量生效：</p>\n<p>source /etc/profile<br>检查 Maven 是否成功安装：</p>\n<p>mvn -version</p>\n<ol start=\"2\">\n<li>Maven 简单使用<br>任务时间：25min ~ 30min</li>\n</ol>\n<p>构建<br>我们可以通过 archetype:generate 命令快速构建出项目骨架。</p>\n<p>Hello World<br>我们使用该命令创建一个 helloworld 项目。过程中可一路回车键选择默认值。</p>\n<p>cd /home<br>mvn archetype:generate -DgroupId=helloworld -DartifactId=helloworld<br> mvn 指令首次执行时，会从远程“中央仓库”下载一些必需的文件，请耐心等待。<br>项目结构<br>点击 /home/helloworld 查看项目结构。</p>\n<p>其中：</p>\n<p>/pom.xml 为项目对象模型（Maven 项目配置）<br>/src/main/java 用于存放源代码<br>/src/test/java 用于存放单元测试代码<br>/src/target 用于存放编译、打包后的输出文件<br>编译<br>进入项目目录：</p>\n<p>cd /home/helloworld<br>执行编译：</p>\n<p>mvn compile<br>重新开启 helloworld 项目文件夹，可以看到生成 target 目录。</p>\n<p>运行<br>你可以使用 mvn 指明 mainClass 来运行项目：</p>\n<p>mvn exec:java -Dexec.mainClass=”helloworld.App”<br>完成后可看到终端输出了：</p>\n<p>Hello World!</p>\n<p>测试<br>我们可以通过 test 指令来运行单元测试代码。</p>\n<p>mvn test<br>完成后可看到终端输出测试结果。</p>\n<p>打包<br>通过 package 指令来执行打包。</p>\n<p>mvn package<br>重新开启 target 目录，可看到生成了 .jar 文件。</p>\n<p>从输出的日志可以看到，执行 package 前，会先执行 compile 及 test，最后执行了打包。<br>完成实验<br>恭喜！您已经成功完成了 Maven 安装与入门 的实验任务，您可以选择 留用 继续使用该环境。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>安装 Maven<br>任务时间：10min ~ 15min</li>\n</ol>\n<p>Maven 简介<br>Apache Maven 是一个软件项目管理及自动构建工具，由 Apache 软件基金会所提供。基于项目对象模型（缩写：POM）概念，Maven 利用一小段描述信息能管理一个项目的构建、报告和文档等步骤。</p>\n<p>Java 安装<br>首先我们需要准备 Java 开发环境，使用下面命令来安装 Java：</p>\n<p>yum -y install java-1.8.0-openjdk-devel<br>Maven 下载<br>我们可以从官网下载页获取最新的下载链接（Binary tar.gz archive）。</p>\n<p>然后我们使用 wget 命令将其下载：</p>\n<p>cd /home<br>wget <a href=\"http://mirrors.shuosc.org/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz\" target=\"_blank\" rel=\"noopener\">http://mirrors.shuosc.org/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</a><br>解压压缩包：</p>\n<p>tar xzvf apache-maven-3.5.4-bin.tar.gz<br>将文件夹移动至 /usr/local/ 目录：</p>\n<p>mv apache-maven-3.5.4 /usr/local/apache-maven<br>配置环境变量<br>编辑 /etc/profile，在最下方添加：</p>\n<p>MAVEN_HOME=/usr/local/apache-maven<br>export MAVEN_HOME<br>export PATH=${PATH}:${MAVEN_HOME}/bin<br>Ctrl + S 保存文件，并运行如下命令使环境变量生效：</p>\n<p>source /etc/profile<br>检查 Maven 是否成功安装：</p>\n<p>mvn -version</p>\n<ol start=\"2\">\n<li>Maven 简单使用<br>任务时间：25min ~ 30min</li>\n</ol>\n<p>构建<br>我们可以通过 archetype:generate 命令快速构建出项目骨架。</p>\n<p>Hello World<br>我们使用该命令创建一个 helloworld 项目。过程中可一路回车键选择默认值。</p>\n<p>cd /home<br>mvn archetype:generate -DgroupId=helloworld -DartifactId=helloworld<br> mvn 指令首次执行时，会从远程“中央仓库”下载一些必需的文件，请耐心等待。<br>项目结构<br>点击 /home/helloworld 查看项目结构。</p>\n<p>其中：</p>\n<p>/pom.xml 为项目对象模型（Maven 项目配置）<br>/src/main/java 用于存放源代码<br>/src/test/java 用于存放单元测试代码<br>/src/target 用于存放编译、打包后的输出文件<br>编译<br>进入项目目录：</p>\n<p>cd /home/helloworld<br>执行编译：</p>\n<p>mvn compile<br>重新开启 helloworld 项目文件夹，可以看到生成 target 目录。</p>\n<p>运行<br>你可以使用 mvn 指明 mainClass 来运行项目：</p>\n<p>mvn exec:java -Dexec.mainClass=”helloworld.App”<br>完成后可看到终端输出了：</p>\n<p>Hello World!</p>\n<p>测试<br>我们可以通过 test 指令来运行单元测试代码。</p>\n<p>mvn test<br>完成后可看到终端输出测试结果。</p>\n<p>打包<br>通过 package 指令来执行打包。</p>\n<p>mvn package<br>重新开启 target 目录，可看到生成了 .jar 文件。</p>\n<p>从输出的日志可以看到，执行 package 前，会先执行 compile 及 test，最后执行了打包。<br>完成实验<br>恭喜！您已经成功完成了 Maven 安装与入门 的实验任务，您可以选择 留用 继续使用该环境。</p>\n"},{"_content":"https://cloud.tencent.com/developer/labs/lab/10134\n\n\n\n1. 准备域名\n任务时间：15min ~ 20min\n\n域名注册\n如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频：\n\n视频 - 在腾讯云上购买域名\n域名解析\n域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：\n\n<您的 CVM IP 地址>\n在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：\n\n视频 - 如何在腾讯云上解析域名\n域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：\n\nping www.yourdomain.com\n如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。\n\n\n注意替换下面命令中的 www.yourdomain.com 为您自己的注册的域名\n\n2.安装 Seafile 服务器\n任务时间：15min ~ 20min\n\n安装依赖环境\n在 Debian/Ubuntu 系统下，可以使用以下命令安装 MySQL：\n\nsudo apt-get update\nsudo apt-get install mysql-server\n使用以下命令安装 Python 相关依赖：\n\nsudo apt-get install python2.7 python-setuptools python-imaging python-ldap python-mysqldb python-memcache python-urllib3\n安装 MySQL 过程需要为 MySQL 的 root 用户设置新密码，请记住该[密码]以供后面步骤使用。\n\n为 Seafile 创建一个用户\n创建 Seafile 用户，使用它运行 Seafile 服务：\n\nsudo useradd -m -s /bin/bash seafile\n为该用户设置密码：\n\nsudo passwd seafile\n下载Seafile\n切换到新用户，需要输入你刚才为seafile用户设置的密码：\n\nsu - seafile\n切换目录：\n\ncd ~\n这里可以查看获取最新 Seafile 下载链接，参考以下命令进行下载。\n\nwget http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_i386.tar.gz\n解压:\n\ntar -xzf seafile-server_*\nmv seafile-server-*/ seafile-server/\n配置 Seafile\n运行Seafile设置脚本，并回答预设问题：\n\ncd seafile-server*\n./setup-seafile-mysql.sh\n执行过程输入参数如下图：\n\n其中：\n\n[ This server's ip or domain ] 字段输入教程第一步申请的域名或者IP地址（<您的 CVM IP 地址>）。\nmysql 的 [ root password ] 字段输入数据库密码。\n其他字段一路回车使用默认值。\n\n\n启动 Seafile\n./seafile.sh start\n./seahub.sh start\n执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 admin@qcloudlab.wang。\n\n[ admin password ] 和 [ admin password again ] 设置为登录网盘的密码，如 admin_Password：\n\n\n\n大功告成！\n恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。\n\n可以通过 IP 访问网盘：http://<您的域名>:8000","source":"_posts/搭建笔记/基于 Ubuntu 搭建个人网盘.md","raw":"https://cloud.tencent.com/developer/labs/lab/10134\n\n\n\n1. 准备域名\n任务时间：15min ~ 20min\n\n域名注册\n如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频：\n\n视频 - 在腾讯云上购买域名\n域名解析\n域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：\n\n<您的 CVM IP 地址>\n在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：\n\n视频 - 如何在腾讯云上解析域名\n域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：\n\nping www.yourdomain.com\n如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。\n\n\n注意替换下面命令中的 www.yourdomain.com 为您自己的注册的域名\n\n2.安装 Seafile 服务器\n任务时间：15min ~ 20min\n\n安装依赖环境\n在 Debian/Ubuntu 系统下，可以使用以下命令安装 MySQL：\n\nsudo apt-get update\nsudo apt-get install mysql-server\n使用以下命令安装 Python 相关依赖：\n\nsudo apt-get install python2.7 python-setuptools python-imaging python-ldap python-mysqldb python-memcache python-urllib3\n安装 MySQL 过程需要为 MySQL 的 root 用户设置新密码，请记住该[密码]以供后面步骤使用。\n\n为 Seafile 创建一个用户\n创建 Seafile 用户，使用它运行 Seafile 服务：\n\nsudo useradd -m -s /bin/bash seafile\n为该用户设置密码：\n\nsudo passwd seafile\n下载Seafile\n切换到新用户，需要输入你刚才为seafile用户设置的密码：\n\nsu - seafile\n切换目录：\n\ncd ~\n这里可以查看获取最新 Seafile 下载链接，参考以下命令进行下载。\n\nwget http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_i386.tar.gz\n解压:\n\ntar -xzf seafile-server_*\nmv seafile-server-*/ seafile-server/\n配置 Seafile\n运行Seafile设置脚本，并回答预设问题：\n\ncd seafile-server*\n./setup-seafile-mysql.sh\n执行过程输入参数如下图：\n\n其中：\n\n[ This server's ip or domain ] 字段输入教程第一步申请的域名或者IP地址（<您的 CVM IP 地址>）。\nmysql 的 [ root password ] 字段输入数据库密码。\n其他字段一路回车使用默认值。\n\n\n启动 Seafile\n./seafile.sh start\n./seahub.sh start\n执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 admin@qcloudlab.wang。\n\n[ admin password ] 和 [ admin password again ] 设置为登录网盘的密码，如 admin_Password：\n\n\n\n大功告成！\n恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。\n\n可以通过 IP 访问网盘：http://<您的域名>:8000","slug":"搭建笔记/基于 Ubuntu 搭建个人网盘","published":1,"date":"2018-08-04T08:24:15.481Z","updated":"2018-08-04T06:32:45.610Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4g000vm4cmbiknqi4c","content":"<p><a href=\"https://cloud.tencent.com/developer/labs/lab/10134\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/labs/lab/10134</a></p>\n<ol>\n<li>准备域名<br>任务时间：15min ~ 20min</li>\n</ol>\n<p>域名注册<br>如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频：</p>\n<p>视频 - 在腾讯云上购买域名<br>域名解析<br>域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：</p>\n<p>&lt;您的 CVM IP 地址&gt;<br>在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：</p>\n<p>视频 - 如何在腾讯云上解析域名<br>域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：</p>\n<p>ping <a href=\"http://www.yourdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourdomain.com</a><br>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>\n<p>注意替换下面命令中的 <a href=\"http://www.yourdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourdomain.com</a> 为您自己的注册的域名</p>\n<p>2.安装 Seafile 服务器<br>任务时间：15min ~ 20min</p>\n<p>安装依赖环境<br>在 Debian/Ubuntu 系统下，可以使用以下命令安装 MySQL：</p>\n<p>sudo apt-get update<br>sudo apt-get install mysql-server<br>使用以下命令安装 Python 相关依赖：</p>\n<p>sudo apt-get install python2.7 python-setuptools python-imaging python-ldap python-mysqldb python-memcache python-urllib3<br>安装 MySQL 过程需要为 MySQL 的 root 用户设置新密码，请记住该[密码]以供后面步骤使用。</p>\n<p>为 Seafile 创建一个用户<br>创建 Seafile 用户，使用它运行 Seafile 服务：</p>\n<p>sudo useradd -m -s /bin/bash seafile<br>为该用户设置密码：</p>\n<p>sudo passwd seafile<br>下载Seafile<br>切换到新用户，需要输入你刚才为seafile用户设置的密码：</p>\n<p>su - seafile<br>切换目录：</p>\n<p>cd ~<br>这里可以查看获取最新 Seafile 下载链接，参考以下命令进行下载。</p>\n<p>wget <a href=\"http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_i386.tar.gz\" target=\"_blank\" rel=\"noopener\">http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_i386.tar.gz</a><br>解压:</p>\n<p>tar -xzf seafile-server_<em><br>mv seafile-server-</em>/ seafile-server/<br>配置 Seafile<br>运行Seafile设置脚本，并回答预设问题：</p>\n<p>cd seafile-server*<br>./setup-seafile-mysql.sh<br>执行过程输入参数如下图：</p>\n<p>其中：</p>\n<p>[ This server’s ip or domain ] 字段输入教程第一步申请的域名或者IP地址（&lt;您的 CVM IP 地址&gt;）。<br>mysql 的 [ root password ] 字段输入数据库密码。<br>其他字段一路回车使用默认值。</p>\n<p>启动 Seafile<br>./seafile.sh start<br>./seahub.sh start<br>执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 <a href=\"mailto:admin@qcloudlab.wang\" target=\"_blank\" rel=\"noopener\">admin@qcloudlab.wang</a>。</p>\n<p>[ admin password ] 和 [ admin password again ] 设置为登录网盘的密码，如 admin_Password：</p>\n<p>大功告成！<br>恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。</p>\n<p>可以通过 IP 访问网盘：http://&lt;您的域名&gt;:8000</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://cloud.tencent.com/developer/labs/lab/10134\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/labs/lab/10134</a></p>\n<ol>\n<li>准备域名<br>任务时间：15min ~ 20min</li>\n</ol>\n<p>域名注册<br>如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频：</p>\n<p>视频 - 在腾讯云上购买域名<br>域名解析<br>域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：</p>\n<p>&lt;您的 CVM IP 地址&gt;<br>在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：</p>\n<p>视频 - 如何在腾讯云上解析域名<br>域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：</p>\n<p>ping <a href=\"http://www.yourdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourdomain.com</a><br>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>\n<p>注意替换下面命令中的 <a href=\"http://www.yourdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourdomain.com</a> 为您自己的注册的域名</p>\n<p>2.安装 Seafile 服务器<br>任务时间：15min ~ 20min</p>\n<p>安装依赖环境<br>在 Debian/Ubuntu 系统下，可以使用以下命令安装 MySQL：</p>\n<p>sudo apt-get update<br>sudo apt-get install mysql-server<br>使用以下命令安装 Python 相关依赖：</p>\n<p>sudo apt-get install python2.7 python-setuptools python-imaging python-ldap python-mysqldb python-memcache python-urllib3<br>安装 MySQL 过程需要为 MySQL 的 root 用户设置新密码，请记住该[密码]以供后面步骤使用。</p>\n<p>为 Seafile 创建一个用户<br>创建 Seafile 用户，使用它运行 Seafile 服务：</p>\n<p>sudo useradd -m -s /bin/bash seafile<br>为该用户设置密码：</p>\n<p>sudo passwd seafile<br>下载Seafile<br>切换到新用户，需要输入你刚才为seafile用户设置的密码：</p>\n<p>su - seafile<br>切换目录：</p>\n<p>cd ~<br>这里可以查看获取最新 Seafile 下载链接，参考以下命令进行下载。</p>\n<p>wget <a href=\"http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_i386.tar.gz\" target=\"_blank\" rel=\"noopener\">http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_i386.tar.gz</a><br>解压:</p>\n<p>tar -xzf seafile-server_<em><br>mv seafile-server-</em>/ seafile-server/<br>配置 Seafile<br>运行Seafile设置脚本，并回答预设问题：</p>\n<p>cd seafile-server*<br>./setup-seafile-mysql.sh<br>执行过程输入参数如下图：</p>\n<p>其中：</p>\n<p>[ This server’s ip or domain ] 字段输入教程第一步申请的域名或者IP地址（&lt;您的 CVM IP 地址&gt;）。<br>mysql 的 [ root password ] 字段输入数据库密码。<br>其他字段一路回车使用默认值。</p>\n<p>启动 Seafile<br>./seafile.sh start<br>./seahub.sh start<br>执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 <a href=\"mailto:admin@qcloudlab.wang\" target=\"_blank\" rel=\"noopener\">admin@qcloudlab.wang</a>。</p>\n<p>[ admin password ] 和 [ admin password again ] 设置为登录网盘的密码，如 admin_Password：</p>\n<p>大功告成！<br>恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。</p>\n<p>可以通过 IP 访问网盘：http://&lt;您的域名&gt;:8000</p>\n"},{"_content":"1.安装并启动 FTP 服务\n任务时间：5min ~ 10min\n\n安装 VSFTPD\n使用 apt-get 安装 [vsftpd]：\n\nsudo apt-get install vsftpd -y\n\nvsftpd 是在 Linux 上被广泛使用的 FTP 服务器，根据其官网介绍，它可能是 UNIX-like 系统下最安全和快速的 FTP 服务器软件。\n\n启动 VSFTPD\n安装完成后 VSFTPD 会自动启动，通过 netstat 命令可以看到系统已经[监听了 21 端口]：\n\nsudo netstat -nltp | grep 21\n如果没有启动，可以手动开启 VSFTPD 服务：\n\nsudo systemctl start vsftpd.service\n\nFTP 协议默认使用 21 端口作为服务端口\n\n2.配置用户访问目录\n任务时间：5min ~ 10min\n\n新建用户主目录\nsudo mkdir /home/uftp\n执行完后，在这里 /home/uftp [?] 就能看到新建的文件夹 uftp 了。\n\n创建登录欢迎文件 [?]：\n\nsudo touch /home/uftp/welcome.txt\n\n方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。\n\n\n用户的主目录是用户通过 FTP 登录后看到的根目录\n\n新建用户 uftp 并设置密码\n创建一个用户 uftp [?]：\n\nsudo useradd -d /home/uftp -s /bin/bash uftp\n为用户 uftp 设置密码 [?]：\n\nsudo passwd uftp\n删除掉 pam.d 中 vsftpd，因为该配置文件会导致使用用户名登录 ftp 失败：\n\nsudo rm /etc/pam.d/vsftpd\n\n为了方便后面的实验步骤，不建议使用其它的用户名\n\n\n请记住设置的密码以用于后续步骤\n\n限制该用户仅能通过 FTP 访问\n限制用户 uftp 只能通过 FTP 访问服务器，而不能直接登录服务器：\n\nsudo usermod -s /sbin/nologin uftp\n修改 vsftpd 配置\nsudo chmod a+w /etc/vsftpd.conf\n修改 /etc/vsftpd.conf 文件中的配置（直接将如下配置添加到配置文件最下方）：\n\n# 限制用户对主目录以外目录访问\nchroot_local_user=YES\n\n# 指定一个 userlist 存放允许访问 ftp 的用户列表\nuserlist_deny=NO\nuserlist_enable=YES\n\n# 记录允许访问 ftp 用户列表\nuserlist_file=/etc/vsftpd.user_list\n\n# 不配置可能导致莫名的530问题\nseccomp_sandbox=NO\n\n# 允许文件上传\nwrite_enable=YES\n\n# 使用utf8编码\nutf8_filesystem=YES\n新建文件 /etc/vsftpd.user_list，用于存放允许访问 ftp 的用户：\n\nsudo touch /etc/vsftpd.user_list\nsudo chmod a+w /etc/vsftpd.user_list\n修改 /etc/vsftpd.user_list ，加入刚刚创建的用户：\n\n示例代码：/etc/vsftpd.user_list\nuftp\n设置访问权限\n设置主目录访问权限（只读）：\n\nsudo chmod a-w /home/uftp\n新建公共目录，并设置权限（读写）：\n\nsudo mkdir /home/uftp/public && sudo chmod 777 -R /home/uftp/public\n重启vsftpd 服务：\n\nsudo systemctl restart vsftpd.service\n\n\n\n3.准备域名和证书\n任务时间：15min ~ 30min\n\n\n\n注：如果您不需要通过域名访问 FTP 服务器则可以直接点击“已完成，下一步”跳过域名和证书的准备环节\n\n域名注册\n如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频。\n\n视频 - 在腾讯云上购买域名\n域名解析\n域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：\n\n<您的 CVM IP 地址>\n在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：\n\n视频 - 如何在腾讯云上解析域名\n域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：\n\nping www.yourdomain.com\n如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。\n\n\n注意替换下面命令中的 www.yourmpdomain.com 为您自己的注册的域名\n\n\n4.访问 FTP 服务\n任务时间：5min ~ 10min\n\nFTP 服务已安装并配置完成，下面我们来使用该 FTP 服务\n\n访问 FTP 服务\n根据您个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务\n\n通过 FTP 客户端工具访问\nFTP 客户端工具众多，下面推荐两个常用的：\n\nFileZilla - 跨平台的 FTP 客户端，支持 Windows 和 Mac\nWinSCP - Windows 下的 FTP 和 SFTP 连接客户端\n下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：\n\n[主机]：\n\n<您的 CVM IP 地址>\n用户：\n\nuftp\n输入密码后，如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！\n\n接下来，请上传任意一张图片到您的 FTP 服务器上的 uftp 的 public 目录下，然后，就可以在 /home/uftp/public 中看到了。\n\n通过 Windows 资源管理器访问\nWindows 用户可以复制下面的[链接]到资源管理器的地址栏访问：\n\nftp://uftp:你的密码@<您的 CVM IP 地址>\n\n如果您申请了域名，可以将Ip 地址替换为对应的域名作为访问凭据\n\n\n如果您申请了域名，可以将链接中的 Ip 地址替换为对应的域名访问 FTP 服务\n\n大功告成\n恭喜！您已经成功完成了搭建 FTP 服务器的实验任务。","source":"_posts/搭建笔记/基于Ubuntu搭建FTP.md","raw":"1.安装并启动 FTP 服务\n任务时间：5min ~ 10min\n\n安装 VSFTPD\n使用 apt-get 安装 [vsftpd]：\n\nsudo apt-get install vsftpd -y\n\nvsftpd 是在 Linux 上被广泛使用的 FTP 服务器，根据其官网介绍，它可能是 UNIX-like 系统下最安全和快速的 FTP 服务器软件。\n\n启动 VSFTPD\n安装完成后 VSFTPD 会自动启动，通过 netstat 命令可以看到系统已经[监听了 21 端口]：\n\nsudo netstat -nltp | grep 21\n如果没有启动，可以手动开启 VSFTPD 服务：\n\nsudo systemctl start vsftpd.service\n\nFTP 协议默认使用 21 端口作为服务端口\n\n2.配置用户访问目录\n任务时间：5min ~ 10min\n\n新建用户主目录\nsudo mkdir /home/uftp\n执行完后，在这里 /home/uftp [?] 就能看到新建的文件夹 uftp 了。\n\n创建登录欢迎文件 [?]：\n\nsudo touch /home/uftp/welcome.txt\n\n方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。\n\n\n用户的主目录是用户通过 FTP 登录后看到的根目录\n\n新建用户 uftp 并设置密码\n创建一个用户 uftp [?]：\n\nsudo useradd -d /home/uftp -s /bin/bash uftp\n为用户 uftp 设置密码 [?]：\n\nsudo passwd uftp\n删除掉 pam.d 中 vsftpd，因为该配置文件会导致使用用户名登录 ftp 失败：\n\nsudo rm /etc/pam.d/vsftpd\n\n为了方便后面的实验步骤，不建议使用其它的用户名\n\n\n请记住设置的密码以用于后续步骤\n\n限制该用户仅能通过 FTP 访问\n限制用户 uftp 只能通过 FTP 访问服务器，而不能直接登录服务器：\n\nsudo usermod -s /sbin/nologin uftp\n修改 vsftpd 配置\nsudo chmod a+w /etc/vsftpd.conf\n修改 /etc/vsftpd.conf 文件中的配置（直接将如下配置添加到配置文件最下方）：\n\n# 限制用户对主目录以外目录访问\nchroot_local_user=YES\n\n# 指定一个 userlist 存放允许访问 ftp 的用户列表\nuserlist_deny=NO\nuserlist_enable=YES\n\n# 记录允许访问 ftp 用户列表\nuserlist_file=/etc/vsftpd.user_list\n\n# 不配置可能导致莫名的530问题\nseccomp_sandbox=NO\n\n# 允许文件上传\nwrite_enable=YES\n\n# 使用utf8编码\nutf8_filesystem=YES\n新建文件 /etc/vsftpd.user_list，用于存放允许访问 ftp 的用户：\n\nsudo touch /etc/vsftpd.user_list\nsudo chmod a+w /etc/vsftpd.user_list\n修改 /etc/vsftpd.user_list ，加入刚刚创建的用户：\n\n示例代码：/etc/vsftpd.user_list\nuftp\n设置访问权限\n设置主目录访问权限（只读）：\n\nsudo chmod a-w /home/uftp\n新建公共目录，并设置权限（读写）：\n\nsudo mkdir /home/uftp/public && sudo chmod 777 -R /home/uftp/public\n重启vsftpd 服务：\n\nsudo systemctl restart vsftpd.service\n\n\n\n3.准备域名和证书\n任务时间：15min ~ 30min\n\n\n\n注：如果您不需要通过域名访问 FTP 服务器则可以直接点击“已完成，下一步”跳过域名和证书的准备环节\n\n域名注册\n如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频。\n\n视频 - 在腾讯云上购买域名\n域名解析\n域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：\n\n<您的 CVM IP 地址>\n在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：\n\n视频 - 如何在腾讯云上解析域名\n域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：\n\nping www.yourdomain.com\n如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。\n\n\n注意替换下面命令中的 www.yourmpdomain.com 为您自己的注册的域名\n\n\n4.访问 FTP 服务\n任务时间：5min ~ 10min\n\nFTP 服务已安装并配置完成，下面我们来使用该 FTP 服务\n\n访问 FTP 服务\n根据您个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务\n\n通过 FTP 客户端工具访问\nFTP 客户端工具众多，下面推荐两个常用的：\n\nFileZilla - 跨平台的 FTP 客户端，支持 Windows 和 Mac\nWinSCP - Windows 下的 FTP 和 SFTP 连接客户端\n下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：\n\n[主机]：\n\n<您的 CVM IP 地址>\n用户：\n\nuftp\n输入密码后，如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！\n\n接下来，请上传任意一张图片到您的 FTP 服务器上的 uftp 的 public 目录下，然后，就可以在 /home/uftp/public 中看到了。\n\n通过 Windows 资源管理器访问\nWindows 用户可以复制下面的[链接]到资源管理器的地址栏访问：\n\nftp://uftp:你的密码@<您的 CVM IP 地址>\n\n如果您申请了域名，可以将Ip 地址替换为对应的域名作为访问凭据\n\n\n如果您申请了域名，可以将链接中的 Ip 地址替换为对应的域名访问 FTP 服务\n\n大功告成\n恭喜！您已经成功完成了搭建 FTP 服务器的实验任务。","slug":"搭建笔记/基于Ubuntu搭建FTP","published":1,"date":"2018-08-04T08:24:15.497Z","updated":"2018-08-04T06:32:45.611Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4i000ym4cmyeqiq1nr","content":"<p>1.安装并启动 FTP 服务<br>任务时间：5min ~ 10min</p>\n<p>安装 VSFTPD<br>使用 apt-get 安装 [vsftpd]：</p>\n<p>sudo apt-get install vsftpd -y</p>\n<p>vsftpd 是在 Linux 上被广泛使用的 FTP 服务器，根据其官网介绍，它可能是 UNIX-like 系统下最安全和快速的 FTP 服务器软件。</p>\n<p>启动 VSFTPD<br>安装完成后 VSFTPD 会自动启动，通过 netstat 命令可以看到系统已经[监听了 21 端口]：</p>\n<p>sudo netstat -nltp | grep 21<br>如果没有启动，可以手动开启 VSFTPD 服务：</p>\n<p>sudo systemctl start vsftpd.service</p>\n<p>FTP 协议默认使用 21 端口作为服务端口</p>\n<p>2.配置用户访问目录<br>任务时间：5min ~ 10min</p>\n<p>新建用户主目录<br>sudo mkdir /home/uftp<br>执行完后，在这里 /home/uftp [?] 就能看到新建的文件夹 uftp 了。</p>\n<p>创建登录欢迎文件 [?]：</p>\n<p>sudo touch /home/uftp/welcome.txt</p>\n<p>方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。</p>\n<p>用户的主目录是用户通过 FTP 登录后看到的根目录</p>\n<p>新建用户 uftp 并设置密码<br>创建一个用户 uftp [?]：</p>\n<p>sudo useradd -d /home/uftp -s /bin/bash uftp<br>为用户 uftp 设置密码 [?]：</p>\n<p>sudo passwd uftp<br>删除掉 pam.d 中 vsftpd，因为该配置文件会导致使用用户名登录 ftp 失败：</p>\n<p>sudo rm /etc/pam.d/vsftpd</p>\n<p>为了方便后面的实验步骤，不建议使用其它的用户名</p>\n<p>请记住设置的密码以用于后续步骤</p>\n<p>限制该用户仅能通过 FTP 访问<br>限制用户 uftp 只能通过 FTP 访问服务器，而不能直接登录服务器：</p>\n<p>sudo usermod -s /sbin/nologin uftp<br>修改 vsftpd 配置<br>sudo chmod a+w /etc/vsftpd.conf<br>修改 /etc/vsftpd.conf 文件中的配置（直接将如下配置添加到配置文件最下方）：</p>\n<h1 id=\"限制用户对主目录以外目录访问\"><a href=\"#限制用户对主目录以外目录访问\" class=\"headerlink\" title=\"限制用户对主目录以外目录访问\"></a>限制用户对主目录以外目录访问</h1><p>chroot_local_user=YES</p>\n<h1 id=\"指定一个-userlist-存放允许访问-ftp-的用户列表\"><a href=\"#指定一个-userlist-存放允许访问-ftp-的用户列表\" class=\"headerlink\" title=\"指定一个 userlist 存放允许访问 ftp 的用户列表\"></a>指定一个 userlist 存放允许访问 ftp 的用户列表</h1><p>userlist_deny=NO<br>userlist_enable=YES</p>\n<h1 id=\"记录允许访问-ftp-用户列表\"><a href=\"#记录允许访问-ftp-用户列表\" class=\"headerlink\" title=\"记录允许访问 ftp 用户列表\"></a>记录允许访问 ftp 用户列表</h1><p>userlist_file=/etc/vsftpd.user_list</p>\n<h1 id=\"不配置可能导致莫名的530问题\"><a href=\"#不配置可能导致莫名的530问题\" class=\"headerlink\" title=\"不配置可能导致莫名的530问题\"></a>不配置可能导致莫名的530问题</h1><p>seccomp_sandbox=NO</p>\n<h1 id=\"允许文件上传\"><a href=\"#允许文件上传\" class=\"headerlink\" title=\"允许文件上传\"></a>允许文件上传</h1><p>write_enable=YES</p>\n<h1 id=\"使用utf8编码\"><a href=\"#使用utf8编码\" class=\"headerlink\" title=\"使用utf8编码\"></a>使用utf8编码</h1><p>utf8_filesystem=YES<br>新建文件 /etc/vsftpd.user_list，用于存放允许访问 ftp 的用户：</p>\n<p>sudo touch /etc/vsftpd.user_list<br>sudo chmod a+w /etc/vsftpd.user_list<br>修改 /etc/vsftpd.user_list ，加入刚刚创建的用户：</p>\n<p>示例代码：/etc/vsftpd.user_list<br>uftp<br>设置访问权限<br>设置主目录访问权限（只读）：</p>\n<p>sudo chmod a-w /home/uftp<br>新建公共目录，并设置权限（读写）：</p>\n<p>sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public<br>重启vsftpd 服务：</p>\n<p>sudo systemctl restart vsftpd.service</p>\n<p>3.准备域名和证书<br>任务时间：15min ~ 30min</p>\n<p>注：如果您不需要通过域名访问 FTP 服务器则可以直接点击“已完成，下一步”跳过域名和证书的准备环节</p>\n<p>域名注册<br>如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频。</p>\n<p>视频 - 在腾讯云上购买域名<br>域名解析<br>域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：</p>\n<p>&lt;您的 CVM IP 地址&gt;<br>在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：</p>\n<p>视频 - 如何在腾讯云上解析域名<br>域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：</p>\n<p>ping <a href=\"http://www.yourdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourdomain.com</a><br>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>\n<p>注意替换下面命令中的 <a href=\"http://www.yourmpdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourmpdomain.com</a> 为您自己的注册的域名</p>\n<p>4.访问 FTP 服务<br>任务时间：5min ~ 10min</p>\n<p>FTP 服务已安装并配置完成，下面我们来使用该 FTP 服务</p>\n<p>访问 FTP 服务<br>根据您个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务</p>\n<p>通过 FTP 客户端工具访问<br>FTP 客户端工具众多，下面推荐两个常用的：</p>\n<p>FileZilla - 跨平台的 FTP 客户端，支持 Windows 和 Mac<br>WinSCP - Windows 下的 FTP 和 SFTP 连接客户端<br>下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：</p>\n<p>[主机]：</p>\n<p>&lt;您的 CVM IP 地址&gt;<br>用户：</p>\n<p>uftp<br>输入密码后，如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！</p>\n<p>接下来，请上传任意一张图片到您的 FTP 服务器上的 uftp 的 public 目录下，然后，就可以在 /home/uftp/public 中看到了。</p>\n<p>通过 Windows 资源管理器访问<br>Windows 用户可以复制下面的[链接]到资源管理器的地址栏访问：</p>\n<p><a href=\"ftp://uftp:你的密码@\" target=\"_blank\" rel=\"noopener\">ftp://uftp:你的密码@</a>&lt;您的 CVM IP 地址&gt;</p>\n<p>如果您申请了域名，可以将Ip 地址替换为对应的域名作为访问凭据</p>\n<p>如果您申请了域名，可以将链接中的 Ip 地址替换为对应的域名访问 FTP 服务</p>\n<p>大功告成<br>恭喜！您已经成功完成了搭建 FTP 服务器的实验任务。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.安装并启动 FTP 服务<br>任务时间：5min ~ 10min</p>\n<p>安装 VSFTPD<br>使用 apt-get 安装 [vsftpd]：</p>\n<p>sudo apt-get install vsftpd -y</p>\n<p>vsftpd 是在 Linux 上被广泛使用的 FTP 服务器，根据其官网介绍，它可能是 UNIX-like 系统下最安全和快速的 FTP 服务器软件。</p>\n<p>启动 VSFTPD<br>安装完成后 VSFTPD 会自动启动，通过 netstat 命令可以看到系统已经[监听了 21 端口]：</p>\n<p>sudo netstat -nltp | grep 21<br>如果没有启动，可以手动开启 VSFTPD 服务：</p>\n<p>sudo systemctl start vsftpd.service</p>\n<p>FTP 协议默认使用 21 端口作为服务端口</p>\n<p>2.配置用户访问目录<br>任务时间：5min ~ 10min</p>\n<p>新建用户主目录<br>sudo mkdir /home/uftp<br>执行完后，在这里 /home/uftp [?] 就能看到新建的文件夹 uftp 了。</p>\n<p>创建登录欢迎文件 [?]：</p>\n<p>sudo touch /home/uftp/welcome.txt</p>\n<p>方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。</p>\n<p>用户的主目录是用户通过 FTP 登录后看到的根目录</p>\n<p>新建用户 uftp 并设置密码<br>创建一个用户 uftp [?]：</p>\n<p>sudo useradd -d /home/uftp -s /bin/bash uftp<br>为用户 uftp 设置密码 [?]：</p>\n<p>sudo passwd uftp<br>删除掉 pam.d 中 vsftpd，因为该配置文件会导致使用用户名登录 ftp 失败：</p>\n<p>sudo rm /etc/pam.d/vsftpd</p>\n<p>为了方便后面的实验步骤，不建议使用其它的用户名</p>\n<p>请记住设置的密码以用于后续步骤</p>\n<p>限制该用户仅能通过 FTP 访问<br>限制用户 uftp 只能通过 FTP 访问服务器，而不能直接登录服务器：</p>\n<p>sudo usermod -s /sbin/nologin uftp<br>修改 vsftpd 配置<br>sudo chmod a+w /etc/vsftpd.conf<br>修改 /etc/vsftpd.conf 文件中的配置（直接将如下配置添加到配置文件最下方）：</p>\n<h1 id=\"限制用户对主目录以外目录访问\"><a href=\"#限制用户对主目录以外目录访问\" class=\"headerlink\" title=\"限制用户对主目录以外目录访问\"></a>限制用户对主目录以外目录访问</h1><p>chroot_local_user=YES</p>\n<h1 id=\"指定一个-userlist-存放允许访问-ftp-的用户列表\"><a href=\"#指定一个-userlist-存放允许访问-ftp-的用户列表\" class=\"headerlink\" title=\"指定一个 userlist 存放允许访问 ftp 的用户列表\"></a>指定一个 userlist 存放允许访问 ftp 的用户列表</h1><p>userlist_deny=NO<br>userlist_enable=YES</p>\n<h1 id=\"记录允许访问-ftp-用户列表\"><a href=\"#记录允许访问-ftp-用户列表\" class=\"headerlink\" title=\"记录允许访问 ftp 用户列表\"></a>记录允许访问 ftp 用户列表</h1><p>userlist_file=/etc/vsftpd.user_list</p>\n<h1 id=\"不配置可能导致莫名的530问题\"><a href=\"#不配置可能导致莫名的530问题\" class=\"headerlink\" title=\"不配置可能导致莫名的530问题\"></a>不配置可能导致莫名的530问题</h1><p>seccomp_sandbox=NO</p>\n<h1 id=\"允许文件上传\"><a href=\"#允许文件上传\" class=\"headerlink\" title=\"允许文件上传\"></a>允许文件上传</h1><p>write_enable=YES</p>\n<h1 id=\"使用utf8编码\"><a href=\"#使用utf8编码\" class=\"headerlink\" title=\"使用utf8编码\"></a>使用utf8编码</h1><p>utf8_filesystem=YES<br>新建文件 /etc/vsftpd.user_list，用于存放允许访问 ftp 的用户：</p>\n<p>sudo touch /etc/vsftpd.user_list<br>sudo chmod a+w /etc/vsftpd.user_list<br>修改 /etc/vsftpd.user_list ，加入刚刚创建的用户：</p>\n<p>示例代码：/etc/vsftpd.user_list<br>uftp<br>设置访问权限<br>设置主目录访问权限（只读）：</p>\n<p>sudo chmod a-w /home/uftp<br>新建公共目录，并设置权限（读写）：</p>\n<p>sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public<br>重启vsftpd 服务：</p>\n<p>sudo systemctl restart vsftpd.service</p>\n<p>3.准备域名和证书<br>任务时间：15min ~ 30min</p>\n<p>注：如果您不需要通过域名访问 FTP 服务器则可以直接点击“已完成，下一步”跳过域名和证书的准备环节</p>\n<p>域名注册<br>如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频。</p>\n<p>视频 - 在腾讯云上购买域名<br>域名解析<br>域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：</p>\n<p>&lt;您的 CVM IP 地址&gt;<br>在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：</p>\n<p>视频 - 如何在腾讯云上解析域名<br>域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：</p>\n<p>ping <a href=\"http://www.yourdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourdomain.com</a><br>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>\n<p>注意替换下面命令中的 <a href=\"http://www.yourmpdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourmpdomain.com</a> 为您自己的注册的域名</p>\n<p>4.访问 FTP 服务<br>任务时间：5min ~ 10min</p>\n<p>FTP 服务已安装并配置完成，下面我们来使用该 FTP 服务</p>\n<p>访问 FTP 服务<br>根据您个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务</p>\n<p>通过 FTP 客户端工具访问<br>FTP 客户端工具众多，下面推荐两个常用的：</p>\n<p>FileZilla - 跨平台的 FTP 客户端，支持 Windows 和 Mac<br>WinSCP - Windows 下的 FTP 和 SFTP 连接客户端<br>下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：</p>\n<p>[主机]：</p>\n<p>&lt;您的 CVM IP 地址&gt;<br>用户：</p>\n<p>uftp<br>输入密码后，如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！</p>\n<p>接下来，请上传任意一张图片到您的 FTP 服务器上的 uftp 的 public 目录下，然后，就可以在 /home/uftp/public 中看到了。</p>\n<p>通过 Windows 资源管理器访问<br>Windows 用户可以复制下面的[链接]到资源管理器的地址栏访问：</p>\n<p><a href=\"ftp://uftp:你的密码@\" target=\"_blank\" rel=\"noopener\">ftp://uftp:你的密码@</a>&lt;您的 CVM IP 地址&gt;</p>\n<p>如果您申请了域名，可以将Ip 地址替换为对应的域名作为访问凭据</p>\n<p>如果您申请了域名，可以将链接中的 Ip 地址替换为对应的域名访问 FTP 服务</p>\n<p>大功告成<br>恭喜！您已经成功完成了搭建 FTP 服务器的实验任务。</p>\n"},{"_content":"\n\n\n\n\n1.下载安装 git\n任务时间：5min ~ 10min\n\nGit 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\n此实验以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。\n\n安装依赖库和编译工具\n为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具\n\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n安装编译工具\n\nyum install gcc perl-ExtUtils-MakeMaker\n下载 git\n选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里\n\ncd /usr/local/src\n到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里\n\nwget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz\n解压和编译\n解压下载的源码包\n\ntar -zvxf git-2.10.0.tar.gz\n解压后进入 git-2.10.0 文件夹\n\ncd git-2.10.0\n执行编译\n\nmake all prefix=/usr/local/git\n编译完成后, 安装到 /usr/local/git 目录下\n\nmake install prefix=/usr/local/git\n\n\n\n2.配置环境变量\n任务时间：5min ~ 10min\n\n将 git 目录加入 PATH\n将原来的 PATH 指向目录修改为现在的目录\n\necho 'export PATH=$PATH:/usr/local/git/bin' >> /etc/bashrc\n生效环境变量\n\nsource /etc/bashrc\n此时我们能查看 git 版本号，说明我们已经安装成功了。\n\ngit --version\n\n\n\n3.创建 git 账号密码\n任务时间：5min ~ 10min\n\n创建 git 账号\n为我们刚刚搭建好的 git 创建一个账号\n\nuseradd -m gituser\n然后为这个账号设置密码[?]\n\npasswd gituser\n\n控制台输入创建密码后，输入您自定义的密码，并二次确认。\n\n\n\n4.初始化 git 仓库并配置用户权限\n任务时间：5min ~ 10min\n\n创建 git 仓库并初始化\n我们创建 /data/repositories 目录用于存放 git 仓库\n\nmkdir -p /data/repositories\n创建好后，初始化这个仓库\n\ncd /data/repositories/ && git init --bare test.git\n配置用户权限\n给 git 仓库目录设置用户和用户组并设置权限\n\nchown -R gituser:gituser /data/repositories\nchmod 755 /data/repositories\n[查找 git-shell 所在目录] , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 git-shell 的目录[?]如下\n\n示例代码：/etc/passwd\ngituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell\n\n如果按照刚才的步骤执行, 这个位置应该是 /usr/local/git/bin/git-shell, 否则请通过 which git-shell 命令查看位置\n\n\n安全目的, 限制 git 账号的 ssh 连接只能是登录 git-shell\n\n使用搭建好的 Git 服务\n克隆 test repo 到本地\n\ncd ~ && git clone gituser@<您的 CVM IP 地址>:/data/repositories/test.git\n实验完成\n恭喜，Git 服务器搭建完成, 从此以后你可以方便地将你的本地代码提交到 Git 服务器托管了","source":"_posts/搭建笔记/搭建Git服务器.md","raw":"\n\n\n\n\n1.下载安装 git\n任务时间：5min ~ 10min\n\nGit 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\n此实验以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。\n\n安装依赖库和编译工具\n为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具\n\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n安装编译工具\n\nyum install gcc perl-ExtUtils-MakeMaker\n下载 git\n选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里\n\ncd /usr/local/src\n到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里\n\nwget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz\n解压和编译\n解压下载的源码包\n\ntar -zvxf git-2.10.0.tar.gz\n解压后进入 git-2.10.0 文件夹\n\ncd git-2.10.0\n执行编译\n\nmake all prefix=/usr/local/git\n编译完成后, 安装到 /usr/local/git 目录下\n\nmake install prefix=/usr/local/git\n\n\n\n2.配置环境变量\n任务时间：5min ~ 10min\n\n将 git 目录加入 PATH\n将原来的 PATH 指向目录修改为现在的目录\n\necho 'export PATH=$PATH:/usr/local/git/bin' >> /etc/bashrc\n生效环境变量\n\nsource /etc/bashrc\n此时我们能查看 git 版本号，说明我们已经安装成功了。\n\ngit --version\n\n\n\n3.创建 git 账号密码\n任务时间：5min ~ 10min\n\n创建 git 账号\n为我们刚刚搭建好的 git 创建一个账号\n\nuseradd -m gituser\n然后为这个账号设置密码[?]\n\npasswd gituser\n\n控制台输入创建密码后，输入您自定义的密码，并二次确认。\n\n\n\n4.初始化 git 仓库并配置用户权限\n任务时间：5min ~ 10min\n\n创建 git 仓库并初始化\n我们创建 /data/repositories 目录用于存放 git 仓库\n\nmkdir -p /data/repositories\n创建好后，初始化这个仓库\n\ncd /data/repositories/ && git init --bare test.git\n配置用户权限\n给 git 仓库目录设置用户和用户组并设置权限\n\nchown -R gituser:gituser /data/repositories\nchmod 755 /data/repositories\n[查找 git-shell 所在目录] , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 git-shell 的目录[?]如下\n\n示例代码：/etc/passwd\ngituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell\n\n如果按照刚才的步骤执行, 这个位置应该是 /usr/local/git/bin/git-shell, 否则请通过 which git-shell 命令查看位置\n\n\n安全目的, 限制 git 账号的 ssh 连接只能是登录 git-shell\n\n使用搭建好的 Git 服务\n克隆 test repo 到本地\n\ncd ~ && git clone gituser@<您的 CVM IP 地址>:/data/repositories/test.git\n实验完成\n恭喜，Git 服务器搭建完成, 从此以后你可以方便地将你的本地代码提交到 Git 服务器托管了","slug":"搭建笔记/搭建Git服务器","published":1,"date":"2018-08-04T08:24:15.497Z","updated":"2018-08-04T06:32:45.612Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4l0011m4cmnenu6gq4","content":"<p>1.下载安装 git<br>任务时间：5min ~ 10min</p>\n<p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>此实验以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。</p>\n<p>安装依赖库和编译工具<br>为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具</p>\n<p>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br>安装编译工具</p>\n<p>yum install gcc perl-ExtUtils-MakeMaker<br>下载 git<br>选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里</p>\n<p>cd /usr/local/src<br>到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里</p>\n<p>wget <a href=\"https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz\" target=\"_blank\" rel=\"noopener\">https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz</a><br>解压和编译<br>解压下载的源码包</p>\n<p>tar -zvxf git-2.10.0.tar.gz<br>解压后进入 git-2.10.0 文件夹</p>\n<p>cd git-2.10.0<br>执行编译</p>\n<p>make all prefix=/usr/local/git<br>编译完成后, 安装到 /usr/local/git 目录下</p>\n<p>make install prefix=/usr/local/git</p>\n<p>2.配置环境变量<br>任务时间：5min ~ 10min</p>\n<p>将 git 目录加入 PATH<br>将原来的 PATH 指向目录修改为现在的目录</p>\n<p>echo ‘export PATH=$PATH:/usr/local/git/bin’ &gt;&gt; /etc/bashrc<br>生效环境变量</p>\n<p>source /etc/bashrc<br>此时我们能查看 git 版本号，说明我们已经安装成功了。</p>\n<p>git –version</p>\n<p>3.创建 git 账号密码<br>任务时间：5min ~ 10min</p>\n<p>创建 git 账号<br>为我们刚刚搭建好的 git 创建一个账号</p>\n<p>useradd -m gituser<br>然后为这个账号设置密码[?]</p>\n<p>passwd gituser</p>\n<p>控制台输入创建密码后，输入您自定义的密码，并二次确认。</p>\n<p>4.初始化 git 仓库并配置用户权限<br>任务时间：5min ~ 10min</p>\n<p>创建 git 仓库并初始化<br>我们创建 /data/repositories 目录用于存放 git 仓库</p>\n<p>mkdir -p /data/repositories<br>创建好后，初始化这个仓库</p>\n<p>cd /data/repositories/ &amp;&amp; git init –bare test.git<br>配置用户权限<br>给 git 仓库目录设置用户和用户组并设置权限</p>\n<p>chown -R gituser:gituser /data/repositories<br>chmod 755 /data/repositories<br>[查找 git-shell 所在目录] , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 git-shell 的目录[?]如下</p>\n<p>示例代码：/etc/passwd<br>gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell</p>\n<p>如果按照刚才的步骤执行, 这个位置应该是 /usr/local/git/bin/git-shell, 否则请通过 which git-shell 命令查看位置</p>\n<p>安全目的, 限制 git 账号的 ssh 连接只能是登录 git-shell</p>\n<p>使用搭建好的 Git 服务<br>克隆 test repo 到本地</p>\n<p>cd ~ &amp;&amp; git clone gituser@&lt;您的 CVM IP 地址&gt;:/data/repositories/test.git<br>实验完成<br>恭喜，Git 服务器搭建完成, 从此以后你可以方便地将你的本地代码提交到 Git 服务器托管了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.下载安装 git<br>任务时间：5min ~ 10min</p>\n<p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>此实验以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。</p>\n<p>安装依赖库和编译工具<br>为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具</p>\n<p>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br>安装编译工具</p>\n<p>yum install gcc perl-ExtUtils-MakeMaker<br>下载 git<br>选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里</p>\n<p>cd /usr/local/src<br>到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里</p>\n<p>wget <a href=\"https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz\" target=\"_blank\" rel=\"noopener\">https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz</a><br>解压和编译<br>解压下载的源码包</p>\n<p>tar -zvxf git-2.10.0.tar.gz<br>解压后进入 git-2.10.0 文件夹</p>\n<p>cd git-2.10.0<br>执行编译</p>\n<p>make all prefix=/usr/local/git<br>编译完成后, 安装到 /usr/local/git 目录下</p>\n<p>make install prefix=/usr/local/git</p>\n<p>2.配置环境变量<br>任务时间：5min ~ 10min</p>\n<p>将 git 目录加入 PATH<br>将原来的 PATH 指向目录修改为现在的目录</p>\n<p>echo ‘export PATH=$PATH:/usr/local/git/bin’ &gt;&gt; /etc/bashrc<br>生效环境变量</p>\n<p>source /etc/bashrc<br>此时我们能查看 git 版本号，说明我们已经安装成功了。</p>\n<p>git –version</p>\n<p>3.创建 git 账号密码<br>任务时间：5min ~ 10min</p>\n<p>创建 git 账号<br>为我们刚刚搭建好的 git 创建一个账号</p>\n<p>useradd -m gituser<br>然后为这个账号设置密码[?]</p>\n<p>passwd gituser</p>\n<p>控制台输入创建密码后，输入您自定义的密码，并二次确认。</p>\n<p>4.初始化 git 仓库并配置用户权限<br>任务时间：5min ~ 10min</p>\n<p>创建 git 仓库并初始化<br>我们创建 /data/repositories 目录用于存放 git 仓库</p>\n<p>mkdir -p /data/repositories<br>创建好后，初始化这个仓库</p>\n<p>cd /data/repositories/ &amp;&amp; git init –bare test.git<br>配置用户权限<br>给 git 仓库目录设置用户和用户组并设置权限</p>\n<p>chown -R gituser:gituser /data/repositories<br>chmod 755 /data/repositories<br>[查找 git-shell 所在目录] , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 git-shell 的目录[?]如下</p>\n<p>示例代码：/etc/passwd<br>gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell</p>\n<p>如果按照刚才的步骤执行, 这个位置应该是 /usr/local/git/bin/git-shell, 否则请通过 which git-shell 命令查看位置</p>\n<p>安全目的, 限制 git 账号的 ssh 连接只能是登录 git-shell</p>\n<p>使用搭建好的 Git 服务<br>克隆 test repo 到本地</p>\n<p>cd ~ &amp;&amp; git clone gituser@&lt;您的 CVM IP 地址&gt;:/data/repositories/test.git<br>实验完成<br>恭喜，Git 服务器搭建完成, 从此以后你可以方便地将你的本地代码提交到 Git 服务器托管了</p>\n"},{"_content":"1. 搭建 Java 开发环境\n任务时间：18min ~ 20min\n\n此实验教大家如何配置 JDK 、Tomcat 和 Mysql\n\n安装 JDK\nJDK 是开发Java程序必须安装的软件，我们查看一下 yum 源里面的 JDK：\n\nyum list java*\n选择适合本机的JDK，并安装：\n\nyum install java-1.7.0-openjdk* -y\n安装完成后，查看是否安装成功：\n\njava -version\n安装 Tomcat\nTomcat 是一个应用服务器，是开发和调试 jsp 程序的首选，可以利用它来响应 HTML 页面的访问请求。\n\n进入本地文件夹\n\ncd /usr/local\n到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址：\n\nwget https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz\n解压这个文件夹：\n\ntar -zxf apache-tomcat-7.0.77.tar.gz\n重命名这个文件[?]：\n\nmv apache-tomcat-7.0.77 /usr/local/tomcat7\n进入 bin 文件夹\n\ncd /usr/local/tomcat7/bin\n给这个文件夹下的所有 shell 脚本授予权限：\n\nchmod 777 *.sh\n开启tomcat服务：\n\n./startup.sh\n\n重命名是为了方便后续操作, 并非必须步骤\n\n安装 MySQL\n使用 yum 安装 MySQL：\n\nyum install -y mysql-server mysql mysql-devel\n安装完成后，启动 MySQL 服务：\n\nservice mysqld restart\n设置 MySQL 账户 root 密码：[?]\n\n/usr/bin/mysqladmin -u root password 'Password'\n\n下面命令中的密码是教程为您自动生成的，为了方便实验的进行，不建议使用其它密码。如果设置其它密码，请把密码记住。\n\n2. 访问 Tomcat\n任务时间：3min ~ 5min\n\n访问 Tomcat\n此时，访问 http://<您的 CVM IP 地址>:8080 可访问到刚才启动的 Tomcat 的内置示例页面\n\n完成实验\n恭喜！您已经成功完成了搭建 Java Web 开发环境的实验任务。","source":"_posts/搭建笔记/搭建javaweb开发环境.md","raw":"1. 搭建 Java 开发环境\n任务时间：18min ~ 20min\n\n此实验教大家如何配置 JDK 、Tomcat 和 Mysql\n\n安装 JDK\nJDK 是开发Java程序必须安装的软件，我们查看一下 yum 源里面的 JDK：\n\nyum list java*\n选择适合本机的JDK，并安装：\n\nyum install java-1.7.0-openjdk* -y\n安装完成后，查看是否安装成功：\n\njava -version\n安装 Tomcat\nTomcat 是一个应用服务器，是开发和调试 jsp 程序的首选，可以利用它来响应 HTML 页面的访问请求。\n\n进入本地文件夹\n\ncd /usr/local\n到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址：\n\nwget https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz\n解压这个文件夹：\n\ntar -zxf apache-tomcat-7.0.77.tar.gz\n重命名这个文件[?]：\n\nmv apache-tomcat-7.0.77 /usr/local/tomcat7\n进入 bin 文件夹\n\ncd /usr/local/tomcat7/bin\n给这个文件夹下的所有 shell 脚本授予权限：\n\nchmod 777 *.sh\n开启tomcat服务：\n\n./startup.sh\n\n重命名是为了方便后续操作, 并非必须步骤\n\n安装 MySQL\n使用 yum 安装 MySQL：\n\nyum install -y mysql-server mysql mysql-devel\n安装完成后，启动 MySQL 服务：\n\nservice mysqld restart\n设置 MySQL 账户 root 密码：[?]\n\n/usr/bin/mysqladmin -u root password 'Password'\n\n下面命令中的密码是教程为您自动生成的，为了方便实验的进行，不建议使用其它密码。如果设置其它密码，请把密码记住。\n\n2. 访问 Tomcat\n任务时间：3min ~ 5min\n\n访问 Tomcat\n此时，访问 http://<您的 CVM IP 地址>:8080 可访问到刚才启动的 Tomcat 的内置示例页面\n\n完成实验\n恭喜！您已经成功完成了搭建 Java Web 开发环境的实验任务。","slug":"搭建笔记/搭建javaweb开发环境","published":1,"date":"2018-08-04T08:24:15.497Z","updated":"2018-08-04T06:32:45.613Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4m0013m4cmd9vn033t","content":"<ol>\n<li>搭建 Java 开发环境<br>任务时间：18min ~ 20min</li>\n</ol>\n<p>此实验教大家如何配置 JDK 、Tomcat 和 Mysql</p>\n<p>安装 JDK<br>JDK 是开发Java程序必须安装的软件，我们查看一下 yum 源里面的 JDK：</p>\n<p>yum list java*<br>选择适合本机的JDK，并安装：</p>\n<p>yum install java-1.7.0-openjdk* -y<br>安装完成后，查看是否安装成功：</p>\n<p>java -version<br>安装 Tomcat<br>Tomcat 是一个应用服务器，是开发和调试 jsp 程序的首选，可以利用它来响应 HTML 页面的访问请求。</p>\n<p>进入本地文件夹</p>\n<p>cd /usr/local<br>到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址：</p>\n<p>wget <a href=\"https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz\" target=\"_blank\" rel=\"noopener\">https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz</a><br>解压这个文件夹：</p>\n<p>tar -zxf apache-tomcat-7.0.77.tar.gz<br>重命名这个文件[?]：</p>\n<p>mv apache-tomcat-7.0.77 /usr/local/tomcat7<br>进入 bin 文件夹</p>\n<p>cd /usr/local/tomcat7/bin<br>给这个文件夹下的所有 shell 脚本授予权限：</p>\n<p>chmod 777 *.sh<br>开启tomcat服务：</p>\n<p>./startup.sh</p>\n<p>重命名是为了方便后续操作, 并非必须步骤</p>\n<p>安装 MySQL<br>使用 yum 安装 MySQL：</p>\n<p>yum install -y mysql-server mysql mysql-devel<br>安装完成后，启动 MySQL 服务：</p>\n<p>service mysqld restart<br>设置 MySQL 账户 root 密码：[?]</p>\n<p>/usr/bin/mysqladmin -u root password ‘Password’</p>\n<p>下面命令中的密码是教程为您自动生成的，为了方便实验的进行，不建议使用其它密码。如果设置其它密码，请把密码记住。</p>\n<ol start=\"2\">\n<li>访问 Tomcat<br>任务时间：3min ~ 5min</li>\n</ol>\n<p>访问 Tomcat<br>此时，访问 http://&lt;您的 CVM IP 地址&gt;:8080 可访问到刚才启动的 Tomcat 的内置示例页面</p>\n<p>完成实验<br>恭喜！您已经成功完成了搭建 Java Web 开发环境的实验任务。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>搭建 Java 开发环境<br>任务时间：18min ~ 20min</li>\n</ol>\n<p>此实验教大家如何配置 JDK 、Tomcat 和 Mysql</p>\n<p>安装 JDK<br>JDK 是开发Java程序必须安装的软件，我们查看一下 yum 源里面的 JDK：</p>\n<p>yum list java*<br>选择适合本机的JDK，并安装：</p>\n<p>yum install java-1.7.0-openjdk* -y<br>安装完成后，查看是否安装成功：</p>\n<p>java -version<br>安装 Tomcat<br>Tomcat 是一个应用服务器，是开发和调试 jsp 程序的首选，可以利用它来响应 HTML 页面的访问请求。</p>\n<p>进入本地文件夹</p>\n<p>cd /usr/local<br>到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址：</p>\n<p>wget <a href=\"https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz\" target=\"_blank\" rel=\"noopener\">https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz</a><br>解压这个文件夹：</p>\n<p>tar -zxf apache-tomcat-7.0.77.tar.gz<br>重命名这个文件[?]：</p>\n<p>mv apache-tomcat-7.0.77 /usr/local/tomcat7<br>进入 bin 文件夹</p>\n<p>cd /usr/local/tomcat7/bin<br>给这个文件夹下的所有 shell 脚本授予权限：</p>\n<p>chmod 777 *.sh<br>开启tomcat服务：</p>\n<p>./startup.sh</p>\n<p>重命名是为了方便后续操作, 并非必须步骤</p>\n<p>安装 MySQL<br>使用 yum 安装 MySQL：</p>\n<p>yum install -y mysql-server mysql mysql-devel<br>安装完成后，启动 MySQL 服务：</p>\n<p>service mysqld restart<br>设置 MySQL 账户 root 密码：[?]</p>\n<p>/usr/bin/mysqladmin -u root password ‘Password’</p>\n<p>下面命令中的密码是教程为您自动生成的，为了方便实验的进行，不建议使用其它密码。如果设置其它密码，请把密码记住。</p>\n<ol start=\"2\">\n<li>访问 Tomcat<br>任务时间：3min ~ 5min</li>\n</ol>\n<p>访问 Tomcat<br>此时，访问 http://&lt;您的 CVM IP 地址&gt;:8080 可访问到刚才启动的 Tomcat 的内置示例页面</p>\n<p>完成实验<br>恭喜！您已经成功完成了搭建 Java Web 开发环境的实验任务。</p>\n"},{"title":"OneTab 和 轻听","date":"2016-04-22T07:12:00.000Z","_content":"\n![ ](http://upload-images.jianshu.io/upload_images/1171873-5d5a9d4fb4a32993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n这两款软件是在“[异次元](https://www.iplaysoft.com/)”上看到的。\n\n>[开太多网页变卡变慢？OneTab 一键收纳标签页，瞬间恢复谷歌浏览器速度！](http://www.iplaysoft.com/onetab.html)\n\n>[轻听——可自动下载歌词和歌曲封面的安卓本地音乐播放器 (简约无广告/腾讯出品)](http://www.iplaysoft.com/qingting.html)\n\n对严重依赖浏览器的同学超级推荐“OneTab”这款google chrome插件。自己有个习惯，说不上好和不好，有时一开网页标签就50，60个。然后不够看了，接着开新的浏览器……\n\n当中有个评论挺有趣的：一般用“ctrl+shift+D”来保存目前现有的标签。哈哈哈……这也是个不错的办法。\n\n亲测：绝对推荐，这样就能纵容我这个谈不上好和不好的习惯了。\n\n***\n昨天上课手机听歌（实在不想听课）的时候，用的是本地播放器。\n其中好几首歌曲听着感觉不对劲。\n\n昨天中午饭后，怀疑是本地播放器的问题，下载了“轻听”。比较了下，明显是本地播放器的问题。说明，轻听的软件解析比本地好（仅限于我的手机）。\n\n>**这是有那么一点出我意料的。一直以为自带的软件一般是完美匹配硬件的。**\n\n其实我只试过“轻听”这款播放器，网易云音乐通常是用来下载歌曲的（手机上很少听歌，网易大法好）。\n\n为何推荐“**轻听**”？小，而且带有歌词，专辑图。这很小清新～(手动爱心)\n\n","source":"_posts/电脑问题/OneTab-和-轻听.md","raw":"---\ntitle: OneTab 和 轻听\ndate:  2016.04.22 15:12\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n![ ](http://upload-images.jianshu.io/upload_images/1171873-5d5a9d4fb4a32993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n这两款软件是在“[异次元](https://www.iplaysoft.com/)”上看到的。\n\n>[开太多网页变卡变慢？OneTab 一键收纳标签页，瞬间恢复谷歌浏览器速度！](http://www.iplaysoft.com/onetab.html)\n\n>[轻听——可自动下载歌词和歌曲封面的安卓本地音乐播放器 (简约无广告/腾讯出品)](http://www.iplaysoft.com/qingting.html)\n\n对严重依赖浏览器的同学超级推荐“OneTab”这款google chrome插件。自己有个习惯，说不上好和不好，有时一开网页标签就50，60个。然后不够看了，接着开新的浏览器……\n\n当中有个评论挺有趣的：一般用“ctrl+shift+D”来保存目前现有的标签。哈哈哈……这也是个不错的办法。\n\n亲测：绝对推荐，这样就能纵容我这个谈不上好和不好的习惯了。\n\n***\n昨天上课手机听歌（实在不想听课）的时候，用的是本地播放器。\n其中好几首歌曲听着感觉不对劲。\n\n昨天中午饭后，怀疑是本地播放器的问题，下载了“轻听”。比较了下，明显是本地播放器的问题。说明，轻听的软件解析比本地好（仅限于我的手机）。\n\n>**这是有那么一点出我意料的。一直以为自带的软件一般是完美匹配硬件的。**\n\n其实我只试过“轻听”这款播放器，网易云音乐通常是用来下载歌曲的（手机上很少听歌，网易大法好）。\n\n为何推荐“**轻听**”？小，而且带有歌词，专辑图。这很小清新～(手动爱心)\n\n","slug":"电脑问题/OneTab-和-轻听","published":1,"updated":"2018-06-28T14:12:11.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4o0017m4cmrowomtf1","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5d5a9d4fb4a32993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></p>\n<p>这两款软件是在“<a href=\"https://www.iplaysoft.com/\" target=\"_blank\" rel=\"noopener\">异次元</a>”上看到的。</p>\n<blockquote>\n<p><a href=\"http://www.iplaysoft.com/onetab.html\" target=\"_blank\" rel=\"noopener\">开太多网页变卡变慢？OneTab 一键收纳标签页，瞬间恢复谷歌浏览器速度！</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.iplaysoft.com/qingting.html\" target=\"_blank\" rel=\"noopener\">轻听——可自动下载歌词和歌曲封面的安卓本地音乐播放器 (简约无广告/腾讯出品)</a></p>\n</blockquote>\n<p>对严重依赖浏览器的同学超级推荐“OneTab”这款google chrome插件。自己有个习惯，说不上好和不好，有时一开网页标签就50，60个。然后不够看了，接着开新的浏览器……</p>\n<p>当中有个评论挺有趣的：一般用“ctrl+shift+D”来保存目前现有的标签。哈哈哈……这也是个不错的办法。</p>\n<p>亲测：绝对推荐，这样就能纵容我这个谈不上好和不好的习惯了。</p>\n<hr>\n<p>昨天上课手机听歌（实在不想听课）的时候，用的是本地播放器。<br>其中好几首歌曲听着感觉不对劲。</p>\n<p>昨天中午饭后，怀疑是本地播放器的问题，下载了“轻听”。比较了下，明显是本地播放器的问题。说明，轻听的软件解析比本地好（仅限于我的手机）。</p>\n<blockquote>\n<p><strong>这是有那么一点出我意料的。一直以为自带的软件一般是完美匹配硬件的。</strong></p>\n</blockquote>\n<p>其实我只试过“轻听”这款播放器，网易云音乐通常是用来下载歌曲的（手机上很少听歌，网易大法好）。</p>\n<p>为何推荐“<strong>轻听</strong>”？小，而且带有歌词，专辑图。这很小清新～(手动爱心)</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5d5a9d4fb4a32993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></p>\n<p>这两款软件是在“<a href=\"https://www.iplaysoft.com/\" target=\"_blank\" rel=\"noopener\">异次元</a>”上看到的。</p>\n<blockquote>\n<p><a href=\"http://www.iplaysoft.com/onetab.html\" target=\"_blank\" rel=\"noopener\">开太多网页变卡变慢？OneTab 一键收纳标签页，瞬间恢复谷歌浏览器速度！</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.iplaysoft.com/qingting.html\" target=\"_blank\" rel=\"noopener\">轻听——可自动下载歌词和歌曲封面的安卓本地音乐播放器 (简约无广告/腾讯出品)</a></p>\n</blockquote>\n<p>对严重依赖浏览器的同学超级推荐“OneTab”这款google chrome插件。自己有个习惯，说不上好和不好，有时一开网页标签就50，60个。然后不够看了，接着开新的浏览器……</p>\n<p>当中有个评论挺有趣的：一般用“ctrl+shift+D”来保存目前现有的标签。哈哈哈……这也是个不错的办法。</p>\n<p>亲测：绝对推荐，这样就能纵容我这个谈不上好和不好的习惯了。</p>\n<hr>\n<p>昨天上课手机听歌（实在不想听课）的时候，用的是本地播放器。<br>其中好几首歌曲听着感觉不对劲。</p>\n<p>昨天中午饭后，怀疑是本地播放器的问题，下载了“轻听”。比较了下，明显是本地播放器的问题。说明，轻听的软件解析比本地好（仅限于我的手机）。</p>\n<blockquote>\n<p><strong>这是有那么一点出我意料的。一直以为自带的软件一般是完美匹配硬件的。</strong></p>\n</blockquote>\n<p>其实我只试过“轻听”这款播放器，网易云音乐通常是用来下载歌曲的（手机上很少听歌，网易大法好）。</p>\n<p>为何推荐“<strong>轻听</strong>”？小，而且带有歌词，专辑图。这很小清新～(手动爱心)</p>\n"},{"_content":"1.下载启动 MongoDB\n任务时间：10min ~ 15min\n\nLeanote 依赖 MongoDB 作为数据存储，下面开始安装 MongoDB：\n\n下载 MongoDB\n进入 /home 目录，并下载 MongoDB：\n\ncd /home\n下载源码：\n\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz\n解压缩源码包：\n\ntar -xzvf mongodb-linux-x86_64-3.0.1.tgz\n创建用于存储的文件夹目录\nmkdir -p /data/db\n配置 MongoDB 的环境变量：\n\n编辑 /etc/profile，在文件末尾追加以下配置：\n\n示例代码：/etc/profile\n\nexport PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin\n并执行以下命令，使环境变量生效。\n\nsource /etc/profile\n启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）：\nmongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork\n2. 安装 Leanote\n任务时间：10min ~ 15min\n\nLeanote 是一款 Linux 下开源的软件，下面开始安装 Leanote：\n\n下载 Leanote\n先进入 /home 目录\n\ncd /home\n下载 Leanote 源码\n\nwget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz\n解开压缩包：\ntar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz\n编辑 Leanote 配置文件\n编辑文件 app.conf，在文件中找到 app.secret= 项，并修改为如下内容：\n\napp.secret=qcloud666\n初始化数据库\n导入初始化数据：\n\nmongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/\n启动 Leanote 服务\nnohup /bin/bash /home/leanote/bin/run.sh >> /var/log/leanote.log 2>&1 &\n\n3.准备域名和证书\n任务时间：15min ~ 30min\n\n注：如果您不需要通过域名访问 Leanote 云笔记本则可以直接点击“已完成，下一步”跳过域名和证书的准备环节\n\n域名注册\n如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频。\n\n视频 - 在腾讯云上购买域名\n域名解析\n域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：\n\n<您的 CVM IP 地址>\n在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：\n\n视频 - 如何在腾讯云上解析域名\n域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：\n\nping www.yourdomain.com\n如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。\n\n\n注意替换下面命令中的 www.yourmpdomain.com 为您自己的注册的域名\n\n4.访问 Leanote 云笔记本\n任务时间：时间未知\n\n通过 ip 访问笔记本\n通过访问 http://<您的 CVM IP 地址>:9000 就可以了使用自己的笔记本。\n\n初始化账户： admin\n初始化密码： abc123\n请务必修改密码已确保使用安全！\n\n通过域名访问笔记本\n如果您申请了域名，可以将 Ip 地址替换为对应的域名作为访问凭据，如：http://www.yourmpdomain.com:9000 , 注：请将 www.yourmpdomain.com 替换为您申请的域名。","source":"_posts/搭建笔记/搭建个人 Leanote 云笔记本.md","raw":"1.下载启动 MongoDB\n任务时间：10min ~ 15min\n\nLeanote 依赖 MongoDB 作为数据存储，下面开始安装 MongoDB：\n\n下载 MongoDB\n进入 /home 目录，并下载 MongoDB：\n\ncd /home\n下载源码：\n\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz\n解压缩源码包：\n\ntar -xzvf mongodb-linux-x86_64-3.0.1.tgz\n创建用于存储的文件夹目录\nmkdir -p /data/db\n配置 MongoDB 的环境变量：\n\n编辑 /etc/profile，在文件末尾追加以下配置：\n\n示例代码：/etc/profile\n\nexport PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin\n并执行以下命令，使环境变量生效。\n\nsource /etc/profile\n启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）：\nmongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork\n2. 安装 Leanote\n任务时间：10min ~ 15min\n\nLeanote 是一款 Linux 下开源的软件，下面开始安装 Leanote：\n\n下载 Leanote\n先进入 /home 目录\n\ncd /home\n下载 Leanote 源码\n\nwget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz\n解开压缩包：\ntar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz\n编辑 Leanote 配置文件\n编辑文件 app.conf，在文件中找到 app.secret= 项，并修改为如下内容：\n\napp.secret=qcloud666\n初始化数据库\n导入初始化数据：\n\nmongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/\n启动 Leanote 服务\nnohup /bin/bash /home/leanote/bin/run.sh >> /var/log/leanote.log 2>&1 &\n\n3.准备域名和证书\n任务时间：15min ~ 30min\n\n注：如果您不需要通过域名访问 Leanote 云笔记本则可以直接点击“已完成，下一步”跳过域名和证书的准备环节\n\n域名注册\n如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频。\n\n视频 - 在腾讯云上购买域名\n域名解析\n域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：\n\n<您的 CVM IP 地址>\n在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：\n\n视频 - 如何在腾讯云上解析域名\n域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：\n\nping www.yourdomain.com\n如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。\n\n\n注意替换下面命令中的 www.yourmpdomain.com 为您自己的注册的域名\n\n4.访问 Leanote 云笔记本\n任务时间：时间未知\n\n通过 ip 访问笔记本\n通过访问 http://<您的 CVM IP 地址>:9000 就可以了使用自己的笔记本。\n\n初始化账户： admin\n初始化密码： abc123\n请务必修改密码已确保使用安全！\n\n通过域名访问笔记本\n如果您申请了域名，可以将 Ip 地址替换为对应的域名作为访问凭据，如：http://www.yourmpdomain.com:9000 , 注：请将 www.yourmpdomain.com 替换为您申请的域名。","slug":"搭建笔记/搭建个人 Leanote 云笔记本","published":1,"date":"2018-08-04T08:24:15.497Z","updated":"2018-08-04T06:32:45.614Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4q0018m4cmfadyn91q","content":"<p>1.下载启动 MongoDB<br>任务时间：10min ~ 15min</p>\n<p>Leanote 依赖 MongoDB 作为数据存储，下面开始安装 MongoDB：</p>\n<p>下载 MongoDB<br>进入 /home 目录，并下载 MongoDB：</p>\n<p>cd /home<br>下载源码：</p>\n<p>wget <a href=\"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</a><br>解压缩源码包：</p>\n<p>tar -xzvf mongodb-linux-x86_64-3.0.1.tgz<br>创建用于存储的文件夹目录<br>mkdir -p /data/db<br>配置 MongoDB 的环境变量：</p>\n<p>编辑 /etc/profile，在文件末尾追加以下配置：</p>\n<p>示例代码：/etc/profile</p>\n<p>export PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin<br>并执行以下命令，使环境变量生效。</p>\n<p>source /etc/profile<br>启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）：<br>mongod –bind_ip localhost –port 27017 –dbpath /data/db/ –logpath=/var/log/mongod.log –fork</p>\n<ol start=\"2\">\n<li>安装 Leanote<br>任务时间：10min ~ 15min</li>\n</ol>\n<p>Leanote 是一款 Linux 下开源的软件，下面开始安装 Leanote：</p>\n<p>下载 Leanote<br>先进入 /home 目录</p>\n<p>cd /home<br>下载 Leanote 源码</p>\n<p>wget <a href=\"https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz\" target=\"_blank\" rel=\"noopener\">https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz</a><br>解开压缩包：<br>tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz<br>编辑 Leanote 配置文件<br>编辑文件 app.conf，在文件中找到 app.secret= 项，并修改为如下内容：</p>\n<p>app.secret=qcloud666<br>初始化数据库<br>导入初始化数据：</p>\n<p>mongorestore -h localhost -d leanote –dir /home/leanote/mongodb_backup/leanote_install_data/<br>启动 Leanote 服务<br>nohup /bin/bash /home/leanote/bin/run.sh &gt;&gt; /var/log/leanote.log 2&gt;&amp;1 &amp;</p>\n<p>3.准备域名和证书<br>任务时间：15min ~ 30min</p>\n<p>注：如果您不需要通过域名访问 Leanote 云笔记本则可以直接点击“已完成，下一步”跳过域名和证书的准备环节</p>\n<p>域名注册<br>如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频。</p>\n<p>视频 - 在腾讯云上购买域名<br>域名解析<br>域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：</p>\n<p>&lt;您的 CVM IP 地址&gt;<br>在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：</p>\n<p>视频 - 如何在腾讯云上解析域名<br>域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：</p>\n<p>ping <a href=\"http://www.yourdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourdomain.com</a><br>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>\n<p>注意替换下面命令中的 <a href=\"http://www.yourmpdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourmpdomain.com</a> 为您自己的注册的域名</p>\n<p>4.访问 Leanote 云笔记本<br>任务时间：时间未知</p>\n<p>通过 ip 访问笔记本<br>通过访问 http://&lt;您的 CVM IP 地址&gt;:9000 就可以了使用自己的笔记本。</p>\n<p>初始化账户： admin<br>初始化密码： abc123<br>请务必修改密码已确保使用安全！</p>\n<p>通过域名访问笔记本<br>如果您申请了域名，可以将 Ip 地址替换为对应的域名作为访问凭据，如：<a href=\"http://www.yourmpdomain.com:9000\" target=\"_blank\" rel=\"noopener\">http://www.yourmpdomain.com:9000</a> , 注：请将 <a href=\"http://www.yourmpdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourmpdomain.com</a> 替换为您申请的域名。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.下载启动 MongoDB<br>任务时间：10min ~ 15min</p>\n<p>Leanote 依赖 MongoDB 作为数据存储，下面开始安装 MongoDB：</p>\n<p>下载 MongoDB<br>进入 /home 目录，并下载 MongoDB：</p>\n<p>cd /home<br>下载源码：</p>\n<p>wget <a href=\"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</a><br>解压缩源码包：</p>\n<p>tar -xzvf mongodb-linux-x86_64-3.0.1.tgz<br>创建用于存储的文件夹目录<br>mkdir -p /data/db<br>配置 MongoDB 的环境变量：</p>\n<p>编辑 /etc/profile，在文件末尾追加以下配置：</p>\n<p>示例代码：/etc/profile</p>\n<p>export PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin<br>并执行以下命令，使环境变量生效。</p>\n<p>source /etc/profile<br>启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）：<br>mongod –bind_ip localhost –port 27017 –dbpath /data/db/ –logpath=/var/log/mongod.log –fork</p>\n<ol start=\"2\">\n<li>安装 Leanote<br>任务时间：10min ~ 15min</li>\n</ol>\n<p>Leanote 是一款 Linux 下开源的软件，下面开始安装 Leanote：</p>\n<p>下载 Leanote<br>先进入 /home 目录</p>\n<p>cd /home<br>下载 Leanote 源码</p>\n<p>wget <a href=\"https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz\" target=\"_blank\" rel=\"noopener\">https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz</a><br>解开压缩包：<br>tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz<br>编辑 Leanote 配置文件<br>编辑文件 app.conf，在文件中找到 app.secret= 项，并修改为如下内容：</p>\n<p>app.secret=qcloud666<br>初始化数据库<br>导入初始化数据：</p>\n<p>mongorestore -h localhost -d leanote –dir /home/leanote/mongodb_backup/leanote_install_data/<br>启动 Leanote 服务<br>nohup /bin/bash /home/leanote/bin/run.sh &gt;&gt; /var/log/leanote.log 2&gt;&amp;1 &amp;</p>\n<p>3.准备域名和证书<br>任务时间：15min ~ 30min</p>\n<p>注：如果您不需要通过域名访问 Leanote 云笔记本则可以直接点击“已完成，下一步”跳过域名和证书的准备环节</p>\n<p>域名注册<br>如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频。</p>\n<p>视频 - 在腾讯云上购买域名<br>域名解析<br>域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：</p>\n<p>&lt;您的 CVM IP 地址&gt;<br>在腾讯云购买的域名，可以到控制台添加解析记录，过程可参考下面的视频：</p>\n<p>视频 - 如何在腾讯云上解析域名<br>域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：</p>\n<p>ping <a href=\"http://www.yourdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourdomain.com</a><br>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>\n<p>注意替换下面命令中的 <a href=\"http://www.yourmpdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourmpdomain.com</a> 为您自己的注册的域名</p>\n<p>4.访问 Leanote 云笔记本<br>任务时间：时间未知</p>\n<p>通过 ip 访问笔记本<br>通过访问 http://&lt;您的 CVM IP 地址&gt;:9000 就可以了使用自己的笔记本。</p>\n<p>初始化账户： admin<br>初始化密码： abc123<br>请务必修改密码已确保使用安全！</p>\n<p>通过域名访问笔记本<br>如果您申请了域名，可以将 Ip 地址替换为对应的域名作为访问凭据，如：<a href=\"http://www.yourmpdomain.com:9000\" target=\"_blank\" rel=\"noopener\">http://www.yourmpdomain.com:9000</a> , 注：请将 <a href=\"http://www.yourmpdomain.com\" target=\"_blank\" rel=\"noopener\">www.yourmpdomain.com</a> 替换为您申请的域名。</p>\n"},{"title":"QQ右下角弹出新闻框","date":"2016-02-27T07:33:00.000Z","_content":"\n在安装路径下：Tencent\\QQ\\I18N, 用记事本打开 “ config.xml ” 文件 将语言 2052 改为 1033 或者3076, 将文件夹2052改为相对应的数字。但这种方法会有一些小小的缺憾，比如点击个人资料时，好友印象、QQ空间、QQ秀、装扮等会无法显示，且登陆时为直版登陆框，无法设置使用横版的经典登陆框……但并不影响正常使用……\n（这些“ 缺憾 ”对我来说不成影响……）\n\n*（顺便把聊天对话框QQ秀上的广告、右侧的广告处理了）*\n\n### 去除聊天窗口右上角广告：\n1、在   \n**C\\:用户\\你的用户名\\AppData\\Roaming\\Tencent\\QQ\\Misc (Vista/win7)**\n找到  *com.tencent.advertisement * 文件夹 ，打开，删除里边的所有内容。注意文件夹本身不能删除，然后把当前用户的写入权限给拒绝掉（需要当前分区为NTFS格式）。\n方法：文件夹上右键，属性 – 安全标签，选中当前登录用户，接着在下方“写入”权限里，拒绝上打勾。\n\n2、如果有多个QQ需要登录的话，上边这样做还是不能屏蔽其他QQ号聊天窗口右上角的广告，需要直接将**Misc**文件夹的写入权限给拒绝掉，不然可恶的腾讯会在**MISC**文件夹下添com.tencent.advertisement\\*\\*\\*文件夹，\\*\\*\\*代表随机性的数字，文件夹里边仍然是可恶的广告。\n ***\n嗯，干掉了.\n\n>最近发现，原来还有“QQ轻聊版”这种存在，使用了下，一周了，右下角无弹窗，聊天界面无广告。只不过～缺少emoji表情、QQ群不能布置作业、群工具部分图标丢失。（算是残缺版吧～诶）\n——记录于20160904\n\n> 现在用 TIM 了，大多数人都改用腾讯的 TIM ，没广告\n——记录于20180628\n\n参考《[如何阻止QQ右下角弹出新闻框](http://blog.sina.com.cn/s/blog_62c15a9501010q74.html)》\n\n","source":"_posts/电脑问题/QQ右下角弹出新闻框.md","raw":"---\ntitle: QQ右下角弹出新闻框\ndate:  2016.02.27 15:33\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n在安装路径下：Tencent\\QQ\\I18N, 用记事本打开 “ config.xml ” 文件 将语言 2052 改为 1033 或者3076, 将文件夹2052改为相对应的数字。但这种方法会有一些小小的缺憾，比如点击个人资料时，好友印象、QQ空间、QQ秀、装扮等会无法显示，且登陆时为直版登陆框，无法设置使用横版的经典登陆框……但并不影响正常使用……\n（这些“ 缺憾 ”对我来说不成影响……）\n\n*（顺便把聊天对话框QQ秀上的广告、右侧的广告处理了）*\n\n### 去除聊天窗口右上角广告：\n1、在   \n**C\\:用户\\你的用户名\\AppData\\Roaming\\Tencent\\QQ\\Misc (Vista/win7)**\n找到  *com.tencent.advertisement * 文件夹 ，打开，删除里边的所有内容。注意文件夹本身不能删除，然后把当前用户的写入权限给拒绝掉（需要当前分区为NTFS格式）。\n方法：文件夹上右键，属性 – 安全标签，选中当前登录用户，接着在下方“写入”权限里，拒绝上打勾。\n\n2、如果有多个QQ需要登录的话，上边这样做还是不能屏蔽其他QQ号聊天窗口右上角的广告，需要直接将**Misc**文件夹的写入权限给拒绝掉，不然可恶的腾讯会在**MISC**文件夹下添com.tencent.advertisement\\*\\*\\*文件夹，\\*\\*\\*代表随机性的数字，文件夹里边仍然是可恶的广告。\n ***\n嗯，干掉了.\n\n>最近发现，原来还有“QQ轻聊版”这种存在，使用了下，一周了，右下角无弹窗，聊天界面无广告。只不过～缺少emoji表情、QQ群不能布置作业、群工具部分图标丢失。（算是残缺版吧～诶）\n——记录于20160904\n\n> 现在用 TIM 了，大多数人都改用腾讯的 TIM ，没广告\n——记录于20180628\n\n参考《[如何阻止QQ右下角弹出新闻框](http://blog.sina.com.cn/s/blog_62c15a9501010q74.html)》\n\n","slug":"电脑问题/QQ右下角弹出新闻框","published":1,"updated":"2018-06-28T14:12:11.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4s001cm4cmn29eylpk","content":"<p>在安装路径下：Tencent\\QQ\\I18N, 用记事本打开 “ config.xml ” 文件 将语言 2052 改为 1033 或者3076, 将文件夹2052改为相对应的数字。但这种方法会有一些小小的缺憾，比如点击个人资料时，好友印象、QQ空间、QQ秀、装扮等会无法显示，且登陆时为直版登陆框，无法设置使用横版的经典登陆框……但并不影响正常使用……<br>（这些“ 缺憾 ”对我来说不成影响……）</p>\n<p><em>（顺便把聊天对话框QQ秀上的广告、右侧的广告处理了）</em></p>\n<h3 id=\"去除聊天窗口右上角广告：\"><a href=\"#去除聊天窗口右上角广告：\" class=\"headerlink\" title=\"去除聊天窗口右上角广告：\"></a>去除聊天窗口右上角广告：</h3><p>1、在<br><strong>C\\:用户\\你的用户名\\AppData\\Roaming\\Tencent\\QQ\\Misc (Vista/win7)</strong><br>找到  <em>com.tencent.advertisement </em> 文件夹 ，打开，删除里边的所有内容。注意文件夹本身不能删除，然后把当前用户的写入权限给拒绝掉（需要当前分区为NTFS格式）。<br>方法：文件夹上右键，属性 – 安全标签，选中当前登录用户，接着在下方“写入”权限里，拒绝上打勾。</p>\n<p>2、如果有多个QQ需要登录的话，上边这样做还是不能屏蔽其他QQ号聊天窗口右上角的广告，需要直接将<strong>Misc</strong>文件夹的写入权限给拒绝掉，不然可恶的腾讯会在<strong>MISC</strong>文件夹下添com.tencent.advertisement***文件夹，***代表随机性的数字，文件夹里边仍然是可恶的广告。</p>\n<hr>\n<p>嗯，干掉了.</p>\n<blockquote>\n<p>最近发现，原来还有“QQ轻聊版”这种存在，使用了下，一周了，右下角无弹窗，聊天界面无广告。只不过～缺少emoji表情、QQ群不能布置作业、群工具部分图标丢失。（算是残缺版吧～诶）<br>——记录于20160904</p>\n</blockquote>\n<blockquote>\n<p>现在用 TIM 了，大多数人都改用腾讯的 TIM ，没广告<br>——记录于20180628</p>\n</blockquote>\n<p>参考《<a href=\"http://blog.sina.com.cn/s/blog_62c15a9501010q74.html\" target=\"_blank\" rel=\"noopener\">如何阻止QQ右下角弹出新闻框</a>》</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在安装路径下：Tencent\\QQ\\I18N, 用记事本打开 “ config.xml ” 文件 将语言 2052 改为 1033 或者3076, 将文件夹2052改为相对应的数字。但这种方法会有一些小小的缺憾，比如点击个人资料时，好友印象、QQ空间、QQ秀、装扮等会无法显示，且登陆时为直版登陆框，无法设置使用横版的经典登陆框……但并不影响正常使用……<br>（这些“ 缺憾 ”对我来说不成影响……）</p>\n<p><em>（顺便把聊天对话框QQ秀上的广告、右侧的广告处理了）</em></p>\n<h3 id=\"去除聊天窗口右上角广告：\"><a href=\"#去除聊天窗口右上角广告：\" class=\"headerlink\" title=\"去除聊天窗口右上角广告：\"></a>去除聊天窗口右上角广告：</h3><p>1、在<br><strong>C\\:用户\\你的用户名\\AppData\\Roaming\\Tencent\\QQ\\Misc (Vista/win7)</strong><br>找到  <em>com.tencent.advertisement </em> 文件夹 ，打开，删除里边的所有内容。注意文件夹本身不能删除，然后把当前用户的写入权限给拒绝掉（需要当前分区为NTFS格式）。<br>方法：文件夹上右键，属性 – 安全标签，选中当前登录用户，接着在下方“写入”权限里，拒绝上打勾。</p>\n<p>2、如果有多个QQ需要登录的话，上边这样做还是不能屏蔽其他QQ号聊天窗口右上角的广告，需要直接将<strong>Misc</strong>文件夹的写入权限给拒绝掉，不然可恶的腾讯会在<strong>MISC</strong>文件夹下添com.tencent.advertisement***文件夹，***代表随机性的数字，文件夹里边仍然是可恶的广告。</p>\n<hr>\n<p>嗯，干掉了.</p>\n<blockquote>\n<p>最近发现，原来还有“QQ轻聊版”这种存在，使用了下，一周了，右下角无弹窗，聊天界面无广告。只不过～缺少emoji表情、QQ群不能布置作业、群工具部分图标丢失。（算是残缺版吧～诶）<br>——记录于20160904</p>\n</blockquote>\n<blockquote>\n<p>现在用 TIM 了，大多数人都改用腾讯的 TIM ，没广告<br>——记录于20180628</p>\n</blockquote>\n<p>参考《<a href=\"http://blog.sina.com.cn/s/blog_62c15a9501010q74.html\" target=\"_blank\" rel=\"noopener\">如何阻止QQ右下角弹出新闻框</a>》</p>\n"},{"title":"Tomcat提示指定的服务未安装Unable to open the service 'tomcat'","date":"2017-01-20T16:12:00.000Z","_content":"\n装了windows10后，tomcat莫名其妙的不能用，网上七姑八婆说win10不能用解压版，只能用安装版@#$%^&^%$^&...啧啧啧。然后用解压版后就出现了这个问题\n***\n\n在使用NetBeans时出现如下所示错误，其原因是部分已安装的组件没有以服务的方式存在。\n\n![](http://upload-images.jianshu.io/upload_images/1171873-5c5aed60d49d7622?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面就是解决办法：\n   打开“运行”到“cmd”，然后进入到tomcat安装路径“*:\\Program Files (x86)\\Apache Tomcat 8.0.3\\bin”的bin下面，然后输入如下所示内容即可：service.bat install\n效果如下图所示：\n\n![](http://upload-images.jianshu.io/upload_images/1171873-18e59ba54e43616b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n图2 安装后界面\n\n在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。\n----------------------------------------------------------------------------------\n当然，你也可以这样玩，那就是安装之后又卸载，卸载时在安装后界面输入以下代码即可：service.bat uninstall,就这样，完成了卸载，那我们就继续从头开始安装吧，哈哈\n\n以上就是Tomcat提示指定的服务未安装Unable to open the service 'tomcat'的解决方法。\n\n***\n声明：\n本文转载自[suwu150的博客](http://blog.csdn.net/suwu150)\n [Tomcat提示指定的服务未安装Unable to open the service 'tomcat'](http://blog.csdn.net/suwu150/article/details/51506493)\n","source":"_posts/电脑问题/Tomcat提示指定的服务未安装Unable-to-open-the-service-'tomcat'.md","raw":"---\ntitle: Tomcat提示指定的服务未安装Unable to open the service 'tomcat'\ndate:  2017.01.21 00:12\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n装了windows10后，tomcat莫名其妙的不能用，网上七姑八婆说win10不能用解压版，只能用安装版@#$%^&^%$^&...啧啧啧。然后用解压版后就出现了这个问题\n***\n\n在使用NetBeans时出现如下所示错误，其原因是部分已安装的组件没有以服务的方式存在。\n\n![](http://upload-images.jianshu.io/upload_images/1171873-5c5aed60d49d7622?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面就是解决办法：\n   打开“运行”到“cmd”，然后进入到tomcat安装路径“*:\\Program Files (x86)\\Apache Tomcat 8.0.3\\bin”的bin下面，然后输入如下所示内容即可：service.bat install\n效果如下图所示：\n\n![](http://upload-images.jianshu.io/upload_images/1171873-18e59ba54e43616b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n图2 安装后界面\n\n在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。\n----------------------------------------------------------------------------------\n当然，你也可以这样玩，那就是安装之后又卸载，卸载时在安装后界面输入以下代码即可：service.bat uninstall,就这样，完成了卸载，那我们就继续从头开始安装吧，哈哈\n\n以上就是Tomcat提示指定的服务未安装Unable to open the service 'tomcat'的解决方法。\n\n***\n声明：\n本文转载自[suwu150的博客](http://blog.csdn.net/suwu150)\n [Tomcat提示指定的服务未安装Unable to open the service 'tomcat'](http://blog.csdn.net/suwu150/article/details/51506493)\n","slug":"电脑问题/Tomcat提示指定的服务未安装Unable-to-open-the-service-'tomcat'","published":1,"updated":"2018-06-28T14:12:11.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4u001dm4cm4oq13ebu","content":"<p>装了windows10后，tomcat莫名其妙的不能用，网上七姑八婆说win10不能用解压版，只能用安装版@#$%^&amp;^%$^&amp;…啧啧啧。然后用解压版后就出现了这个问题</p>\n<hr>\n<p>在使用NetBeans时出现如下所示错误，其原因是部分已安装的组件没有以服务的方式存在。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5c5aed60d49d7622?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>下面就是解决办法：<br>   打开“运行”到“cmd”，然后进入到tomcat安装路径“*:\\Program Files (x86)\\Apache Tomcat 8.0.3\\bin”的bin下面，然后输入如下所示内容即可：service.bat install<br>效果如下图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-18e59ba54e43616b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>图2 安装后界面</p>\n<h2 id=\"在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。\"><a href=\"#在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。\" class=\"headerlink\" title=\"在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。\"></a>在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。</h2><p>当然，你也可以这样玩，那就是安装之后又卸载，卸载时在安装后界面输入以下代码即可：service.bat uninstall,就这样，完成了卸载，那我们就继续从头开始安装吧，哈哈</p>\n<p>以上就是Tomcat提示指定的服务未安装Unable to open the service ‘tomcat’的解决方法。</p>\n<hr>\n<p>声明：<br>本文转载自<a href=\"http://blog.csdn.net/suwu150\" target=\"_blank\" rel=\"noopener\">suwu150的博客</a><br> <a href=\"http://blog.csdn.net/suwu150/article/details/51506493\" target=\"_blank\" rel=\"noopener\">Tomcat提示指定的服务未安装Unable to open the service ‘tomcat’</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>装了windows10后，tomcat莫名其妙的不能用，网上七姑八婆说win10不能用解压版，只能用安装版@#$%^&amp;^%$^&amp;…啧啧啧。然后用解压版后就出现了这个问题</p>\n<hr>\n<p>在使用NetBeans时出现如下所示错误，其原因是部分已安装的组件没有以服务的方式存在。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5c5aed60d49d7622?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>下面就是解决办法：<br>   打开“运行”到“cmd”，然后进入到tomcat安装路径“*:\\Program Files (x86)\\Apache Tomcat 8.0.3\\bin”的bin下面，然后输入如下所示内容即可：service.bat install<br>效果如下图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-18e59ba54e43616b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>图2 安装后界面</p>\n<h2 id=\"在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。\"><a href=\"#在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。\" class=\"headerlink\" title=\"在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。\"></a>在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。</h2><p>当然，你也可以这样玩，那就是安装之后又卸载，卸载时在安装后界面输入以下代码即可：service.bat uninstall,就这样，完成了卸载，那我们就继续从头开始安装吧，哈哈</p>\n<p>以上就是Tomcat提示指定的服务未安装Unable to open the service ‘tomcat’的解决方法。</p>\n<hr>\n<p>声明：<br>本文转载自<a href=\"http://blog.csdn.net/suwu150\" target=\"_blank\" rel=\"noopener\">suwu150的博客</a><br> <a href=\"http://blog.csdn.net/suwu150/article/details/51506493\" target=\"_blank\" rel=\"noopener\">Tomcat提示指定的服务未安装Unable to open the service ‘tomcat’</a></p>\n"},{"title":"eclipse中批量修改Java类文件中引入的package包路径","date":"2017-08-05T07:33:00.000Z","_content":"\n当复制其他工程中的包到新工程的目录中时，由于包路径不同，出现红叉，下面的类要一个一个修改包路径，类文件太多的话就比较麻烦了，如何批量改变包路径解决这个问题？\n## 方法一：\n\nCtrl+H > File Serach > 输入原包名 > File name patterns下填写*.java > Replace... > 找到后输入要替换的包名 然后自己选择是全部替换还是部分替换.\n![](http://upload-images.jianshu.io/upload_images/1171873-7d92f8f3597989f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 方法二：\n\n直接修改出错的类所在的包的名称再改回来，这样就可以统一修改所有出错的类的package包名称。\n\n***\n原文转载自：[https://my.oschina.net/leeoo/blog/37852](https://my.oschina.net/leeoo/blog/37852)\n","source":"_posts/电脑问题/eclipse中批量修改Java类文件中引入的package包路径.md","raw":"---\ntitle: eclipse中批量修改Java类文件中引入的package包路径\ndate:  2017.08.05 15:33\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n当复制其他工程中的包到新工程的目录中时，由于包路径不同，出现红叉，下面的类要一个一个修改包路径，类文件太多的话就比较麻烦了，如何批量改变包路径解决这个问题？\n## 方法一：\n\nCtrl+H > File Serach > 输入原包名 > File name patterns下填写*.java > Replace... > 找到后输入要替换的包名 然后自己选择是全部替换还是部分替换.\n![](http://upload-images.jianshu.io/upload_images/1171873-7d92f8f3597989f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 方法二：\n\n直接修改出错的类所在的包的名称再改回来，这样就可以统一修改所有出错的类的package包名称。\n\n***\n原文转载自：[https://my.oschina.net/leeoo/blog/37852](https://my.oschina.net/leeoo/blog/37852)\n","slug":"电脑问题/eclipse中批量修改Java类文件中引入的package包路径","published":1,"updated":"2018-06-28T14:12:11.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4w001fm4cmnv79058k","content":"<p>当复制其他工程中的包到新工程的目录中时，由于包路径不同，出现红叉，下面的类要一个一个修改包路径，类文件太多的话就比较麻烦了，如何批量改变包路径解决这个问题？</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h2><p>Ctrl+H &gt; File Serach &gt; 输入原包名 &gt; File name patterns下填写*.java &gt; Replace… &gt; 找到后输入要替换的包名 然后自己选择是全部替换还是部分替换.<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-7d92f8f3597989f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h2><p>直接修改出错的类所在的包的名称再改回来，这样就可以统一修改所有出错的类的package包名称。</p>\n<hr>\n<p>原文转载自：<a href=\"https://my.oschina.net/leeoo/blog/37852\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/leeoo/blog/37852</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>当复制其他工程中的包到新工程的目录中时，由于包路径不同，出现红叉，下面的类要一个一个修改包路径，类文件太多的话就比较麻烦了，如何批量改变包路径解决这个问题？</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h2><p>Ctrl+H &gt; File Serach &gt; 输入原包名 &gt; File name patterns下填写*.java &gt; Replace… &gt; 找到后输入要替换的包名 然后自己选择是全部替换还是部分替换.<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-7d92f8f3597989f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h2><p>直接修改出错的类所在的包的名称再改回来，这样就可以统一修改所有出错的类的package包名称。</p>\n<hr>\n<p>原文转载自：<a href=\"https://my.oschina.net/leeoo/blog/37852\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/leeoo/blog/37852</a></p>\n"},{"title":"windows7隐藏IE浏览器","date":"2016-02-27T07:33:00.000Z","_content":"\n点击开始，运行，输入 **“regedit”**，打开注册表编辑器。\n\n然后找到下面的项删除，最后的项名称不一定是一样，注意该项数据是**Internet Explorer**，如果还有其他浏览器被改，找到对应项删除即可\n\n```HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\\{FAC36FAA-6F1A-0EB6-A06D-841C1415FB7E}\n```\n右边窗口（名称，类型，数据）删掉“数据”为：**Internet Explorer** 即可。（找不到或没用的话 ，则为：“ **Windows media **”）\n","source":"_posts/电脑问题/win7隐藏IE浏览器.md","raw":"---\ntitle: windows7隐藏IE浏览器\ndate:  2016.02.27 15:33\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n点击开始，运行，输入 **“regedit”**，打开注册表编辑器。\n\n然后找到下面的项删除，最后的项名称不一定是一样，注意该项数据是**Internet Explorer**，如果还有其他浏览器被改，找到对应项删除即可\n\n```HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\\{FAC36FAA-6F1A-0EB6-A06D-841C1415FB7E}\n```\n右边窗口（名称，类型，数据）删掉“数据”为：**Internet Explorer** 即可。（找不到或没用的话 ，则为：“ **Windows media **”）\n","slug":"电脑问题/win7隐藏IE浏览器","published":1,"updated":"2018-06-28T14:12:11.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc4y001im4cmpsy2ke3i","content":"<p>点击开始，运行，输入 <strong>“regedit”</strong>，打开注册表编辑器。</p>\n<p>然后找到下面的项删除，最后的项名称不一定是一样，注意该项数据是<strong>Internet Explorer</strong>，如果还有其他浏览器被改，找到对应项删除即可</p>\n<pre><code class=\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\\{FAC36FAA-6F1A-0EB6-A06D-841C1415FB7E}\">\n</code></pre>\n<p>右边窗口（名称，类型，数据）删掉“数据”为：<strong>Internet Explorer</strong> 即可。（找不到或没用的话 ，则为：“ <strong>Windows media </strong>”）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>点击开始，运行，输入 <strong>“regedit”</strong>，打开注册表编辑器。</p>\n<p>然后找到下面的项删除，最后的项名称不一定是一样，注意该项数据是<strong>Internet Explorer</strong>，如果还有其他浏览器被改，找到对应项删除即可</p>\n<pre><code class=\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\\{FAC36FAA-6F1A-0EB6-A06D-841C1415FB7E}\">\n</code></pre>\n<p>右边窗口（名称，类型，数据）删掉“数据”为：<strong>Internet Explorer</strong> 即可。（找不到或没用的话 ，则为：“ <strong>Windows media </strong>”）</p>\n"},{"title":"windows10关闭自动更新","date":"2017-01-24T06:23:00.000Z","_content":"\n**方法一：禁用Windows updata服务**\nWindows updata为自动更新的服务，我们只要将其禁用，也就可以达到更新服务不可用的目的从而阻止自动更新；操作步骤：按WIN+R 打开运行，输入 services.msc 回车 然后找到 “Windows updata”服务，双击后设置为禁用 应用即可；\n![](http://upload-images.jianshu.io/upload_images/1171873-706fe65a3311855e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**方法二：推迟自动更新**\n微软在win10系统中Windows更新处虽然没有提供关闭自动更新的选项，不过却提供了延迟更新的选项；操作步骤：打开win10系统的Windows更新，点击高级选项，勾选“推迟升级”选项即可；（同样，我们也可以在组策略中的Windows组件-Windows更新 下 启用“延迟升级”达到推迟几个月升级的目的）\n![](http://upload-images.jianshu.io/upload_images/1171873-cb817e2ec1d840d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**方法三：为windows更新指定一个错误的升级服务器地址**\n在win10系统中，组策略中我们可以为Windows更新服务器指定一个地址，从而达到无法检测到更新，而无法更新的目的。操作步骤：按“Win+R”组合键打开运行输入“gpedit.msc”再点“确定”。打开“本地组策略编辑器”展开“管理模版”→“Windows组件”。接着双击“Windows组件”找到“Windows Update”。在“Windows Update”内找到“指定Intranet Microsoft更新服务位置”。选中“指定Intranet Microsoft更新服务位置”右键编辑。将“未配置”框选为“已启用”。再在“设置检测更新的Intranet更新服务”填写127.0.0.1 (注：127.0.0.1为本机IP)\n![](http://upload-images.jianshu.io/upload_images/1171873-37773d28d91ab823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n注意：win10基础版将不会有组策略等功能，也无法关闭自动更新！PS：我们了解到新的Windows系统，要求用户接受每一次更新。“Windows 10家庭版”用户(绝大多数消费者所用版本)完全无法逃避更新；“[Windows10专业版](http://www.xitonghe.com/win10/)”用户有8个月的时间来推迟安装更新，但同样无法拒绝；只有“Windows 10企业版”高级用户才能无限期推迟更新。\n***\n（注：本文非原创，因为需要随便百度来的，作为记录，防止以后忘了而已，部分因时间原因导致文与实际不符。作参考）\n","source":"_posts/电脑问题/windows10关闭“自动更新”.md","raw":"---\ntitle: windows10关闭自动更新\ndate:  2017.01.24 14:23\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n**方法一：禁用Windows updata服务**\nWindows updata为自动更新的服务，我们只要将其禁用，也就可以达到更新服务不可用的目的从而阻止自动更新；操作步骤：按WIN+R 打开运行，输入 services.msc 回车 然后找到 “Windows updata”服务，双击后设置为禁用 应用即可；\n![](http://upload-images.jianshu.io/upload_images/1171873-706fe65a3311855e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**方法二：推迟自动更新**\n微软在win10系统中Windows更新处虽然没有提供关闭自动更新的选项，不过却提供了延迟更新的选项；操作步骤：打开win10系统的Windows更新，点击高级选项，勾选“推迟升级”选项即可；（同样，我们也可以在组策略中的Windows组件-Windows更新 下 启用“延迟升级”达到推迟几个月升级的目的）\n![](http://upload-images.jianshu.io/upload_images/1171873-cb817e2ec1d840d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**方法三：为windows更新指定一个错误的升级服务器地址**\n在win10系统中，组策略中我们可以为Windows更新服务器指定一个地址，从而达到无法检测到更新，而无法更新的目的。操作步骤：按“Win+R”组合键打开运行输入“gpedit.msc”再点“确定”。打开“本地组策略编辑器”展开“管理模版”→“Windows组件”。接着双击“Windows组件”找到“Windows Update”。在“Windows Update”内找到“指定Intranet Microsoft更新服务位置”。选中“指定Intranet Microsoft更新服务位置”右键编辑。将“未配置”框选为“已启用”。再在“设置检测更新的Intranet更新服务”填写127.0.0.1 (注：127.0.0.1为本机IP)\n![](http://upload-images.jianshu.io/upload_images/1171873-37773d28d91ab823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n注意：win10基础版将不会有组策略等功能，也无法关闭自动更新！PS：我们了解到新的Windows系统，要求用户接受每一次更新。“Windows 10家庭版”用户(绝大多数消费者所用版本)完全无法逃避更新；“[Windows10专业版](http://www.xitonghe.com/win10/)”用户有8个月的时间来推迟安装更新，但同样无法拒绝；只有“Windows 10企业版”高级用户才能无限期推迟更新。\n***\n（注：本文非原创，因为需要随便百度来的，作为记录，防止以后忘了而已，部分因时间原因导致文与实际不符。作参考）\n","slug":"电脑问题/windows10关闭“自动更新”","published":1,"updated":"2018-06-28T14:12:11.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc50001km4cmiv32v44c","content":"<p><strong>方法一：禁用Windows updata服务</strong><br>Windows updata为自动更新的服务，我们只要将其禁用，也就可以达到更新服务不可用的目的从而阻止自动更新；操作步骤：按WIN+R 打开运行，输入 services.msc 回车 然后找到 “Windows updata”服务，双击后设置为禁用 应用即可；<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-706fe65a3311855e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>方法二：推迟自动更新</strong><br>微软在win10系统中Windows更新处虽然没有提供关闭自动更新的选项，不过却提供了延迟更新的选项；操作步骤：打开win10系统的Windows更新，点击高级选项，勾选“推迟升级”选项即可；（同样，我们也可以在组策略中的Windows组件-Windows更新 下 启用“延迟升级”达到推迟几个月升级的目的）<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-cb817e2ec1d840d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>方法三：为windows更新指定一个错误的升级服务器地址</strong><br>在win10系统中，组策略中我们可以为Windows更新服务器指定一个地址，从而达到无法检测到更新，而无法更新的目的。操作步骤：按“Win+R”组合键打开运行输入“gpedit.msc”再点“确定”。打开“本地组策略编辑器”展开“管理模版”→“Windows组件”。接着双击“Windows组件”找到“Windows Update”。在“Windows Update”内找到“指定Intranet Microsoft更新服务位置”。选中“指定Intranet Microsoft更新服务位置”右键编辑。将“未配置”框选为“已启用”。再在“设置检测更新的Intranet更新服务”填写127.0.0.1 (注：127.0.0.1为本机IP)<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-37773d28d91ab823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>注意：win10基础版将不会有组策略等功能，也无法关闭自动更新！PS：我们了解到新的Windows系统，要求用户接受每一次更新。“Windows 10家庭版”用户(绝大多数消费者所用版本)完全无法逃避更新；“<a href=\"http://www.xitonghe.com/win10/\" target=\"_blank\" rel=\"noopener\">Windows10专业版</a>”用户有8个月的时间来推迟安装更新，但同样无法拒绝；只有“Windows 10企业版”高级用户才能无限期推迟更新。</p>\n<hr>\n<p>（注：本文非原创，因为需要随便百度来的，作为记录，防止以后忘了而已，部分因时间原因导致文与实际不符。作参考）</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>方法一：禁用Windows updata服务</strong><br>Windows updata为自动更新的服务，我们只要将其禁用，也就可以达到更新服务不可用的目的从而阻止自动更新；操作步骤：按WIN+R 打开运行，输入 services.msc 回车 然后找到 “Windows updata”服务，双击后设置为禁用 应用即可；<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-706fe65a3311855e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>方法二：推迟自动更新</strong><br>微软在win10系统中Windows更新处虽然没有提供关闭自动更新的选项，不过却提供了延迟更新的选项；操作步骤：打开win10系统的Windows更新，点击高级选项，勾选“推迟升级”选项即可；（同样，我们也可以在组策略中的Windows组件-Windows更新 下 启用“延迟升级”达到推迟几个月升级的目的）<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-cb817e2ec1d840d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>方法三：为windows更新指定一个错误的升级服务器地址</strong><br>在win10系统中，组策略中我们可以为Windows更新服务器指定一个地址，从而达到无法检测到更新，而无法更新的目的。操作步骤：按“Win+R”组合键打开运行输入“gpedit.msc”再点“确定”。打开“本地组策略编辑器”展开“管理模版”→“Windows组件”。接着双击“Windows组件”找到“Windows Update”。在“Windows Update”内找到“指定Intranet Microsoft更新服务位置”。选中“指定Intranet Microsoft更新服务位置”右键编辑。将“未配置”框选为“已启用”。再在“设置检测更新的Intranet更新服务”填写127.0.0.1 (注：127.0.0.1为本机IP)<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-37773d28d91ab823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>注意：win10基础版将不会有组策略等功能，也无法关闭自动更新！PS：我们了解到新的Windows系统，要求用户接受每一次更新。“Windows 10家庭版”用户(绝大多数消费者所用版本)完全无法逃避更新；“<a href=\"http://www.xitonghe.com/win10/\" target=\"_blank\" rel=\"noopener\">Windows10专业版</a>”用户有8个月的时间来推迟安装更新，但同样无法拒绝；只有“Windows 10企业版”高级用户才能无限期推迟更新。</p>\n<hr>\n<p>（注：本文非原创，因为需要随便百度来的，作为记录，防止以后忘了而已，部分因时间原因导致文与实际不符。作参考）</p>\n"},{"title":"windows7,打开休眠模式","date":"2016-04-01T06:23:00.000Z","_content":"\n运行：powercfg -h on\n没了，我就记着，省得找不着\n","source":"_posts/电脑问题/windows7,打开休眠模式.md","raw":"---\ntitle: windows7,打开休眠模式\ndate:  2016.04.01 14:23\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n运行：powercfg -h on\n没了，我就记着，省得找不着\n","slug":"电脑问题/windows7,打开休眠模式","published":1,"updated":"2018-06-28T14:12:11.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc52001nm4cmclltq7b6","content":"<p>运行：powercfg -h on<br>没了，我就记着，省得找不着</p>\n","site":{"data":{}},"excerpt":"","more":"<p>运行：powercfg -h on<br>没了，我就记着，省得找不着</p>\n"},{"title":"f.lux和“薄暮微光”","date":"2016-04-01T07:12:00.000Z","_content":"\n两个有趣的软件：自动调整屏幕色温减少蓝光防疲劳\n\n在异次元看到的，直接传送门：\n\n>[睡前玩手机必备的 Android 安卓夜间模式 APP 应用](http://www.iplaysoft.com/android-night-shift-mode.html)\n\n>[f.lux – 全天候保护眼睛健康软件！](http://www.iplaysoft.com/flux.html)\n\n考试那天装了试用，感觉只有在日出和日落时才会调色温……\n\n不过效果还行……因为有时候6点多起床看电脑，宿舍很暗，又不好意思开灯（我那能照亮半个宿舍的台灯），于是算帮上忙了……\n\n>不过后来发现，并不经常用。\n——又是记录于20160904\n","source":"_posts/电脑问题/f-lux和“薄暮微光”.md","raw":"---\ntitle: f.lux和“薄暮微光”\ndate:  2016.04.1 15:12\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n两个有趣的软件：自动调整屏幕色温减少蓝光防疲劳\n\n在异次元看到的，直接传送门：\n\n>[睡前玩手机必备的 Android 安卓夜间模式 APP 应用](http://www.iplaysoft.com/android-night-shift-mode.html)\n\n>[f.lux – 全天候保护眼睛健康软件！](http://www.iplaysoft.com/flux.html)\n\n考试那天装了试用，感觉只有在日出和日落时才会调色温……\n\n不过效果还行……因为有时候6点多起床看电脑，宿舍很暗，又不好意思开灯（我那能照亮半个宿舍的台灯），于是算帮上忙了……\n\n>不过后来发现，并不经常用。\n——又是记录于20160904\n","slug":"电脑问题/f-lux和“薄暮微光”","published":1,"updated":"2018-06-28T14:12:11.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc54001rm4cmgjap1w9w","content":"<p>两个有趣的软件：自动调整屏幕色温减少蓝光防疲劳</p>\n<p>在异次元看到的，直接传送门：</p>\n<blockquote>\n<p><a href=\"http://www.iplaysoft.com/android-night-shift-mode.html\" target=\"_blank\" rel=\"noopener\">睡前玩手机必备的 Android 安卓夜间模式 APP 应用</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.iplaysoft.com/flux.html\" target=\"_blank\" rel=\"noopener\">f.lux – 全天候保护眼睛健康软件！</a></p>\n</blockquote>\n<p>考试那天装了试用，感觉只有在日出和日落时才会调色温……</p>\n<p>不过效果还行……因为有时候6点多起床看电脑，宿舍很暗，又不好意思开灯（我那能照亮半个宿舍的台灯），于是算帮上忙了……</p>\n<blockquote>\n<p>不过后来发现，并不经常用。<br>——又是记录于20160904</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>两个有趣的软件：自动调整屏幕色温减少蓝光防疲劳</p>\n<p>在异次元看到的，直接传送门：</p>\n<blockquote>\n<p><a href=\"http://www.iplaysoft.com/android-night-shift-mode.html\" target=\"_blank\" rel=\"noopener\">睡前玩手机必备的 Android 安卓夜间模式 APP 应用</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.iplaysoft.com/flux.html\" target=\"_blank\" rel=\"noopener\">f.lux – 全天候保护眼睛健康软件！</a></p>\n</blockquote>\n<p>考试那天装了试用，感觉只有在日出和日落时才会调色温……</p>\n<p>不过效果还行……因为有时候6点多起床看电脑，宿舍很暗，又不好意思开灯（我那能照亮半个宿舍的台灯），于是算帮上忙了……</p>\n<blockquote>\n<p>不过后来发现，并不经常用。<br>——又是记录于20160904</p>\n</blockquote>\n"},{"title":"windows下启动项菜单(Boot-Manager)问题","date":"2016-03-19T06:23:00.000Z","_content":"\n这个问题通常会在装linux、win双系统后，用EasyBCD之类的软件重置了电脑的 mbr ，导致在windows下的启动菜单变成英文，或是欢迎界面变成英文版的……\n\n这种情况笔者在deepin下遇过……deepin挂了，连win的启动项都找不到，情急之下用启动盘将重写了win的mbr。\n\n在win中，以管理员身份运行 “ cmd ” ，输入\n``` BCDEDIT -SET {CURRENT} LOCALE ZH-CN```\n\n(此命令将把需要启动的操作系统的选择菜单，也就是多重操作系统共存时选择需要启动哪个操作系统的选择菜单的显示语言修改为简体中文)\n``` BCDEDIT -SET {MEMDIAG} LOCALE ZH-CN```\n\n(此命令将把当前选定的 Windows操作系统的 F8 高级启动菜单的显示语言修改为简体中文)\n``` BCDEDIT -SET {BOOTMGR} LOCALE ZH-CN```\n\n(此命令将把 Windows 内存诊断工具的显示语言修改为简体中文)\n``` BCDEDIT /ENUM ALL```\n\n查看上述项目的 LOCALE 值是否已成功修改为ZH-CH简体中文。\n![ ](http://upload-images.jianshu.io/upload_images/1171873-aad8b8af50722c2d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n**这方法不是原创，搜索引擎上一大把（多也就意味着要去筛选）。这样记下来以后要是就方便了……**\n>笔者发现，搜索解决问题办法时，常因表达不明确而导致难以找到满意的答案。普通使用者哪会知道每次开机时黑色背景的倒计时叫做 “ 启动项菜单 ”？ 笔者最近的arch出了问题，还好有grub，省去了不必要的麻烦。\n\n","source":"_posts/电脑问题/windows下启动项菜单(Boot-Manager)问题.md","raw":"---\ntitle: windows下启动项菜单(Boot-Manager)问题\ndate:  2016.03.19 14:23\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n这个问题通常会在装linux、win双系统后，用EasyBCD之类的软件重置了电脑的 mbr ，导致在windows下的启动菜单变成英文，或是欢迎界面变成英文版的……\n\n这种情况笔者在deepin下遇过……deepin挂了，连win的启动项都找不到，情急之下用启动盘将重写了win的mbr。\n\n在win中，以管理员身份运行 “ cmd ” ，输入\n``` BCDEDIT -SET {CURRENT} LOCALE ZH-CN```\n\n(此命令将把需要启动的操作系统的选择菜单，也就是多重操作系统共存时选择需要启动哪个操作系统的选择菜单的显示语言修改为简体中文)\n``` BCDEDIT -SET {MEMDIAG} LOCALE ZH-CN```\n\n(此命令将把当前选定的 Windows操作系统的 F8 高级启动菜单的显示语言修改为简体中文)\n``` BCDEDIT -SET {BOOTMGR} LOCALE ZH-CN```\n\n(此命令将把 Windows 内存诊断工具的显示语言修改为简体中文)\n``` BCDEDIT /ENUM ALL```\n\n查看上述项目的 LOCALE 值是否已成功修改为ZH-CH简体中文。\n![ ](http://upload-images.jianshu.io/upload_images/1171873-aad8b8af50722c2d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n**这方法不是原创，搜索引擎上一大把（多也就意味着要去筛选）。这样记下来以后要是就方便了……**\n>笔者发现，搜索解决问题办法时，常因表达不明确而导致难以找到满意的答案。普通使用者哪会知道每次开机时黑色背景的倒计时叫做 “ 启动项菜单 ”？ 笔者最近的arch出了问题，还好有grub，省去了不必要的麻烦。\n\n","slug":"电脑问题/windows下启动项菜单(Boot-Manager)问题","published":1,"updated":"2018-06-28T14:12:11.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc56001um4cma9a5g9ew","content":"<p>这个问题通常会在装linux、win双系统后，用EasyBCD之类的软件重置了电脑的 mbr ，导致在windows下的启动菜单变成英文，或是欢迎界面变成英文版的……</p>\n<p>这种情况笔者在deepin下遇过……deepin挂了，连win的启动项都找不到，情急之下用启动盘将重写了win的mbr。</p>\n<p>在win中，以管理员身份运行 “ cmd ” ，输入<br><figure class=\"highlight plain\"><figcaption><span>-SET &#123;CURRENT&#125; LOCALE ZH-CN```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(此命令将把需要启动的操作系统的选择菜单，也就是多重操作系统共存时选择需要启动哪个操作系统的选择菜单的显示语言修改为简体中文)</span><br><span class=\"line\">``` BCDEDIT -SET &#123;MEMDIAG&#125; LOCALE ZH-CN</span><br></pre></td></tr></table></figure></p>\n<p>(此命令将把当前选定的 Windows操作系统的 F8 高级启动菜单的显示语言修改为简体中文)<br><figure class=\"highlight plain\"><figcaption><span>-SET &#123;BOOTMGR&#125; LOCALE ZH-CN```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(此命令将把 Windows 内存诊断工具的显示语言修改为简体中文)</span><br><span class=\"line\">``` BCDEDIT /ENUM ALL</span><br></pre></td></tr></table></figure></p>\n<p>查看上述项目的 LOCALE 值是否已成功修改为ZH-CH简体中文。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-aad8b8af50722c2d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></p>\n<p><strong>这方法不是原创，搜索引擎上一大把（多也就意味着要去筛选）。这样记下来以后要是就方便了……</strong></p>\n<blockquote>\n<p>笔者发现，搜索解决问题办法时，常因表达不明确而导致难以找到满意的答案。普通使用者哪会知道每次开机时黑色背景的倒计时叫做 “ 启动项菜单 ”？ 笔者最近的arch出了问题，还好有grub，省去了不必要的麻烦。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>这个问题通常会在装linux、win双系统后，用EasyBCD之类的软件重置了电脑的 mbr ，导致在windows下的启动菜单变成英文，或是欢迎界面变成英文版的……</p>\n<p>这种情况笔者在deepin下遇过……deepin挂了，连win的启动项都找不到，情急之下用启动盘将重写了win的mbr。</p>\n<p>在win中，以管理员身份运行 “ cmd ” ，输入<br><figure class=\"highlight plain\"><figcaption><span>-SET &#123;CURRENT&#125; LOCALE ZH-CN```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(此命令将把需要启动的操作系统的选择菜单，也就是多重操作系统共存时选择需要启动哪个操作系统的选择菜单的显示语言修改为简体中文)</span><br><span class=\"line\">``` BCDEDIT -SET &#123;MEMDIAG&#125; LOCALE ZH-CN</span><br></pre></td></tr></table></figure></p>\n<p>(此命令将把当前选定的 Windows操作系统的 F8 高级启动菜单的显示语言修改为简体中文)<br><figure class=\"highlight plain\"><figcaption><span>-SET &#123;BOOTMGR&#125; LOCALE ZH-CN```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(此命令将把 Windows 内存诊断工具的显示语言修改为简体中文)</span><br><span class=\"line\">``` BCDEDIT /ENUM ALL</span><br></pre></td></tr></table></figure></p>\n<p>查看上述项目的 LOCALE 值是否已成功修改为ZH-CH简体中文。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-aad8b8af50722c2d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></p>\n<p><strong>这方法不是原创，搜索引擎上一大把（多也就意味着要去筛选）。这样记下来以后要是就方便了……</strong></p>\n<blockquote>\n<p>笔者发现，搜索解决问题办法时，常因表达不明确而导致难以找到满意的答案。普通使用者哪会知道每次开机时黑色背景的倒计时叫做 “ 启动项菜单 ”？ 笔者最近的arch出了问题，还好有grub，省去了不必要的麻烦。</p>\n</blockquote>\n"},{"title":"windows7-我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”","date":"2016-02-26T07:33:00.000Z","_content":"\n故障原因：\n\n使用优化大师等优化系统（或是使用某些.bat脚本），清理了快捷方式小箭头\n```\nWindows Registry Editor Version 5.00[HKEY_CLASSES_ROOTCLSID{20D04FE0-3AEA-1069-A2D8-08002B30309D}shellManage]@=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“MUIVerb”=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“SuppressionPolicy”=dword:4000003c“HasLUAShield”=””[HKEY_CLASSES_ROOTCLSID{20D04FE0-3AEA-1069-A2D8-08002B30309D}shellManagecommand]@=hex(2):25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,6d,00,63,00,2e,00,65,00,78,00,65,00,20,00,2f,00,73,00,20,00,25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,63,00,6f,00,6d,00,70,00,6d,00,67,00,6d,00,74,00,2e,00,6d,00,73,00,63,00,00,00\n```\n\n方法：新建一个文本文件，然后复制上面的代码保存为任意文件名.reg\n注意：后缀是reg，这样才可以导入注册表！\n双击执行即可\n如果不行的话，使用下面的方法\n召唤注册表：regedit\n\n注：regedit是“注册表编辑”（register edit）的简写。\n\n***\n进入注册表路径：HKEY_CLASSES_ROOT\\CLSID\\{20D04FE0-3AEA-1069-A2D8-08002B30309D} \\shell\\Manage\\command的值为：\n```%SystemRoot%\\system32\\CompMgmtLauncher.exe```\n\n修改为：\n```%windir%\\system32\\mmc.exe /s %windir%\\system32\\compmgmt.msc```\n\n说得好专业啊，其实就是在运行输入regedit，然后按上面顺序找到修改地址，改为compmgmt.msc就行了。\n\n","source":"_posts/电脑问题/windows7-我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”].md","raw":"---\ntitle: windows7-我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”\ndate:  2016.02.26 15:33\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n故障原因：\n\n使用优化大师等优化系统（或是使用某些.bat脚本），清理了快捷方式小箭头\n```\nWindows Registry Editor Version 5.00[HKEY_CLASSES_ROOTCLSID{20D04FE0-3AEA-1069-A2D8-08002B30309D}shellManage]@=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“MUIVerb”=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“SuppressionPolicy”=dword:4000003c“HasLUAShield”=””[HKEY_CLASSES_ROOTCLSID{20D04FE0-3AEA-1069-A2D8-08002B30309D}shellManagecommand]@=hex(2):25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,6d,00,63,00,2e,00,65,00,78,00,65,00,20,00,2f,00,73,00,20,00,25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,63,00,6f,00,6d,00,70,00,6d,00,67,00,6d,00,74,00,2e,00,6d,00,73,00,63,00,00,00\n```\n\n方法：新建一个文本文件，然后复制上面的代码保存为任意文件名.reg\n注意：后缀是reg，这样才可以导入注册表！\n双击执行即可\n如果不行的话，使用下面的方法\n召唤注册表：regedit\n\n注：regedit是“注册表编辑”（register edit）的简写。\n\n***\n进入注册表路径：HKEY_CLASSES_ROOT\\CLSID\\{20D04FE0-3AEA-1069-A2D8-08002B30309D} \\shell\\Manage\\command的值为：\n```%SystemRoot%\\system32\\CompMgmtLauncher.exe```\n\n修改为：\n```%windir%\\system32\\mmc.exe /s %windir%\\system32\\compmgmt.msc```\n\n说得好专业啊，其实就是在运行输入regedit，然后按上面顺序找到修改地址，改为compmgmt.msc就行了。\n\n","slug":"电脑问题/windows7-我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”]","published":1,"updated":"2018-06-28T14:12:11.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc58001ym4cmbfoyqkx8","content":"<p>故障原因：</p>\n<p>使用优化大师等优化系统（或是使用某些.bat脚本），清理了快捷方式小箭头<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOTCLSID&#123;20D04FE0-3AEA-1069-A2D8-08002B30309D&#125;shellManage]@=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“MUIVerb”=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“SuppressionPolicy”=dword:4000003c“HasLUAShield”=””[HKEY_CLASSES_ROOTCLSID&#123;20D04FE0-3AEA-1069-A2D8-08002B30309D&#125;shellManagecommand]@=hex(2):25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,6d,00,63,00,2e,00,65,00,78,00,65,00,20,00,2f,00,73,00,20,00,25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,63,00,6f,00,6d,00,70,00,6d,00,67,00,6d,00,74,00,2e,00,6d,00,73,00,63,00,00,00</span><br></pre></td></tr></table></figure></p>\n<p>方法：新建一个文本文件，然后复制上面的代码保存为任意文件名.reg<br>注意：后缀是reg，这样才可以导入注册表！<br>双击执行即可<br>如果不行的话，使用下面的方法<br>召唤注册表：regedit</p>\n<p>注：regedit是“注册表编辑”（register edit）的简写。</p>\n<hr>\n<p>进入注册表路径：HKEY_CLASSES_ROOT\\CLSID{20D04FE0-3AEA-1069-A2D8-08002B30309D} \\shell\\Manage\\command的值为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">```%windir%\\system32\\mmc.exe /s %windir%\\system32\\compmgmt.msc</span><br></pre></td></tr></table></figure></p>\n<p>说得好专业啊，其实就是在运行输入regedit，然后按上面顺序找到修改地址，改为compmgmt.msc就行了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>故障原因：</p>\n<p>使用优化大师等优化系统（或是使用某些.bat脚本），清理了快捷方式小箭头<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOTCLSID&#123;20D04FE0-3AEA-1069-A2D8-08002B30309D&#125;shellManage]@=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“MUIVerb”=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“SuppressionPolicy”=dword:4000003c“HasLUAShield”=””[HKEY_CLASSES_ROOTCLSID&#123;20D04FE0-3AEA-1069-A2D8-08002B30309D&#125;shellManagecommand]@=hex(2):25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,6d,00,63,00,2e,00,65,00,78,00,65,00,20,00,2f,00,73,00,20,00,25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,63,00,6f,00,6d,00,70,00,6d,00,67,00,6d,00,74,00,2e,00,6d,00,73,00,63,00,00,00</span><br></pre></td></tr></table></figure></p>\n<p>方法：新建一个文本文件，然后复制上面的代码保存为任意文件名.reg<br>注意：后缀是reg，这样才可以导入注册表！<br>双击执行即可<br>如果不行的话，使用下面的方法<br>召唤注册表：regedit</p>\n<p>注：regedit是“注册表编辑”（register edit）的简写。</p>\n<hr>\n<p>进入注册表路径：HKEY_CLASSES_ROOT\\CLSID{20D04FE0-3AEA-1069-A2D8-08002B30309D} \\shell\\Manage\\command的值为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">```%windir%\\system32\\mmc.exe /s %windir%\\system32\\compmgmt.msc</span><br></pre></td></tr></table></figure></p>\n<p>说得好专业啊，其实就是在运行输入regedit，然后按上面顺序找到修改地址，改为compmgmt.msc就行了。</p>\n"},{"title":"处理快捷方式小箭头","date":"2016-03-01T01:38:00.000Z","_content":"\nwin7桌面上快捷方式的图标，旁边都会出现“ 小箭头 ”。\n在不使用优化软件的情况下可以通过修改注册表处理“ 小箭头 ”\n清除箭头：将下方代码保存为.reg文件，双击执行，重启生效\n\n```\nWindows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\lnkfile]\n\"IsShortcut\"=-\n[HKEY_CLASSES_ROOT\\piffile]\n\"IsShortcut\"=-\n```\n\n恢复箭头：将下方代码保存为.reg文件，双击执行，重启生效\n```\nWindows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\lnkfile]\n\"IsShortcut\"=\"\"\n[HKEY_CLASSES_ROOT\\piffile]\n\"IsShortcut\"=\"\"\n```\n\n要注意的是，在执行以上文件后，可能出现【[我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”](http://www.jianshu.com/p/1d2304172362)】的问题，可[点击查看](http://www.jianshu.com/p/1d2304172362)\n\n","source":"_posts/电脑问题/处理快捷方式小箭头.md","raw":"---\ntitle: 处理快捷方式小箭头\ndate:  2016.3.01 09:38\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\nwin7桌面上快捷方式的图标，旁边都会出现“ 小箭头 ”。\n在不使用优化软件的情况下可以通过修改注册表处理“ 小箭头 ”\n清除箭头：将下方代码保存为.reg文件，双击执行，重启生效\n\n```\nWindows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\lnkfile]\n\"IsShortcut\"=-\n[HKEY_CLASSES_ROOT\\piffile]\n\"IsShortcut\"=-\n```\n\n恢复箭头：将下方代码保存为.reg文件，双击执行，重启生效\n```\nWindows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\lnkfile]\n\"IsShortcut\"=\"\"\n[HKEY_CLASSES_ROOT\\piffile]\n\"IsShortcut\"=\"\"\n```\n\n要注意的是，在执行以上文件后，可能出现【[我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”](http://www.jianshu.com/p/1d2304172362)】的问题，可[点击查看](http://www.jianshu.com/p/1d2304172362)\n\n","slug":"电脑问题/处理快捷方式小箭头","published":1,"updated":"2018-06-28T14:12:11.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc5b0021m4cmoe5k76g7","content":"<p>win7桌面上快捷方式的图标，旁边都会出现“ 小箭头 ”。<br>在不使用优化软件的情况下可以通过修改注册表处理“ 小箭头 ”<br>清除箭头：将下方代码保存为.reg文件，双击执行，重启生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\lnkfile]</span><br><span class=\"line\">&quot;IsShortcut&quot;=-</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\piffile]</span><br><span class=\"line\">&quot;IsShortcut&quot;=-</span><br></pre></td></tr></table></figure>\n<p>恢复箭头：将下方代码保存为.reg文件，双击执行，重启生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\lnkfile]</span><br><span class=\"line\">&quot;IsShortcut&quot;=&quot;&quot;</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\piffile]</span><br><span class=\"line\">&quot;IsShortcut&quot;=&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>要注意的是，在执行以上文件后，可能出现【<a href=\"http://www.jianshu.com/p/1d2304172362\" target=\"_blank\" rel=\"noopener\">我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”</a>】的问题，可<a href=\"http://www.jianshu.com/p/1d2304172362\" target=\"_blank\" rel=\"noopener\">点击查看</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>win7桌面上快捷方式的图标，旁边都会出现“ 小箭头 ”。<br>在不使用优化软件的情况下可以通过修改注册表处理“ 小箭头 ”<br>清除箭头：将下方代码保存为.reg文件，双击执行，重启生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\lnkfile]</span><br><span class=\"line\">&quot;IsShortcut&quot;=-</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\piffile]</span><br><span class=\"line\">&quot;IsShortcut&quot;=-</span><br></pre></td></tr></table></figure>\n<p>恢复箭头：将下方代码保存为.reg文件，双击执行，重启生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\lnkfile]</span><br><span class=\"line\">&quot;IsShortcut&quot;=&quot;&quot;</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\piffile]</span><br><span class=\"line\">&quot;IsShortcut&quot;=&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>要注意的是，在执行以上文件后，可能出现【<a href=\"http://www.jianshu.com/p/1d2304172362\" target=\"_blank\" rel=\"noopener\">我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”</a>】的问题，可<a href=\"http://www.jianshu.com/p/1d2304172362\" target=\"_blank\" rel=\"noopener\">点击查看</a></p>\n"},{"title":"定时关机——睡眠","date":"2016-03-06T01:38:00.000Z","_content":"\n夜还没开始，天就亮了……\n\n在看《哈佛大学公开课：幸福课》第11集的时候，讲到了“例行公事”，并说道例行公事养成良好的习惯。态度的提升能引导行为的改变，促成习惯；当然，原有的习惯会将态度拉回原点……\n\n早睡、按时睡觉是良好习惯的开端。对我来说，电脑定时关机是个强迫我去执行“睡眠”命令的办法。“定时关机”是可以不用第三方软件的。\n\n首先弄个关机的脚本，搜索引擎搜一下就有的。在这里我使用.vbs脚本，将以下代码保存为**.vbs**文件\n\n```\ndim WSHshellset WSHshell = wscript.createobject(\"wscript.shell\")WSHshell.run \"shutdown -f -s -t 00\",0 ,true\n```\n***\n睡眠脚本\n```\ndim WSHshellset WSHshell = wscript.createobject(\"wscript.shell\")WSHshell.run \"Rundll32.exe Powrprof.dll,SetSuspendState Sleep\",0 ,true\n```\n\n脚本有了，接着就是选择执行时间……桌面—>我的电脑（右键）—>管理\n\n![20160306112853](http://upload-images.jianshu.io/upload_images/1171873-73bb76d173f27d4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n \n接着，系统工具 —> 任务计划程序 —> 任务计划程序库（右键）—> 创建任务\n![20160306113220](http://upload-images.jianshu.io/upload_images/1171873-f5293e6e86b4b0d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n在“常规”选项卡上填上需要的内容，接着在“触发器”选项卡中“新建”，选择需要触发的时间、次数，频率。\n![20160306115307](http://upload-images.jianshu.io/upload_images/1171873-2a1fdca9c36c1f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n在“操作”选项卡中“新建”，选择需要启动的脚本。\n![20160306114849](http://upload-images.jianshu.io/upload_images/1171873-82f1c4e3bbb007f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击“确定”，便完成脚本定时执行时间。\n![20160306115349](http://upload-images.jianshu.io/upload_images/1171873-6ba196c42c307aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/电脑问题/定时关机-睡眠.md","raw":"---\ntitle: 定时关机——睡眠\ndate:  2016.3.06 09:38\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n夜还没开始，天就亮了……\n\n在看《哈佛大学公开课：幸福课》第11集的时候，讲到了“例行公事”，并说道例行公事养成良好的习惯。态度的提升能引导行为的改变，促成习惯；当然，原有的习惯会将态度拉回原点……\n\n早睡、按时睡觉是良好习惯的开端。对我来说，电脑定时关机是个强迫我去执行“睡眠”命令的办法。“定时关机”是可以不用第三方软件的。\n\n首先弄个关机的脚本，搜索引擎搜一下就有的。在这里我使用.vbs脚本，将以下代码保存为**.vbs**文件\n\n```\ndim WSHshellset WSHshell = wscript.createobject(\"wscript.shell\")WSHshell.run \"shutdown -f -s -t 00\",0 ,true\n```\n***\n睡眠脚本\n```\ndim WSHshellset WSHshell = wscript.createobject(\"wscript.shell\")WSHshell.run \"Rundll32.exe Powrprof.dll,SetSuspendState Sleep\",0 ,true\n```\n\n脚本有了，接着就是选择执行时间……桌面—>我的电脑（右键）—>管理\n\n![20160306112853](http://upload-images.jianshu.io/upload_images/1171873-73bb76d173f27d4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n \n接着，系统工具 —> 任务计划程序 —> 任务计划程序库（右键）—> 创建任务\n![20160306113220](http://upload-images.jianshu.io/upload_images/1171873-f5293e6e86b4b0d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n在“常规”选项卡上填上需要的内容，接着在“触发器”选项卡中“新建”，选择需要触发的时间、次数，频率。\n![20160306115307](http://upload-images.jianshu.io/upload_images/1171873-2a1fdca9c36c1f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n在“操作”选项卡中“新建”，选择需要启动的脚本。\n![20160306114849](http://upload-images.jianshu.io/upload_images/1171873-82f1c4e3bbb007f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击“确定”，便完成脚本定时执行时间。\n![20160306115349](http://upload-images.jianshu.io/upload_images/1171873-6ba196c42c307aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"电脑问题/定时关机-睡眠","published":1,"updated":"2018-06-28T14:12:11.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc5e0025m4cm3tovxdy5","content":"<p>夜还没开始，天就亮了……</p>\n<p>在看《哈佛大学公开课：幸福课》第11集的时候，讲到了“例行公事”，并说道例行公事养成良好的习惯。态度的提升能引导行为的改变，促成习惯；当然，原有的习惯会将态度拉回原点……</p>\n<p>早睡、按时睡觉是良好习惯的开端。对我来说，电脑定时关机是个强迫我去执行“睡眠”命令的办法。“定时关机”是可以不用第三方软件的。</p>\n<p>首先弄个关机的脚本，搜索引擎搜一下就有的。在这里我使用.vbs脚本，将以下代码保存为<strong>.vbs</strong>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dim WSHshellset WSHshell = wscript.createobject(&quot;wscript.shell&quot;)WSHshell.run &quot;shutdown -f -s -t 00&quot;,0 ,true</span><br></pre></td></tr></table></figure>\n<hr>\n<p>睡眠脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dim WSHshellset WSHshell = wscript.createobject(&quot;wscript.shell&quot;)WSHshell.run &quot;Rundll32.exe Powrprof.dll,SetSuspendState Sleep&quot;,0 ,true</span><br></pre></td></tr></table></figure></p>\n<p>脚本有了，接着就是选择执行时间……桌面—&gt;我的电脑（右键）—&gt;管理</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-73bb76d173f27d4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306112853\"></p>\n<p>接着，系统工具 —&gt; 任务计划程序 —&gt; 任务计划程序库（右键）—&gt; 创建任务<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f5293e6e86b4b0d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306113220\"></p>\n<p>在“常规”选项卡上填上需要的内容，接着在“触发器”选项卡中“新建”，选择需要触发的时间、次数，频率。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-2a1fdca9c36c1f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306115307\"></p>\n<p>在“操作”选项卡中“新建”，选择需要启动的脚本。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-82f1c4e3bbb007f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306114849\"><br>点击“确定”，便完成脚本定时执行时间。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-6ba196c42c307aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306115349\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>夜还没开始，天就亮了……</p>\n<p>在看《哈佛大学公开课：幸福课》第11集的时候，讲到了“例行公事”，并说道例行公事养成良好的习惯。态度的提升能引导行为的改变，促成习惯；当然，原有的习惯会将态度拉回原点……</p>\n<p>早睡、按时睡觉是良好习惯的开端。对我来说，电脑定时关机是个强迫我去执行“睡眠”命令的办法。“定时关机”是可以不用第三方软件的。</p>\n<p>首先弄个关机的脚本，搜索引擎搜一下就有的。在这里我使用.vbs脚本，将以下代码保存为<strong>.vbs</strong>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dim WSHshellset WSHshell = wscript.createobject(&quot;wscript.shell&quot;)WSHshell.run &quot;shutdown -f -s -t 00&quot;,0 ,true</span><br></pre></td></tr></table></figure>\n<hr>\n<p>睡眠脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dim WSHshellset WSHshell = wscript.createobject(&quot;wscript.shell&quot;)WSHshell.run &quot;Rundll32.exe Powrprof.dll,SetSuspendState Sleep&quot;,0 ,true</span><br></pre></td></tr></table></figure></p>\n<p>脚本有了，接着就是选择执行时间……桌面—&gt;我的电脑（右键）—&gt;管理</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-73bb76d173f27d4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306112853\"></p>\n<p>接着，系统工具 —&gt; 任务计划程序 —&gt; 任务计划程序库（右键）—&gt; 创建任务<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f5293e6e86b4b0d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306113220\"></p>\n<p>在“常规”选项卡上填上需要的内容，接着在“触发器”选项卡中“新建”，选择需要触发的时间、次数，频率。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-2a1fdca9c36c1f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306115307\"></p>\n<p>在“操作”选项卡中“新建”，选择需要启动的脚本。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-82f1c4e3bbb007f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306114849\"><br>点击“确定”，便完成脚本定时执行时间。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-6ba196c42c307aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160306115349\"></p>\n"},{"title":"电脑文件搜索神器——Everything","date":"2016-03-21T01:38:00.000Z","_content":"\n<p>“Everything” is a sofeware for search in your pc——题记</p>\n\n为了这个“逼格”的题记，芽蜜翻了半小时的牛津词典……\n### Everything\n一句话概括强大之处：一款能在几秒内根据名称查找文件和目录的软件，大小在550k左右。\n\n有时想找个文件，却不知道放在哪里，通常会在“ 文件管理器 ”右上角查找文件名称……接着就是傻傻坐等电脑刷新，不幸的话会在漫长等待后得到电脑回答“ 没有与搜索条件匹配的项 ”，然后就心塞塞的……\n \nEverything是一个私有的免费Windows桌面搜索引擎\n***\n### 工作原理\n当Everything第一次运行时，会通过主文件表中的文件元数据创建卷上每个文件和目录名称的索引。默认情况下，会索引所有挂载的NTFS卷。创建索引后，程序就会根据USN日志持续更新索引。Everything在索引中查找满足用户查找表达式的文件名，表达式可以是部分目标文件名，或使用正则表达式，并且在搜索关键字输入后立刻显示结果。\n\n由于Everything并不索引文件内容，并且依赖于USN日志来过滤文件更新，因此只会占用很少的内存和处理器时间。Everything的索引过程和搜索过程执行非常快速（几乎瞬间完成）、占用资源极低，同时能实时更新索引数据库（索引文件极小）和搜索结果，这些特性在如今磁盘容量越来越大、用户文件越来越多的情况下使得Everything超越了传统桌面搜索工具而广受欢迎。\n\n### 缺点\n基于前面描述的工作原理，使得Everything的缺点和它的优点一样明显。\n\n**需要管理权限：**这样才能读取USN日志，由此带来了安全上的问题。\n**仅支持文件全名（含路径）：**在搜索时仅能根据路径和文件名进行过滤。而不支持其他文件属性，如修改时间等。*（这只能说Everything只支持文件名搜索，应该算是局限性不算缺点）*\n\n**仅支持NTFS卷：**不支持目前大量移动设备使用的FAT文件系统，也不支持除Windows外的其他操作系统中常见的文件系统，如Linux。不过，从Everything 1.3.0.629b（测试版）开始提供的文件列表功能，为使用其他文件系统的用户和使用移动存储设备的用户提供了便利。\n \n>如果希望能快速在硬盘上找到想要的文件，那这款软件真心不错……。芽蜜好几次是用Everything找到忘了位置的文件。平时放文件都有分类，类别多了难免路径长了点。\n\n相关软件：[Listary](https://zh.wikipedia.org/wiki/Listary)、DocFetcher（根据文件内容搜索的软件）\n\n文章内容引用自[wikipedia](https://zh.wikipedia.org/)词条[Everything](https://zh.wikipedia.org/wiki/Everything_(%E8%BD%AF%E4%BB%B6))\n推荐网站：[异次元](http://www.iplaysoft.com/) – 软件改变生活! （一直光顾的网站，在这里也能找到需要的软件）\n \n [本页面提供Everything-1.3.4.686.x64版本下载，嫌弃版本低就算了^_^。](http://yamida.org/myfiles/Everything-1.3.4.686.x64-Setup.1418106344.exe)\n","source":"_posts/电脑问题/电脑文件搜索神器——Everything.md","raw":"---\ntitle: 电脑文件搜索神器——Everything\ndate:  2016.03.21 09:38\ntags: 神器\ncategories: 软件\n---\n\n<p>“Everything” is a sofeware for search in your pc——题记</p>\n\n为了这个“逼格”的题记，芽蜜翻了半小时的牛津词典……\n### Everything\n一句话概括强大之处：一款能在几秒内根据名称查找文件和目录的软件，大小在550k左右。\n\n有时想找个文件，却不知道放在哪里，通常会在“ 文件管理器 ”右上角查找文件名称……接着就是傻傻坐等电脑刷新，不幸的话会在漫长等待后得到电脑回答“ 没有与搜索条件匹配的项 ”，然后就心塞塞的……\n \nEverything是一个私有的免费Windows桌面搜索引擎\n***\n### 工作原理\n当Everything第一次运行时，会通过主文件表中的文件元数据创建卷上每个文件和目录名称的索引。默认情况下，会索引所有挂载的NTFS卷。创建索引后，程序就会根据USN日志持续更新索引。Everything在索引中查找满足用户查找表达式的文件名，表达式可以是部分目标文件名，或使用正则表达式，并且在搜索关键字输入后立刻显示结果。\n\n由于Everything并不索引文件内容，并且依赖于USN日志来过滤文件更新，因此只会占用很少的内存和处理器时间。Everything的索引过程和搜索过程执行非常快速（几乎瞬间完成）、占用资源极低，同时能实时更新索引数据库（索引文件极小）和搜索结果，这些特性在如今磁盘容量越来越大、用户文件越来越多的情况下使得Everything超越了传统桌面搜索工具而广受欢迎。\n\n### 缺点\n基于前面描述的工作原理，使得Everything的缺点和它的优点一样明显。\n\n**需要管理权限：**这样才能读取USN日志，由此带来了安全上的问题。\n**仅支持文件全名（含路径）：**在搜索时仅能根据路径和文件名进行过滤。而不支持其他文件属性，如修改时间等。*（这只能说Everything只支持文件名搜索，应该算是局限性不算缺点）*\n\n**仅支持NTFS卷：**不支持目前大量移动设备使用的FAT文件系统，也不支持除Windows外的其他操作系统中常见的文件系统，如Linux。不过，从Everything 1.3.0.629b（测试版）开始提供的文件列表功能，为使用其他文件系统的用户和使用移动存储设备的用户提供了便利。\n \n>如果希望能快速在硬盘上找到想要的文件，那这款软件真心不错……。芽蜜好几次是用Everything找到忘了位置的文件。平时放文件都有分类，类别多了难免路径长了点。\n\n相关软件：[Listary](https://zh.wikipedia.org/wiki/Listary)、DocFetcher（根据文件内容搜索的软件）\n\n文章内容引用自[wikipedia](https://zh.wikipedia.org/)词条[Everything](https://zh.wikipedia.org/wiki/Everything_(%E8%BD%AF%E4%BB%B6))\n推荐网站：[异次元](http://www.iplaysoft.com/) – 软件改变生活! （一直光顾的网站，在这里也能找到需要的软件）\n \n [本页面提供Everything-1.3.4.686.x64版本下载，嫌弃版本低就算了^_^。](http://yamida.org/myfiles/Everything-1.3.4.686.x64-Setup.1418106344.exe)\n","slug":"电脑问题/电脑文件搜索神器——Everything","published":1,"updated":"2018-06-28T14:12:11.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc5h0028m4cm1rlmemg0","content":"<p>“Everything” is a sofeware for search in your pc——题记</p>\n\n<p>为了这个“逼格”的题记，芽蜜翻了半小时的牛津词典……</p>\n<h3 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a>Everything</h3><p>一句话概括强大之处：一款能在几秒内根据名称查找文件和目录的软件，大小在550k左右。</p>\n<p>有时想找个文件，却不知道放在哪里，通常会在“ 文件管理器 ”右上角查找文件名称……接着就是傻傻坐等电脑刷新，不幸的话会在漫长等待后得到电脑回答“ 没有与搜索条件匹配的项 ”，然后就心塞塞的……</p>\n<p>Everything是一个私有的免费Windows桌面搜索引擎</p>\n<hr>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>当Everything第一次运行时，会通过主文件表中的文件元数据创建卷上每个文件和目录名称的索引。默认情况下，会索引所有挂载的NTFS卷。创建索引后，程序就会根据USN日志持续更新索引。Everything在索引中查找满足用户查找表达式的文件名，表达式可以是部分目标文件名，或使用正则表达式，并且在搜索关键字输入后立刻显示结果。</p>\n<p>由于Everything并不索引文件内容，并且依赖于USN日志来过滤文件更新，因此只会占用很少的内存和处理器时间。Everything的索引过程和搜索过程执行非常快速（几乎瞬间完成）、占用资源极低，同时能实时更新索引数据库（索引文件极小）和搜索结果，这些特性在如今磁盘容量越来越大、用户文件越来越多的情况下使得Everything超越了传统桌面搜索工具而广受欢迎。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>基于前面描述的工作原理，使得Everything的缺点和它的优点一样明显。</p>\n<p><strong>需要管理权限：</strong>这样才能读取USN日志，由此带来了安全上的问题。<br><strong>仅支持文件全名（含路径）：</strong>在搜索时仅能根据路径和文件名进行过滤。而不支持其他文件属性，如修改时间等。<em>（这只能说Everything只支持文件名搜索，应该算是局限性不算缺点）</em></p>\n<p><strong>仅支持NTFS卷：</strong>不支持目前大量移动设备使用的FAT文件系统，也不支持除Windows外的其他操作系统中常见的文件系统，如Linux。不过，从Everything 1.3.0.629b（测试版）开始提供的文件列表功能，为使用其他文件系统的用户和使用移动存储设备的用户提供了便利。</p>\n<blockquote>\n<p>如果希望能快速在硬盘上找到想要的文件，那这款软件真心不错……。芽蜜好几次是用Everything找到忘了位置的文件。平时放文件都有分类，类别多了难免路径长了点。</p>\n</blockquote>\n<p>相关软件：<a href=\"https://zh.wikipedia.org/wiki/Listary\" target=\"_blank\" rel=\"noopener\">Listary</a>、DocFetcher（根据文件内容搜索的软件）</p>\n<p>文章内容引用自<a href=\"https://zh.wikipedia.org/\" target=\"_blank\" rel=\"noopener\">wikipedia</a>词条<a href=\"https://zh.wikipedia.org/wiki/Everything_(%E8%BD%AF%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">Everything</a>)<br>推荐网站：<a href=\"http://www.iplaysoft.com/\" target=\"_blank\" rel=\"noopener\">异次元</a> – 软件改变生活! （一直光顾的网站，在这里也能找到需要的软件）</p>\n<p> <a href=\"http://yamida.org/myfiles/Everything-1.3.4.686.x64-Setup.1418106344.exe\" target=\"_blank\" rel=\"noopener\">本页面提供Everything-1.3.4.686.x64版本下载，嫌弃版本低就算了^_^。</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>“Everything” is a sofeware for search in your pc——题记</p>\n\n<p>为了这个“逼格”的题记，芽蜜翻了半小时的牛津词典……</p>\n<h3 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a>Everything</h3><p>一句话概括强大之处：一款能在几秒内根据名称查找文件和目录的软件，大小在550k左右。</p>\n<p>有时想找个文件，却不知道放在哪里，通常会在“ 文件管理器 ”右上角查找文件名称……接着就是傻傻坐等电脑刷新，不幸的话会在漫长等待后得到电脑回答“ 没有与搜索条件匹配的项 ”，然后就心塞塞的……</p>\n<p>Everything是一个私有的免费Windows桌面搜索引擎</p>\n<hr>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>当Everything第一次运行时，会通过主文件表中的文件元数据创建卷上每个文件和目录名称的索引。默认情况下，会索引所有挂载的NTFS卷。创建索引后，程序就会根据USN日志持续更新索引。Everything在索引中查找满足用户查找表达式的文件名，表达式可以是部分目标文件名，或使用正则表达式，并且在搜索关键字输入后立刻显示结果。</p>\n<p>由于Everything并不索引文件内容，并且依赖于USN日志来过滤文件更新，因此只会占用很少的内存和处理器时间。Everything的索引过程和搜索过程执行非常快速（几乎瞬间完成）、占用资源极低，同时能实时更新索引数据库（索引文件极小）和搜索结果，这些特性在如今磁盘容量越来越大、用户文件越来越多的情况下使得Everything超越了传统桌面搜索工具而广受欢迎。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>基于前面描述的工作原理，使得Everything的缺点和它的优点一样明显。</p>\n<p><strong>需要管理权限：</strong>这样才能读取USN日志，由此带来了安全上的问题。<br><strong>仅支持文件全名（含路径）：</strong>在搜索时仅能根据路径和文件名进行过滤。而不支持其他文件属性，如修改时间等。<em>（这只能说Everything只支持文件名搜索，应该算是局限性不算缺点）</em></p>\n<p><strong>仅支持NTFS卷：</strong>不支持目前大量移动设备使用的FAT文件系统，也不支持除Windows外的其他操作系统中常见的文件系统，如Linux。不过，从Everything 1.3.0.629b（测试版）开始提供的文件列表功能，为使用其他文件系统的用户和使用移动存储设备的用户提供了便利。</p>\n<blockquote>\n<p>如果希望能快速在硬盘上找到想要的文件，那这款软件真心不错……。芽蜜好几次是用Everything找到忘了位置的文件。平时放文件都有分类，类别多了难免路径长了点。</p>\n</blockquote>\n<p>相关软件：<a href=\"https://zh.wikipedia.org/wiki/Listary\" target=\"_blank\" rel=\"noopener\">Listary</a>、DocFetcher（根据文件内容搜索的软件）</p>\n<p>文章内容引用自<a href=\"https://zh.wikipedia.org/\" target=\"_blank\" rel=\"noopener\">wikipedia</a>词条<a href=\"https://zh.wikipedia.org/wiki/Everything_(%E8%BD%AF%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">Everything</a>)<br>推荐网站：<a href=\"http://www.iplaysoft.com/\" target=\"_blank\" rel=\"noopener\">异次元</a> – 软件改变生活! （一直光顾的网站，在这里也能找到需要的软件）</p>\n<p> <a href=\"http://yamida.org/myfiles/Everything-1.3.4.686.x64-Setup.1418106344.exe\" target=\"_blank\" rel=\"noopener\">本页面提供Everything-1.3.4.686.x64版本下载，嫌弃版本低就算了^_^。</a></p>\n"},{"title":"禁用UEFI安全自启动功能","date":"2016-02-28T01:38:00.000Z","_content":"\n微软所倡导的UEFI安全启动（Secure Boot）机制，能够防止病毒在UEFI电脑启动的过程中进驻，但是目前除了Windows 8、10以外，仅有Linux系统加载程序能够支持这种驱动程序需要签名的安全启动机制。\n\n低于win8（包括win7在内）的微软操作系统都无法支持，因而如果希望在Windows 8以上认证的电脑上安装Windows 7或者其他操作系统，需要在UEFI设置菜单中关闭安全启动功能。\n\n> 说白了就是，只有在uefi安全锁关闭的情况下，电脑才能识别到硬盘里win8以下的微软操作系统。\n\n要禁用安全启动功能， 首先启动电脑，然后按电脑的设置访问UEFI，在许多电脑上这通常是按**[Delete]**键，不过，不同的制造商可能有不同的设置，具体请参考主板说明书。根据不同的UEFI版本，安全启动选项通常在一个选项卡下，这个选项卡可能被命名为“Boot”、“Security”或者“Authentication”，在类似的选项卡中查找，我们会发现一个“Secure Boot”选项，该选项默认设置为“Enabled”，选中它并回车，将其设置为“Disabled”，接下来，按[F10]键存储设置，重新启动电脑即可安装我们需要的操作系统。\n\n这里说下题外话：\n> 某位新人在对bios进行操作后，保存的时候手误按下了F9，然后还“回车”了。之后发现电脑开机后就会自动进入bios，而再也找不到硬盘里的系统（比如找不到win7的系统）……就连小白救星的万能“老毛桃”和“大白菜”都没法用……(so sad)\n\n通过文本开头的解释，现在明白了吧。原因就在“  **F9**  ”恢复了bios的出厂设置，打开了UEFI锁（UEFI默认是打开的），这和拔电池是一个道理的。\n\n","source":"_posts/电脑问题/禁用UEFI安全启动功能.md","raw":"---\ntitle: 禁用UEFI安全自启动功能\ndate:  2016.2.28 09:38\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n微软所倡导的UEFI安全启动（Secure Boot）机制，能够防止病毒在UEFI电脑启动的过程中进驻，但是目前除了Windows 8、10以外，仅有Linux系统加载程序能够支持这种驱动程序需要签名的安全启动机制。\n\n低于win8（包括win7在内）的微软操作系统都无法支持，因而如果希望在Windows 8以上认证的电脑上安装Windows 7或者其他操作系统，需要在UEFI设置菜单中关闭安全启动功能。\n\n> 说白了就是，只有在uefi安全锁关闭的情况下，电脑才能识别到硬盘里win8以下的微软操作系统。\n\n要禁用安全启动功能， 首先启动电脑，然后按电脑的设置访问UEFI，在许多电脑上这通常是按**[Delete]**键，不过，不同的制造商可能有不同的设置，具体请参考主板说明书。根据不同的UEFI版本，安全启动选项通常在一个选项卡下，这个选项卡可能被命名为“Boot”、“Security”或者“Authentication”，在类似的选项卡中查找，我们会发现一个“Secure Boot”选项，该选项默认设置为“Enabled”，选中它并回车，将其设置为“Disabled”，接下来，按[F10]键存储设置，重新启动电脑即可安装我们需要的操作系统。\n\n这里说下题外话：\n> 某位新人在对bios进行操作后，保存的时候手误按下了F9，然后还“回车”了。之后发现电脑开机后就会自动进入bios，而再也找不到硬盘里的系统（比如找不到win7的系统）……就连小白救星的万能“老毛桃”和“大白菜”都没法用……(so sad)\n\n通过文本开头的解释，现在明白了吧。原因就在“  **F9**  ”恢复了bios的出厂设置，打开了UEFI锁（UEFI默认是打开的），这和拔电池是一个道理的。\n\n","slug":"电脑问题/禁用UEFI安全启动功能","published":1,"updated":"2018-06-28T14:12:11.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc5k002cm4cm5d6h1bej","content":"<p>微软所倡导的UEFI安全启动（Secure Boot）机制，能够防止病毒在UEFI电脑启动的过程中进驻，但是目前除了Windows 8、10以外，仅有Linux系统加载程序能够支持这种驱动程序需要签名的安全启动机制。</p>\n<p>低于win8（包括win7在内）的微软操作系统都无法支持，因而如果希望在Windows 8以上认证的电脑上安装Windows 7或者其他操作系统，需要在UEFI设置菜单中关闭安全启动功能。</p>\n<blockquote>\n<p>说白了就是，只有在uefi安全锁关闭的情况下，电脑才能识别到硬盘里win8以下的微软操作系统。</p>\n</blockquote>\n<p>要禁用安全启动功能， 首先启动电脑，然后按电脑的设置访问UEFI，在许多电脑上这通常是按<strong>[Delete]</strong>键，不过，不同的制造商可能有不同的设置，具体请参考主板说明书。根据不同的UEFI版本，安全启动选项通常在一个选项卡下，这个选项卡可能被命名为“Boot”、“Security”或者“Authentication”，在类似的选项卡中查找，我们会发现一个“Secure Boot”选项，该选项默认设置为“Enabled”，选中它并回车，将其设置为“Disabled”，接下来，按[F10]键存储设置，重新启动电脑即可安装我们需要的操作系统。</p>\n<p>这里说下题外话：</p>\n<blockquote>\n<p>某位新人在对bios进行操作后，保存的时候手误按下了F9，然后还“回车”了。之后发现电脑开机后就会自动进入bios，而再也找不到硬盘里的系统（比如找不到win7的系统）……就连小白救星的万能“老毛桃”和“大白菜”都没法用……(so sad)</p>\n</blockquote>\n<p>通过文本开头的解释，现在明白了吧。原因就在“  <strong>F9</strong>  ”恢复了bios的出厂设置，打开了UEFI锁（UEFI默认是打开的），这和拔电池是一个道理的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>微软所倡导的UEFI安全启动（Secure Boot）机制，能够防止病毒在UEFI电脑启动的过程中进驻，但是目前除了Windows 8、10以外，仅有Linux系统加载程序能够支持这种驱动程序需要签名的安全启动机制。</p>\n<p>低于win8（包括win7在内）的微软操作系统都无法支持，因而如果希望在Windows 8以上认证的电脑上安装Windows 7或者其他操作系统，需要在UEFI设置菜单中关闭安全启动功能。</p>\n<blockquote>\n<p>说白了就是，只有在uefi安全锁关闭的情况下，电脑才能识别到硬盘里win8以下的微软操作系统。</p>\n</blockquote>\n<p>要禁用安全启动功能， 首先启动电脑，然后按电脑的设置访问UEFI，在许多电脑上这通常是按<strong>[Delete]</strong>键，不过，不同的制造商可能有不同的设置，具体请参考主板说明书。根据不同的UEFI版本，安全启动选项通常在一个选项卡下，这个选项卡可能被命名为“Boot”、“Security”或者“Authentication”，在类似的选项卡中查找，我们会发现一个“Secure Boot”选项，该选项默认设置为“Enabled”，选中它并回车，将其设置为“Disabled”，接下来，按[F10]键存储设置，重新启动电脑即可安装我们需要的操作系统。</p>\n<p>这里说下题外话：</p>\n<blockquote>\n<p>某位新人在对bios进行操作后，保存的时候手误按下了F9，然后还“回车”了。之后发现电脑开机后就会自动进入bios，而再也找不到硬盘里的系统（比如找不到win7的系统）……就连小白救星的万能“老毛桃”和“大白菜”都没法用……(so sad)</p>\n</blockquote>\n<p>通过文本开头的解释，现在明白了吧。原因就在“  <strong>F9</strong>  ”恢复了bios的出厂设置，打开了UEFI锁（UEFI默认是打开的），这和拔电池是一个道理的。</p>\n"},{"title":"禁止软件开机自启动的三种方法","date":"2016-02-21T01:38:00.000Z","_content":"\n随着我们的使用，电脑开机启动程序日益增多——这是电脑开机慢的原因之一\n程序在不需要的时候启动，占用资源——这是电脑卡的原因之一\n\n目前禁止软件的自动启动常用的方法一般有三种：\n>* 用软件禁止；\n>* 用Windows命令禁止；\n>* 直接修改注册表。\n\n### 一、使用软件禁止软件的自动启动\n大陆常用多数是360、金山、腾讯等公司开发的软件。不太推荐这些国内所谓的优化软件。软件本身就占用大资源。这里不详谈。（**相关阅读**移步至“**[说说在win7下优化软件的必要性](http://yamida.org/2016/02/29/%e8%af%b4%e8%af%b4%e5%9c%a8win7%e4%b8%8b%e4%bc%98%e5%8c%96%e8%bd%af%e4%bb%b6%e7%9a%84%e5%bf%85%e8%a6%81%e6%80%a7/)**”）\n### 二、用Windows命令禁止软件的自动启动\n点击“开始”—“运行”（或者直接用WIN+R也可以），接着输入“**msconfig**”敲回车。在系统配置实用程序的窗口中选择“启动”的页面。同样，在这里列出了很多开机时候自动启动的程序，把它们前面的小勾取消，点确定。一般重启生效\n### 三、修改注册表彻底禁止软件的自动启动\n明明禁止了某软件的启动，可是它还是自动加载了（如Realplayer）。遇到这种情况可以用修改注册表来彻底禁止软件的自动启动。操作时注意，因稍有不慎就可能出错，从而使系统出错而崩溃。\n点击“开始”—“运行”输入“**regedit**”打开注册表编辑器，切换到\n**HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run**\n先清理掉不想启动的程序,注意不要乱删，出问题就6666了。\n然后在Run上右键—权限—高级—添加—输入everyone—确定。然后把**设置数值**的拒绝勾上（其他都不要勾，这样不会影响到想要启动的程序）然后确定。同样的方法把\n**HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run**\n也搞定。这样，任何软件一般是无法自动添加到启动了。除非你想，只要删掉权限里面的everyone即可。这样还可以从一定程度上防止木马程序，因为大多数木马也是加在这里，无法随系统启动当然也无法搞破坏了。![20150926-22](http://upload-images.jianshu.io/upload_images/1171873-0b4b37ab43f77c95.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n不要再说“电脑慢、卡是因为装太多软件了”。我电脑就还行嘛～\n>文章来源：中关村在线【时隔久远链接早已404】（已做部分删改）\n","source":"_posts/电脑问题/禁止软件开机自启动的三种方法.md","raw":"---\ntitle: 禁止软件开机自启动的三种方法\ndate:  2016.2.21 09:38\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n随着我们的使用，电脑开机启动程序日益增多——这是电脑开机慢的原因之一\n程序在不需要的时候启动，占用资源——这是电脑卡的原因之一\n\n目前禁止软件的自动启动常用的方法一般有三种：\n>* 用软件禁止；\n>* 用Windows命令禁止；\n>* 直接修改注册表。\n\n### 一、使用软件禁止软件的自动启动\n大陆常用多数是360、金山、腾讯等公司开发的软件。不太推荐这些国内所谓的优化软件。软件本身就占用大资源。这里不详谈。（**相关阅读**移步至“**[说说在win7下优化软件的必要性](http://yamida.org/2016/02/29/%e8%af%b4%e8%af%b4%e5%9c%a8win7%e4%b8%8b%e4%bc%98%e5%8c%96%e8%bd%af%e4%bb%b6%e7%9a%84%e5%bf%85%e8%a6%81%e6%80%a7/)**”）\n### 二、用Windows命令禁止软件的自动启动\n点击“开始”—“运行”（或者直接用WIN+R也可以），接着输入“**msconfig**”敲回车。在系统配置实用程序的窗口中选择“启动”的页面。同样，在这里列出了很多开机时候自动启动的程序，把它们前面的小勾取消，点确定。一般重启生效\n### 三、修改注册表彻底禁止软件的自动启动\n明明禁止了某软件的启动，可是它还是自动加载了（如Realplayer）。遇到这种情况可以用修改注册表来彻底禁止软件的自动启动。操作时注意，因稍有不慎就可能出错，从而使系统出错而崩溃。\n点击“开始”—“运行”输入“**regedit**”打开注册表编辑器，切换到\n**HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run**\n先清理掉不想启动的程序,注意不要乱删，出问题就6666了。\n然后在Run上右键—权限—高级—添加—输入everyone—确定。然后把**设置数值**的拒绝勾上（其他都不要勾，这样不会影响到想要启动的程序）然后确定。同样的方法把\n**HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run**\n也搞定。这样，任何软件一般是无法自动添加到启动了。除非你想，只要删掉权限里面的everyone即可。这样还可以从一定程度上防止木马程序，因为大多数木马也是加在这里，无法随系统启动当然也无法搞破坏了。![20150926-22](http://upload-images.jianshu.io/upload_images/1171873-0b4b37ab43f77c95.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n不要再说“电脑慢、卡是因为装太多软件了”。我电脑就还行嘛～\n>文章来源：中关村在线【时隔久远链接早已404】（已做部分删改）\n","slug":"电脑问题/禁止软件开机自启动的三种方法","published":1,"updated":"2018-06-28T14:12:11.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc5m002gm4cmzy98ipkp","content":"<p>随着我们的使用，电脑开机启动程序日益增多——这是电脑开机慢的原因之一<br>程序在不需要的时候启动，占用资源——这是电脑卡的原因之一</p>\n<p>目前禁止软件的自动启动常用的方法一般有三种：</p>\n<blockquote>\n<ul>\n<li>用软件禁止；</li>\n<li>用Windows命令禁止；</li>\n<li>直接修改注册表。</li>\n</ul>\n</blockquote>\n<h3 id=\"一、使用软件禁止软件的自动启动\"><a href=\"#一、使用软件禁止软件的自动启动\" class=\"headerlink\" title=\"一、使用软件禁止软件的自动启动\"></a>一、使用软件禁止软件的自动启动</h3><p>大陆常用多数是360、金山、腾讯等公司开发的软件。不太推荐这些国内所谓的优化软件。软件本身就占用大资源。这里不详谈。（<strong>相关阅读</strong>移步至“<strong><a href=\"http://yamida.org/2016/02/29/%e8%af%b4%e8%af%b4%e5%9c%a8win7%e4%b8%8b%e4%bc%98%e5%8c%96%e8%bd%af%e4%bb%b6%e7%9a%84%e5%bf%85%e8%a6%81%e6%80%a7/\" target=\"_blank\" rel=\"noopener\">说说在win7下优化软件的必要性</a></strong>”）</p>\n<h3 id=\"二、用Windows命令禁止软件的自动启动\"><a href=\"#二、用Windows命令禁止软件的自动启动\" class=\"headerlink\" title=\"二、用Windows命令禁止软件的自动启动\"></a>二、用Windows命令禁止软件的自动启动</h3><p>点击“开始”—“运行”（或者直接用WIN+R也可以），接着输入“<strong>msconfig</strong>”敲回车。在系统配置实用程序的窗口中选择“启动”的页面。同样，在这里列出了很多开机时候自动启动的程序，把它们前面的小勾取消，点确定。一般重启生效</p>\n<h3 id=\"三、修改注册表彻底禁止软件的自动启动\"><a href=\"#三、修改注册表彻底禁止软件的自动启动\" class=\"headerlink\" title=\"三、修改注册表彻底禁止软件的自动启动\"></a>三、修改注册表彻底禁止软件的自动启动</h3><p>明明禁止了某软件的启动，可是它还是自动加载了（如Realplayer）。遇到这种情况可以用修改注册表来彻底禁止软件的自动启动。操作时注意，因稍有不慎就可能出错，从而使系统出错而崩溃。<br>点击“开始”—“运行”输入“<strong>regedit</strong>”打开注册表编辑器，切换到<br><strong>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</strong><br>先清理掉不想启动的程序,注意不要乱删，出问题就6666了。<br>然后在Run上右键—权限—高级—添加—输入everyone—确定。然后把<strong>设置数值</strong>的拒绝勾上（其他都不要勾，这样不会影响到想要启动的程序）然后确定。同样的方法把<br><strong>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</strong><br>也搞定。这样，任何软件一般是无法自动添加到启动了。除非你想，只要删掉权限里面的everyone即可。这样还可以从一定程度上防止木马程序，因为大多数木马也是加在这里，无法随系统启动当然也无法搞破坏了。<img src=\"http://upload-images.jianshu.io/upload_images/1171873-0b4b37ab43f77c95.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20150926-22\"><br>不要再说“电脑慢、卡是因为装太多软件了”。我电脑就还行嘛～</p>\n<blockquote>\n<p>文章来源：中关村在线【时隔久远链接早已404】（已做部分删改）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>随着我们的使用，电脑开机启动程序日益增多——这是电脑开机慢的原因之一<br>程序在不需要的时候启动，占用资源——这是电脑卡的原因之一</p>\n<p>目前禁止软件的自动启动常用的方法一般有三种：</p>\n<blockquote>\n<ul>\n<li>用软件禁止；</li>\n<li>用Windows命令禁止；</li>\n<li>直接修改注册表。</li>\n</ul>\n</blockquote>\n<h3 id=\"一、使用软件禁止软件的自动启动\"><a href=\"#一、使用软件禁止软件的自动启动\" class=\"headerlink\" title=\"一、使用软件禁止软件的自动启动\"></a>一、使用软件禁止软件的自动启动</h3><p>大陆常用多数是360、金山、腾讯等公司开发的软件。不太推荐这些国内所谓的优化软件。软件本身就占用大资源。这里不详谈。（<strong>相关阅读</strong>移步至“<strong><a href=\"http://yamida.org/2016/02/29/%e8%af%b4%e8%af%b4%e5%9c%a8win7%e4%b8%8b%e4%bc%98%e5%8c%96%e8%bd%af%e4%bb%b6%e7%9a%84%e5%bf%85%e8%a6%81%e6%80%a7/\" target=\"_blank\" rel=\"noopener\">说说在win7下优化软件的必要性</a></strong>”）</p>\n<h3 id=\"二、用Windows命令禁止软件的自动启动\"><a href=\"#二、用Windows命令禁止软件的自动启动\" class=\"headerlink\" title=\"二、用Windows命令禁止软件的自动启动\"></a>二、用Windows命令禁止软件的自动启动</h3><p>点击“开始”—“运行”（或者直接用WIN+R也可以），接着输入“<strong>msconfig</strong>”敲回车。在系统配置实用程序的窗口中选择“启动”的页面。同样，在这里列出了很多开机时候自动启动的程序，把它们前面的小勾取消，点确定。一般重启生效</p>\n<h3 id=\"三、修改注册表彻底禁止软件的自动启动\"><a href=\"#三、修改注册表彻底禁止软件的自动启动\" class=\"headerlink\" title=\"三、修改注册表彻底禁止软件的自动启动\"></a>三、修改注册表彻底禁止软件的自动启动</h3><p>明明禁止了某软件的启动，可是它还是自动加载了（如Realplayer）。遇到这种情况可以用修改注册表来彻底禁止软件的自动启动。操作时注意，因稍有不慎就可能出错，从而使系统出错而崩溃。<br>点击“开始”—“运行”输入“<strong>regedit</strong>”打开注册表编辑器，切换到<br><strong>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</strong><br>先清理掉不想启动的程序,注意不要乱删，出问题就6666了。<br>然后在Run上右键—权限—高级—添加—输入everyone—确定。然后把<strong>设置数值</strong>的拒绝勾上（其他都不要勾，这样不会影响到想要启动的程序）然后确定。同样的方法把<br><strong>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</strong><br>也搞定。这样，任何软件一般是无法自动添加到启动了。除非你想，只要删掉权限里面的everyone即可。这样还可以从一定程度上防止木马程序，因为大多数木马也是加在这里，无法随系统启动当然也无法搞破坏了。<img src=\"http://upload-images.jianshu.io/upload_images/1171873-0b4b37ab43f77c95.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20150926-22\"><br>不要再说“电脑慢、卡是因为装太多软件了”。我电脑就还行嘛～</p>\n<blockquote>\n<p>文章来源：中关村在线【时隔久远链接早已404】（已做部分删改）</p>\n</blockquote>\n"},{"title":"阶级","date":"2016-11-05T08:10:00.000Z","_content":"\n而所谓阶级意识，是人们更愿意去寻找在思想上具有相似性和认同感的人。出身会成为划分社会阶级的第一标准，但自身的硬实力使能够改变则中既定阶级的。财富是靠积累的，至于是上一代的还是这一代的还是下一代的，从哪一代开始积累，全凭个人的觉悟和本事。社会本来就是不公平，而在这种不公平的环境下采取一种什么样的态度来面对，是要看个人心态的。\n","source":"_posts/碎碎念/Many-Doors-In-My-Life.md","raw":"---\ntitle: 阶级\ndate: 2016.11.05 16:10\ntags: \ncategories: 日记本\n---\n\n而所谓阶级意识，是人们更愿意去寻找在思想上具有相似性和认同感的人。出身会成为划分社会阶级的第一标准，但自身的硬实力使能够改变则中既定阶级的。财富是靠积累的，至于是上一代的还是这一代的还是下一代的，从哪一代开始积累，全凭个人的觉悟和本事。社会本来就是不公平，而在这种不公平的环境下采取一种什么样的态度来面对，是要看个人心态的。\n","slug":"碎碎念/Many-Doors-In-My-Life","published":1,"updated":"2018-08-04T06:32:45.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc5o002km4cmtnhukiur","content":"<p>而所谓阶级意识，是人们更愿意去寻找在思想上具有相似性和认同感的人。出身会成为划分社会阶级的第一标准，但自身的硬实力使能够改变则中既定阶级的。财富是靠积累的，至于是上一代的还是这一代的还是下一代的，从哪一代开始积累，全凭个人的觉悟和本事。社会本来就是不公平，而在这种不公平的环境下采取一种什么样的态度来面对，是要看个人心态的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>而所谓阶级意识，是人们更愿意去寻找在思想上具有相似性和认同感的人。出身会成为划分社会阶级的第一标准，但自身的硬实力使能够改变则中既定阶级的。财富是靠积累的，至于是上一代的还是这一代的还是下一代的，从哪一代开始积累，全凭个人的觉悟和本事。社会本来就是不公平，而在这种不公平的环境下采取一种什么样的态度来面对，是要看个人心态的。</p>\n"},{"title":"Google[x]’s-Loon，一个互联网气球","date":"2016-02-20T16:00:00.000Z","_content":"\n两个月前在youtube上看到关于Project Loon的视频，挺有意思的，可惜没多少人知道。小小的介绍，当是安利。详细可搜索 [Project Loon](https://www.google.com/loon/)。\n \n眼下， 全球有超过40亿的人们不能访问互联网，他们中很多生活在农村和偏远地区。因此，要接入网络需要更容易、便捷的解决方案，而不是那里建立同一种地面基础设施。几个气球放飞，让附近的人们能接入网络，正是这个项目的初心。\n\nLoon的目的是方便在农村和偏远地区的人们联系，帮助填补覆盖间隙，和灾后使人们重新联机的网络。\n![loon](http://upload-images.jianshu.io/upload_images/1171873-bb2f6750a088fb01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nLoon气球漂浮于大约20公里以上的平流层（高度是飞机的两倍）。在平流层中，Loon会根据风的分层、方向和风速，上升或下降一层吹向所需行使的方向。与电信公司合作，通过气球将移动频谱覆盖到脚下的大地。人们就能直接通过手机及其他移动设备接入网络。\n\n每个气球可以将LTE无线通信技术覆盖到地面直径80公里。使用LTE的合作伙伴与电信企业共享蜂窝频带，人们便能够直接用手机和移动设备接入网络。嗯，没错，loon就是一个飘在天上的“无线路由器”。\n![loon1](http://upload-images.jianshu.io/upload_images/1171873-5552544df1537e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n几年前，Loon项目团队帮助新西兰的一个农村农民上网；去年，他们给巴西偏远地区的学校带来的互联网；明年，他们将在印度开始测试……并且该项目希望在未来几年开始提供良好的商业服务。\n\n![115648_large](http://upload-images.jianshu.io/upload_images/1171873-d60ff551c3f59010.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n当我们行驶在高速，高铁，远郊，手机会随我们位置的变换寻找基站并接入网络。同样，气球飘过的地方便会有网络，而气球通过软件的确定行使的方向，这便是一个移动的基站。随风移动，气球便可布置成一个大的通信网络。\n某天，天上飞的气球，我们甚至看不到它。但是有人会来分享他们的朋友的照片，而这将是因为这气球。\n\n>One day,a balloon is going to be flying up in the sky,and we’re not even going to be able to see it.\nBut someone is going to be sharing a photo with their friend,and it’s going to be because of that balloon we can’t even see. Just like anything else,what was once crazy because normal.\n\n ","source":"_posts/碎碎念/Google[x]’s-Loon，一个互联网气球.md","raw":"---\ntitle: Google[x]’s-Loon，一个互联网气球\ndate: 2016.02.21\ntags: Google\ncategories: 随笔\n---\n\n两个月前在youtube上看到关于Project Loon的视频，挺有意思的，可惜没多少人知道。小小的介绍，当是安利。详细可搜索 [Project Loon](https://www.google.com/loon/)。\n \n眼下， 全球有超过40亿的人们不能访问互联网，他们中很多生活在农村和偏远地区。因此，要接入网络需要更容易、便捷的解决方案，而不是那里建立同一种地面基础设施。几个气球放飞，让附近的人们能接入网络，正是这个项目的初心。\n\nLoon的目的是方便在农村和偏远地区的人们联系，帮助填补覆盖间隙，和灾后使人们重新联机的网络。\n![loon](http://upload-images.jianshu.io/upload_images/1171873-bb2f6750a088fb01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nLoon气球漂浮于大约20公里以上的平流层（高度是飞机的两倍）。在平流层中，Loon会根据风的分层、方向和风速，上升或下降一层吹向所需行使的方向。与电信公司合作，通过气球将移动频谱覆盖到脚下的大地。人们就能直接通过手机及其他移动设备接入网络。\n\n每个气球可以将LTE无线通信技术覆盖到地面直径80公里。使用LTE的合作伙伴与电信企业共享蜂窝频带，人们便能够直接用手机和移动设备接入网络。嗯，没错，loon就是一个飘在天上的“无线路由器”。\n![loon1](http://upload-images.jianshu.io/upload_images/1171873-5552544df1537e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n几年前，Loon项目团队帮助新西兰的一个农村农民上网；去年，他们给巴西偏远地区的学校带来的互联网；明年，他们将在印度开始测试……并且该项目希望在未来几年开始提供良好的商业服务。\n\n![115648_large](http://upload-images.jianshu.io/upload_images/1171873-d60ff551c3f59010.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n当我们行驶在高速，高铁，远郊，手机会随我们位置的变换寻找基站并接入网络。同样，气球飘过的地方便会有网络，而气球通过软件的确定行使的方向，这便是一个移动的基站。随风移动，气球便可布置成一个大的通信网络。\n某天，天上飞的气球，我们甚至看不到它。但是有人会来分享他们的朋友的照片，而这将是因为这气球。\n\n>One day,a balloon is going to be flying up in the sky,and we’re not even going to be able to see it.\nBut someone is going to be sharing a photo with their friend,and it’s going to be because of that balloon we can’t even see. Just like anything else,what was once crazy because normal.\n\n ","slug":"碎碎念/Google[x]’s-Loon，一个互联网气球","published":1,"updated":"2018-08-04T06:32:45.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc5r002nm4cmvlu9tz97","content":"<p>两个月前在youtube上看到关于Project Loon的视频，挺有意思的，可惜没多少人知道。小小的介绍，当是安利。详细可搜索 <a href=\"https://www.google.com/loon/\" target=\"_blank\" rel=\"noopener\">Project Loon</a>。</p>\n<p>眼下， 全球有超过40亿的人们不能访问互联网，他们中很多生活在农村和偏远地区。因此，要接入网络需要更容易、便捷的解决方案，而不是那里建立同一种地面基础设施。几个气球放飞，让附近的人们能接入网络，正是这个项目的初心。</p>\n<p>Loon的目的是方便在农村和偏远地区的人们联系，帮助填补覆盖间隙，和灾后使人们重新联机的网络。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-bb2f6750a088fb01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"loon\"><br>Loon气球漂浮于大约20公里以上的平流层（高度是飞机的两倍）。在平流层中，Loon会根据风的分层、方向和风速，上升或下降一层吹向所需行使的方向。与电信公司合作，通过气球将移动频谱覆盖到脚下的大地。人们就能直接通过手机及其他移动设备接入网络。</p>\n<p>每个气球可以将LTE无线通信技术覆盖到地面直径80公里。使用LTE的合作伙伴与电信企业共享蜂窝频带，人们便能够直接用手机和移动设备接入网络。嗯，没错，loon就是一个飘在天上的“无线路由器”。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5552544df1537e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"loon1\"><br>几年前，Loon项目团队帮助新西兰的一个农村农民上网；去年，他们给巴西偏远地区的学校带来的互联网；明年，他们将在印度开始测试……并且该项目希望在未来几年开始提供良好的商业服务。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-d60ff551c3f59010.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"115648_large\"><br>当我们行驶在高速，高铁，远郊，手机会随我们位置的变换寻找基站并接入网络。同样，气球飘过的地方便会有网络，而气球通过软件的确定行使的方向，这便是一个移动的基站。随风移动，气球便可布置成一个大的通信网络。<br>某天，天上飞的气球，我们甚至看不到它。但是有人会来分享他们的朋友的照片，而这将是因为这气球。</p>\n<blockquote>\n<p>One day,a balloon is going to be flying up in the sky,and we’re not even going to be able to see it.<br>But someone is going to be sharing a photo with their friend,and it’s going to be because of that balloon we can’t even see. Just like anything else,what was once crazy because normal.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>两个月前在youtube上看到关于Project Loon的视频，挺有意思的，可惜没多少人知道。小小的介绍，当是安利。详细可搜索 <a href=\"https://www.google.com/loon/\" target=\"_blank\" rel=\"noopener\">Project Loon</a>。</p>\n<p>眼下， 全球有超过40亿的人们不能访问互联网，他们中很多生活在农村和偏远地区。因此，要接入网络需要更容易、便捷的解决方案，而不是那里建立同一种地面基础设施。几个气球放飞，让附近的人们能接入网络，正是这个项目的初心。</p>\n<p>Loon的目的是方便在农村和偏远地区的人们联系，帮助填补覆盖间隙，和灾后使人们重新联机的网络。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-bb2f6750a088fb01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"loon\"><br>Loon气球漂浮于大约20公里以上的平流层（高度是飞机的两倍）。在平流层中，Loon会根据风的分层、方向和风速，上升或下降一层吹向所需行使的方向。与电信公司合作，通过气球将移动频谱覆盖到脚下的大地。人们就能直接通过手机及其他移动设备接入网络。</p>\n<p>每个气球可以将LTE无线通信技术覆盖到地面直径80公里。使用LTE的合作伙伴与电信企业共享蜂窝频带，人们便能够直接用手机和移动设备接入网络。嗯，没错，loon就是一个飘在天上的“无线路由器”。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5552544df1537e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"loon1\"><br>几年前，Loon项目团队帮助新西兰的一个农村农民上网；去年，他们给巴西偏远地区的学校带来的互联网；明年，他们将在印度开始测试……并且该项目希望在未来几年开始提供良好的商业服务。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-d60ff551c3f59010.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"115648_large\"><br>当我们行驶在高速，高铁，远郊，手机会随我们位置的变换寻找基站并接入网络。同样，气球飘过的地方便会有网络，而气球通过软件的确定行使的方向，这便是一个移动的基站。随风移动，气球便可布置成一个大的通信网络。<br>某天，天上飞的气球，我们甚至看不到它。但是有人会来分享他们的朋友的照片，而这将是因为这气球。</p>\n<blockquote>\n<p>One day,a balloon is going to be flying up in the sky,and we’re not even going to be able to see it.<br>But someone is going to be sharing a photo with their friend,and it’s going to be because of that balloon we can’t even see. Just like anything else,what was once crazy because normal.</p>\n</blockquote>\n"},{"title":"说说在win7下优化软件的必要性","date":"2016-02-29T06:23:00.000Z","_content":"\n**相比win7，还是比较推荐10的。毕竟有新东西……**\n***\n本文的优化软件一般指“ XXX安全卫士 ”、“ XX管家 ”、“ XX毒霸 ”等国产优化软件，当然也包括国外部分优化软件……\n\n**10虽然出来了，但7目前仍是生产机的主力系统……许多10的问题是可以用7的办法来解决的**\n\n优化软件虽给众多小白带来了“方便”，但还是希望通过这篇短文让读者明白：优化软件是怎么对系统进行优化的。windows系统并非众人想的那么差，“**装机就要装杀软**”是不必要的……\n>***注：部分用户将“ XXX安全卫士 ”当杀毒软件用，但严格来讲它应该属于优化软件。***\n\n优化软件——扮演的角色\n目前国内优化软件属于杀软、优化集成软件。软件自身偏臃肿，增加了系统运行负担，部分软件甚至经常出现弹窗广告。笔者对这类优化软件的能力表示怀疑。\n\n优化软件最常用功能——清理垃圾\n在讲优化软件的“ 清理功能 ”之前，先看看win7里的一个东东——“**[SuperFetch](http://baike.baidu.com/item/SuperFetch)**”。这是在windows Vista时引入的，这一技术的核心思想是**「过分闲置的内存空间即是浪费」**，它预测你在何时将可能执行哪些程序，并将所需数据片段预先读入内存缓存，以用于降低对于速度较慢的硬盘的频繁访问，加速系统和程序运行。（具体解释可搜索“**[SuperFetch](http://baike.baidu.com/item/SuperFetch)**”）\n\nSuperFetch 会根据你的操作动态调整自己的缓存策略，且快速适应你任何新的操作习惯（特别是在你安装、卸载新软件之后）。并将你的操作习惯做记录，在不同时间点抓取不同程序的数据片段。（比如，你可能习惯在早晨开机后第一时间打开浏览器，而在傍晚使用相关软件与移动硬盘同步数据，那么Windows在早间启动时就不会读入同步软件的有关数据片段）。根据微软权威专家Mark Russinovich 在TechNet Magazine的阐述，SuperFetch将合理分配缓存，有兴趣的可以移步《[Inside the Windows Vista Kernel: Part 2](http://technet.microsoft.com/en-us/magazine/2007.03.vistakernel.aspx)》。\n\n>大体了解了win7内存分配的结构，可以解释：\n***\nwin7在内存的占用比值比 xp 大的原因：因为 xp 没有这项技术。这也是win7越用越快也是这个原因。\n\n而通常使用优化软件的用户，用得最多的功能是“  清理垃圾  ”，仔细看清理项，都是些缓存、电脑的操作记录。一旦删除，会造成Windows丢失这些跟踪数据，从而拖慢整个系统的效能，系统也将重新花费较长的时间来再次建立这些记录。\n\n因此，网上传的类似“ 一键清理.bat ”脚本可能也会误杀这些记录（当然这要视编写者的水平而定）。\n\n>显而易见，不用刻意清理垃圾，这些缓存对现在的硬盘来说九牛一毛，正常使用win7即可。如果使用win7不是越用越快，那肯定是设置上出问题了。而这些设置问题，使用优化软件是很鸡肋的。\n\n \n![](http://upload-images.jianshu.io/upload_images/1171873-12157cea71a2aecf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n笔者认为：任何经过修改、优化的iso镜像系统都不如官网上的系统镜像。官网上的镜像系统是最干净、安全的。而在win7、win10下，优化软件可以说是来搞笑的。\n","source":"_posts/电脑问题/说说在win7下优化软件的必要性.md","raw":"---\ntitle: 说说在win7下优化软件的必要性\ndate:  2016.02.29 14:23\ntags: 电脑问题\ncategories: windows电脑问题\n---\n\n**相比win7，还是比较推荐10的。毕竟有新东西……**\n***\n本文的优化软件一般指“ XXX安全卫士 ”、“ XX管家 ”、“ XX毒霸 ”等国产优化软件，当然也包括国外部分优化软件……\n\n**10虽然出来了，但7目前仍是生产机的主力系统……许多10的问题是可以用7的办法来解决的**\n\n优化软件虽给众多小白带来了“方便”，但还是希望通过这篇短文让读者明白：优化软件是怎么对系统进行优化的。windows系统并非众人想的那么差，“**装机就要装杀软**”是不必要的……\n>***注：部分用户将“ XXX安全卫士 ”当杀毒软件用，但严格来讲它应该属于优化软件。***\n\n优化软件——扮演的角色\n目前国内优化软件属于杀软、优化集成软件。软件自身偏臃肿，增加了系统运行负担，部分软件甚至经常出现弹窗广告。笔者对这类优化软件的能力表示怀疑。\n\n优化软件最常用功能——清理垃圾\n在讲优化软件的“ 清理功能 ”之前，先看看win7里的一个东东——“**[SuperFetch](http://baike.baidu.com/item/SuperFetch)**”。这是在windows Vista时引入的，这一技术的核心思想是**「过分闲置的内存空间即是浪费」**，它预测你在何时将可能执行哪些程序，并将所需数据片段预先读入内存缓存，以用于降低对于速度较慢的硬盘的频繁访问，加速系统和程序运行。（具体解释可搜索“**[SuperFetch](http://baike.baidu.com/item/SuperFetch)**”）\n\nSuperFetch 会根据你的操作动态调整自己的缓存策略，且快速适应你任何新的操作习惯（特别是在你安装、卸载新软件之后）。并将你的操作习惯做记录，在不同时间点抓取不同程序的数据片段。（比如，你可能习惯在早晨开机后第一时间打开浏览器，而在傍晚使用相关软件与移动硬盘同步数据，那么Windows在早间启动时就不会读入同步软件的有关数据片段）。根据微软权威专家Mark Russinovich 在TechNet Magazine的阐述，SuperFetch将合理分配缓存，有兴趣的可以移步《[Inside the Windows Vista Kernel: Part 2](http://technet.microsoft.com/en-us/magazine/2007.03.vistakernel.aspx)》。\n\n>大体了解了win7内存分配的结构，可以解释：\n***\nwin7在内存的占用比值比 xp 大的原因：因为 xp 没有这项技术。这也是win7越用越快也是这个原因。\n\n而通常使用优化软件的用户，用得最多的功能是“  清理垃圾  ”，仔细看清理项，都是些缓存、电脑的操作记录。一旦删除，会造成Windows丢失这些跟踪数据，从而拖慢整个系统的效能，系统也将重新花费较长的时间来再次建立这些记录。\n\n因此，网上传的类似“ 一键清理.bat ”脚本可能也会误杀这些记录（当然这要视编写者的水平而定）。\n\n>显而易见，不用刻意清理垃圾，这些缓存对现在的硬盘来说九牛一毛，正常使用win7即可。如果使用win7不是越用越快，那肯定是设置上出问题了。而这些设置问题，使用优化软件是很鸡肋的。\n\n \n![](http://upload-images.jianshu.io/upload_images/1171873-12157cea71a2aecf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n笔者认为：任何经过修改、优化的iso镜像系统都不如官网上的系统镜像。官网上的镜像系统是最干净、安全的。而在win7、win10下，优化软件可以说是来搞笑的。\n","slug":"电脑问题/说说在win7下优化软件的必要性","published":1,"updated":"2018-06-28T14:12:11.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc5u002rm4cmeunusxiz","content":"<p><strong>相比win7，还是比较推荐10的。毕竟有新东西……</strong></p>\n<hr>\n<p>本文的优化软件一般指“ XXX安全卫士 ”、“ XX管家 ”、“ XX毒霸 ”等国产优化软件，当然也包括国外部分优化软件……</p>\n<p><strong>10虽然出来了，但7目前仍是生产机的主力系统……许多10的问题是可以用7的办法来解决的</strong></p>\n<p>优化软件虽给众多小白带来了“方便”，但还是希望通过这篇短文让读者明白：优化软件是怎么对系统进行优化的。windows系统并非众人想的那么差，“<strong>装机就要装杀软</strong>”是不必要的……</p>\n<blockquote>\n<p><strong><em>注：部分用户将“ XXX安全卫士 ”当杀毒软件用，但严格来讲它应该属于优化软件。</em></strong></p>\n</blockquote>\n<p>优化软件——扮演的角色<br>目前国内优化软件属于杀软、优化集成软件。软件自身偏臃肿，增加了系统运行负担，部分软件甚至经常出现弹窗广告。笔者对这类优化软件的能力表示怀疑。</p>\n<p>优化软件最常用功能——清理垃圾<br>在讲优化软件的“ 清理功能 ”之前，先看看win7里的一个东东——“<strong><a href=\"http://baike.baidu.com/item/SuperFetch\" target=\"_blank\" rel=\"noopener\">SuperFetch</a></strong>”。这是在windows Vista时引入的，这一技术的核心思想是<strong>「过分闲置的内存空间即是浪费」</strong>，它预测你在何时将可能执行哪些程序，并将所需数据片段预先读入内存缓存，以用于降低对于速度较慢的硬盘的频繁访问，加速系统和程序运行。（具体解释可搜索“<strong><a href=\"http://baike.baidu.com/item/SuperFetch\" target=\"_blank\" rel=\"noopener\">SuperFetch</a></strong>”）</p>\n<p>SuperFetch 会根据你的操作动态调整自己的缓存策略，且快速适应你任何新的操作习惯（特别是在你安装、卸载新软件之后）。并将你的操作习惯做记录，在不同时间点抓取不同程序的数据片段。（比如，你可能习惯在早晨开机后第一时间打开浏览器，而在傍晚使用相关软件与移动硬盘同步数据，那么Windows在早间启动时就不会读入同步软件的有关数据片段）。根据微软权威专家Mark Russinovich 在TechNet Magazine的阐述，SuperFetch将合理分配缓存，有兴趣的可以移步《<a href=\"http://technet.microsoft.com/en-us/magazine/2007.03.vistakernel.aspx\" target=\"_blank\" rel=\"noopener\">Inside the Windows Vista Kernel: Part 2</a>》。</p>\n<blockquote>\n<p>大体了解了win7内存分配的结构，可以解释：</p>\n</blockquote>\n<hr>\n<p>win7在内存的占用比值比 xp 大的原因：因为 xp 没有这项技术。这也是win7越用越快也是这个原因。</p>\n<p>而通常使用优化软件的用户，用得最多的功能是“  清理垃圾  ”，仔细看清理项，都是些缓存、电脑的操作记录。一旦删除，会造成Windows丢失这些跟踪数据，从而拖慢整个系统的效能，系统也将重新花费较长的时间来再次建立这些记录。</p>\n<p>因此，网上传的类似“ 一键清理.bat ”脚本可能也会误杀这些记录（当然这要视编写者的水平而定）。</p>\n<blockquote>\n<p>显而易见，不用刻意清理垃圾，这些缓存对现在的硬盘来说九牛一毛，正常使用win7即可。如果使用win7不是越用越快，那肯定是设置上出问题了。而这些设置问题，使用优化软件是很鸡肋的。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-12157cea71a2aecf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>笔者认为：任何经过修改、优化的iso镜像系统都不如官网上的系统镜像。官网上的镜像系统是最干净、安全的。而在win7、win10下，优化软件可以说是来搞笑的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>相比win7，还是比较推荐10的。毕竟有新东西……</strong></p>\n<hr>\n<p>本文的优化软件一般指“ XXX安全卫士 ”、“ XX管家 ”、“ XX毒霸 ”等国产优化软件，当然也包括国外部分优化软件……</p>\n<p><strong>10虽然出来了，但7目前仍是生产机的主力系统……许多10的问题是可以用7的办法来解决的</strong></p>\n<p>优化软件虽给众多小白带来了“方便”，但还是希望通过这篇短文让读者明白：优化软件是怎么对系统进行优化的。windows系统并非众人想的那么差，“<strong>装机就要装杀软</strong>”是不必要的……</p>\n<blockquote>\n<p><strong><em>注：部分用户将“ XXX安全卫士 ”当杀毒软件用，但严格来讲它应该属于优化软件。</em></strong></p>\n</blockquote>\n<p>优化软件——扮演的角色<br>目前国内优化软件属于杀软、优化集成软件。软件自身偏臃肿，增加了系统运行负担，部分软件甚至经常出现弹窗广告。笔者对这类优化软件的能力表示怀疑。</p>\n<p>优化软件最常用功能——清理垃圾<br>在讲优化软件的“ 清理功能 ”之前，先看看win7里的一个东东——“<strong><a href=\"http://baike.baidu.com/item/SuperFetch\" target=\"_blank\" rel=\"noopener\">SuperFetch</a></strong>”。这是在windows Vista时引入的，这一技术的核心思想是<strong>「过分闲置的内存空间即是浪费」</strong>，它预测你在何时将可能执行哪些程序，并将所需数据片段预先读入内存缓存，以用于降低对于速度较慢的硬盘的频繁访问，加速系统和程序运行。（具体解释可搜索“<strong><a href=\"http://baike.baidu.com/item/SuperFetch\" target=\"_blank\" rel=\"noopener\">SuperFetch</a></strong>”）</p>\n<p>SuperFetch 会根据你的操作动态调整自己的缓存策略，且快速适应你任何新的操作习惯（特别是在你安装、卸载新软件之后）。并将你的操作习惯做记录，在不同时间点抓取不同程序的数据片段。（比如，你可能习惯在早晨开机后第一时间打开浏览器，而在傍晚使用相关软件与移动硬盘同步数据，那么Windows在早间启动时就不会读入同步软件的有关数据片段）。根据微软权威专家Mark Russinovich 在TechNet Magazine的阐述，SuperFetch将合理分配缓存，有兴趣的可以移步《<a href=\"http://technet.microsoft.com/en-us/magazine/2007.03.vistakernel.aspx\" target=\"_blank\" rel=\"noopener\">Inside the Windows Vista Kernel: Part 2</a>》。</p>\n<blockquote>\n<p>大体了解了win7内存分配的结构，可以解释：</p>\n</blockquote>\n<hr>\n<p>win7在内存的占用比值比 xp 大的原因：因为 xp 没有这项技术。这也是win7越用越快也是这个原因。</p>\n<p>而通常使用优化软件的用户，用得最多的功能是“  清理垃圾  ”，仔细看清理项，都是些缓存、电脑的操作记录。一旦删除，会造成Windows丢失这些跟踪数据，从而拖慢整个系统的效能，系统也将重新花费较长的时间来再次建立这些记录。</p>\n<p>因此，网上传的类似“ 一键清理.bat ”脚本可能也会误杀这些记录（当然这要视编写者的水平而定）。</p>\n<blockquote>\n<p>显而易见，不用刻意清理垃圾，这些缓存对现在的硬盘来说九牛一毛，正常使用win7即可。如果使用win7不是越用越快，那肯定是设置上出问题了。而这些设置问题，使用优化软件是很鸡肋的。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-12157cea71a2aecf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>笔者认为：任何经过修改、优化的iso镜像系统都不如官网上的系统镜像。官网上的镜像系统是最干净、安全的。而在win7、win10下，优化软件可以说是来搞笑的。</p>\n"},{"title":"Google18岁了","date":"2016-11-05T08:10:00.000Z","_content":"\n[![googles-18th-birthday-5661535679545344-hp.gif](https://www.google.com.hk/logos/doodles/2016/googles-18th-birthday-5661535679545344-hp.gif)](https://www.google.com.hk/search?newwindow=1&safe=strict&site=&q=Google&oi=ddle&ct=googles-18th-birthday-5661535679545344-hp&hl=zh-CN&sa=X&ved=0ahUKEwjo8uvknq7PAhVEH5QKHV40De0QPQgE)\n![](http://upload-images.jianshu.io/upload_images/1171873-fa08b5a26d07154d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n一早开电脑就被萌萌哒的图惊艳到，眼皮也被这气球拉上去了。哈哈\n","source":"_posts/碎碎念/Google18岁了.md","raw":"---\ntitle: Google18岁了\ndate: 2016.11.05 16:10\ntags: \ncategories: 日记本\n---\n\n[![googles-18th-birthday-5661535679545344-hp.gif](https://www.google.com.hk/logos/doodles/2016/googles-18th-birthday-5661535679545344-hp.gif)](https://www.google.com.hk/search?newwindow=1&safe=strict&site=&q=Google&oi=ddle&ct=googles-18th-birthday-5661535679545344-hp&hl=zh-CN&sa=X&ved=0ahUKEwjo8uvknq7PAhVEH5QKHV40De0QPQgE)\n![](http://upload-images.jianshu.io/upload_images/1171873-fa08b5a26d07154d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n一早开电脑就被萌萌哒的图惊艳到，眼皮也被这气球拉上去了。哈哈\n","slug":"碎碎念/Google18岁了","published":1,"updated":"2018-08-04T06:32:45.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc5y002vm4cm9k5a90v7","content":"<p><a href=\"https://www.google.com.hk/search?newwindow=1&amp;safe=strict&amp;site=&amp;q=Google&amp;oi=ddle&amp;ct=googles-18th-birthday-5661535679545344-hp&amp;hl=zh-CN&amp;sa=X&amp;ved=0ahUKEwjo8uvknq7PAhVEH5QKHV40De0QPQgE\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.google.com.hk/logos/doodles/2016/googles-18th-birthday-5661535679545344-hp.gif\" alt=\"googles-18th-birthday-5661535679545344-hp.gif\"></a><br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-fa08b5a26d07154d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>一早开电脑就被萌萌哒的图惊艳到，眼皮也被这气球拉上去了。哈哈</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.google.com.hk/search?newwindow=1&amp;safe=strict&amp;site=&amp;q=Google&amp;oi=ddle&amp;ct=googles-18th-birthday-5661535679545344-hp&amp;hl=zh-CN&amp;sa=X&amp;ved=0ahUKEwjo8uvknq7PAhVEH5QKHV40De0QPQgE\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.google.com.hk/logos/doodles/2016/googles-18th-birthday-5661535679545344-hp.gif\" alt=\"googles-18th-birthday-5661535679545344-hp.gif\"></a><br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-fa08b5a26d07154d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>一早开电脑就被萌萌哒的图惊艳到，眼皮也被这气球拉上去了。哈哈</p>\n"},{"title":"《越晚越开心》停播","date":"2016-11-05T08:10:00.000Z","_content":"\n岁月就像旺财\n解开那条狗绳的时候，就跑得特快特快\n突然间，发现自己度过了青春期，走过了高考，读完了大学，毕业且工作\n\n这些年很多事情都已经改变，很多人也成为了回忆\n\n一直非常温暖，岁月改变了很多\n唯一不变的，从高中到今天，每晚10点准时出现的两位姐姐，\n时而神经时而傻里傻气～\n\n依旧是那个声音；\n依旧是熟悉的片曲；\n却忘了已有 5个年头。\n\n就像《一点钟情》那样，之后的某天某时习惯性打开收音机，调到那个频道，却没能等到那开场白，心里空了一块一样。\n大家舍不得的是那个回不去的时光，那个夜里10点后有两位陪伴的时光\n\n但那都即将是过去式了，在未来日子里占有不过是美好的一隅。\n就像XX（不知是陆瑾还是腾琪）说的那样：\n> 所以我发现每一个节目都能够陪伴不同的听友，陪他们不断的成长\n\n陆瑾、腾琪\n请原谅我到现在还没分清谁和谁的声音。\n\n祝各位万事吉祥\n","source":"_posts/碎碎念/《越晚越开心》停播.md","raw":"---\ntitle: 《越晚越开心》停播\ndate: 2016.11.05 16:10\ntags: \ncategories: 日记本\n---\n\n岁月就像旺财\n解开那条狗绳的时候，就跑得特快特快\n突然间，发现自己度过了青春期，走过了高考，读完了大学，毕业且工作\n\n这些年很多事情都已经改变，很多人也成为了回忆\n\n一直非常温暖，岁月改变了很多\n唯一不变的，从高中到今天，每晚10点准时出现的两位姐姐，\n时而神经时而傻里傻气～\n\n依旧是那个声音；\n依旧是熟悉的片曲；\n却忘了已有 5个年头。\n\n就像《一点钟情》那样，之后的某天某时习惯性打开收音机，调到那个频道，却没能等到那开场白，心里空了一块一样。\n大家舍不得的是那个回不去的时光，那个夜里10点后有两位陪伴的时光\n\n但那都即将是过去式了，在未来日子里占有不过是美好的一隅。\n就像XX（不知是陆瑾还是腾琪）说的那样：\n> 所以我发现每一个节目都能够陪伴不同的听友，陪他们不断的成长\n\n陆瑾、腾琪\n请原谅我到现在还没分清谁和谁的声音。\n\n祝各位万事吉祥\n","slug":"碎碎念/《越晚越开心》停播","published":1,"updated":"2018-08-04T06:32:45.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc61002ym4cmgx8cy4jz","content":"<p>岁月就像旺财<br>解开那条狗绳的时候，就跑得特快特快<br>突然间，发现自己度过了青春期，走过了高考，读完了大学，毕业且工作</p>\n<p>这些年很多事情都已经改变，很多人也成为了回忆</p>\n<p>一直非常温暖，岁月改变了很多<br>唯一不变的，从高中到今天，每晚10点准时出现的两位姐姐，<br>时而神经时而傻里傻气～</p>\n<p>依旧是那个声音；<br>依旧是熟悉的片曲；<br>却忘了已有 5个年头。</p>\n<p>就像《一点钟情》那样，之后的某天某时习惯性打开收音机，调到那个频道，却没能等到那开场白，心里空了一块一样。<br>大家舍不得的是那个回不去的时光，那个夜里10点后有两位陪伴的时光</p>\n<p>但那都即将是过去式了，在未来日子里占有不过是美好的一隅。<br>就像XX（不知是陆瑾还是腾琪）说的那样：</p>\n<blockquote>\n<p>所以我发现每一个节目都能够陪伴不同的听友，陪他们不断的成长</p>\n</blockquote>\n<p>陆瑾、腾琪<br>请原谅我到现在还没分清谁和谁的声音。</p>\n<p>祝各位万事吉祥</p>\n","site":{"data":{}},"excerpt":"","more":"<p>岁月就像旺财<br>解开那条狗绳的时候，就跑得特快特快<br>突然间，发现自己度过了青春期，走过了高考，读完了大学，毕业且工作</p>\n<p>这些年很多事情都已经改变，很多人也成为了回忆</p>\n<p>一直非常温暖，岁月改变了很多<br>唯一不变的，从高中到今天，每晚10点准时出现的两位姐姐，<br>时而神经时而傻里傻气～</p>\n<p>依旧是那个声音；<br>依旧是熟悉的片曲；<br>却忘了已有 5个年头。</p>\n<p>就像《一点钟情》那样，之后的某天某时习惯性打开收音机，调到那个频道，却没能等到那开场白，心里空了一块一样。<br>大家舍不得的是那个回不去的时光，那个夜里10点后有两位陪伴的时光</p>\n<p>但那都即将是过去式了，在未来日子里占有不过是美好的一隅。<br>就像XX（不知是陆瑾还是腾琪）说的那样：</p>\n<blockquote>\n<p>所以我发现每一个节目都能够陪伴不同的听友，陪他们不断的成长</p>\n</blockquote>\n<p>陆瑾、腾琪<br>请原谅我到现在还没分清谁和谁的声音。</p>\n<p>祝各位万事吉祥</p>\n"},{"title":"hello,os-world of Boot Sector","date":"2016-05-24T16:00:00.000Z","_content":"\n这不是个完整的os，而只是个最最简单的引导扇区(Boot Sector)，但至少它是在裸机上运行的，不依赖任何其他软件～\n***\n在图书馆无意中挖到一本《**自己动手写操作系统**》。欢哉～\n\n可惜是2005年的书了，书中讲到的软盘和软盘映像相应的软件在网上实在不好找，特别是win系统的。最后还是装个deepin来编译.asm和.img文件来得方便。\n\n为什么是deepin？方便啊，十几分钟自动安装，然后就能用了。\n[![一个简单的Boot Sector](http://upload-images.jianshu.io/upload_images/1171873-ed5b2fee51b9e54f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160513132812.jpg)\n\n将下面的代码保存为 BOOT.ASM\n```\norg 07c00h  ;告诉编译器程序加载到7c00处\nmov ax,cs\nmov ds,ax\nmov es,ax\ncall DispStr  ;无线循环\njmp $\nDispStr:\n  mov ax,BootMessage\n  mov bp,ax   ;es:bp = 串地址\n  mov cx,16 ;cx = 传长度\n  mov ax,01301h ;ah = 13,all = 01h\n  mov bx,000ch   ;页号为0(bh=0)，黑底红字(b1=0Ch,高亮)\n  mov dl,0\n  int 10h  ;10h号中断\n  ret\nBootMessage: db \"hello ,os world!\"\ntimes 510-($-$$) db 0    ;填充剩下的空间，使生成的二进制代码，恰到好处为512字节\ndw 0xaa55   ;结束标志`\n```\n\n**linux下安装nasm，编译：**\n```\n**nasm boot.asm -o boot.bin**\n```\n\n使用linux下的dd命令，网上找了下dd制作映像文件，果然是可以的，制作方法如下：\n1 先制作一个空的软盘映像文件diska.img(1.44Mb的软盘映像文件)：\n```\n**dd if=/dev/zero of=diska.img bs=512 count=2880**\n```\n\n2 制作一个包含boot.bin的映像文件boot.img:\n```\n**dd if=boot.bin of=boot.img bs=512 count=1**\n```\n\n3 将diska.img中1个扇区后面的数据拷贝到boot.img的后面\n```\n**dd if=diska.img of=boot.img skip=1 seek=1 bs=512 count=2879**\n```\n\n这样就做成了一个大小为1.44Mb的包含引导代码的映像文件。\n \n接着，创建一个空的虚拟机，在设置中将Floppy（软盘）的路径设置为上面制作的引导扇区的路径：\n[![20160515125816](http://upload-images.jianshu.io/upload_images/1171873-59867994fdf17b2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160515125816.png)\n开启虚拟机，便出现本文开头的那张图——hello ,os world!\n\n其实这些在网上是能够找到的，可奈何脑子笨，弄了一天试了好多软件才出现这一界面，固然欣喜。如何与硬件做沟通？正是我想要了解的。[![](http://upload-images.jianshu.io/upload_images/1171873-3fd3dee55e0a9bbd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/1786778861.jpg)\n一个不懂汇编和C语言的，可怜的娃。\n","source":"_posts/碎碎念/“hello,-os-world!-”-of-Boot-Sector.md","raw":"---\ntitle: hello,os-world of Boot Sector\ndate: 2016.05.25\ntags: \ncategories: 随笔\n---\n\n这不是个完整的os，而只是个最最简单的引导扇区(Boot Sector)，但至少它是在裸机上运行的，不依赖任何其他软件～\n***\n在图书馆无意中挖到一本《**自己动手写操作系统**》。欢哉～\n\n可惜是2005年的书了，书中讲到的软盘和软盘映像相应的软件在网上实在不好找，特别是win系统的。最后还是装个deepin来编译.asm和.img文件来得方便。\n\n为什么是deepin？方便啊，十几分钟自动安装，然后就能用了。\n[![一个简单的Boot Sector](http://upload-images.jianshu.io/upload_images/1171873-ed5b2fee51b9e54f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160513132812.jpg)\n\n将下面的代码保存为 BOOT.ASM\n```\norg 07c00h  ;告诉编译器程序加载到7c00处\nmov ax,cs\nmov ds,ax\nmov es,ax\ncall DispStr  ;无线循环\njmp $\nDispStr:\n  mov ax,BootMessage\n  mov bp,ax   ;es:bp = 串地址\n  mov cx,16 ;cx = 传长度\n  mov ax,01301h ;ah = 13,all = 01h\n  mov bx,000ch   ;页号为0(bh=0)，黑底红字(b1=0Ch,高亮)\n  mov dl,0\n  int 10h  ;10h号中断\n  ret\nBootMessage: db \"hello ,os world!\"\ntimes 510-($-$$) db 0    ;填充剩下的空间，使生成的二进制代码，恰到好处为512字节\ndw 0xaa55   ;结束标志`\n```\n\n**linux下安装nasm，编译：**\n```\n**nasm boot.asm -o boot.bin**\n```\n\n使用linux下的dd命令，网上找了下dd制作映像文件，果然是可以的，制作方法如下：\n1 先制作一个空的软盘映像文件diska.img(1.44Mb的软盘映像文件)：\n```\n**dd if=/dev/zero of=diska.img bs=512 count=2880**\n```\n\n2 制作一个包含boot.bin的映像文件boot.img:\n```\n**dd if=boot.bin of=boot.img bs=512 count=1**\n```\n\n3 将diska.img中1个扇区后面的数据拷贝到boot.img的后面\n```\n**dd if=diska.img of=boot.img skip=1 seek=1 bs=512 count=2879**\n```\n\n这样就做成了一个大小为1.44Mb的包含引导代码的映像文件。\n \n接着，创建一个空的虚拟机，在设置中将Floppy（软盘）的路径设置为上面制作的引导扇区的路径：\n[![20160515125816](http://upload-images.jianshu.io/upload_images/1171873-59867994fdf17b2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160515125816.png)\n开启虚拟机，便出现本文开头的那张图——hello ,os world!\n\n其实这些在网上是能够找到的，可奈何脑子笨，弄了一天试了好多软件才出现这一界面，固然欣喜。如何与硬件做沟通？正是我想要了解的。[![](http://upload-images.jianshu.io/upload_images/1171873-3fd3dee55e0a9bbd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/1786778861.jpg)\n一个不懂汇编和C语言的，可怜的娃。\n","slug":"碎碎念/“hello,-os-world!-”-of-Boot-Sector","published":1,"updated":"2018-08-04T06:32:45.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc650032m4cm7z6akb09","content":"<p>这不是个完整的os，而只是个最最简单的引导扇区(Boot Sector)，但至少它是在裸机上运行的，不依赖任何其他软件～</p>\n<hr>\n<p>在图书馆无意中挖到一本《<strong>自己动手写操作系统</strong>》。欢哉～</p>\n<p>可惜是2005年的书了，书中讲到的软盘和软盘映像相应的软件在网上实在不好找，特别是win系统的。最后还是装个deepin来编译.asm和.img文件来得方便。</p>\n<p>为什么是deepin？方便啊，十几分钟自动安装，然后就能用了。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160513132812.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-ed5b2fee51b9e54f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"一个简单的Boot Sector\"></a></p>\n<p>将下面的代码保存为 BOOT.ASM<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org 07c00h  ;告诉编译器程序加载到7c00处</span><br><span class=\"line\">mov ax,cs</span><br><span class=\"line\">mov ds,ax</span><br><span class=\"line\">mov es,ax</span><br><span class=\"line\">call DispStr  ;无线循环</span><br><span class=\"line\">jmp $</span><br><span class=\"line\">DispStr:</span><br><span class=\"line\">  mov ax,BootMessage</span><br><span class=\"line\">  mov bp,ax   ;es:bp = 串地址</span><br><span class=\"line\">  mov cx,16 ;cx = 传长度</span><br><span class=\"line\">  mov ax,01301h ;ah = 13,all = 01h</span><br><span class=\"line\">  mov bx,000ch   ;页号为0(bh=0)，黑底红字(b1=0Ch,高亮)</span><br><span class=\"line\">  mov dl,0</span><br><span class=\"line\">  int 10h  ;10h号中断</span><br><span class=\"line\">  ret</span><br><span class=\"line\">BootMessage: db &quot;hello ,os world!&quot;</span><br><span class=\"line\">times 510-($-$$) db 0    ;填充剩下的空间，使生成的二进制代码，恰到好处为512字节</span><br><span class=\"line\">dw 0xaa55   ;结束标志`</span><br></pre></td></tr></table></figure></p>\n<p><strong>linux下安装nasm，编译：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**nasm boot.asm -o boot.bin**</span><br></pre></td></tr></table></figure></p>\n<p>使用linux下的dd命令，网上找了下dd制作映像文件，果然是可以的，制作方法如下：<br>1 先制作一个空的软盘映像文件diska.img(1.44Mb的软盘映像文件)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**dd if=/dev/zero of=diska.img bs=512 count=2880**</span><br></pre></td></tr></table></figure></p>\n<p>2 制作一个包含boot.bin的映像文件boot.img:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**dd if=boot.bin of=boot.img bs=512 count=1**</span><br></pre></td></tr></table></figure></p>\n<p>3 将diska.img中1个扇区后面的数据拷贝到boot.img的后面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**dd if=diska.img of=boot.img skip=1 seek=1 bs=512 count=2879**</span><br></pre></td></tr></table></figure></p>\n<p>这样就做成了一个大小为1.44Mb的包含引导代码的映像文件。</p>\n<p>接着，创建一个空的虚拟机，在设置中将Floppy（软盘）的路径设置为上面制作的引导扇区的路径：<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160515125816.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-59867994fdf17b2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160515125816\"></a><br>开启虚拟机，便出现本文开头的那张图——hello ,os world!</p>\n<p>其实这些在网上是能够找到的，可奈何脑子笨，弄了一天试了好多软件才出现这一界面，固然欣喜。如何与硬件做沟通？正是我想要了解的。<a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/1786778861.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3fd3dee55e0a9bbd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a><br>一个不懂汇编和C语言的，可怜的娃。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这不是个完整的os，而只是个最最简单的引导扇区(Boot Sector)，但至少它是在裸机上运行的，不依赖任何其他软件～</p>\n<hr>\n<p>在图书馆无意中挖到一本《<strong>自己动手写操作系统</strong>》。欢哉～</p>\n<p>可惜是2005年的书了，书中讲到的软盘和软盘映像相应的软件在网上实在不好找，特别是win系统的。最后还是装个deepin来编译.asm和.img文件来得方便。</p>\n<p>为什么是deepin？方便啊，十几分钟自动安装，然后就能用了。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160513132812.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-ed5b2fee51b9e54f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"一个简单的Boot Sector\"></a></p>\n<p>将下面的代码保存为 BOOT.ASM<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org 07c00h  ;告诉编译器程序加载到7c00处</span><br><span class=\"line\">mov ax,cs</span><br><span class=\"line\">mov ds,ax</span><br><span class=\"line\">mov es,ax</span><br><span class=\"line\">call DispStr  ;无线循环</span><br><span class=\"line\">jmp $</span><br><span class=\"line\">DispStr:</span><br><span class=\"line\">  mov ax,BootMessage</span><br><span class=\"line\">  mov bp,ax   ;es:bp = 串地址</span><br><span class=\"line\">  mov cx,16 ;cx = 传长度</span><br><span class=\"line\">  mov ax,01301h ;ah = 13,all = 01h</span><br><span class=\"line\">  mov bx,000ch   ;页号为0(bh=0)，黑底红字(b1=0Ch,高亮)</span><br><span class=\"line\">  mov dl,0</span><br><span class=\"line\">  int 10h  ;10h号中断</span><br><span class=\"line\">  ret</span><br><span class=\"line\">BootMessage: db &quot;hello ,os world!&quot;</span><br><span class=\"line\">times 510-($-$$) db 0    ;填充剩下的空间，使生成的二进制代码，恰到好处为512字节</span><br><span class=\"line\">dw 0xaa55   ;结束标志`</span><br></pre></td></tr></table></figure></p>\n<p><strong>linux下安装nasm，编译：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**nasm boot.asm -o boot.bin**</span><br></pre></td></tr></table></figure></p>\n<p>使用linux下的dd命令，网上找了下dd制作映像文件，果然是可以的，制作方法如下：<br>1 先制作一个空的软盘映像文件diska.img(1.44Mb的软盘映像文件)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**dd if=/dev/zero of=diska.img bs=512 count=2880**</span><br></pre></td></tr></table></figure></p>\n<p>2 制作一个包含boot.bin的映像文件boot.img:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**dd if=boot.bin of=boot.img bs=512 count=1**</span><br></pre></td></tr></table></figure></p>\n<p>3 将diska.img中1个扇区后面的数据拷贝到boot.img的后面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**dd if=diska.img of=boot.img skip=1 seek=1 bs=512 count=2879**</span><br></pre></td></tr></table></figure></p>\n<p>这样就做成了一个大小为1.44Mb的包含引导代码的映像文件。</p>\n<p>接着，创建一个空的虚拟机，在设置中将Floppy（软盘）的路径设置为上面制作的引导扇区的路径：<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160515125816.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-59867994fdf17b2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160515125816\"></a><br>开启虚拟机，便出现本文开头的那张图——hello ,os world!</p>\n<p>其实这些在网上是能够找到的，可奈何脑子笨，弄了一天试了好多软件才出现这一界面，固然欣喜。如何与硬件做沟通？正是我想要了解的。<a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/1786778861.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3fd3dee55e0a9bbd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a><br>一个不懂汇编和C语言的，可怜的娃。</p>\n"},{"title":"一罐硬币实验的讨论——《信号与噪声》","date":"2016-03-01T16:00:00.000Z","_content":"\n\n“在经济学课上有这么一个常见的实验，通常教授想额外赚点午餐费时就让学生做这个实验。\n\n他会在班内举行一场拍卖会，让学生竞拍一罐硬币。出价最高的学生将赢得硬币，还要向老师支付一笔拍卖服务费。几乎每一次中标的学生都会发现，这笔交易不值那么多钱 有些学生报价过低，有些报价正好等于那罐硬币的金额，但是，每次中标的都是估价过高的那位同学，而最【差】的预测者往往会获得【奖励】。这就是赢家的诅咒。”\n***【书摘——《信号与噪声》】***\n***\n这是网友“chen ”在网易公开课群里分享的一段话。感觉这段话的含义很深，之后和chen讨论，明白了些，作以记录分享。\n\n### 笔记：\n把这些用超出硬币实际价格的钱拍下硬币罐的学生看成是一种“噪声”的载体，超出实际的那部分价格就是噪声。相对于出价低于或等于实际价格的人来说，中标学生的预测最糟糕。因此他们实际承担了损失。可是却往往是“赢家”。\n\n而赢家往往并不是“赢家”，而是“噪声”。噪声干扰了对实际的判断。在生活中也常发生，像“[光环效应](https://zh.wikipedia.org/wiki/%E6%99%95%E8%BD%AE%E6%95%88%E5%BA%94)”一样，我们一般倾向于把一些本不属于他们的品质放在他们身上。\n\n因为噪声干扰，在别人眼里，就高估了东西的实际价值，下回就会出更高的价格，直到他们赢得奖励后发现自己亏了……而这些中标的人通常不想被认为是“傻瓜”……为了弥补损失，他们又对手中的东西进行伪装，去寻找下个“傻瓜”……\n\n>当然说得不对的地方或是有不一样的看法，欢迎指出讨论，一起学习\n【感觉压根没人知道这个网站XD】\n","source":"_posts/碎碎念/一罐硬币实验的讨论——《信号与噪声》.md","raw":"---\ntitle: 一罐硬币实验的讨论——《信号与噪声》\ndate: 2016.03.02\ntags: Google\ncategories: 随笔\n---\n\n\n“在经济学课上有这么一个常见的实验，通常教授想额外赚点午餐费时就让学生做这个实验。\n\n他会在班内举行一场拍卖会，让学生竞拍一罐硬币。出价最高的学生将赢得硬币，还要向老师支付一笔拍卖服务费。几乎每一次中标的学生都会发现，这笔交易不值那么多钱 有些学生报价过低，有些报价正好等于那罐硬币的金额，但是，每次中标的都是估价过高的那位同学，而最【差】的预测者往往会获得【奖励】。这就是赢家的诅咒。”\n***【书摘——《信号与噪声》】***\n***\n这是网友“chen ”在网易公开课群里分享的一段话。感觉这段话的含义很深，之后和chen讨论，明白了些，作以记录分享。\n\n### 笔记：\n把这些用超出硬币实际价格的钱拍下硬币罐的学生看成是一种“噪声”的载体，超出实际的那部分价格就是噪声。相对于出价低于或等于实际价格的人来说，中标学生的预测最糟糕。因此他们实际承担了损失。可是却往往是“赢家”。\n\n而赢家往往并不是“赢家”，而是“噪声”。噪声干扰了对实际的判断。在生活中也常发生，像“[光环效应](https://zh.wikipedia.org/wiki/%E6%99%95%E8%BD%AE%E6%95%88%E5%BA%94)”一样，我们一般倾向于把一些本不属于他们的品质放在他们身上。\n\n因为噪声干扰，在别人眼里，就高估了东西的实际价值，下回就会出更高的价格，直到他们赢得奖励后发现自己亏了……而这些中标的人通常不想被认为是“傻瓜”……为了弥补损失，他们又对手中的东西进行伪装，去寻找下个“傻瓜”……\n\n>当然说得不对的地方或是有不一样的看法，欢迎指出讨论，一起学习\n【感觉压根没人知道这个网站XD】\n","slug":"碎碎念/一罐硬币实验的讨论——《信号与噪声》","published":1,"updated":"2018-08-04T06:32:45.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc680035m4cm0zbd91mf","content":"<p>“在经济学课上有这么一个常见的实验，通常教授想额外赚点午餐费时就让学生做这个实验。</p>\n<p>他会在班内举行一场拍卖会，让学生竞拍一罐硬币。出价最高的学生将赢得硬币，还要向老师支付一笔拍卖服务费。几乎每一次中标的学生都会发现，这笔交易不值那么多钱 有些学生报价过低，有些报价正好等于那罐硬币的金额，但是，每次中标的都是估价过高的那位同学，而最【差】的预测者往往会获得【奖励】。这就是赢家的诅咒。”<br><strong><em>【书摘——《信号与噪声》】</em></strong></p>\n<hr>\n<p>这是网友“chen ”在网易公开课群里分享的一段话。感觉这段话的含义很深，之后和chen讨论，明白了些，作以记录分享。</p>\n<h3 id=\"笔记：\"><a href=\"#笔记：\" class=\"headerlink\" title=\"笔记：\"></a>笔记：</h3><p>把这些用超出硬币实际价格的钱拍下硬币罐的学生看成是一种“噪声”的载体，超出实际的那部分价格就是噪声。相对于出价低于或等于实际价格的人来说，中标学生的预测最糟糕。因此他们实际承担了损失。可是却往往是“赢家”。</p>\n<p>而赢家往往并不是“赢家”，而是“噪声”。噪声干扰了对实际的判断。在生活中也常发生，像“<a href=\"https://zh.wikipedia.org/wiki/%E6%99%95%E8%BD%AE%E6%95%88%E5%BA%94\" target=\"_blank\" rel=\"noopener\">光环效应</a>”一样，我们一般倾向于把一些本不属于他们的品质放在他们身上。</p>\n<p>因为噪声干扰，在别人眼里，就高估了东西的实际价值，下回就会出更高的价格，直到他们赢得奖励后发现自己亏了……而这些中标的人通常不想被认为是“傻瓜”……为了弥补损失，他们又对手中的东西进行伪装，去寻找下个“傻瓜”……</p>\n<blockquote>\n<p>当然说得不对的地方或是有不一样的看法，欢迎指出讨论，一起学习<br>【感觉压根没人知道这个网站XD】</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>“在经济学课上有这么一个常见的实验，通常教授想额外赚点午餐费时就让学生做这个实验。</p>\n<p>他会在班内举行一场拍卖会，让学生竞拍一罐硬币。出价最高的学生将赢得硬币，还要向老师支付一笔拍卖服务费。几乎每一次中标的学生都会发现，这笔交易不值那么多钱 有些学生报价过低，有些报价正好等于那罐硬币的金额，但是，每次中标的都是估价过高的那位同学，而最【差】的预测者往往会获得【奖励】。这就是赢家的诅咒。”<br><strong><em>【书摘——《信号与噪声》】</em></strong></p>\n<hr>\n<p>这是网友“chen ”在网易公开课群里分享的一段话。感觉这段话的含义很深，之后和chen讨论，明白了些，作以记录分享。</p>\n<h3 id=\"笔记：\"><a href=\"#笔记：\" class=\"headerlink\" title=\"笔记：\"></a>笔记：</h3><p>把这些用超出硬币实际价格的钱拍下硬币罐的学生看成是一种“噪声”的载体，超出实际的那部分价格就是噪声。相对于出价低于或等于实际价格的人来说，中标学生的预测最糟糕。因此他们实际承担了损失。可是却往往是“赢家”。</p>\n<p>而赢家往往并不是“赢家”，而是“噪声”。噪声干扰了对实际的判断。在生活中也常发生，像“<a href=\"https://zh.wikipedia.org/wiki/%E6%99%95%E8%BD%AE%E6%95%88%E5%BA%94\" target=\"_blank\" rel=\"noopener\">光环效应</a>”一样，我们一般倾向于把一些本不属于他们的品质放在他们身上。</p>\n<p>因为噪声干扰，在别人眼里，就高估了东西的实际价值，下回就会出更高的价格，直到他们赢得奖励后发现自己亏了……而这些中标的人通常不想被认为是“傻瓜”……为了弥补损失，他们又对手中的东西进行伪装，去寻找下个“傻瓜”……</p>\n<blockquote>\n<p>当然说得不对的地方或是有不一样的看法，欢迎指出讨论，一起学习<br>【感觉压根没人知道这个网站XD】</p>\n</blockquote>\n"},{"title":"分数，教育的目的","date":"2016-11-05T08:10:00.000Z","_content":"\n——摘自 [【TED】考试分数不是教育的目的](http://open.163.com/movie/2016/10/V/A/MC22UD6NI_MC2374LVA.html)\n\n\n![](http://upload-images.jianshu.io/upload_images/1171873-17720d4afdf33fe1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n虽然成绩能够检验我们的知识掌握程度，但也不能成为唯一的衡量标准。\n\n教育家萨尔曼·可汗（Salman Khan）先生（可汗学院创始人）对此在演讲中分享了两个方面内容：\n\n>一个是掌握的技巧，另一个是思维方式。\n\n假设我们现在正身处某中学的数学课堂，课题是指数函数，老师就此内容来上课，然后我们回家做一些相关习题。第二天早上，老师会检查这些作业，之后又是上课，做作业，上课，做作业。\n \n这样大概会持续几周，就该测验了。在考试中，我也许只会75%的题目，你可能会90%，他可能会95%。但即使考试能帮助我们查缺补漏，可还是会有25%的内容没有掌握。就算那些得A的学生，依旧有5%的内容没有搞懂。但课堂还是会继续，进入下一个课题，它可能是更加复杂的内容，然后会建立在我们的知识漏洞之上。\n \n因此这并不是学科本身难学，或是因为学生不聪明，而是因为他们**在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习，就导致了他们认为自己没有学习天赋。**\n\n只能当我们长大一点，有了一定的动力并决定下功夫去学时，才会发现自己其实是有能力学好的。\n\n所以\n萨尔曼提出：只有掌握了最基本的，我们才能去挑战更难得。\n\n![](http://upload-images.jianshu.io/upload_images/1171873-80149240ae8da39b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这就好比造房子。你请来包工头，告诉他们两周之内打好地基，两周之后你来验收，看到地基整体还不错，但有一些小问题，你对包工头说：你打的地基我能给你80分。 但是不用返工，你们开始建第一层吧，给你们一周时间。 一周过去了，你又来验收，这次问题百出，你只给他们打了60分，但工程并没有停。 最后，在建到第三层的时候，楼房轰然倒塌。\n\n学习也是如此，**我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。**\n\n因此萨尔曼再次提出：**我们应该将人为的限制、僵化，转换成另一种方式。学生之间的差异应该是用多久和怎么学才能掌握一门学科，最重要的是，让学生们真正掌握知识，培养一种正确的思维方式，而非取得高分。**这可以让他们认识到如果他们只考了80份，也不代表他们天生就只有80分的水平，而是说明他们还需要在这20%的内容上继续努力、迎难而上。\n\n而且每个学生其实都应该遵循自己的学习进度，进行有个性化的一对一辅导，和有针对性的练习。\n\n当然，这并不是什么全新的观念，在100年前的伊利诺伊州，温内特卡市就有这样的实践：他们尝试了这种以掌握为目的的教学，成果很显著，但是他们表示很难大面积推广，毕竟可行性太低了。\n \n于是，基于此，萨尔曼可汗创立了可汗学院，旨在为全世界的人提供高质量的免费学习资源。 这样，学生就能够真正掌握知识，由此培养他们积极的心里，建立对学习的热情，以达到“倒三角”的理想状态。\n\n![](http://upload-images.jianshu.io/upload_images/1171873-94f67ba4827bffd3.gif?imageMogr2/auto-orient/strip)\n\n## 小结\n - 在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习\n - 我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。\n - 重要的是，让学生们真正掌握知识，培养一种正确的思维方式\n\n\n","source":"_posts/碎碎念/分数，教育的目的.md","raw":"---\ntitle: 分数，教育的目的\ndate: 2016.11.05 16:10\ntags: \ncategories: 日记本\n---\n\n——摘自 [【TED】考试分数不是教育的目的](http://open.163.com/movie/2016/10/V/A/MC22UD6NI_MC2374LVA.html)\n\n\n![](http://upload-images.jianshu.io/upload_images/1171873-17720d4afdf33fe1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n虽然成绩能够检验我们的知识掌握程度，但也不能成为唯一的衡量标准。\n\n教育家萨尔曼·可汗（Salman Khan）先生（可汗学院创始人）对此在演讲中分享了两个方面内容：\n\n>一个是掌握的技巧，另一个是思维方式。\n\n假设我们现在正身处某中学的数学课堂，课题是指数函数，老师就此内容来上课，然后我们回家做一些相关习题。第二天早上，老师会检查这些作业，之后又是上课，做作业，上课，做作业。\n \n这样大概会持续几周，就该测验了。在考试中，我也许只会75%的题目，你可能会90%，他可能会95%。但即使考试能帮助我们查缺补漏，可还是会有25%的内容没有掌握。就算那些得A的学生，依旧有5%的内容没有搞懂。但课堂还是会继续，进入下一个课题，它可能是更加复杂的内容，然后会建立在我们的知识漏洞之上。\n \n因此这并不是学科本身难学，或是因为学生不聪明，而是因为他们**在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习，就导致了他们认为自己没有学习天赋。**\n\n只能当我们长大一点，有了一定的动力并决定下功夫去学时，才会发现自己其实是有能力学好的。\n\n所以\n萨尔曼提出：只有掌握了最基本的，我们才能去挑战更难得。\n\n![](http://upload-images.jianshu.io/upload_images/1171873-80149240ae8da39b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这就好比造房子。你请来包工头，告诉他们两周之内打好地基，两周之后你来验收，看到地基整体还不错，但有一些小问题，你对包工头说：你打的地基我能给你80分。 但是不用返工，你们开始建第一层吧，给你们一周时间。 一周过去了，你又来验收，这次问题百出，你只给他们打了60分，但工程并没有停。 最后，在建到第三层的时候，楼房轰然倒塌。\n\n学习也是如此，**我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。**\n\n因此萨尔曼再次提出：**我们应该将人为的限制、僵化，转换成另一种方式。学生之间的差异应该是用多久和怎么学才能掌握一门学科，最重要的是，让学生们真正掌握知识，培养一种正确的思维方式，而非取得高分。**这可以让他们认识到如果他们只考了80份，也不代表他们天生就只有80分的水平，而是说明他们还需要在这20%的内容上继续努力、迎难而上。\n\n而且每个学生其实都应该遵循自己的学习进度，进行有个性化的一对一辅导，和有针对性的练习。\n\n当然，这并不是什么全新的观念，在100年前的伊利诺伊州，温内特卡市就有这样的实践：他们尝试了这种以掌握为目的的教学，成果很显著，但是他们表示很难大面积推广，毕竟可行性太低了。\n \n于是，基于此，萨尔曼可汗创立了可汗学院，旨在为全世界的人提供高质量的免费学习资源。 这样，学生就能够真正掌握知识，由此培养他们积极的心里，建立对学习的热情，以达到“倒三角”的理想状态。\n\n![](http://upload-images.jianshu.io/upload_images/1171873-94f67ba4827bffd3.gif?imageMogr2/auto-orient/strip)\n\n## 小结\n - 在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习\n - 我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。\n - 重要的是，让学生们真正掌握知识，培养一种正确的思维方式\n\n\n","slug":"碎碎念/分数，教育的目的","published":1,"updated":"2018-08-04T06:32:45.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc6c0038m4cm34diafyn","content":"<p>——摘自 <a href=\"http://open.163.com/movie/2016/10/V/A/MC22UD6NI_MC2374LVA.html\" target=\"_blank\" rel=\"noopener\">【TED】考试分数不是教育的目的</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-17720d4afdf33fe1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>虽然成绩能够检验我们的知识掌握程度，但也不能成为唯一的衡量标准。</p>\n<p>教育家萨尔曼·可汗（Salman Khan）先生（可汗学院创始人）对此在演讲中分享了两个方面内容：</p>\n<blockquote>\n<p>一个是掌握的技巧，另一个是思维方式。</p>\n</blockquote>\n<p>假设我们现在正身处某中学的数学课堂，课题是指数函数，老师就此内容来上课，然后我们回家做一些相关习题。第二天早上，老师会检查这些作业，之后又是上课，做作业，上课，做作业。</p>\n<p>这样大概会持续几周，就该测验了。在考试中，我也许只会75%的题目，你可能会90%，他可能会95%。但即使考试能帮助我们查缺补漏，可还是会有25%的内容没有掌握。就算那些得A的学生，依旧有5%的内容没有搞懂。但课堂还是会继续，进入下一个课题，它可能是更加复杂的内容，然后会建立在我们的知识漏洞之上。</p>\n<p>因此这并不是学科本身难学，或是因为学生不聪明，而是因为他们<strong>在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习，就导致了他们认为自己没有学习天赋。</strong></p>\n<p>只能当我们长大一点，有了一定的动力并决定下功夫去学时，才会发现自己其实是有能力学好的。</p>\n<p>所以<br>萨尔曼提出：只有掌握了最基本的，我们才能去挑战更难得。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-80149240ae8da39b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这就好比造房子。你请来包工头，告诉他们两周之内打好地基，两周之后你来验收，看到地基整体还不错，但有一些小问题，你对包工头说：你打的地基我能给你80分。 但是不用返工，你们开始建第一层吧，给你们一周时间。 一周过去了，你又来验收，这次问题百出，你只给他们打了60分，但工程并没有停。 最后，在建到第三层的时候，楼房轰然倒塌。</p>\n<p>学习也是如此，<strong>我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。</strong></p>\n<p>因此萨尔曼再次提出：<strong>我们应该将人为的限制、僵化，转换成另一种方式。学生之间的差异应该是用多久和怎么学才能掌握一门学科，最重要的是，让学生们真正掌握知识，培养一种正确的思维方式，而非取得高分。</strong>这可以让他们认识到如果他们只考了80份，也不代表他们天生就只有80分的水平，而是说明他们还需要在这20%的内容上继续努力、迎难而上。</p>\n<p>而且每个学生其实都应该遵循自己的学习进度，进行有个性化的一对一辅导，和有针对性的练习。</p>\n<p>当然，这并不是什么全新的观念，在100年前的伊利诺伊州，温内特卡市就有这样的实践：他们尝试了这种以掌握为目的的教学，成果很显著，但是他们表示很难大面积推广，毕竟可行性太低了。</p>\n<p>于是，基于此，萨尔曼可汗创立了可汗学院，旨在为全世界的人提供高质量的免费学习资源。 这样，学生就能够真正掌握知识，由此培养他们积极的心里，建立对学习的热情，以达到“倒三角”的理想状态。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-94f67ba4827bffd3.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习</li>\n<li>我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。</li>\n<li>重要的是，让学生们真正掌握知识，培养一种正确的思维方式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>——摘自 <a href=\"http://open.163.com/movie/2016/10/V/A/MC22UD6NI_MC2374LVA.html\" target=\"_blank\" rel=\"noopener\">【TED】考试分数不是教育的目的</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-17720d4afdf33fe1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>虽然成绩能够检验我们的知识掌握程度，但也不能成为唯一的衡量标准。</p>\n<p>教育家萨尔曼·可汗（Salman Khan）先生（可汗学院创始人）对此在演讲中分享了两个方面内容：</p>\n<blockquote>\n<p>一个是掌握的技巧，另一个是思维方式。</p>\n</blockquote>\n<p>假设我们现在正身处某中学的数学课堂，课题是指数函数，老师就此内容来上课，然后我们回家做一些相关习题。第二天早上，老师会检查这些作业，之后又是上课，做作业，上课，做作业。</p>\n<p>这样大概会持续几周，就该测验了。在考试中，我也许只会75%的题目，你可能会90%，他可能会95%。但即使考试能帮助我们查缺补漏，可还是会有25%的内容没有掌握。就算那些得A的学生，依旧有5%的内容没有搞懂。但课堂还是会继续，进入下一个课题，它可能是更加复杂的内容，然后会建立在我们的知识漏洞之上。</p>\n<p>因此这并不是学科本身难学，或是因为学生不聪明，而是因为他们<strong>在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习，就导致了他们认为自己没有学习天赋。</strong></p>\n<p>只能当我们长大一点，有了一定的动力并决定下功夫去学时，才会发现自己其实是有能力学好的。</p>\n<p>所以<br>萨尔曼提出：只有掌握了最基本的，我们才能去挑战更难得。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-80149240ae8da39b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这就好比造房子。你请来包工头，告诉他们两周之内打好地基，两周之后你来验收，看到地基整体还不错，但有一些小问题，你对包工头说：你打的地基我能给你80分。 但是不用返工，你们开始建第一层吧，给你们一周时间。 一周过去了，你又来验收，这次问题百出，你只给他们打了60分，但工程并没有停。 最后，在建到第三层的时候，楼房轰然倒塌。</p>\n<p>学习也是如此，<strong>我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。</strong></p>\n<p>因此萨尔曼再次提出：<strong>我们应该将人为的限制、僵化，转换成另一种方式。学生之间的差异应该是用多久和怎么学才能掌握一门学科，最重要的是，让学生们真正掌握知识，培养一种正确的思维方式，而非取得高分。</strong>这可以让他们认识到如果他们只考了80份，也不代表他们天生就只有80分的水平，而是说明他们还需要在这20%的内容上继续努力、迎难而上。</p>\n<p>而且每个学生其实都应该遵循自己的学习进度，进行有个性化的一对一辅导，和有针对性的练习。</p>\n<p>当然，这并不是什么全新的观念，在100年前的伊利诺伊州，温内特卡市就有这样的实践：他们尝试了这种以掌握为目的的教学，成果很显著，但是他们表示很难大面积推广，毕竟可行性太低了。</p>\n<p>于是，基于此，萨尔曼可汗创立了可汗学院，旨在为全世界的人提供高质量的免费学习资源。 这样，学生就能够真正掌握知识，由此培养他们积极的心里，建立对学习的热情，以达到“倒三角”的理想状态。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-94f67ba4827bffd3.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习</li>\n<li>我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。</li>\n<li>重要的是，让学生们真正掌握知识，培养一种正确的思维方式</li>\n</ul>\n"},{"title":"一罐硬币实验的讨论——《信号与噪声》","date":"2016-03-01T16:00:00.000Z","_content":"\n[![](http://upload-images.jianshu.io/upload_images/1171873-af3e0d49e43b2982.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/)\n#十二行代码\n[2016年1月29日](http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/) / [芽蜜](http://yamida.org/author/rabbit/) / [0 COMMENTS](http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/#respond)\n\n几天前在google+上看到这消息的。\n\n事情的起因是这样的，国外一哥们Cyber Security在[推特](https://twitter.com/?lang=zh-cn)上发了这么一条推文：\n\n这12行js代码能让手机或是电脑进入这网页后出现浏览器奔溃，假死……\n1月17号，有人发推，说这段代码能让火狐、chrome、safari浏览器奔溃，能让iphone重启。\n![](http://upload-images.jianshu.io/upload_images/1171873-3f0c591beeaeaa78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n完整 HTML 代码如下：\n ```html\n <html>\n   <body> \n     <script>  \n       var total=\"\";\n       for (var i=0;i<1000000;i++){\n         total= total+i.toString ();\n         history.pushState (0,0,total); \n       }   \n     </script>  \n   </body> \n </html>\n```\n来看下这段代码，主要就是\n```javascript\ntotal= total+i.toString();\nhistory.pushState(0,0,total);\n```\n\n这两行代码执行1000000遍。\n这段代码的核心真的就是 history.pushState() 方法。\n这个方法是 HTML5 的一个 API，用于向history添加当前页面的记录。简单来说就是在不刷新页面，也不打开新页面的情况下，改变浏览器地址栏中的URL。这个技术可以解决AJAX遗留下来的问题。它和AJAX结合后，有个新的称呼是PJAX（淘宝目前正在使用）。\n这里的代码：\n ```history.pushState(0, 0, total);```\n\n只能起到一个效果，就是修改URL（只能修改当前目录后的字符，无法修改全部域名。且不会发生跳转或发送请求）。然后这里代码循环了1000000次，也就是说URL修改了1000000次，每次新的URL都是之前一次的后面再加上**i.toString()**\n。这样快速不停地向history中添加记录，最终就会导致内存占用迅速增大到机器无法承受，然后浏览器崩溃。\n\n当然那段脚本不运行的话是没问题的，比如用w3m。\n\n演示：[www.0xroot.cn/demo.html](http://www.0xroot.cn/demo.html)（务必做好死机准备，尽管是假死。）\n![要是我，肯定用while(1)……](http://upload-images.jianshu.io/upload_images/1171873-56935b81d8fe5d1c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/碎碎念/十二行代码.md","raw":"---\ntitle: 一罐硬币实验的讨论——《信号与噪声》\ndate: 2016.03.02\ntags: \ncategories: 随笔\n---\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-af3e0d49e43b2982.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/)\n#十二行代码\n[2016年1月29日](http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/) / [芽蜜](http://yamida.org/author/rabbit/) / [0 COMMENTS](http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/#respond)\n\n几天前在google+上看到这消息的。\n\n事情的起因是这样的，国外一哥们Cyber Security在[推特](https://twitter.com/?lang=zh-cn)上发了这么一条推文：\n\n这12行js代码能让手机或是电脑进入这网页后出现浏览器奔溃，假死……\n1月17号，有人发推，说这段代码能让火狐、chrome、safari浏览器奔溃，能让iphone重启。\n![](http://upload-images.jianshu.io/upload_images/1171873-3f0c591beeaeaa78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n完整 HTML 代码如下：\n ```html\n <html>\n   <body> \n     <script>  \n       var total=\"\";\n       for (var i=0;i<1000000;i++){\n         total= total+i.toString ();\n         history.pushState (0,0,total); \n       }   \n     </script>  \n   </body> \n </html>\n```\n来看下这段代码，主要就是\n```javascript\ntotal= total+i.toString();\nhistory.pushState(0,0,total);\n```\n\n这两行代码执行1000000遍。\n这段代码的核心真的就是 history.pushState() 方法。\n这个方法是 HTML5 的一个 API，用于向history添加当前页面的记录。简单来说就是在不刷新页面，也不打开新页面的情况下，改变浏览器地址栏中的URL。这个技术可以解决AJAX遗留下来的问题。它和AJAX结合后，有个新的称呼是PJAX（淘宝目前正在使用）。\n这里的代码：\n ```history.pushState(0, 0, total);```\n\n只能起到一个效果，就是修改URL（只能修改当前目录后的字符，无法修改全部域名。且不会发生跳转或发送请求）。然后这里代码循环了1000000次，也就是说URL修改了1000000次，每次新的URL都是之前一次的后面再加上**i.toString()**\n。这样快速不停地向history中添加记录，最终就会导致内存占用迅速增大到机器无法承受，然后浏览器崩溃。\n\n当然那段脚本不运行的话是没问题的，比如用w3m。\n\n演示：[www.0xroot.cn/demo.html](http://www.0xroot.cn/demo.html)（务必做好死机准备，尽管是假死。）\n![要是我，肯定用while(1)……](http://upload-images.jianshu.io/upload_images/1171873-56935b81d8fe5d1c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"碎碎念/十二行代码","published":1,"updated":"2018-08-04T06:32:45.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc6h003bm4cmbucplz5d","content":"<p><a href=\"http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-af3e0d49e43b2982.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p>#十二行代码<br><a href=\"http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/\" target=\"_blank\" rel=\"noopener\">2016年1月29日</a> / <a href=\"http://yamida.org/author/rabbit/\" target=\"_blank\" rel=\"noopener\">芽蜜</a> / <a href=\"http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/#respond\" target=\"_blank\" rel=\"noopener\">0 COMMENTS</a></p>\n<p>几天前在google+上看到这消息的。</p>\n<p>事情的起因是这样的，国外一哥们Cyber Security在<a href=\"https://twitter.com/?lang=zh-cn\" target=\"_blank\" rel=\"noopener\">推特</a>上发了这么一条推文：</p>\n<p>这12行js代码能让手机或是电脑进入这网页后出现浏览器奔溃，假死……<br>1月17号，有人发推，说这段代码能让火狐、chrome、safari浏览器奔溃，能让iphone重启。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3f0c591beeaeaa78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>完整 HTML 代码如下：<br> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">  </span></span><br><span class=\"line\"><span class=\"undefined\">      var total=\"\";</span></span><br><span class=\"line\"><span class=\"undefined\">      for (var i=0;i&lt;1000000;i++)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        total= total+i.toString ();</span></span><br><span class=\"line\"><span class=\"undefined\">        history.pushState (0,0,total); </span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;   </span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>来看下这段代码，主要就是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total= total+i.toString();</span><br><span class=\"line\">history.pushState(<span class=\"number\">0</span>,<span class=\"number\">0</span>,total);</span><br></pre></td></tr></table></figure></p>\n<p>这两行代码执行1000000遍。<br>这段代码的核心真的就是 history.pushState() 方法。<br>这个方法是 HTML5 的一个 API，用于向history添加当前页面的记录。简单来说就是在不刷新页面，也不打开新页面的情况下，改变浏览器地址栏中的URL。这个技术可以解决AJAX遗留下来的问题。它和AJAX结合后，有个新的称呼是PJAX（淘宝目前正在使用）。<br>这里的代码：<br> <code>history.pushState(0, 0, total);</code></p>\n<p>只能起到一个效果，就是修改URL（只能修改当前目录后的字符，无法修改全部域名。且不会发生跳转或发送请求）。然后这里代码循环了1000000次，也就是说URL修改了1000000次，每次新的URL都是之前一次的后面再加上<strong>i.toString()</strong><br>。这样快速不停地向history中添加记录，最终就会导致内存占用迅速增大到机器无法承受，然后浏览器崩溃。</p>\n<p>当然那段脚本不运行的话是没问题的，比如用w3m。</p>\n<p>演示：<a href=\"http://www.0xroot.cn/demo.html\" target=\"_blank\" rel=\"noopener\">www.0xroot.cn/demo.html</a>（务必做好死机准备，尽管是假死。）<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-56935b81d8fe5d1c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"要是我，肯定用while(1)……\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-af3e0d49e43b2982.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p>#十二行代码<br><a href=\"http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/\" target=\"_blank\" rel=\"noopener\">2016年1月29日</a> / <a href=\"http://yamida.org/author/rabbit/\" target=\"_blank\" rel=\"noopener\">芽蜜</a> / <a href=\"http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/#respond\" target=\"_blank\" rel=\"noopener\">0 COMMENTS</a></p>\n<p>几天前在google+上看到这消息的。</p>\n<p>事情的起因是这样的，国外一哥们Cyber Security在<a href=\"https://twitter.com/?lang=zh-cn\" target=\"_blank\" rel=\"noopener\">推特</a>上发了这么一条推文：</p>\n<p>这12行js代码能让手机或是电脑进入这网页后出现浏览器奔溃，假死……<br>1月17号，有人发推，说这段代码能让火狐、chrome、safari浏览器奔溃，能让iphone重启。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3f0c591beeaeaa78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>完整 HTML 代码如下：<br> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">  </span></span><br><span class=\"line\"><span class=\"undefined\">      var total=\"\";</span></span><br><span class=\"line\"><span class=\"undefined\">      for (var i=0;i&lt;1000000;i++)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        total= total+i.toString ();</span></span><br><span class=\"line\"><span class=\"undefined\">        history.pushState (0,0,total); </span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;   </span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>来看下这段代码，主要就是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total= total+i.toString();</span><br><span class=\"line\">history.pushState(<span class=\"number\">0</span>,<span class=\"number\">0</span>,total);</span><br></pre></td></tr></table></figure></p>\n<p>这两行代码执行1000000遍。<br>这段代码的核心真的就是 history.pushState() 方法。<br>这个方法是 HTML5 的一个 API，用于向history添加当前页面的记录。简单来说就是在不刷新页面，也不打开新页面的情况下，改变浏览器地址栏中的URL。这个技术可以解决AJAX遗留下来的问题。它和AJAX结合后，有个新的称呼是PJAX（淘宝目前正在使用）。<br>这里的代码：<br> <code>history.pushState(0, 0, total);</code></p>\n<p>只能起到一个效果，就是修改URL（只能修改当前目录后的字符，无法修改全部域名。且不会发生跳转或发送请求）。然后这里代码循环了1000000次，也就是说URL修改了1000000次，每次新的URL都是之前一次的后面再加上<strong>i.toString()</strong><br>。这样快速不停地向history中添加记录，最终就会导致内存占用迅速增大到机器无法承受，然后浏览器崩溃。</p>\n<p>当然那段脚本不运行的话是没问题的，比如用w3m。</p>\n<p>演示：<a href=\"http://www.0xroot.cn/demo.html\" target=\"_blank\" rel=\"noopener\">www.0xroot.cn/demo.html</a>（务必做好死机准备，尽管是假死。）<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-56935b81d8fe5d1c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"要是我，肯定用while(1)……\"></p>\n"},{"title":"孙悟空无姓无名的时候，阎王生死簿是怎么写的呢？","date":"2016-05-03T16:00:00.000Z","_content":"\n——转载于知乎\n\n这个问题让我对地狱数据库系统（Hell-DBMS )进行了几点小思考，开个脑洞。\n###1、生死薄技术上如何实现？广大生灵在生死薄中的唯一标记是什么？阴间数据库是什么样一个数据库？\n\n首先，地狱必须有数据库，数据量太大了\n每个生灵都要有记录，且必须是实时记录，要进行数据分析。想像一下各种生灵，万物有灵，大大小小，连蝼蚁飞蛾也是命，从单细胞到现代社会的数据应该有多大。\n数据库的话每个生灵就要有唯一标记。实名反对说是名字主键的，这是基本知识，名字重名怎么办，数据库原理请重修。\n实名反对说是IP地址标记的，**IPV4**很快就用光的好不好；**IPV6**貌似在生物历史长河中也是不够的，朝生暮死都是生灵，这么多年过去了，这数据积累。\n把自动生成的唯一ID当主键相对还靠谱，但位数必须相当长，数据库得特别设计，如此大数据至少要谷歌技术支持，也许叫地狱歌，**SQL -Server**之类的技术根本顶不住。搞**Hell-DBMS**请先看下大技术\n>Hoogle File System\nHoogle Bigtable\nHoogle MapReduce\n\n对了，《开源海量数据库技术在阴间生死管理系统中的研究与实践》应该获得天庭科技进步特等奖的。\n**其次，查询效率必须高**\n查询效率低的话，阎王还得点支烟等半天结果么，经常有上级官员过来查数据，玉皇啊，如来啊，即使是阿难、迦叶来也是惹不起的人，用户不满意，**KPI**不行、绩效差阎王官位不稳的。业务量这么大，每天至少插入数亿条新记录，删除数亿条记录，所有善恶状态数据都要实时记录，想想要接多少善恶传感器，信道冲突肯定很难解决，好事坏事用**WiFi**还是**ZIGBEE**传的不清楚，说不定某米会推出家庭善恶智能数据处理中心。\n\n\n生灵死掉之后还要迅速进行大数据分析，判定死人到底应该进几层地狱。数据分析慢了奈何桥都要排队，用户差评有木有！数据粒度非常非常细，死亡时间三更五更都不能差，下了地狱打多少下铁棍都要精确计算，况且还会有许多异常发生，有时候要回滚，有可能不小心操作错了（死而复生应该就是地府回滚，详细请见《聊斋志异》[[7]](http://baike.baidu.com/link?url=VmN2qIU0_GJgFy7KmThxf8Lv6fL0B8pIour5MXKn0s1TTpl9ZWPgQKsagndDRQo257plbTKr4MnnnjYDCRPuvRwj3Hc4y6R0Dc76LxaMabO))；有时候要灾难恢复，比如孙猴子捣乱引起的灾难性数据损失；比如用户投诉问题，凭什么猴子要短命？这种问题只有孙猴子问得出，不仅问得出还直接上门责问，地府的安保工作真的要加强。\n\n对了，像悟空这种异常用户，Sa恨不得一删了之有木有？（不懂Sa的IT人士请自行面壁，admin也算sa）\n\n**再次，必须能应对瞬时并发高峰数据**\n战争来了，成千上万的人阵亡；瘟疫了，成千上万人逝去；灭鼠了，几万几十万老鼠完蛋；飞机撒农药了，多少修行不够的小精灵批量完蛋。\n有生灵死亡必须要登记并把流程向前推进，这是典型的移动应用，无数的勾魂小鬼在短时间内飞速赶到现场，管它是扫二维码还是近场通讯技术**NFC**，反正无数小鬼同时用移动客户端向**Hell-DBMS**系统上传数据，App必须友好，后台必须能顶住，不能学12307-1总是掉链子，12307-1掉了链子还能骂它：“去死！Go to Hell!”，**Hell-DBMS**可怎么骂才好。所以呢：\n**关键时刻，服务器不能卡住，数据库性不能下降，生死薄必须实时更新。**\n\n**最后，必须有大数据分析和预测技术**\n阴间有谛听，可以通过”听“，得到过去数据和未来的数据，这明显是大数据和云结合的杰作。为什么是听呢？因为阴间数据库已经把数据语音化了，用定向波束直接送到谛听耳边，电磁监听根本没有效果，几乎不可能泄密。定向波束的技术在加大功率后可同时用于在阴间跳广场舞的某些亡灵们。\n###2、孙猴子在阴间里删除数据，怎么删除的？后来如何？\n\n**结论1： 猴子要删除数据，应该是从界面删除的，没什么高技术，纯粹的社会工程而已。**\n\n巨型数据库，大数据数据库一定是分解得比较细的，删除的话至少是多表级联删除，直接从主表**Delete** 未免要引发异常，再说孙猴子不是计算机专业的，应该是用金箍棒顶着小鬼的顶梁门，胁迫他用超级用户进去，选择界面的删除功能搞定的。\n\n我猜阴间数据库删除要左右各一个小鬼，持阎王发的优盾，同时输入口令。\n孙猴子反正克隆能力强，变出几个分身分别逼住就能搞定。\n这个BUG系统必须要改进。\n\n**所以这是正常删除，删除之后，轮回系统并没有完全混乱，只影响了一部分数据。**\n\n即使给孙猴子开个CONSOLE，他也记不住命令，猴急猴急，抓耳挠腮，他最多会点点鼠标。\n\n**结论2：阴间数据库有强劲的灾难恢复功能**\n\n话说，猴子完全低估了程序员们的实力。海量数据库都有强大的异地容灾备份功能，数据应该是备在最安全的雷音寺（第三方），所有操作均有**LOG**。在西方以如来为首的专家团指导下（具体操作应该是负责安全保卫的天王，成就归于领导），数据迅速恢复，猴子们根本没有得到永生，在西方如来团队的支持下数据迅速恢复，猴子家族应该死还是死。\n\n孙猴子自己么，虽然罪过不小，但是他会闹，能力还强。为了和谐天庭管理层还是为他做了特殊标记，在数据库里加上一个**TAG**，设定为神仙级，计算寿命但不设定界限，有异常情况直接发出系统警报，和**RuLai -SkyNet All-in System**系统联动，确保一方平安。\n***\n应 @ 王政童鞋要求，必须放参考文献：\n0 、《Big Data Application Platform for Hell》[J] InHell Hell-SCI收录\n1、《论Paxos算法在阴间生死管理系统中的应用与优化》[J] 阴间信息技术 玉帝元年 第7788卷 核刊\n2、《论Consistent Hash在阴间生死管理系统云中的应用》[M]阴间信息技术 玉帝9527年 第125222 核刊\n3、 《论超大规模稠密矩阵在阴间生死管理系统中的理论研究》[C] 信息技术阴间应用大会 9528\n4、 《论孟婆汤在阴间生死管理系统库存管理当中的管理流程》 [J] 阴间食品与营养 VOL 2241554\n5、《论牛头马面阴间勾人大队的管理电子化》[J] 阴间数字化城管研究 VOL15486488789\n6、《论天庭-西天-阴间点对点技术在阴间办公自动化中的实现》 [J] 阴间实用软件增刊。\n7、《聊斋志异》[7] 491(张友鹤本)或494(朱其铠本)\n\n>作者：大海链接：[http://www.zhihu.com/question/29775354/answer/45744415](http://www.zhihu.com/question/29775354/answer/45744415)来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n","source":"_posts/碎碎念/孙悟空无姓无名的时候，阎王生死簿是怎么写的呢？.md","raw":"---\ntitle: 孙悟空无姓无名的时候，阎王生死簿是怎么写的呢？\ndate: 2016.05.04\ntags: \ncategories: 随笔\n---\n\n——转载于知乎\n\n这个问题让我对地狱数据库系统（Hell-DBMS )进行了几点小思考，开个脑洞。\n###1、生死薄技术上如何实现？广大生灵在生死薄中的唯一标记是什么？阴间数据库是什么样一个数据库？\n\n首先，地狱必须有数据库，数据量太大了\n每个生灵都要有记录，且必须是实时记录，要进行数据分析。想像一下各种生灵，万物有灵，大大小小，连蝼蚁飞蛾也是命，从单细胞到现代社会的数据应该有多大。\n数据库的话每个生灵就要有唯一标记。实名反对说是名字主键的，这是基本知识，名字重名怎么办，数据库原理请重修。\n实名反对说是IP地址标记的，**IPV4**很快就用光的好不好；**IPV6**貌似在生物历史长河中也是不够的，朝生暮死都是生灵，这么多年过去了，这数据积累。\n把自动生成的唯一ID当主键相对还靠谱，但位数必须相当长，数据库得特别设计，如此大数据至少要谷歌技术支持，也许叫地狱歌，**SQL -Server**之类的技术根本顶不住。搞**Hell-DBMS**请先看下大技术\n>Hoogle File System\nHoogle Bigtable\nHoogle MapReduce\n\n对了，《开源海量数据库技术在阴间生死管理系统中的研究与实践》应该获得天庭科技进步特等奖的。\n**其次，查询效率必须高**\n查询效率低的话，阎王还得点支烟等半天结果么，经常有上级官员过来查数据，玉皇啊，如来啊，即使是阿难、迦叶来也是惹不起的人，用户不满意，**KPI**不行、绩效差阎王官位不稳的。业务量这么大，每天至少插入数亿条新记录，删除数亿条记录，所有善恶状态数据都要实时记录，想想要接多少善恶传感器，信道冲突肯定很难解决，好事坏事用**WiFi**还是**ZIGBEE**传的不清楚，说不定某米会推出家庭善恶智能数据处理中心。\n\n\n生灵死掉之后还要迅速进行大数据分析，判定死人到底应该进几层地狱。数据分析慢了奈何桥都要排队，用户差评有木有！数据粒度非常非常细，死亡时间三更五更都不能差，下了地狱打多少下铁棍都要精确计算，况且还会有许多异常发生，有时候要回滚，有可能不小心操作错了（死而复生应该就是地府回滚，详细请见《聊斋志异》[[7]](http://baike.baidu.com/link?url=VmN2qIU0_GJgFy7KmThxf8Lv6fL0B8pIour5MXKn0s1TTpl9ZWPgQKsagndDRQo257plbTKr4MnnnjYDCRPuvRwj3Hc4y6R0Dc76LxaMabO))；有时候要灾难恢复，比如孙猴子捣乱引起的灾难性数据损失；比如用户投诉问题，凭什么猴子要短命？这种问题只有孙猴子问得出，不仅问得出还直接上门责问，地府的安保工作真的要加强。\n\n对了，像悟空这种异常用户，Sa恨不得一删了之有木有？（不懂Sa的IT人士请自行面壁，admin也算sa）\n\n**再次，必须能应对瞬时并发高峰数据**\n战争来了，成千上万的人阵亡；瘟疫了，成千上万人逝去；灭鼠了，几万几十万老鼠完蛋；飞机撒农药了，多少修行不够的小精灵批量完蛋。\n有生灵死亡必须要登记并把流程向前推进，这是典型的移动应用，无数的勾魂小鬼在短时间内飞速赶到现场，管它是扫二维码还是近场通讯技术**NFC**，反正无数小鬼同时用移动客户端向**Hell-DBMS**系统上传数据，App必须友好，后台必须能顶住，不能学12307-1总是掉链子，12307-1掉了链子还能骂它：“去死！Go to Hell!”，**Hell-DBMS**可怎么骂才好。所以呢：\n**关键时刻，服务器不能卡住，数据库性不能下降，生死薄必须实时更新。**\n\n**最后，必须有大数据分析和预测技术**\n阴间有谛听，可以通过”听“，得到过去数据和未来的数据，这明显是大数据和云结合的杰作。为什么是听呢？因为阴间数据库已经把数据语音化了，用定向波束直接送到谛听耳边，电磁监听根本没有效果，几乎不可能泄密。定向波束的技术在加大功率后可同时用于在阴间跳广场舞的某些亡灵们。\n###2、孙猴子在阴间里删除数据，怎么删除的？后来如何？\n\n**结论1： 猴子要删除数据，应该是从界面删除的，没什么高技术，纯粹的社会工程而已。**\n\n巨型数据库，大数据数据库一定是分解得比较细的，删除的话至少是多表级联删除，直接从主表**Delete** 未免要引发异常，再说孙猴子不是计算机专业的，应该是用金箍棒顶着小鬼的顶梁门，胁迫他用超级用户进去，选择界面的删除功能搞定的。\n\n我猜阴间数据库删除要左右各一个小鬼，持阎王发的优盾，同时输入口令。\n孙猴子反正克隆能力强，变出几个分身分别逼住就能搞定。\n这个BUG系统必须要改进。\n\n**所以这是正常删除，删除之后，轮回系统并没有完全混乱，只影响了一部分数据。**\n\n即使给孙猴子开个CONSOLE，他也记不住命令，猴急猴急，抓耳挠腮，他最多会点点鼠标。\n\n**结论2：阴间数据库有强劲的灾难恢复功能**\n\n话说，猴子完全低估了程序员们的实力。海量数据库都有强大的异地容灾备份功能，数据应该是备在最安全的雷音寺（第三方），所有操作均有**LOG**。在西方以如来为首的专家团指导下（具体操作应该是负责安全保卫的天王，成就归于领导），数据迅速恢复，猴子们根本没有得到永生，在西方如来团队的支持下数据迅速恢复，猴子家族应该死还是死。\n\n孙猴子自己么，虽然罪过不小，但是他会闹，能力还强。为了和谐天庭管理层还是为他做了特殊标记，在数据库里加上一个**TAG**，设定为神仙级，计算寿命但不设定界限，有异常情况直接发出系统警报，和**RuLai -SkyNet All-in System**系统联动，确保一方平安。\n***\n应 @ 王政童鞋要求，必须放参考文献：\n0 、《Big Data Application Platform for Hell》[J] InHell Hell-SCI收录\n1、《论Paxos算法在阴间生死管理系统中的应用与优化》[J] 阴间信息技术 玉帝元年 第7788卷 核刊\n2、《论Consistent Hash在阴间生死管理系统云中的应用》[M]阴间信息技术 玉帝9527年 第125222 核刊\n3、 《论超大规模稠密矩阵在阴间生死管理系统中的理论研究》[C] 信息技术阴间应用大会 9528\n4、 《论孟婆汤在阴间生死管理系统库存管理当中的管理流程》 [J] 阴间食品与营养 VOL 2241554\n5、《论牛头马面阴间勾人大队的管理电子化》[J] 阴间数字化城管研究 VOL15486488789\n6、《论天庭-西天-阴间点对点技术在阴间办公自动化中的实现》 [J] 阴间实用软件增刊。\n7、《聊斋志异》[7] 491(张友鹤本)或494(朱其铠本)\n\n>作者：大海链接：[http://www.zhihu.com/question/29775354/answer/45744415](http://www.zhihu.com/question/29775354/answer/45744415)来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n","slug":"碎碎念/孙悟空无姓无名的时候，阎王生死簿是怎么写的呢？","published":1,"updated":"2018-08-04T06:32:45.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc6k003em4cmhbkk69mx","content":"<p>——转载于知乎</p>\n<p>这个问题让我对地狱数据库系统（Hell-DBMS )进行了几点小思考，开个脑洞。</p>\n<p>###1、生死薄技术上如何实现？广大生灵在生死薄中的唯一标记是什么？阴间数据库是什么样一个数据库？</p>\n<p>首先，地狱必须有数据库，数据量太大了<br>每个生灵都要有记录，且必须是实时记录，要进行数据分析。想像一下各种生灵，万物有灵，大大小小，连蝼蚁飞蛾也是命，从单细胞到现代社会的数据应该有多大。<br>数据库的话每个生灵就要有唯一标记。实名反对说是名字主键的，这是基本知识，名字重名怎么办，数据库原理请重修。<br>实名反对说是IP地址标记的，<strong>IPV4</strong>很快就用光的好不好；<strong>IPV6</strong>貌似在生物历史长河中也是不够的，朝生暮死都是生灵，这么多年过去了，这数据积累。<br>把自动生成的唯一ID当主键相对还靠谱，但位数必须相当长，数据库得特别设计，如此大数据至少要谷歌技术支持，也许叫地狱歌，<strong>SQL -Server</strong>之类的技术根本顶不住。搞<strong>Hell-DBMS</strong>请先看下大技术</p>\n<blockquote>\n<p>Hoogle File System<br>Hoogle Bigtable<br>Hoogle MapReduce</p>\n</blockquote>\n<p>对了，《开源海量数据库技术在阴间生死管理系统中的研究与实践》应该获得天庭科技进步特等奖的。<br><strong>其次，查询效率必须高</strong><br>查询效率低的话，阎王还得点支烟等半天结果么，经常有上级官员过来查数据，玉皇啊，如来啊，即使是阿难、迦叶来也是惹不起的人，用户不满意，<strong>KPI</strong>不行、绩效差阎王官位不稳的。业务量这么大，每天至少插入数亿条新记录，删除数亿条记录，所有善恶状态数据都要实时记录，想想要接多少善恶传感器，信道冲突肯定很难解决，好事坏事用<strong>WiFi</strong>还是<strong>ZIGBEE</strong>传的不清楚，说不定某米会推出家庭善恶智能数据处理中心。</p>\n<p>生灵死掉之后还要迅速进行大数据分析，判定死人到底应该进几层地狱。数据分析慢了奈何桥都要排队，用户差评有木有！数据粒度非常非常细，死亡时间三更五更都不能差，下了地狱打多少下铁棍都要精确计算，况且还会有许多异常发生，有时候要回滚，有可能不小心操作错了（死而复生应该就是地府回滚，详细请见《聊斋志异》<a href=\"http://baike.baidu.com/link?url=VmN2qIU0_GJgFy7KmThxf8Lv6fL0B8pIour5MXKn0s1TTpl9ZWPgQKsagndDRQo257plbTKr4MnnnjYDCRPuvRwj3Hc4y6R0Dc76LxaMabO\" target=\"_blank\" rel=\"noopener\">[7]</a>)；有时候要灾难恢复，比如孙猴子捣乱引起的灾难性数据损失；比如用户投诉问题，凭什么猴子要短命？这种问题只有孙猴子问得出，不仅问得出还直接上门责问，地府的安保工作真的要加强。</p>\n<p>对了，像悟空这种异常用户，Sa恨不得一删了之有木有？（不懂Sa的IT人士请自行面壁，admin也算sa）</p>\n<p><strong>再次，必须能应对瞬时并发高峰数据</strong><br>战争来了，成千上万的人阵亡；瘟疫了，成千上万人逝去；灭鼠了，几万几十万老鼠完蛋；飞机撒农药了，多少修行不够的小精灵批量完蛋。<br>有生灵死亡必须要登记并把流程向前推进，这是典型的移动应用，无数的勾魂小鬼在短时间内飞速赶到现场，管它是扫二维码还是近场通讯技术<strong>NFC</strong>，反正无数小鬼同时用移动客户端向<strong>Hell-DBMS</strong>系统上传数据，App必须友好，后台必须能顶住，不能学12307-1总是掉链子，12307-1掉了链子还能骂它：“去死！Go to Hell!”，<strong>Hell-DBMS</strong>可怎么骂才好。所以呢：<br><strong>关键时刻，服务器不能卡住，数据库性不能下降，生死薄必须实时更新。</strong></p>\n<p><strong>最后，必须有大数据分析和预测技术</strong><br>阴间有谛听，可以通过”听“，得到过去数据和未来的数据，这明显是大数据和云结合的杰作。为什么是听呢？因为阴间数据库已经把数据语音化了，用定向波束直接送到谛听耳边，电磁监听根本没有效果，几乎不可能泄密。定向波束的技术在加大功率后可同时用于在阴间跳广场舞的某些亡灵们。</p>\n<p>###2、孙猴子在阴间里删除数据，怎么删除的？后来如何？</p>\n<p><strong>结论1： 猴子要删除数据，应该是从界面删除的，没什么高技术，纯粹的社会工程而已。</strong></p>\n<p>巨型数据库，大数据数据库一定是分解得比较细的，删除的话至少是多表级联删除，直接从主表<strong>Delete</strong> 未免要引发异常，再说孙猴子不是计算机专业的，应该是用金箍棒顶着小鬼的顶梁门，胁迫他用超级用户进去，选择界面的删除功能搞定的。</p>\n<p>我猜阴间数据库删除要左右各一个小鬼，持阎王发的优盾，同时输入口令。<br>孙猴子反正克隆能力强，变出几个分身分别逼住就能搞定。<br>这个BUG系统必须要改进。</p>\n<p><strong>所以这是正常删除，删除之后，轮回系统并没有完全混乱，只影响了一部分数据。</strong></p>\n<p>即使给孙猴子开个CONSOLE，他也记不住命令，猴急猴急，抓耳挠腮，他最多会点点鼠标。</p>\n<p><strong>结论2：阴间数据库有强劲的灾难恢复功能</strong></p>\n<p>话说，猴子完全低估了程序员们的实力。海量数据库都有强大的异地容灾备份功能，数据应该是备在最安全的雷音寺（第三方），所有操作均有<strong>LOG</strong>。在西方以如来为首的专家团指导下（具体操作应该是负责安全保卫的天王，成就归于领导），数据迅速恢复，猴子们根本没有得到永生，在西方如来团队的支持下数据迅速恢复，猴子家族应该死还是死。</p>\n<p>孙猴子自己么，虽然罪过不小，但是他会闹，能力还强。为了和谐天庭管理层还是为他做了特殊标记，在数据库里加上一个<strong>TAG</strong>，设定为神仙级，计算寿命但不设定界限，有异常情况直接发出系统警报，和<strong>RuLai -SkyNet All-in System</strong>系统联动，确保一方平安。</p>\n<hr>\n<p>应 @ 王政童鞋要求，必须放参考文献：<br>0 、《Big Data Application Platform for Hell》[J] InHell Hell-SCI收录<br>1、《论Paxos算法在阴间生死管理系统中的应用与优化》[J] 阴间信息技术 玉帝元年 第7788卷 核刊<br>2、《论Consistent Hash在阴间生死管理系统云中的应用》[M]阴间信息技术 玉帝9527年 第125222 核刊<br>3、 《论超大规模稠密矩阵在阴间生死管理系统中的理论研究》[C] 信息技术阴间应用大会 9528<br>4、 《论孟婆汤在阴间生死管理系统库存管理当中的管理流程》 [J] 阴间食品与营养 VOL 2241554<br>5、《论牛头马面阴间勾人大队的管理电子化》[J] 阴间数字化城管研究 VOL15486488789<br>6、《论天庭-西天-阴间点对点技术在阴间办公自动化中的实现》 [J] 阴间实用软件增刊。<br>7、《聊斋志异》[7] 491(张友鹤本)或494(朱其铠本)</p>\n<blockquote>\n<p>作者：大海链接：<a href=\"http://www.zhihu.com/question/29775354/answer/45744415\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/29775354/answer/45744415</a>来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>——转载于知乎</p>\n<p>这个问题让我对地狱数据库系统（Hell-DBMS )进行了几点小思考，开个脑洞。</p>\n<p>###1、生死薄技术上如何实现？广大生灵在生死薄中的唯一标记是什么？阴间数据库是什么样一个数据库？</p>\n<p>首先，地狱必须有数据库，数据量太大了<br>每个生灵都要有记录，且必须是实时记录，要进行数据分析。想像一下各种生灵，万物有灵，大大小小，连蝼蚁飞蛾也是命，从单细胞到现代社会的数据应该有多大。<br>数据库的话每个生灵就要有唯一标记。实名反对说是名字主键的，这是基本知识，名字重名怎么办，数据库原理请重修。<br>实名反对说是IP地址标记的，<strong>IPV4</strong>很快就用光的好不好；<strong>IPV6</strong>貌似在生物历史长河中也是不够的，朝生暮死都是生灵，这么多年过去了，这数据积累。<br>把自动生成的唯一ID当主键相对还靠谱，但位数必须相当长，数据库得特别设计，如此大数据至少要谷歌技术支持，也许叫地狱歌，<strong>SQL -Server</strong>之类的技术根本顶不住。搞<strong>Hell-DBMS</strong>请先看下大技术</p>\n<blockquote>\n<p>Hoogle File System<br>Hoogle Bigtable<br>Hoogle MapReduce</p>\n</blockquote>\n<p>对了，《开源海量数据库技术在阴间生死管理系统中的研究与实践》应该获得天庭科技进步特等奖的。<br><strong>其次，查询效率必须高</strong><br>查询效率低的话，阎王还得点支烟等半天结果么，经常有上级官员过来查数据，玉皇啊，如来啊，即使是阿难、迦叶来也是惹不起的人，用户不满意，<strong>KPI</strong>不行、绩效差阎王官位不稳的。业务量这么大，每天至少插入数亿条新记录，删除数亿条记录，所有善恶状态数据都要实时记录，想想要接多少善恶传感器，信道冲突肯定很难解决，好事坏事用<strong>WiFi</strong>还是<strong>ZIGBEE</strong>传的不清楚，说不定某米会推出家庭善恶智能数据处理中心。</p>\n<p>生灵死掉之后还要迅速进行大数据分析，判定死人到底应该进几层地狱。数据分析慢了奈何桥都要排队，用户差评有木有！数据粒度非常非常细，死亡时间三更五更都不能差，下了地狱打多少下铁棍都要精确计算，况且还会有许多异常发生，有时候要回滚，有可能不小心操作错了（死而复生应该就是地府回滚，详细请见《聊斋志异》<a href=\"http://baike.baidu.com/link?url=VmN2qIU0_GJgFy7KmThxf8Lv6fL0B8pIour5MXKn0s1TTpl9ZWPgQKsagndDRQo257plbTKr4MnnnjYDCRPuvRwj3Hc4y6R0Dc76LxaMabO\" target=\"_blank\" rel=\"noopener\">[7]</a>)；有时候要灾难恢复，比如孙猴子捣乱引起的灾难性数据损失；比如用户投诉问题，凭什么猴子要短命？这种问题只有孙猴子问得出，不仅问得出还直接上门责问，地府的安保工作真的要加强。</p>\n<p>对了，像悟空这种异常用户，Sa恨不得一删了之有木有？（不懂Sa的IT人士请自行面壁，admin也算sa）</p>\n<p><strong>再次，必须能应对瞬时并发高峰数据</strong><br>战争来了，成千上万的人阵亡；瘟疫了，成千上万人逝去；灭鼠了，几万几十万老鼠完蛋；飞机撒农药了，多少修行不够的小精灵批量完蛋。<br>有生灵死亡必须要登记并把流程向前推进，这是典型的移动应用，无数的勾魂小鬼在短时间内飞速赶到现场，管它是扫二维码还是近场通讯技术<strong>NFC</strong>，反正无数小鬼同时用移动客户端向<strong>Hell-DBMS</strong>系统上传数据，App必须友好，后台必须能顶住，不能学12307-1总是掉链子，12307-1掉了链子还能骂它：“去死！Go to Hell!”，<strong>Hell-DBMS</strong>可怎么骂才好。所以呢：<br><strong>关键时刻，服务器不能卡住，数据库性不能下降，生死薄必须实时更新。</strong></p>\n<p><strong>最后，必须有大数据分析和预测技术</strong><br>阴间有谛听，可以通过”听“，得到过去数据和未来的数据，这明显是大数据和云结合的杰作。为什么是听呢？因为阴间数据库已经把数据语音化了，用定向波束直接送到谛听耳边，电磁监听根本没有效果，几乎不可能泄密。定向波束的技术在加大功率后可同时用于在阴间跳广场舞的某些亡灵们。</p>\n<p>###2、孙猴子在阴间里删除数据，怎么删除的？后来如何？</p>\n<p><strong>结论1： 猴子要删除数据，应该是从界面删除的，没什么高技术，纯粹的社会工程而已。</strong></p>\n<p>巨型数据库，大数据数据库一定是分解得比较细的，删除的话至少是多表级联删除，直接从主表<strong>Delete</strong> 未免要引发异常，再说孙猴子不是计算机专业的，应该是用金箍棒顶着小鬼的顶梁门，胁迫他用超级用户进去，选择界面的删除功能搞定的。</p>\n<p>我猜阴间数据库删除要左右各一个小鬼，持阎王发的优盾，同时输入口令。<br>孙猴子反正克隆能力强，变出几个分身分别逼住就能搞定。<br>这个BUG系统必须要改进。</p>\n<p><strong>所以这是正常删除，删除之后，轮回系统并没有完全混乱，只影响了一部分数据。</strong></p>\n<p>即使给孙猴子开个CONSOLE，他也记不住命令，猴急猴急，抓耳挠腮，他最多会点点鼠标。</p>\n<p><strong>结论2：阴间数据库有强劲的灾难恢复功能</strong></p>\n<p>话说，猴子完全低估了程序员们的实力。海量数据库都有强大的异地容灾备份功能，数据应该是备在最安全的雷音寺（第三方），所有操作均有<strong>LOG</strong>。在西方以如来为首的专家团指导下（具体操作应该是负责安全保卫的天王，成就归于领导），数据迅速恢复，猴子们根本没有得到永生，在西方如来团队的支持下数据迅速恢复，猴子家族应该死还是死。</p>\n<p>孙猴子自己么，虽然罪过不小，但是他会闹，能力还强。为了和谐天庭管理层还是为他做了特殊标记，在数据库里加上一个<strong>TAG</strong>，设定为神仙级，计算寿命但不设定界限，有异常情况直接发出系统警报，和<strong>RuLai -SkyNet All-in System</strong>系统联动，确保一方平安。</p>\n<hr>\n<p>应 @ 王政童鞋要求，必须放参考文献：<br>0 、《Big Data Application Platform for Hell》[J] InHell Hell-SCI收录<br>1、《论Paxos算法在阴间生死管理系统中的应用与优化》[J] 阴间信息技术 玉帝元年 第7788卷 核刊<br>2、《论Consistent Hash在阴间生死管理系统云中的应用》[M]阴间信息技术 玉帝9527年 第125222 核刊<br>3、 《论超大规模稠密矩阵在阴间生死管理系统中的理论研究》[C] 信息技术阴间应用大会 9528<br>4、 《论孟婆汤在阴间生死管理系统库存管理当中的管理流程》 [J] 阴间食品与营养 VOL 2241554<br>5、《论牛头马面阴间勾人大队的管理电子化》[J] 阴间数字化城管研究 VOL15486488789<br>6、《论天庭-西天-阴间点对点技术在阴间办公自动化中的实现》 [J] 阴间实用软件增刊。<br>7、《聊斋志异》[7] 491(张友鹤本)或494(朱其铠本)</p>\n<blockquote>\n<p>作者：大海链接：<a href=\"http://www.zhihu.com/question/29775354/answer/45744415\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/29775354/answer/45744415</a>来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n"},{"title":"恶意代码引起的反思","date":"2016-04-18T05:25:00.000Z","_content":"\n一个恶作剧……不过，稍不注意把自己电脑给弄崩了就不太好了……你说是吧？！\n\n下午拿着新做的恶意代码在自己机子测试，电脑的反应很大，显然很不喜欢……\n\n`while(1){ \n  \"蓝屏\"; \n  \"重启\";\n}`\n在另外一台win7上测试，正常效果；\n\n在一台win10上测试，什么事情都没有；\n \n恶意代码中删除了**C:/Windows/System32/下的KBDUS.DLL**文件，而这个文件需要**“获取管理员权限**”才能删除。\n\n笔者电脑很开放，加上自己手痒在“**KBDUS.DLL**”上右键获取权限，结果是电脑蓝屏加重启\n[![QQ20160417231457](http://upload-images.jianshu.io/upload_images/1171873-f25de8e23e964dbb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/QQ20160417231457.jpg)\n“0x000000F4”的含义到现在也没弄清楚，反正把**KBDUS.DLL**文件放还原处后，电脑就不闹性子了。\n\n在另一台win7上，因为没有权限，除了**KBDUS.DLL**删除报错，其余正常。win10因为用的是自定义用户（微软账号啥的），权限更少，加上微软自带防护软件。完全被藐视了……\n![](http://upload-images.jianshu.io/upload_images/1171873-1866029119f9d97a.gif?imageMogr2/auto-orient/strip)\n\n虽然不是很有说服力：\n>系统、软件、防火墙、杀软…及时升级的必要性。\n\n>慎重获取最高权限，无论是电脑还是手机。\n\n其中，有个细节，笔者的恶意代码被360成功拦截，腾讯管家并有做到这一点……\n\n","source":"_posts/碎碎念/恶意代码引起的反思.md","raw":"---\ntitle: 恶意代码引起的反思\ndate: 2016.04.18 13:25\ntags: \ncategories: 日记本\n---\n\n一个恶作剧……不过，稍不注意把自己电脑给弄崩了就不太好了……你说是吧？！\n\n下午拿着新做的恶意代码在自己机子测试，电脑的反应很大，显然很不喜欢……\n\n`while(1){ \n  \"蓝屏\"; \n  \"重启\";\n}`\n在另外一台win7上测试，正常效果；\n\n在一台win10上测试，什么事情都没有；\n \n恶意代码中删除了**C:/Windows/System32/下的KBDUS.DLL**文件，而这个文件需要**“获取管理员权限**”才能删除。\n\n笔者电脑很开放，加上自己手痒在“**KBDUS.DLL**”上右键获取权限，结果是电脑蓝屏加重启\n[![QQ20160417231457](http://upload-images.jianshu.io/upload_images/1171873-f25de8e23e964dbb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/QQ20160417231457.jpg)\n“0x000000F4”的含义到现在也没弄清楚，反正把**KBDUS.DLL**文件放还原处后，电脑就不闹性子了。\n\n在另一台win7上，因为没有权限，除了**KBDUS.DLL**删除报错，其余正常。win10因为用的是自定义用户（微软账号啥的），权限更少，加上微软自带防护软件。完全被藐视了……\n![](http://upload-images.jianshu.io/upload_images/1171873-1866029119f9d97a.gif?imageMogr2/auto-orient/strip)\n\n虽然不是很有说服力：\n>系统、软件、防火墙、杀软…及时升级的必要性。\n\n>慎重获取最高权限，无论是电脑还是手机。\n\n其中，有个细节，笔者的恶意代码被360成功拦截，腾讯管家并有做到这一点……\n\n","slug":"碎碎念/恶意代码引起的反思","published":1,"updated":"2018-08-04T06:32:45.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc6n003gm4cmdeqlos5y","content":"<p>一个恶作剧……不过，稍不注意把自己电脑给弄崩了就不太好了……你说是吧？！</p>\n<p>下午拿着新做的恶意代码在自己机子测试，电脑的反应很大，显然很不喜欢……</p>\n<p><code>while(1){ \n  &quot;蓝屏&quot;; \n  &quot;重启&quot;;\n}</code><br>在另外一台win7上测试，正常效果；</p>\n<p>在一台win10上测试，什么事情都没有；</p>\n<p>恶意代码中删除了<strong>C:/Windows/System32/下的KBDUS.DLL</strong>文件，而这个文件需要<strong>“获取管理员权限</strong>”才能删除。</p>\n<p>笔者电脑很开放，加上自己手痒在“<strong>KBDUS.DLL</strong>”上右键获取权限，结果是电脑蓝屏加重启<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/QQ20160417231457.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f25de8e23e964dbb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20160417231457\"></a><br>“0x000000F4”的含义到现在也没弄清楚，反正把<strong>KBDUS.DLL</strong>文件放还原处后，电脑就不闹性子了。</p>\n<p>在另一台win7上，因为没有权限，除了<strong>KBDUS.DLL</strong>删除报错，其余正常。win10因为用的是自定义用户（微软账号啥的），权限更少，加上微软自带防护软件。完全被藐视了……<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1866029119f9d97a.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<p>虽然不是很有说服力：</p>\n<blockquote>\n<p>系统、软件、防火墙、杀软…及时升级的必要性。</p>\n</blockquote>\n<blockquote>\n<p>慎重获取最高权限，无论是电脑还是手机。</p>\n</blockquote>\n<p>其中，有个细节，笔者的恶意代码被360成功拦截，腾讯管家并有做到这一点……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个恶作剧……不过，稍不注意把自己电脑给弄崩了就不太好了……你说是吧？！</p>\n<p>下午拿着新做的恶意代码在自己机子测试，电脑的反应很大，显然很不喜欢……</p>\n<p><code>while(1){ \n  &quot;蓝屏&quot;; \n  &quot;重启&quot;;\n}</code><br>在另外一台win7上测试，正常效果；</p>\n<p>在一台win10上测试，什么事情都没有；</p>\n<p>恶意代码中删除了<strong>C:/Windows/System32/下的KBDUS.DLL</strong>文件，而这个文件需要<strong>“获取管理员权限</strong>”才能删除。</p>\n<p>笔者电脑很开放，加上自己手痒在“<strong>KBDUS.DLL</strong>”上右键获取权限，结果是电脑蓝屏加重启<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/QQ20160417231457.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f25de8e23e964dbb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20160417231457\"></a><br>“0x000000F4”的含义到现在也没弄清楚，反正把<strong>KBDUS.DLL</strong>文件放还原处后，电脑就不闹性子了。</p>\n<p>在另一台win7上，因为没有权限，除了<strong>KBDUS.DLL</strong>删除报错，其余正常。win10因为用的是自定义用户（微软账号啥的），权限更少，加上微软自带防护软件。完全被藐视了……<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1866029119f9d97a.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<p>虽然不是很有说服力：</p>\n<blockquote>\n<p>系统、软件、防火墙、杀软…及时升级的必要性。</p>\n</blockquote>\n<blockquote>\n<p>慎重获取最高权限，无论是电脑还是手机。</p>\n</blockquote>\n<p>其中，有个细节，笔者的恶意代码被360成功拦截，腾讯管家并有做到这一点……</p>\n"},{"title":"扣头发丝","date":"2016-05-07T16:00:00.000Z","_content":"\n[![ ](http://upload-images.jianshu.io/upload_images/1171873-8decbc7debca5ee4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/04/28/%e6%8a%a0%e5%a4%b4%e5%8f%91%e4%b8%9d%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89/)\n\n\n中午阿姐发来证件照，要我改下格式和大小，还好人长得漂亮，不需要做什么处理……只是换背景色麻烦了点，幸好她没要求（其实我压根不会PS）。\n冲着好奇，找到教程，跟着做了下，成品很不错（尽管调试了好多次）……\n分享此文，望有帮助……原文为：\n[静觅](http://cuiqingcai.com/) » [PS抠头发丝详细教程](http://cuiqingcai.com/1415.html)\n\n\n#[PS抠头发丝详细教程](http://cuiqingcai.com/1415.html)\n### 综述\n在PS里，对于抠图，比较有技术含量的便是抠头发丝了，下面为大家带来一个比较详细的抠头发丝的教程。\n\n### 素材准备\n在这里我们用这张图片作为抠图素材，下面让我们一步步来演示抠图的过程，并为之更换背景。[![ps-0](http://upload-images.jianshu.io/upload_images/1171873-4202a5104dbcd810.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-0.jpg)\n \n#### 1.打开素材\n第一步，当然是用PS打开这张图片素材啦。\n[![ps-1](http://upload-images.jianshu.io/upload_images/1171873-93915dc31032f90c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-1.jpg)\n#### 2.复制通道\n打开通道选项卡，按每个通道的前面的小眼睛，让红绿蓝通道依次显示，观察哪一个通道明暗对比更加明显，在这里，我们发现蓝色通道的明暗对比更加明显，那我们就右键复制，建立蓝色通道的一个副本，如图所示。\n[![ps-2](http://upload-images.jianshu.io/upload_images/1171873-0bfe11fcf8b39865.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-2.jpg)\n#### ３.调整色阶\n打开图像－调整－色阶，将低色阶调高，高色阶调低，让图片的明暗对比更加明显，点击确定。[![ps-3](http://upload-images.jianshu.io/upload_images/1171873-3f1fe1a0baef6249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-3.png)[![ps-4](http://upload-images.jianshu.io/upload_images/1171873-cac117cef59f87dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-4.jpg)\n#### ４.减淡加深\n切换至减淡或加深工具，首先我们切换到减淡工具，范围选择高光，直接对图片的亮白部分进行涂抹，这时我们会发现比较亮的部分都被减淡为白色，如图所示。\n[![ps-5](http://upload-images.jianshu.io/upload_images/1171873-1dbc976c243b2168.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-5.jpg)\n \n然后切换到加深工具，范围选择阴影，直接涂抹人物，将人物全部涂抹成黑色，如图所示[![ps-6](http://upload-images.jianshu.io/upload_images/1171873-1b18a0b1c65de851.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-6.jpg)\n[![ps-7](http://upload-images.jianshu.io/upload_images/1171873-7210cfc93bb15342.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-7.jpg)\n[![ps-8](http://upload-images.jianshu.io/upload_images/1171873-3810ef8d22626a5a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-8.jpg)\n#### ５.画笔修补\n这时我们会发现几乎所有的人物都已经变成了黑色，不过还有小瑕疵，有一小部分还没有变成黑色，没关系，切换到画笔工具，颜色选择黑色，让我们把没有变成黑色的部分进行填充。\n[![ps-9](http://upload-images.jianshu.io/upload_images/1171873-67d0c8cced4529df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-9.jpg)\n[![ps-10](http://upload-images.jianshu.io/upload_images/1171873-4dde4b4869cfd8a6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-10.jpg)\n#### ６.反向检查\n按Ctrl+I，将图片切换为反向，将黑白部分没有填充好的地方重新用画笔工具填充一下，保证做到黑白分明。\n[![ps-11](http://upload-images.jianshu.io/upload_images/1171873-310cd83f3a0cd2ae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-11.jpg)\n#### 7.抠出人物\n按住Ctrl键，鼠标移至图层的小图标处点击，即图中红色框处的区域，点击一下，即可选中人物的轮廓。\n[![ps-12](http://upload-images.jianshu.io/upload_images/1171873-6c4ae315f8474159.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-12.jpg)\n将图层的RGB通道全部复原，切换至图层面板\n[![ps-13](http://upload-images.jianshu.io/upload_images/1171873-052557298c16cf4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-13.jpg)\n[![ps-14](http://upload-images.jianshu.io/upload_images/1171873-3c78dae9ceefa30a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-14.jpg)\n \n按Ctrl+J，复制选区中的内容到新的图层，这时我们会发现新建了一个图层，它的背景是透明的。(P.S.按第一次不生效可以尝试按第二次，我这边出现了一个副本，然后便是透明背景的图片)\n[![ps-15](http://upload-images.jianshu.io/upload_images/1171873-f0ce6064b9d1d1e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-15.jpg)\n#### 8.更换背景\n我们在该图层下面新建一个图层，填充为自己想要的颜色，看一下效果，在这里我设置了灰白渐变效果。\n[![ps-16](http://upload-images.jianshu.io/upload_images/1171873-4e06d8dc9c170fe2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-16.jpg)\n#### 9.去除白边\n选中人物图层，选择图层-修边-移除白色杂边，即可去除边缘的杂边干扰\n[![ps-17](http://upload-images.jianshu.io/upload_images/1171873-457ca19943981fc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-17.jpg)\n这样一来，抠头发丝的完整过程就结束啦。\n\n### 总结\n以上便是抠头发丝的全部过程，如果做证件照的话，可以尝试一用，希望对大家有帮助\n>转载自：[静觅](http://cuiqingcai.com/) » [PS抠头发丝详细教程](http://cuiqingcai.com/1415.html)\n\n","source":"_posts/碎碎念/抠头发丝.md","raw":"---\ntitle: 扣头发丝\ndate: 2016.05.08\ntags: \ncategories: 随笔\n---\n\n[![ ](http://upload-images.jianshu.io/upload_images/1171873-8decbc7debca5ee4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/04/28/%e6%8a%a0%e5%a4%b4%e5%8f%91%e4%b8%9d%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89/)\n\n\n中午阿姐发来证件照，要我改下格式和大小，还好人长得漂亮，不需要做什么处理……只是换背景色麻烦了点，幸好她没要求（其实我压根不会PS）。\n冲着好奇，找到教程，跟着做了下，成品很不错（尽管调试了好多次）……\n分享此文，望有帮助……原文为：\n[静觅](http://cuiqingcai.com/) » [PS抠头发丝详细教程](http://cuiqingcai.com/1415.html)\n\n\n#[PS抠头发丝详细教程](http://cuiqingcai.com/1415.html)\n### 综述\n在PS里，对于抠图，比较有技术含量的便是抠头发丝了，下面为大家带来一个比较详细的抠头发丝的教程。\n\n### 素材准备\n在这里我们用这张图片作为抠图素材，下面让我们一步步来演示抠图的过程，并为之更换背景。[![ps-0](http://upload-images.jianshu.io/upload_images/1171873-4202a5104dbcd810.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-0.jpg)\n \n#### 1.打开素材\n第一步，当然是用PS打开这张图片素材啦。\n[![ps-1](http://upload-images.jianshu.io/upload_images/1171873-93915dc31032f90c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-1.jpg)\n#### 2.复制通道\n打开通道选项卡，按每个通道的前面的小眼睛，让红绿蓝通道依次显示，观察哪一个通道明暗对比更加明显，在这里，我们发现蓝色通道的明暗对比更加明显，那我们就右键复制，建立蓝色通道的一个副本，如图所示。\n[![ps-2](http://upload-images.jianshu.io/upload_images/1171873-0bfe11fcf8b39865.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-2.jpg)\n#### ３.调整色阶\n打开图像－调整－色阶，将低色阶调高，高色阶调低，让图片的明暗对比更加明显，点击确定。[![ps-3](http://upload-images.jianshu.io/upload_images/1171873-3f1fe1a0baef6249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-3.png)[![ps-4](http://upload-images.jianshu.io/upload_images/1171873-cac117cef59f87dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-4.jpg)\n#### ４.减淡加深\n切换至减淡或加深工具，首先我们切换到减淡工具，范围选择高光，直接对图片的亮白部分进行涂抹，这时我们会发现比较亮的部分都被减淡为白色，如图所示。\n[![ps-5](http://upload-images.jianshu.io/upload_images/1171873-1dbc976c243b2168.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-5.jpg)\n \n然后切换到加深工具，范围选择阴影，直接涂抹人物，将人物全部涂抹成黑色，如图所示[![ps-6](http://upload-images.jianshu.io/upload_images/1171873-1b18a0b1c65de851.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-6.jpg)\n[![ps-7](http://upload-images.jianshu.io/upload_images/1171873-7210cfc93bb15342.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-7.jpg)\n[![ps-8](http://upload-images.jianshu.io/upload_images/1171873-3810ef8d22626a5a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-8.jpg)\n#### ５.画笔修补\n这时我们会发现几乎所有的人物都已经变成了黑色，不过还有小瑕疵，有一小部分还没有变成黑色，没关系，切换到画笔工具，颜色选择黑色，让我们把没有变成黑色的部分进行填充。\n[![ps-9](http://upload-images.jianshu.io/upload_images/1171873-67d0c8cced4529df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-9.jpg)\n[![ps-10](http://upload-images.jianshu.io/upload_images/1171873-4dde4b4869cfd8a6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-10.jpg)\n#### ６.反向检查\n按Ctrl+I，将图片切换为反向，将黑白部分没有填充好的地方重新用画笔工具填充一下，保证做到黑白分明。\n[![ps-11](http://upload-images.jianshu.io/upload_images/1171873-310cd83f3a0cd2ae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-11.jpg)\n#### 7.抠出人物\n按住Ctrl键，鼠标移至图层的小图标处点击，即图中红色框处的区域，点击一下，即可选中人物的轮廓。\n[![ps-12](http://upload-images.jianshu.io/upload_images/1171873-6c4ae315f8474159.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-12.jpg)\n将图层的RGB通道全部复原，切换至图层面板\n[![ps-13](http://upload-images.jianshu.io/upload_images/1171873-052557298c16cf4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-13.jpg)\n[![ps-14](http://upload-images.jianshu.io/upload_images/1171873-3c78dae9ceefa30a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-14.jpg)\n \n按Ctrl+J，复制选区中的内容到新的图层，这时我们会发现新建了一个图层，它的背景是透明的。(P.S.按第一次不生效可以尝试按第二次，我这边出现了一个副本，然后便是透明背景的图片)\n[![ps-15](http://upload-images.jianshu.io/upload_images/1171873-f0ce6064b9d1d1e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-15.jpg)\n#### 8.更换背景\n我们在该图层下面新建一个图层，填充为自己想要的颜色，看一下效果，在这里我设置了灰白渐变效果。\n[![ps-16](http://upload-images.jianshu.io/upload_images/1171873-4e06d8dc9c170fe2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-16.jpg)\n#### 9.去除白边\n选中人物图层，选择图层-修边-移除白色杂边，即可去除边缘的杂边干扰\n[![ps-17](http://upload-images.jianshu.io/upload_images/1171873-457ca19943981fc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-17.jpg)\n这样一来，抠头发丝的完整过程就结束啦。\n\n### 总结\n以上便是抠头发丝的全部过程，如果做证件照的话，可以尝试一用，希望对大家有帮助\n>转载自：[静觅](http://cuiqingcai.com/) » [PS抠头发丝详细教程](http://cuiqingcai.com/1415.html)\n\n","slug":"碎碎念/抠头发丝","published":1,"updated":"2018-08-04T06:32:45.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc6p003im4cmusqgs1k7","content":"<p><a href=\"http://yamida.org/2016/04/28/%e6%8a%a0%e5%a4%b4%e5%8f%91%e4%b8%9d%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-8decbc7debca5ee4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></a></p>\n<p>中午阿姐发来证件照，要我改下格式和大小，还好人长得漂亮，不需要做什么处理……只是换背景色麻烦了点，幸好她没要求（其实我压根不会PS）。<br>冲着好奇，找到教程，跟着做了下，成品很不错（尽管调试了好多次）……<br>分享此文，望有帮助……原文为：<br><a href=\"http://cuiqingcai.com/\" target=\"_blank\" rel=\"noopener\">静觅</a> » <a href=\"http://cuiqingcai.com/1415.html\" target=\"_blank\" rel=\"noopener\">PS抠头发丝详细教程</a></p>\n<p>#<a href=\"http://cuiqingcai.com/1415.html\" target=\"_blank\" rel=\"noopener\">PS抠头发丝详细教程</a></p>\n<h3 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h3><p>在PS里，对于抠图，比较有技术含量的便是抠头发丝了，下面为大家带来一个比较详细的抠头发丝的教程。</p>\n<h3 id=\"素材准备\"><a href=\"#素材准备\" class=\"headerlink\" title=\"素材准备\"></a>素材准备</h3><p>在这里我们用这张图片作为抠图素材，下面让我们一步步来演示抠图的过程，并为之更换背景。<a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-0.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-4202a5104dbcd810.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-0\"></a></p>\n<h4 id=\"1-打开素材\"><a href=\"#1-打开素材\" class=\"headerlink\" title=\"1.打开素材\"></a>1.打开素材</h4><p>第一步，当然是用PS打开这张图片素材啦。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-93915dc31032f90c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-1\"></a></p>\n<h4 id=\"2-复制通道\"><a href=\"#2-复制通道\" class=\"headerlink\" title=\"2.复制通道\"></a>2.复制通道</h4><p>打开通道选项卡，按每个通道的前面的小眼睛，让红绿蓝通道依次显示，观察哪一个通道明暗对比更加明显，在这里，我们发现蓝色通道的明暗对比更加明显，那我们就右键复制，建立蓝色通道的一个副本，如图所示。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0bfe11fcf8b39865.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-2\"></a></p>\n<h4 id=\"３-调整色阶\"><a href=\"#３-调整色阶\" class=\"headerlink\" title=\"３.调整色阶\"></a>３.调整色阶</h4><p>打开图像－调整－色阶，将低色阶调高，高色阶调低，让图片的明暗对比更加明显，点击确定。<a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3f1fe1a0baef6249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-3\"></a><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-4.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-cac117cef59f87dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-4\"></a></p>\n<h4 id=\"４-减淡加深\"><a href=\"#４-减淡加深\" class=\"headerlink\" title=\"４.减淡加深\"></a>４.减淡加深</h4><p>切换至减淡或加深工具，首先我们切换到减淡工具，范围选择高光，直接对图片的亮白部分进行涂抹，这时我们会发现比较亮的部分都被减淡为白色，如图所示。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-5.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1dbc976c243b2168.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-5\"></a></p>\n<p>然后切换到加深工具，范围选择阴影，直接涂抹人物，将人物全部涂抹成黑色，如图所示<a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-6.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1b18a0b1c65de851.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-6\"></a><br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-7.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-7210cfc93bb15342.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-7\"></a><br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-8.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3810ef8d22626a5a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-8\"></a></p>\n<h4 id=\"５-画笔修补\"><a href=\"#５-画笔修补\" class=\"headerlink\" title=\"５.画笔修补\"></a>５.画笔修补</h4><p>这时我们会发现几乎所有的人物都已经变成了黑色，不过还有小瑕疵，有一小部分还没有变成黑色，没关系，切换到画笔工具，颜色选择黑色，让我们把没有变成黑色的部分进行填充。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-9.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-67d0c8cced4529df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-9\"></a><br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-10.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-4dde4b4869cfd8a6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-10\"></a></p>\n<h4 id=\"６-反向检查\"><a href=\"#６-反向检查\" class=\"headerlink\" title=\"６.反向检查\"></a>６.反向检查</h4><p>按Ctrl+I，将图片切换为反向，将黑白部分没有填充好的地方重新用画笔工具填充一下，保证做到黑白分明。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-11.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-310cd83f3a0cd2ae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-11\"></a></p>\n<h4 id=\"7-抠出人物\"><a href=\"#7-抠出人物\" class=\"headerlink\" title=\"7.抠出人物\"></a>7.抠出人物</h4><p>按住Ctrl键，鼠标移至图层的小图标处点击，即图中红色框处的区域，点击一下，即可选中人物的轮廓。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-12.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-6c4ae315f8474159.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-12\"></a><br>将图层的RGB通道全部复原，切换至图层面板<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-13.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-052557298c16cf4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-13\"></a><br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-14.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3c78dae9ceefa30a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-14\"></a></p>\n<p>按Ctrl+J，复制选区中的内容到新的图层，这时我们会发现新建了一个图层，它的背景是透明的。(P.S.按第一次不生效可以尝试按第二次，我这边出现了一个副本，然后便是透明背景的图片)<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-15.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f0ce6064b9d1d1e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-15\"></a></p>\n<h4 id=\"8-更换背景\"><a href=\"#8-更换背景\" class=\"headerlink\" title=\"8.更换背景\"></a>8.更换背景</h4><p>我们在该图层下面新建一个图层，填充为自己想要的颜色，看一下效果，在这里我设置了灰白渐变效果。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-16.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-4e06d8dc9c170fe2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-16\"></a></p>\n<h4 id=\"9-去除白边\"><a href=\"#9-去除白边\" class=\"headerlink\" title=\"9.去除白边\"></a>9.去除白边</h4><p>选中人物图层，选择图层-修边-移除白色杂边，即可去除边缘的杂边干扰<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-17.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-457ca19943981fc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-17\"></a><br>这样一来，抠头发丝的完整过程就结束啦。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上便是抠头发丝的全部过程，如果做证件照的话，可以尝试一用，希望对大家有帮助</p>\n<blockquote>\n<p>转载自：<a href=\"http://cuiqingcai.com/\" target=\"_blank\" rel=\"noopener\">静觅</a> » <a href=\"http://cuiqingcai.com/1415.html\" target=\"_blank\" rel=\"noopener\">PS抠头发丝详细教程</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yamida.org/2016/04/28/%e6%8a%a0%e5%a4%b4%e5%8f%91%e4%b8%9d%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-8decbc7debca5ee4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\" \"></a></p>\n<p>中午阿姐发来证件照，要我改下格式和大小，还好人长得漂亮，不需要做什么处理……只是换背景色麻烦了点，幸好她没要求（其实我压根不会PS）。<br>冲着好奇，找到教程，跟着做了下，成品很不错（尽管调试了好多次）……<br>分享此文，望有帮助……原文为：<br><a href=\"http://cuiqingcai.com/\" target=\"_blank\" rel=\"noopener\">静觅</a> » <a href=\"http://cuiqingcai.com/1415.html\" target=\"_blank\" rel=\"noopener\">PS抠头发丝详细教程</a></p>\n<p>#<a href=\"http://cuiqingcai.com/1415.html\" target=\"_blank\" rel=\"noopener\">PS抠头发丝详细教程</a></p>\n<h3 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h3><p>在PS里，对于抠图，比较有技术含量的便是抠头发丝了，下面为大家带来一个比较详细的抠头发丝的教程。</p>\n<h3 id=\"素材准备\"><a href=\"#素材准备\" class=\"headerlink\" title=\"素材准备\"></a>素材准备</h3><p>在这里我们用这张图片作为抠图素材，下面让我们一步步来演示抠图的过程，并为之更换背景。<a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-0.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-4202a5104dbcd810.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-0\"></a></p>\n<h4 id=\"1-打开素材\"><a href=\"#1-打开素材\" class=\"headerlink\" title=\"1.打开素材\"></a>1.打开素材</h4><p>第一步，当然是用PS打开这张图片素材啦。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-93915dc31032f90c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-1\"></a></p>\n<h4 id=\"2-复制通道\"><a href=\"#2-复制通道\" class=\"headerlink\" title=\"2.复制通道\"></a>2.复制通道</h4><p>打开通道选项卡，按每个通道的前面的小眼睛，让红绿蓝通道依次显示，观察哪一个通道明暗对比更加明显，在这里，我们发现蓝色通道的明暗对比更加明显，那我们就右键复制，建立蓝色通道的一个副本，如图所示。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0bfe11fcf8b39865.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-2\"></a></p>\n<h4 id=\"３-调整色阶\"><a href=\"#３-调整色阶\" class=\"headerlink\" title=\"３.调整色阶\"></a>３.调整色阶</h4><p>打开图像－调整－色阶，将低色阶调高，高色阶调低，让图片的明暗对比更加明显，点击确定。<a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3f1fe1a0baef6249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-3\"></a><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-4.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-cac117cef59f87dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-4\"></a></p>\n<h4 id=\"４-减淡加深\"><a href=\"#４-减淡加深\" class=\"headerlink\" title=\"４.减淡加深\"></a>４.减淡加深</h4><p>切换至减淡或加深工具，首先我们切换到减淡工具，范围选择高光，直接对图片的亮白部分进行涂抹，这时我们会发现比较亮的部分都被减淡为白色，如图所示。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-5.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1dbc976c243b2168.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-5\"></a></p>\n<p>然后切换到加深工具，范围选择阴影，直接涂抹人物，将人物全部涂抹成黑色，如图所示<a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-6.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1b18a0b1c65de851.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-6\"></a><br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-7.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-7210cfc93bb15342.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-7\"></a><br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-8.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3810ef8d22626a5a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-8\"></a></p>\n<h4 id=\"５-画笔修补\"><a href=\"#５-画笔修补\" class=\"headerlink\" title=\"５.画笔修补\"></a>５.画笔修补</h4><p>这时我们会发现几乎所有的人物都已经变成了黑色，不过还有小瑕疵，有一小部分还没有变成黑色，没关系，切换到画笔工具，颜色选择黑色，让我们把没有变成黑色的部分进行填充。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-9.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-67d0c8cced4529df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-9\"></a><br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-10.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-4dde4b4869cfd8a6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-10\"></a></p>\n<h4 id=\"６-反向检查\"><a href=\"#６-反向检查\" class=\"headerlink\" title=\"６.反向检查\"></a>６.反向检查</h4><p>按Ctrl+I，将图片切换为反向，将黑白部分没有填充好的地方重新用画笔工具填充一下，保证做到黑白分明。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-11.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-310cd83f3a0cd2ae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-11\"></a></p>\n<h4 id=\"7-抠出人物\"><a href=\"#7-抠出人物\" class=\"headerlink\" title=\"7.抠出人物\"></a>7.抠出人物</h4><p>按住Ctrl键，鼠标移至图层的小图标处点击，即图中红色框处的区域，点击一下，即可选中人物的轮廓。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-12.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-6c4ae315f8474159.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-12\"></a><br>将图层的RGB通道全部复原，切换至图层面板<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-13.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-052557298c16cf4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-13\"></a><br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-14.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-3c78dae9ceefa30a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-14\"></a></p>\n<p>按Ctrl+J，复制选区中的内容到新的图层，这时我们会发现新建了一个图层，它的背景是透明的。(P.S.按第一次不生效可以尝试按第二次，我这边出现了一个副本，然后便是透明背景的图片)<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-15.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f0ce6064b9d1d1e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-15\"></a></p>\n<h4 id=\"8-更换背景\"><a href=\"#8-更换背景\" class=\"headerlink\" title=\"8.更换背景\"></a>8.更换背景</h4><p>我们在该图层下面新建一个图层，填充为自己想要的颜色，看一下效果，在这里我设置了灰白渐变效果。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-16.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-4e06d8dc9c170fe2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-16\"></a></p>\n<h4 id=\"9-去除白边\"><a href=\"#9-去除白边\" class=\"headerlink\" title=\"9.去除白边\"></a>9.去除白边</h4><p>选中人物图层，选择图层-修边-移除白色杂边，即可去除边缘的杂边干扰<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-17.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-457ca19943981fc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ps-17\"></a><br>这样一来，抠头发丝的完整过程就结束啦。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上便是抠头发丝的全部过程，如果做证件照的话，可以尝试一用，希望对大家有帮助</p>\n<blockquote>\n<p>转载自：<a href=\"http://cuiqingcai.com/\" target=\"_blank\" rel=\"noopener\">静觅</a> » <a href=\"http://cuiqingcai.com/1415.html\" target=\"_blank\" rel=\"noopener\">PS抠头发丝详细教程</a></p>\n</blockquote>\n"},{"title":"我未曾见过你，而你的光却照耀到了我","date":"2018-03-14T07:35:25.000Z","_content":"\n2017年12月27日，冰岛一辆载有多名中国公民的旅游大巴发生翻车事故，造成一名中国人死亡，另有12人重伤。在这场事故中，我们的子涵姐不幸离世。\n\n可我直到昨天查看子涵姐的电台才发现这消息。愣了，好端端的一个人，说没就没了。\n\n最近在看《孤独又灿烂的神 —— 鬼怪》，88年出生的子涵姐算下来是29岁走的，或许她就是那群遗漏者之一吧。可惜了~\n\n\n> \" 无常 \"\n\n不要沉迷过去，不要害怕未来，\n\n周围的东西分分钟都在变化，我们是无法控制的，\n\n与其有时间去大把的回忆它曾经带给你的美好，\n\n不如变成行动派，\n\n快快去发现生活中更多的精彩吧\n\n***\n\n\n去认识新的朋友，\n\n去追新的美剧，\n\n去建立新的兴趣爱好，\n\n你总会发现，\n\n“留”与“逝”之间，其实碰撞出来的，\n\n是人生中更精彩的花火\n\n\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=483717360&auto=1&height=66\"></iframe>\n\n***\n最后，警戒各位，即便是乘坐大巴，也请务必系好安全带。","source":"_posts/碎碎念/我未曾见过你, 而你的光却照耀到了我.md","raw":"---\ntitle: 我未曾见过你，而你的光却照耀到了我\ndate: 2018-03-14 15:35:25\ntags: 碎碎 子涵\ncategories: 日记本\n---\n\n2017年12月27日，冰岛一辆载有多名中国公民的旅游大巴发生翻车事故，造成一名中国人死亡，另有12人重伤。在这场事故中，我们的子涵姐不幸离世。\n\n可我直到昨天查看子涵姐的电台才发现这消息。愣了，好端端的一个人，说没就没了。\n\n最近在看《孤独又灿烂的神 —— 鬼怪》，88年出生的子涵姐算下来是29岁走的，或许她就是那群遗漏者之一吧。可惜了~\n\n\n> \" 无常 \"\n\n不要沉迷过去，不要害怕未来，\n\n周围的东西分分钟都在变化，我们是无法控制的，\n\n与其有时间去大把的回忆它曾经带给你的美好，\n\n不如变成行动派，\n\n快快去发现生活中更多的精彩吧\n\n***\n\n\n去认识新的朋友，\n\n去追新的美剧，\n\n去建立新的兴趣爱好，\n\n你总会发现，\n\n“留”与“逝”之间，其实碰撞出来的，\n\n是人生中更精彩的花火\n\n\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=483717360&auto=1&height=66\"></iframe>\n\n***\n最后，警戒各位，即便是乘坐大巴，也请务必系好安全带。","slug":"碎碎念/我未曾见过你, 而你的光却照耀到了我","published":1,"updated":"2018-08-04T06:32:45.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc6t003km4cmfr3j43mr","content":"<p>2017年12月27日，冰岛一辆载有多名中国公民的旅游大巴发生翻车事故，造成一名中国人死亡，另有12人重伤。在这场事故中，我们的子涵姐不幸离世。</p>\n<p>可我直到昨天查看子涵姐的电台才发现这消息。愣了，好端端的一个人，说没就没了。</p>\n<p>最近在看《孤独又灿烂的神 —— 鬼怪》，88年出生的子涵姐算下来是29岁走的，或许她就是那群遗漏者之一吧。可惜了~</p>\n<blockquote>\n<p>“ 无常 “</p>\n</blockquote>\n<p>不要沉迷过去，不要害怕未来，</p>\n<p>周围的东西分分钟都在变化，我们是无法控制的，</p>\n<p>与其有时间去大把的回忆它曾经带给你的美好，</p>\n<p>不如变成行动派，</p>\n<p>快快去发现生活中更多的精彩吧</p>\n<hr>\n<p>去认识新的朋友，</p>\n<p>去追新的美剧，</p>\n<p>去建立新的兴趣爱好，</p>\n<p>你总会发现，</p>\n<p>“留”与“逝”之间，其实碰撞出来的，</p>\n<p>是人生中更精彩的花火</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=483717360&auto=1&height=66\"></iframe>\n\n<hr>\n<p>最后，警戒各位，即便是乘坐大巴，也请务必系好安全带。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2017年12月27日，冰岛一辆载有多名中国公民的旅游大巴发生翻车事故，造成一名中国人死亡，另有12人重伤。在这场事故中，我们的子涵姐不幸离世。</p>\n<p>可我直到昨天查看子涵姐的电台才发现这消息。愣了，好端端的一个人，说没就没了。</p>\n<p>最近在看《孤独又灿烂的神 —— 鬼怪》，88年出生的子涵姐算下来是29岁走的，或许她就是那群遗漏者之一吧。可惜了~</p>\n<blockquote>\n<p>“ 无常 “</p>\n</blockquote>\n<p>不要沉迷过去，不要害怕未来，</p>\n<p>周围的东西分分钟都在变化，我们是无法控制的，</p>\n<p>与其有时间去大把的回忆它曾经带给你的美好，</p>\n<p>不如变成行动派，</p>\n<p>快快去发现生活中更多的精彩吧</p>\n<hr>\n<p>去认识新的朋友，</p>\n<p>去追新的美剧，</p>\n<p>去建立新的兴趣爱好，</p>\n<p>你总会发现，</p>\n<p>“留”与“逝”之间，其实碰撞出来的，</p>\n<p>是人生中更精彩的花火</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=483717360&auto=1&height=66\"></iframe>\n\n<hr>\n<p>最后，警戒各位，即便是乘坐大巴，也请务必系好安全带。</p>\n"},{"title":"日常20161030","date":"2016-10-30T13:33:00.000Z","_content":"\n\n昨天晚上看阮一峰大神的博客，中的一篇[《Java语言学校的危险性（译文）》](http://www.ruanyifeng.com/blog/2008/12/the_perils_of_javaschools.html)。\n\n当中讲到了java中是没有**指针**和**函数式编程**。\n\n但是，对于某些最激动人心的编程任务来说，指针仍然是非常重要的。\n比如说，如果不用指针，你根本没办法开发Linux的内核。如果你不是真正地理解了指针，你连一行Linux的代码也看不懂，说实话，任何操作系统的代码你都看不懂。\n\n如果你不懂函数式编程，你就无法创造出MapReduce，正是这种算法使得Google的可扩展性（scalable）达到如此巨大的规模。单词\"Map\"（映射）和\"Reduce\"（化简）分别来自Lisp语言和函数式编程。回想起来，在类似6.001这样的编程课程中，都有提到纯粹的函数式编程没有副作用，因此可以直接用于并行计算（parallelizable）。任何人只要还记得这些内容，那么MapRuduce对他来说就是显而易见的。发明MapReduce的公司是Google，而不是微软，这个简单的事实说出了原因，为什么微软至今还在追赶，还在试图提供最基本的搜索服务，而Google已经转向了下一个阶段，开发世界上最大的并行式超级计算机----Skynet[8]的H次方的H次方的H次方的H次方的H次方的H次方。我觉得，微软并没有完全明白，在这一波竞争中它落后多远。\n\n除了上面那些直接就能想到的重要性，指针和递归的真正价值，在于那种你在学习它们的过程中，所得到的思维深度，以及你因为害怕在这些课程中被淘汰，所产生的心理抗压能力，它们都是在建造大型系统的过程中必不可少的。指针和递归要求一定水平的推理能力、抽象思考能力，以及最重要的，在若干个不同的抽象层次上，同时审视同一个问题的能力。因此，是否真正理解指针和递归，与是否是一个优秀程序员直接相关。\n\n***\n（20161031）\n昨晚拜托老师帮问了这个问题。今天看到的回复。\n\n![  ](http://upload-images.jianshu.io/upload_images/1171873-211ea514953b1508.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不要吐槽我问题渣啦～～慢慢会晋级的。\n\n不过第二点个人觉得有点离题了。\n昨晚快睡觉的时候看到这篇，[《为什么Lisp语言如此先进》](http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html)。\n希望能够找个时间学习这方面的知识","source":"_posts/碎碎念/日常20161030.md","raw":"---\ntitle: 日常20161030\ndate:   2016.10.30 21:33\ntags: \ncategories: 日记本\n---\n\n\n昨天晚上看阮一峰大神的博客，中的一篇[《Java语言学校的危险性（译文）》](http://www.ruanyifeng.com/blog/2008/12/the_perils_of_javaschools.html)。\n\n当中讲到了java中是没有**指针**和**函数式编程**。\n\n但是，对于某些最激动人心的编程任务来说，指针仍然是非常重要的。\n比如说，如果不用指针，你根本没办法开发Linux的内核。如果你不是真正地理解了指针，你连一行Linux的代码也看不懂，说实话，任何操作系统的代码你都看不懂。\n\n如果你不懂函数式编程，你就无法创造出MapReduce，正是这种算法使得Google的可扩展性（scalable）达到如此巨大的规模。单词\"Map\"（映射）和\"Reduce\"（化简）分别来自Lisp语言和函数式编程。回想起来，在类似6.001这样的编程课程中，都有提到纯粹的函数式编程没有副作用，因此可以直接用于并行计算（parallelizable）。任何人只要还记得这些内容，那么MapRuduce对他来说就是显而易见的。发明MapReduce的公司是Google，而不是微软，这个简单的事实说出了原因，为什么微软至今还在追赶，还在试图提供最基本的搜索服务，而Google已经转向了下一个阶段，开发世界上最大的并行式超级计算机----Skynet[8]的H次方的H次方的H次方的H次方的H次方的H次方。我觉得，微软并没有完全明白，在这一波竞争中它落后多远。\n\n除了上面那些直接就能想到的重要性，指针和递归的真正价值，在于那种你在学习它们的过程中，所得到的思维深度，以及你因为害怕在这些课程中被淘汰，所产生的心理抗压能力，它们都是在建造大型系统的过程中必不可少的。指针和递归要求一定水平的推理能力、抽象思考能力，以及最重要的，在若干个不同的抽象层次上，同时审视同一个问题的能力。因此，是否真正理解指针和递归，与是否是一个优秀程序员直接相关。\n\n***\n（20161031）\n昨晚拜托老师帮问了这个问题。今天看到的回复。\n\n![  ](http://upload-images.jianshu.io/upload_images/1171873-211ea514953b1508.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不要吐槽我问题渣啦～～慢慢会晋级的。\n\n不过第二点个人觉得有点离题了。\n昨晚快睡觉的时候看到这篇，[《为什么Lisp语言如此先进》](http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html)。\n希望能够找个时间学习这方面的知识","slug":"碎碎念/日常20161030","published":1,"updated":"2018-08-04T06:32:45.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc6x003mm4cmaki87yt3","content":"<p>昨天晚上看阮一峰大神的博客，中的一篇<a href=\"http://www.ruanyifeng.com/blog/2008/12/the_perils_of_javaschools.html\" target=\"_blank\" rel=\"noopener\">《Java语言学校的危险性（译文）》</a>。</p>\n<p>当中讲到了java中是没有<strong>指针</strong>和<strong>函数式编程</strong>。</p>\n<p>但是，对于某些最激动人心的编程任务来说，指针仍然是非常重要的。<br>比如说，如果不用指针，你根本没办法开发Linux的内核。如果你不是真正地理解了指针，你连一行Linux的代码也看不懂，说实话，任何操作系统的代码你都看不懂。</p>\n<p>如果你不懂函数式编程，你就无法创造出MapReduce，正是这种算法使得Google的可扩展性（scalable）达到如此巨大的规模。单词”Map”（映射）和”Reduce”（化简）分别来自Lisp语言和函数式编程。回想起来，在类似6.001这样的编程课程中，都有提到纯粹的函数式编程没有副作用，因此可以直接用于并行计算（parallelizable）。任何人只要还记得这些内容，那么MapRuduce对他来说就是显而易见的。发明MapReduce的公司是Google，而不是微软，这个简单的事实说出了原因，为什么微软至今还在追赶，还在试图提供最基本的搜索服务，而Google已经转向了下一个阶段，开发世界上最大的并行式超级计算机—-Skynet[8]的H次方的H次方的H次方的H次方的H次方的H次方。我觉得，微软并没有完全明白，在这一波竞争中它落后多远。</p>\n<p>除了上面那些直接就能想到的重要性，指针和递归的真正价值，在于那种你在学习它们的过程中，所得到的思维深度，以及你因为害怕在这些课程中被淘汰，所产生的心理抗压能力，它们都是在建造大型系统的过程中必不可少的。指针和递归要求一定水平的推理能力、抽象思考能力，以及最重要的，在若干个不同的抽象层次上，同时审视同一个问题的能力。因此，是否真正理解指针和递归，与是否是一个优秀程序员直接相关。</p>\n<hr>\n<p>（20161031）<br>昨晚拜托老师帮问了这个问题。今天看到的回复。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-211ea514953b1508.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"  \"></p>\n<p>不要吐槽我问题渣啦～～慢慢会晋级的。</p>\n<p>不过第二点个人觉得有点离题了。<br>昨晚快睡觉的时候看到这篇，<a href=\"http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html\" target=\"_blank\" rel=\"noopener\">《为什么Lisp语言如此先进》</a>。<br>希望能够找个时间学习这方面的知识</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天晚上看阮一峰大神的博客，中的一篇<a href=\"http://www.ruanyifeng.com/blog/2008/12/the_perils_of_javaschools.html\" target=\"_blank\" rel=\"noopener\">《Java语言学校的危险性（译文）》</a>。</p>\n<p>当中讲到了java中是没有<strong>指针</strong>和<strong>函数式编程</strong>。</p>\n<p>但是，对于某些最激动人心的编程任务来说，指针仍然是非常重要的。<br>比如说，如果不用指针，你根本没办法开发Linux的内核。如果你不是真正地理解了指针，你连一行Linux的代码也看不懂，说实话，任何操作系统的代码你都看不懂。</p>\n<p>如果你不懂函数式编程，你就无法创造出MapReduce，正是这种算法使得Google的可扩展性（scalable）达到如此巨大的规模。单词”Map”（映射）和”Reduce”（化简）分别来自Lisp语言和函数式编程。回想起来，在类似6.001这样的编程课程中，都有提到纯粹的函数式编程没有副作用，因此可以直接用于并行计算（parallelizable）。任何人只要还记得这些内容，那么MapRuduce对他来说就是显而易见的。发明MapReduce的公司是Google，而不是微软，这个简单的事实说出了原因，为什么微软至今还在追赶，还在试图提供最基本的搜索服务，而Google已经转向了下一个阶段，开发世界上最大的并行式超级计算机—-Skynet[8]的H次方的H次方的H次方的H次方的H次方的H次方。我觉得，微软并没有完全明白，在这一波竞争中它落后多远。</p>\n<p>除了上面那些直接就能想到的重要性，指针和递归的真正价值，在于那种你在学习它们的过程中，所得到的思维深度，以及你因为害怕在这些课程中被淘汰，所产生的心理抗压能力，它们都是在建造大型系统的过程中必不可少的。指针和递归要求一定水平的推理能力、抽象思考能力，以及最重要的，在若干个不同的抽象层次上，同时审视同一个问题的能力。因此，是否真正理解指针和递归，与是否是一个优秀程序员直接相关。</p>\n<hr>\n<p>（20161031）<br>昨晚拜托老师帮问了这个问题。今天看到的回复。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-211ea514953b1508.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"  \"></p>\n<p>不要吐槽我问题渣啦～～慢慢会晋级的。</p>\n<p>不过第二点个人觉得有点离题了。<br>昨晚快睡觉的时候看到这篇，<a href=\"http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html\" target=\"_blank\" rel=\"noopener\">《为什么Lisp语言如此先进》</a>。<br>希望能够找个时间学习这方面的知识</p>\n"},{"title":"无题","date":"2016-04-15T04:55:00.000Z","_content":"\nYY里传来极轻的一声笑，\n就好像懒懒的夏天，屋檐下的一只风铃，\n不经意间，一缕柔风，轻飘飘的将它吹进了梦呢里\n***\n春风夹杂着三月的桃花，我看见他的瞳孔里倒映出我自己，眼底落满笑意\n***\n有很多街道林荫蔽日，甚至抬头不见光亮，下起雨时，会觉得人世间所有孤独都在此处，而路边画廊寻常可见，不起眼的小店干净整齐，一切都在告诉你：这里的每个人都在生活。\n***\n夜太短，还没开始就天亮\n***\n秋雨如烟如雾,无声地飘洒在那空地上的瓦砾堆里、枯枝败叶上,淋湿了地,淋湿了房,淋湿了树。\n***\n还没有晾干的外衣,闷在寂寞的房里\n***\n孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。\n\n默默的聆听,窗外这场大雨下个不停。\n\n伞下还有你的痕迹,勉强撑过这场雨\n***\n牙医曾经说过，放手如同拔牙拔掉的那一刻，你会觉得解脱，但是舌头总会不由自主的往那个空空的牙洞里舔，一天数次。不痛了，不代表你已完全无视留下的那个空缺，永远都在间或甚至异常挂念，适应是需要时间，但牙总是要拔，因为太痛，所以终归还是要放手。\n\n","source":"_posts/碎碎念/无标题文章.md","raw":"---\ntitle: 无题\ndate: 2016.04.15 12:55\ntags: \ncategories: 日记本\n---\n\nYY里传来极轻的一声笑，\n就好像懒懒的夏天，屋檐下的一只风铃，\n不经意间，一缕柔风，轻飘飘的将它吹进了梦呢里\n***\n春风夹杂着三月的桃花，我看见他的瞳孔里倒映出我自己，眼底落满笑意\n***\n有很多街道林荫蔽日，甚至抬头不见光亮，下起雨时，会觉得人世间所有孤独都在此处，而路边画廊寻常可见，不起眼的小店干净整齐，一切都在告诉你：这里的每个人都在生活。\n***\n夜太短，还没开始就天亮\n***\n秋雨如烟如雾,无声地飘洒在那空地上的瓦砾堆里、枯枝败叶上,淋湿了地,淋湿了房,淋湿了树。\n***\n还没有晾干的外衣,闷在寂寞的房里\n***\n孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。\n\n默默的聆听,窗外这场大雨下个不停。\n\n伞下还有你的痕迹,勉强撑过这场雨\n***\n牙医曾经说过，放手如同拔牙拔掉的那一刻，你会觉得解脱，但是舌头总会不由自主的往那个空空的牙洞里舔，一天数次。不痛了，不代表你已完全无视留下的那个空缺，永远都在间或甚至异常挂念，适应是需要时间，但牙总是要拔，因为太痛，所以终归还是要放手。\n\n","slug":"碎碎念/无标题文章","published":1,"updated":"2018-08-04T06:32:45.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc70003pm4cm4i1xjri8","content":"<p>YY里传来极轻的一声笑，<br>就好像懒懒的夏天，屋檐下的一只风铃，<br>不经意间，一缕柔风，轻飘飘的将它吹进了梦呢里</p>\n<hr>\n<p>春风夹杂着三月的桃花，我看见他的瞳孔里倒映出我自己，眼底落满笑意</p>\n<hr>\n<p>有很多街道林荫蔽日，甚至抬头不见光亮，下起雨时，会觉得人世间所有孤独都在此处，而路边画廊寻常可见，不起眼的小店干净整齐，一切都在告诉你：这里的每个人都在生活。</p>\n<hr>\n<p>夜太短，还没开始就天亮</p>\n<hr>\n<p>秋雨如烟如雾,无声地飘洒在那空地上的瓦砾堆里、枯枝败叶上,淋湿了地,淋湿了房,淋湿了树。</p>\n<hr>\n<p>还没有晾干的外衣,闷在寂寞的房里</p>\n<hr>\n<p>孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。</p>\n<p>默默的聆听,窗外这场大雨下个不停。</p>\n<p>伞下还有你的痕迹,勉强撑过这场雨</p>\n<hr>\n<p>牙医曾经说过，放手如同拔牙拔掉的那一刻，你会觉得解脱，但是舌头总会不由自主的往那个空空的牙洞里舔，一天数次。不痛了，不代表你已完全无视留下的那个空缺，永远都在间或甚至异常挂念，适应是需要时间，但牙总是要拔，因为太痛，所以终归还是要放手。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>YY里传来极轻的一声笑，<br>就好像懒懒的夏天，屋檐下的一只风铃，<br>不经意间，一缕柔风，轻飘飘的将它吹进了梦呢里</p>\n<hr>\n<p>春风夹杂着三月的桃花，我看见他的瞳孔里倒映出我自己，眼底落满笑意</p>\n<hr>\n<p>有很多街道林荫蔽日，甚至抬头不见光亮，下起雨时，会觉得人世间所有孤独都在此处，而路边画廊寻常可见，不起眼的小店干净整齐，一切都在告诉你：这里的每个人都在生活。</p>\n<hr>\n<p>夜太短，还没开始就天亮</p>\n<hr>\n<p>秋雨如烟如雾,无声地飘洒在那空地上的瓦砾堆里、枯枝败叶上,淋湿了地,淋湿了房,淋湿了树。</p>\n<hr>\n<p>还没有晾干的外衣,闷在寂寞的房里</p>\n<hr>\n<p>孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。</p>\n<p>默默的聆听,窗外这场大雨下个不停。</p>\n<p>伞下还有你的痕迹,勉强撑过这场雨</p>\n<hr>\n<p>牙医曾经说过，放手如同拔牙拔掉的那一刻，你会觉得解脱，但是舌头总会不由自主的往那个空空的牙洞里舔，一天数次。不痛了，不代表你已完全无视留下的那个空缺，永远都在间或甚至异常挂念，适应是需要时间，但牙总是要拔，因为太痛，所以终归还是要放手。</p>\n"},{"title":"旧照片","date":"2016-04-05T14:16:00.000Z","_content":"\n灯光火影，街道人群，窗台风铃。宛如油画般鲜艳的所有回忆。\n\n时间会刺破青春的 华美精致，想水一样慢慢地从每个人身上覆盖过去，那些潮水的痕迹早就在一年一年的季风中干透，只残留一些水渍，变化着每个人的模样。\n[![20160404-1](http://upload-images.jianshu.io/upload_images/1171873-9c1e3b8f1d08aaf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-1.jpg)[![20160404-2](http://upload-images.jianshu.io/upload_images/1171873-912e40cd97aa92ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-2.jpg)\n\n \n","source":"_posts/碎碎念/旧照片.md","raw":"---\ntitle: 旧照片\ndate: 2016.04.05 22:16\ntags: \ncategories: 日记本\n---\n\n灯光火影，街道人群，窗台风铃。宛如油画般鲜艳的所有回忆。\n\n时间会刺破青春的 华美精致，想水一样慢慢地从每个人身上覆盖过去，那些潮水的痕迹早就在一年一年的季风中干透，只残留一些水渍，变化着每个人的模样。\n[![20160404-1](http://upload-images.jianshu.io/upload_images/1171873-9c1e3b8f1d08aaf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-1.jpg)[![20160404-2](http://upload-images.jianshu.io/upload_images/1171873-912e40cd97aa92ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-2.jpg)\n\n \n","slug":"碎碎念/旧照片","published":1,"updated":"2018-08-04T06:32:45.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc71003rm4cmsw0p8pvp","content":"<p>灯光火影，街道人群，窗台风铃。宛如油画般鲜艳的所有回忆。</p>\n<p>时间会刺破青春的 华美精致，想水一样慢慢地从每个人身上覆盖过去，那些潮水的痕迹早就在一年一年的季风中干透，只残留一些水渍，变化着每个人的模样。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-9c1e3b8f1d08aaf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160404-1\"></a><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-912e40cd97aa92ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160404-2\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>灯光火影，街道人群，窗台风铃。宛如油画般鲜艳的所有回忆。</p>\n<p>时间会刺破青春的 华美精致，想水一样慢慢地从每个人身上覆盖过去，那些潮水的痕迹早就在一年一年的季风中干透，只残留一些水渍，变化着每个人的模样。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-9c1e3b8f1d08aaf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160404-1\"></a><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-912e40cd97aa92ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160404-2\"></a></p>\n"},{"title":"日常——google涂鸦","date":"2016-10-31T11:56:00.000Z","_content":"\n昨天google主页的动画主题是“万圣节”。\n\n![Happy Halloween](http://upload-images.jianshu.io/upload_images/1171873-b59143894c87c939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n没想到的是今天这涂鸦还在主页上。昨晚通关了（共5关）。\n通关之后还截图分享给小伙伴看，哈哈。小伙伴还说昨晚在抱怨没把手绘板带过来。\n\n![Happy Halloween2](http://upload-images.jianshu.io/upload_images/1171873-86043ed434335a69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n很好奇这些动态的涂鸦，google是怎么做的，flash和gif肯定不是google的作风。\n\n后来找到了相关的，但并不是这种（游戏互动）的。\n\n#####[喜欢今天的Google LOGO 玛莎·葛兰姆 ](http://liucheng.name/1802/)\n>不过google当然不会这么简单的。我弄了弄，把其中的代码给挖了出来。用了几句css，和两张png图片，还有一大段js script。就完成了今天的google logo的作品\n\n\n#####[模拟谷歌今日使用的css动画](http://www.cnblogs.com/hooray/archive/2011/05/11/2043122.html)\n>不知道大家有没有注意到谷歌今天官网上的logo，刚开始一看还以为是gif，在仔细一看，发现并非如此，原来是使用CSS，Sprite技术，利用一个初始图片和一张画满各个动作的拼接图片，从而实现了动画效果。\n\n#####[今天google 首页的javascript 动画实现。好吧，我来晚了。。。](http://www.cnblogs.com/hihuimin/archive/2011/05/11/2043327.html)\n>我的方法则是和google 一样，不断的插入带有背景的div 来实现的，先是建立一个这些div 样式信息[left, top, width, height, background-position-x, background-position-y] 的数组，然后用setTimeout 定时地插入带有这些样式的div 即可。）\n\n***\n\n![](http://upload-images.jianshu.io/upload_images/1171873-0a146614f6d1af94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n每天打开google看主页动画\n慢慢变成一种习惯。\n喜欢这种文化，\n喜欢与小伙伴分享每天的google涂鸦。\n喜欢一起讨论当中的趣味，\ngoogle文化影响着我的生活\n……\n","source":"_posts/碎碎念/日常——google涂鸦.md","raw":"---\ntitle: 日常——google涂鸦\ndate:  2016.10.31 19:56\ntags: \ncategories: 日记本\n---\n\n昨天google主页的动画主题是“万圣节”。\n\n![Happy Halloween](http://upload-images.jianshu.io/upload_images/1171873-b59143894c87c939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n没想到的是今天这涂鸦还在主页上。昨晚通关了（共5关）。\n通关之后还截图分享给小伙伴看，哈哈。小伙伴还说昨晚在抱怨没把手绘板带过来。\n\n![Happy Halloween2](http://upload-images.jianshu.io/upload_images/1171873-86043ed434335a69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n很好奇这些动态的涂鸦，google是怎么做的，flash和gif肯定不是google的作风。\n\n后来找到了相关的，但并不是这种（游戏互动）的。\n\n#####[喜欢今天的Google LOGO 玛莎·葛兰姆 ](http://liucheng.name/1802/)\n>不过google当然不会这么简单的。我弄了弄，把其中的代码给挖了出来。用了几句css，和两张png图片，还有一大段js script。就完成了今天的google logo的作品\n\n\n#####[模拟谷歌今日使用的css动画](http://www.cnblogs.com/hooray/archive/2011/05/11/2043122.html)\n>不知道大家有没有注意到谷歌今天官网上的logo，刚开始一看还以为是gif，在仔细一看，发现并非如此，原来是使用CSS，Sprite技术，利用一个初始图片和一张画满各个动作的拼接图片，从而实现了动画效果。\n\n#####[今天google 首页的javascript 动画实现。好吧，我来晚了。。。](http://www.cnblogs.com/hihuimin/archive/2011/05/11/2043327.html)\n>我的方法则是和google 一样，不断的插入带有背景的div 来实现的，先是建立一个这些div 样式信息[left, top, width, height, background-position-x, background-position-y] 的数组，然后用setTimeout 定时地插入带有这些样式的div 即可。）\n\n***\n\n![](http://upload-images.jianshu.io/upload_images/1171873-0a146614f6d1af94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n每天打开google看主页动画\n慢慢变成一种习惯。\n喜欢这种文化，\n喜欢与小伙伴分享每天的google涂鸦。\n喜欢一起讨论当中的趣味，\ngoogle文化影响着我的生活\n……\n","slug":"碎碎念/日常——google涂鸦","published":1,"updated":"2018-08-04T06:32:45.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc73003tm4cma3h8r2lh","content":"<p>昨天google主页的动画主题是“万圣节”。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-b59143894c87c939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Happy Halloween\"></p>\n<p>没想到的是今天这涂鸦还在主页上。昨晚通关了（共5关）。<br>通关之后还截图分享给小伙伴看，哈哈。小伙伴还说昨晚在抱怨没把手绘板带过来。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-86043ed434335a69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Happy Halloween2\"></p>\n<p>很好奇这些动态的涂鸦，google是怎么做的，flash和gif肯定不是google的作风。</p>\n<p>后来找到了相关的，但并不是这种（游戏互动）的。</p>\n<p>#####<a href=\"http://liucheng.name/1802/\" target=\"_blank\" rel=\"noopener\">喜欢今天的Google LOGO 玛莎·葛兰姆 </a></p>\n<blockquote>\n<p>不过google当然不会这么简单的。我弄了弄，把其中的代码给挖了出来。用了几句css，和两张png图片，还有一大段js script。就完成了今天的google logo的作品</p>\n</blockquote>\n<p>#####<a href=\"http://www.cnblogs.com/hooray/archive/2011/05/11/2043122.html\" target=\"_blank\" rel=\"noopener\">模拟谷歌今日使用的css动画</a></p>\n<blockquote>\n<p>不知道大家有没有注意到谷歌今天官网上的logo，刚开始一看还以为是gif，在仔细一看，发现并非如此，原来是使用CSS，Sprite技术，利用一个初始图片和一张画满各个动作的拼接图片，从而实现了动画效果。</p>\n</blockquote>\n<p>#####<a href=\"http://www.cnblogs.com/hihuimin/archive/2011/05/11/2043327.html\" target=\"_blank\" rel=\"noopener\">今天google 首页的javascript 动画实现。好吧，我来晚了。。。</a></p>\n<blockquote>\n<p>我的方法则是和google 一样，不断的插入带有背景的div 来实现的，先是建立一个这些div 样式信息[left, top, width, height, background-position-x, background-position-y] 的数组，然后用setTimeout 定时地插入带有这些样式的div 即可。）</p>\n</blockquote>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0a146614f6d1af94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>每天打开google看主页动画<br>慢慢变成一种习惯。<br>喜欢这种文化，<br>喜欢与小伙伴分享每天的google涂鸦。<br>喜欢一起讨论当中的趣味，<br>google文化影响着我的生活<br>……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天google主页的动画主题是“万圣节”。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-b59143894c87c939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Happy Halloween\"></p>\n<p>没想到的是今天这涂鸦还在主页上。昨晚通关了（共5关）。<br>通关之后还截图分享给小伙伴看，哈哈。小伙伴还说昨晚在抱怨没把手绘板带过来。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-86043ed434335a69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Happy Halloween2\"></p>\n<p>很好奇这些动态的涂鸦，google是怎么做的，flash和gif肯定不是google的作风。</p>\n<p>后来找到了相关的，但并不是这种（游戏互动）的。</p>\n<p>#####<a href=\"http://liucheng.name/1802/\" target=\"_blank\" rel=\"noopener\">喜欢今天的Google LOGO 玛莎·葛兰姆 </a></p>\n<blockquote>\n<p>不过google当然不会这么简单的。我弄了弄，把其中的代码给挖了出来。用了几句css，和两张png图片，还有一大段js script。就完成了今天的google logo的作品</p>\n</blockquote>\n<p>#####<a href=\"http://www.cnblogs.com/hooray/archive/2011/05/11/2043122.html\" target=\"_blank\" rel=\"noopener\">模拟谷歌今日使用的css动画</a></p>\n<blockquote>\n<p>不知道大家有没有注意到谷歌今天官网上的logo，刚开始一看还以为是gif，在仔细一看，发现并非如此，原来是使用CSS，Sprite技术，利用一个初始图片和一张画满各个动作的拼接图片，从而实现了动画效果。</p>\n</blockquote>\n<p>#####<a href=\"http://www.cnblogs.com/hihuimin/archive/2011/05/11/2043327.html\" target=\"_blank\" rel=\"noopener\">今天google 首页的javascript 动画实现。好吧，我来晚了。。。</a></p>\n<blockquote>\n<p>我的方法则是和google 一样，不断的插入带有背景的div 来实现的，先是建立一个这些div 样式信息[left, top, width, height, background-position-x, background-position-y] 的数组，然后用setTimeout 定时地插入带有这些样式的div 即可。）</p>\n</blockquote>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0a146614f6d1af94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>每天打开google看主页动画<br>慢慢变成一种习惯。<br>喜欢这种文化，<br>喜欢与小伙伴分享每天的google涂鸦。<br>喜欢一起讨论当中的趣味，<br>google文化影响着我的生活<br>……</p>\n"},{"title":"时光","date":"2016-01-28T04:55:00.000Z","_content":"\n[![](http://upload-images.jianshu.io/upload_images/1171873-a26bfedc382dfc34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/01/28/%e7%8e%b0%e5%9c%a8%e5%92%8c%e5%b0%86%e6%9d%a5%e7%9a%84%e6%88%91%e4%bb%ac/)\n\n\n*岁月是场有去无回的旅行，好的坏的都是风景*\n\n回家的路上，十字路口排起了长龙；\n冬天的日子特别短，天就这样，渐渐灰暗了下来。\n路灯慢慢亮了，车灯一盏盏也跟着打开，\n黄白色的灯光交错闪烁，远远附和着红绿灯跳动。\n\n听着收音机里，正在讨论关于遇见未来。\n而总有这样的悖论：正是你知道了未来，反省着过去才会想着去改变现在，而最后的结果其实就是你所看到的。\n辗转，轮回，宿命；\n踌躇，前行，造就。\n其实怀念曾经的回忆和期待以后的未知又何尝不是一种美好。\n\n我在梦中遇见了，更好的我们；\n谢谢，曾经，现在和将来的我们。\n\n\n","source":"_posts/碎碎念/时光.md","raw":"---\ntitle: 时光\ndate: 2016.01.28 12:55\ntags: \ncategories: 日记本\n---\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-a26bfedc382dfc34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/01/28/%e7%8e%b0%e5%9c%a8%e5%92%8c%e5%b0%86%e6%9d%a5%e7%9a%84%e6%88%91%e4%bb%ac/)\n\n\n*岁月是场有去无回的旅行，好的坏的都是风景*\n\n回家的路上，十字路口排起了长龙；\n冬天的日子特别短，天就这样，渐渐灰暗了下来。\n路灯慢慢亮了，车灯一盏盏也跟着打开，\n黄白色的灯光交错闪烁，远远附和着红绿灯跳动。\n\n听着收音机里，正在讨论关于遇见未来。\n而总有这样的悖论：正是你知道了未来，反省着过去才会想着去改变现在，而最后的结果其实就是你所看到的。\n辗转，轮回，宿命；\n踌躇，前行，造就。\n其实怀念曾经的回忆和期待以后的未知又何尝不是一种美好。\n\n我在梦中遇见了，更好的我们；\n谢谢，曾经，现在和将来的我们。\n\n\n","slug":"碎碎念/时光","published":1,"updated":"2018-08-04T06:32:45.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc75003wm4cm4izrxloh","content":"<p><a href=\"http://yamida.org/2016/01/28/%e7%8e%b0%e5%9c%a8%e5%92%8c%e5%b0%86%e6%9d%a5%e7%9a%84%e6%88%91%e4%bb%ac/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a26bfedc382dfc34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p><em>岁月是场有去无回的旅行，好的坏的都是风景</em></p>\n<p>回家的路上，十字路口排起了长龙；<br>冬天的日子特别短，天就这样，渐渐灰暗了下来。<br>路灯慢慢亮了，车灯一盏盏也跟着打开，<br>黄白色的灯光交错闪烁，远远附和着红绿灯跳动。</p>\n<p>听着收音机里，正在讨论关于遇见未来。<br>而总有这样的悖论：正是你知道了未来，反省着过去才会想着去改变现在，而最后的结果其实就是你所看到的。<br>辗转，轮回，宿命；<br>踌躇，前行，造就。<br>其实怀念曾经的回忆和期待以后的未知又何尝不是一种美好。</p>\n<p>我在梦中遇见了，更好的我们；<br>谢谢，曾经，现在和将来的我们。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yamida.org/2016/01/28/%e7%8e%b0%e5%9c%a8%e5%92%8c%e5%b0%86%e6%9d%a5%e7%9a%84%e6%88%91%e4%bb%ac/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a26bfedc382dfc34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p><em>岁月是场有去无回的旅行，好的坏的都是风景</em></p>\n<p>回家的路上，十字路口排起了长龙；<br>冬天的日子特别短，天就这样，渐渐灰暗了下来。<br>路灯慢慢亮了，车灯一盏盏也跟着打开，<br>黄白色的灯光交错闪烁，远远附和着红绿灯跳动。</p>\n<p>听着收音机里，正在讨论关于遇见未来。<br>而总有这样的悖论：正是你知道了未来，反省着过去才会想着去改变现在，而最后的结果其实就是你所看到的。<br>辗转，轮回，宿命；<br>踌躇，前行，造就。<br>其实怀念曾经的回忆和期待以后的未知又何尝不是一种美好。</p>\n<p>我在梦中遇见了，更好的我们；<br>谢谢，曾经，现在和将来的我们。</p>\n"},{"title":"春分","date":"2016-03-20T14:16:00.000Z","_content":"\n[![](http://upload-images.jianshu.io/upload_images/1171873-d736311cf0ef9653.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/)\n\n[2016年3月20日](http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/) / [芽蜜](http://yamida.org/author/rabbit/) / [0 COMMENTS](http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/#respond)\n\n今日春分……清早的大雨倾盆、雷声隆隆，加上一周的毛毛雨。到处湿漉漉，衣服湿答答……\n\n[![first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp](http://upload-images.jianshu.io/upload_images/1171873-bd5b31cc2a9883e8.gif?imageMogr2/auto-orient/strip)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp.gif)\n喜欢看google主页上的动画……可每每向身边人分享这些可爱的动画时（也许是他们不方便看吧），一般不会引起共鸣……\n\n在写这篇时，上面的动画一直反复，写着写着就傻傻地被逗笑一下……\n\n","source":"_posts/碎碎念/春分.md","raw":"---\ntitle: 春分\ndate: 2016.03.20 22:16\ntags: \ncategories: 日记本\n---\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-d736311cf0ef9653.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/)\n\n[2016年3月20日](http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/) / [芽蜜](http://yamida.org/author/rabbit/) / [0 COMMENTS](http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/#respond)\n\n今日春分……清早的大雨倾盆、雷声隆隆，加上一周的毛毛雨。到处湿漉漉，衣服湿答答……\n\n[![first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp](http://upload-images.jianshu.io/upload_images/1171873-bd5b31cc2a9883e8.gif?imageMogr2/auto-orient/strip)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp.gif)\n喜欢看google主页上的动画……可每每向身边人分享这些可爱的动画时（也许是他们不方便看吧），一般不会引起共鸣……\n\n在写这篇时，上面的动画一直反复，写着写着就傻傻地被逗笑一下……\n\n","slug":"碎碎念/春分","published":1,"updated":"2018-08-04T06:32:45.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc77003ym4cm9fzy0tvg","content":"<p><a href=\"http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-d736311cf0ef9653.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p><a href=\"http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/\" target=\"_blank\" rel=\"noopener\">2016年3月20日</a> / <a href=\"http://yamida.org/author/rabbit/\" target=\"_blank\" rel=\"noopener\">芽蜜</a> / <a href=\"http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/#respond\" target=\"_blank\" rel=\"noopener\">0 COMMENTS</a></p>\n<p>今日春分……清早的大雨倾盆、雷声隆隆，加上一周的毛毛雨。到处湿漉漉，衣服湿答答……</p>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-bd5b31cc2a9883e8.gif?imageMogr2/auto-orient/strip\" alt=\"first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp\"></a><br>喜欢看google主页上的动画……可每每向身边人分享这些可爱的动画时（也许是他们不方便看吧），一般不会引起共鸣……</p>\n<p>在写这篇时，上面的动画一直反复，写着写着就傻傻地被逗笑一下……</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-d736311cf0ef9653.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p><a href=\"http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/\" target=\"_blank\" rel=\"noopener\">2016年3月20日</a> / <a href=\"http://yamida.org/author/rabbit/\" target=\"_blank\" rel=\"noopener\">芽蜜</a> / <a href=\"http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/#respond\" target=\"_blank\" rel=\"noopener\">0 COMMENTS</a></p>\n<p>今日春分……清早的大雨倾盆、雷声隆隆，加上一周的毛毛雨。到处湿漉漉，衣服湿答答……</p>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-bd5b31cc2a9883e8.gif?imageMogr2/auto-orient/strip\" alt=\"first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp\"></a><br>喜欢看google主页上的动画……可每每向身边人分享这些可爱的动画时（也许是他们不方便看吧），一般不会引起共鸣……</p>\n<p>在写这篇时，上面的动画一直反复，写着写着就傻傻地被逗笑一下……</p>\n"},{"title":"百度，广告","date":"2016-05-07T16:00:00.000Z","_content":"\n\n其实很久前就知道了，就怕给忘了，虽然现在google粉\n***\n### 1、登录账号。在百度首页下方的“ **使用百度前必读** ”，点击。\n[![20160114224221](http://upload-images.jianshu.io/upload_images/1171873-82a3b68905aea738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224221.png)\n \n### 2、接着在这个页面上找到 “ **隐私权保护声明** ”\n[![20160114224827](http://upload-images.jianshu.io/upload_images/1171873-f2c62ef3ff9d9db7.png)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224827.png)\n \n### 3、在右侧找到“ **个性化配置**  ”，并点击。\n[![20160114225041-1](http://upload-images.jianshu.io/upload_images/1171873-c30ca8f5d9fb35fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225041-1.png)\n \n### 4、点击“ 选择停用 ”\n[![20160114225912](http://upload-images.jianshu.io/upload_images/1171873-c584526647dafd6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225912.png)对，没错，藏得很隐蔽\n\n","source":"_posts/碎碎念/百度，广告.md","raw":"---\ntitle: 百度，广告\ndate: 2016.05.08\ntags: \ncategories: 随笔\n---\n\n\n其实很久前就知道了，就怕给忘了，虽然现在google粉\n***\n### 1、登录账号。在百度首页下方的“ **使用百度前必读** ”，点击。\n[![20160114224221](http://upload-images.jianshu.io/upload_images/1171873-82a3b68905aea738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224221.png)\n \n### 2、接着在这个页面上找到 “ **隐私权保护声明** ”\n[![20160114224827](http://upload-images.jianshu.io/upload_images/1171873-f2c62ef3ff9d9db7.png)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224827.png)\n \n### 3、在右侧找到“ **个性化配置**  ”，并点击。\n[![20160114225041-1](http://upload-images.jianshu.io/upload_images/1171873-c30ca8f5d9fb35fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225041-1.png)\n \n### 4、点击“ 选择停用 ”\n[![20160114225912](http://upload-images.jianshu.io/upload_images/1171873-c584526647dafd6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225912.png)对，没错，藏得很隐蔽\n\n","slug":"碎碎念/百度，广告","published":1,"updated":"2018-08-04T06:32:45.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc780040m4cmaxicogwh","content":"<p>其实很久前就知道了，就怕给忘了，虽然现在google粉</p>\n<hr>\n<h3 id=\"1、登录账号。在百度首页下方的“-使用百度前必读-”，点击。\"><a href=\"#1、登录账号。在百度首页下方的“-使用百度前必读-”，点击。\" class=\"headerlink\" title=\"1、登录账号。在百度首页下方的“ 使用百度前必读 ”，点击。\"></a>1、登录账号。在百度首页下方的“ <strong>使用百度前必读</strong> ”，点击。</h3><p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224221.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-82a3b68905aea738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160114224221\"></a></p>\n<h3 id=\"2、接着在这个页面上找到-“-隐私权保护声明-”\"><a href=\"#2、接着在这个页面上找到-“-隐私权保护声明-”\" class=\"headerlink\" title=\"2、接着在这个页面上找到 “ 隐私权保护声明 ”\"></a>2、接着在这个页面上找到 “ <strong>隐私权保护声明</strong> ”</h3><p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224827.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f2c62ef3ff9d9db7.png\" alt=\"20160114224827\"></a></p>\n<h3 id=\"3、在右侧找到“-个性化配置-”，并点击。\"><a href=\"#3、在右侧找到“-个性化配置-”，并点击。\" class=\"headerlink\" title=\"3、在右侧找到“ 个性化配置  ”，并点击。\"></a>3、在右侧找到“ <strong>个性化配置</strong>  ”，并点击。</h3><p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225041-1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-c30ca8f5d9fb35fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160114225041-1\"></a></p>\n<h3 id=\"4、点击“-选择停用-”\"><a href=\"#4、点击“-选择停用-”\" class=\"headerlink\" title=\"4、点击“ 选择停用 ”\"></a>4、点击“ 选择停用 ”</h3><p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225912.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-c584526647dafd6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160114225912\"></a>对，没错，藏得很隐蔽</p>\n","site":{"data":{}},"excerpt":"","more":"<p>其实很久前就知道了，就怕给忘了，虽然现在google粉</p>\n<hr>\n<h3 id=\"1、登录账号。在百度首页下方的“-使用百度前必读-”，点击。\"><a href=\"#1、登录账号。在百度首页下方的“-使用百度前必读-”，点击。\" class=\"headerlink\" title=\"1、登录账号。在百度首页下方的“ 使用百度前必读 ”，点击。\"></a>1、登录账号。在百度首页下方的“ <strong>使用百度前必读</strong> ”，点击。</h3><p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224221.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-82a3b68905aea738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160114224221\"></a></p>\n<h3 id=\"2、接着在这个页面上找到-“-隐私权保护声明-”\"><a href=\"#2、接着在这个页面上找到-“-隐私权保护声明-”\" class=\"headerlink\" title=\"2、接着在这个页面上找到 “ 隐私权保护声明 ”\"></a>2、接着在这个页面上找到 “ <strong>隐私权保护声明</strong> ”</h3><p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224827.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f2c62ef3ff9d9db7.png\" alt=\"20160114224827\"></a></p>\n<h3 id=\"3、在右侧找到“-个性化配置-”，并点击。\"><a href=\"#3、在右侧找到“-个性化配置-”，并点击。\" class=\"headerlink\" title=\"3、在右侧找到“ 个性化配置  ”，并点击。\"></a>3、在右侧找到“ <strong>个性化配置</strong>  ”，并点击。</h3><p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225041-1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-c30ca8f5d9fb35fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160114225041-1\"></a></p>\n<h3 id=\"4、点击“-选择停用-”\"><a href=\"#4、点击“-选择停用-”\" class=\"headerlink\" title=\"4、点击“ 选择停用 ”\"></a>4、点击“ 选择停用 ”</h3><p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225912.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-c584526647dafd6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160114225912\"></a>对，没错，藏得很隐蔽</p>\n"},{"title":"看几天韩剧的感想","date":"2016-04-15T04:55:00.000Z","_content":"\n\n\n近几天在看一部12年《幽灵》的剧，男主那忧愁的表情，眉眼间的信息传递，女主漂亮的脸蛋，露出可爱的门牙……剧情紧凑（后面8集就不知道了）……表示喜欢这部剧\n[![20160505](http://upload-images.jianshu.io/upload_images/1171873-44c5a8f2a7f24856.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160505.jpg)\n看剧很爽，代价也同样……\n就是每每躺在床上的空虚和充斥着满满的罪恶感，并且持续一个星期……\n这部剧竟然没有情感戏\n>喵了个咪。简书不能插音频链接。\n（嗯，其实本文自带bgm——Burn Out (inst.)，只不过有些人没听到而已）\n","source":"_posts/碎碎念/看几天韩剧的感想.md","raw":"---\ntitle: 看几天韩剧的感想\ndate: 2016.04.15 12:55\ntags: \ncategories: 日记本\n---\n\n\n\n近几天在看一部12年《幽灵》的剧，男主那忧愁的表情，眉眼间的信息传递，女主漂亮的脸蛋，露出可爱的门牙……剧情紧凑（后面8集就不知道了）……表示喜欢这部剧\n[![20160505](http://upload-images.jianshu.io/upload_images/1171873-44c5a8f2a7f24856.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160505.jpg)\n看剧很爽，代价也同样……\n就是每每躺在床上的空虚和充斥着满满的罪恶感，并且持续一个星期……\n这部剧竟然没有情感戏\n>喵了个咪。简书不能插音频链接。\n（嗯，其实本文自带bgm——Burn Out (inst.)，只不过有些人没听到而已）\n","slug":"碎碎念/看几天韩剧的感想","published":1,"updated":"2018-08-04T06:32:45.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7a0042m4cmf6h42kxw","content":"<p>近几天在看一部12年《幽灵》的剧，男主那忧愁的表情，眉眼间的信息传递，女主漂亮的脸蛋，露出可爱的门牙……剧情紧凑（后面8集就不知道了）……表示喜欢这部剧<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160505.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-44c5a8f2a7f24856.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160505\"></a><br>看剧很爽，代价也同样……<br>就是每每躺在床上的空虚和充斥着满满的罪恶感，并且持续一个星期……<br>这部剧竟然没有情感戏</p>\n<blockquote>\n<p>喵了个咪。简书不能插音频链接。<br>（嗯，其实本文自带bgm——Burn Out (inst.)，只不过有些人没听到而已）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>近几天在看一部12年《幽灵》的剧，男主那忧愁的表情，眉眼间的信息传递，女主漂亮的脸蛋，露出可爱的门牙……剧情紧凑（后面8集就不知道了）……表示喜欢这部剧<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160505.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-44c5a8f2a7f24856.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160505\"></a><br>看剧很爽，代价也同样……<br>就是每每躺在床上的空虚和充斥着满满的罪恶感，并且持续一个星期……<br>这部剧竟然没有情感戏</p>\n<blockquote>\n<p>喵了个咪。简书不能插音频链接。<br>（嗯，其实本文自带bgm——Burn Out (inst.)，只不过有些人没听到而已）</p>\n</blockquote>\n"},{"title":"织梦","date":"2016-03-11T10:12:00.000Z","_content":"\n[![liuli](http://upload-images.jianshu.io/upload_images/1171873-1816be201f6b249f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/11/%e7%bb%87%e6%a2%a6/)\n\n\n事实证明，编程对我而言是最完美的职业。现在我还在筑造世界，但不是以故事的形式，而是以代码的方式。编程赋予我神器的力量，使我有能力建立自己的小宇宙，按照自己的规则和惯例运行。仅以逻辑的力量就可以从无生有，创造事物。\n——Linda Liukas","source":"_posts/碎碎念/织梦.md","raw":"---\ntitle: 织梦\ndate: 2016.03.11 18:12\ntags: \ncategories: 日记本\n---\n\n[![liuli](http://upload-images.jianshu.io/upload_images/1171873-1816be201f6b249f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/11/%e7%bb%87%e6%a2%a6/)\n\n\n事实证明，编程对我而言是最完美的职业。现在我还在筑造世界，但不是以故事的形式，而是以代码的方式。编程赋予我神器的力量，使我有能力建立自己的小宇宙，按照自己的规则和惯例运行。仅以逻辑的力量就可以从无生有，创造事物。\n——Linda Liukas","slug":"碎碎念/织梦","published":1,"updated":"2018-08-04T06:32:45.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7c0044m4cmokpuqh1c","content":"<p><a href=\"http://yamida.org/2016/03/11/%e7%bb%87%e6%a2%a6/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1816be201f6b249f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"liuli\"></a></p>\n<p>事实证明，编程对我而言是最完美的职业。现在我还在筑造世界，但不是以故事的形式，而是以代码的方式。编程赋予我神器的力量，使我有能力建立自己的小宇宙，按照自己的规则和惯例运行。仅以逻辑的力量就可以从无生有，创造事物。<br>——Linda Liukas</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yamida.org/2016/03/11/%e7%bb%87%e6%a2%a6/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1816be201f6b249f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"liuli\"></a></p>\n<p>事实证明，编程对我而言是最完美的职业。现在我还在筑造世界，但不是以故事的形式，而是以代码的方式。编程赋予我神器的力量，使我有能力建立自己的小宇宙，按照自己的规则和惯例运行。仅以逻辑的力量就可以从无生有，创造事物。<br>——Linda Liukas</p>\n"},{"title":"那些住在手机里的朋友","date":"2016-01-15T05:25:00.000Z","_content":"\n[![](http://upload-images.jianshu.io/upload_images/1171873-882d2799c15cfa9c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/02/23/%e9%82%a3%e4%ba%9b%e4%bd%8f%e5%9c%a8%e6%89%8b%e6%9c%ba%e9%87%8c%e7%9a%84%e6%9c%8b%e5%8f%8b/)\n\n在这个通讯十分发达的时代，无论是初次相见还是老友重逢，我们都会交换手机号码。\n\n初次相识的喜悦，让你觉得似乎找到了知音。但渐渐地就不怎么联系了，接下来就是偶尔在节假日发短信问候。偶尔有一天，你发现，你发出的信息石沉大海。几次没有回音后，你也许会删掉那一个偶然在人海中拾来的联系方式，把那个偶尔认识的人完全淡忘。这个曾经的朋友，便像人海中的一朵浪花，偶尔与你相遇，然后被你记忆的余光蒸发。\n\n你还会与新的人相识，你还会不断地让新朋友住进你的手机。就这样，我们不知不觉中就成为住在别人手机里的朋友，也变成了别人手机里匆忙的过客。你有多少住在手机里的朋友？\n\n最怕的是突然有一天，你的手机不见了，通信录上的朋友们似乎一下子全部消失了，你的心也空掉了一块，就像不见了珍贵的首饰，令人难过，也许还能通过其他方式寻回，而那些浪花般有缘邂逅过的朋友，因一次偶然不见了他们的号码，这一生，也许你永远不会再与他们相遇，虽然心里也会觉得可惜，但就像每天梳头掉几根头发一样，并不太在意。\n![](http://upload-images.jianshu.io/upload_images/1171873-0055ad757f54ee82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当你某天想起曾经相交频繁的友人，满怀热情地打电话给他，他只是淡淡的回了一句：“喂，你是谁？”你的热情骤降到零点，根本没有心思再说什么，神伤地挂掉电话。也许对方早已把你的电话号码删掉了，也许，对方也是因为手机被盗或者是换号等原因丢失了你的号码，反正，你不再是住在他手机里的朋友。\n\n我们的社交圈子在扩大，交往常常目的明确，点个头的熟人渐渐多了，交心的友人却渐渐少了。你我，只是住在对方手机里的朋友，感情如浪潮退去后便不留痕迹。\n\n","source":"_posts/碎碎念/那些住在手机里的朋友.md","raw":"---\ntitle: 那些住在手机里的朋友\ndate: 2016.01.15 13:25\ntags: \ncategories: 日记本\n---\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-882d2799c15cfa9c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/02/23/%e9%82%a3%e4%ba%9b%e4%bd%8f%e5%9c%a8%e6%89%8b%e6%9c%ba%e9%87%8c%e7%9a%84%e6%9c%8b%e5%8f%8b/)\n\n在这个通讯十分发达的时代，无论是初次相见还是老友重逢，我们都会交换手机号码。\n\n初次相识的喜悦，让你觉得似乎找到了知音。但渐渐地就不怎么联系了，接下来就是偶尔在节假日发短信问候。偶尔有一天，你发现，你发出的信息石沉大海。几次没有回音后，你也许会删掉那一个偶然在人海中拾来的联系方式，把那个偶尔认识的人完全淡忘。这个曾经的朋友，便像人海中的一朵浪花，偶尔与你相遇，然后被你记忆的余光蒸发。\n\n你还会与新的人相识，你还会不断地让新朋友住进你的手机。就这样，我们不知不觉中就成为住在别人手机里的朋友，也变成了别人手机里匆忙的过客。你有多少住在手机里的朋友？\n\n最怕的是突然有一天，你的手机不见了，通信录上的朋友们似乎一下子全部消失了，你的心也空掉了一块，就像不见了珍贵的首饰，令人难过，也许还能通过其他方式寻回，而那些浪花般有缘邂逅过的朋友，因一次偶然不见了他们的号码，这一生，也许你永远不会再与他们相遇，虽然心里也会觉得可惜，但就像每天梳头掉几根头发一样，并不太在意。\n![](http://upload-images.jianshu.io/upload_images/1171873-0055ad757f54ee82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当你某天想起曾经相交频繁的友人，满怀热情地打电话给他，他只是淡淡的回了一句：“喂，你是谁？”你的热情骤降到零点，根本没有心思再说什么，神伤地挂掉电话。也许对方早已把你的电话号码删掉了，也许，对方也是因为手机被盗或者是换号等原因丢失了你的号码，反正，你不再是住在他手机里的朋友。\n\n我们的社交圈子在扩大，交往常常目的明确，点个头的熟人渐渐多了，交心的友人却渐渐少了。你我，只是住在对方手机里的朋友，感情如浪潮退去后便不留痕迹。\n\n","slug":"碎碎念/那些住在手机里的朋友","published":1,"updated":"2018-08-04T06:32:45.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7e0046m4cmpwacsmfb","content":"<p><a href=\"http://yamida.org/2016/02/23/%e9%82%a3%e4%ba%9b%e4%bd%8f%e5%9c%a8%e6%89%8b%e6%9c%ba%e9%87%8c%e7%9a%84%e6%9c%8b%e5%8f%8b/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-882d2799c15cfa9c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p>在这个通讯十分发达的时代，无论是初次相见还是老友重逢，我们都会交换手机号码。</p>\n<p>初次相识的喜悦，让你觉得似乎找到了知音。但渐渐地就不怎么联系了，接下来就是偶尔在节假日发短信问候。偶尔有一天，你发现，你发出的信息石沉大海。几次没有回音后，你也许会删掉那一个偶然在人海中拾来的联系方式，把那个偶尔认识的人完全淡忘。这个曾经的朋友，便像人海中的一朵浪花，偶尔与你相遇，然后被你记忆的余光蒸发。</p>\n<p>你还会与新的人相识，你还会不断地让新朋友住进你的手机。就这样，我们不知不觉中就成为住在别人手机里的朋友，也变成了别人手机里匆忙的过客。你有多少住在手机里的朋友？</p>\n<p>最怕的是突然有一天，你的手机不见了，通信录上的朋友们似乎一下子全部消失了，你的心也空掉了一块，就像不见了珍贵的首饰，令人难过，也许还能通过其他方式寻回，而那些浪花般有缘邂逅过的朋友，因一次偶然不见了他们的号码，这一生，也许你永远不会再与他们相遇，虽然心里也会觉得可惜，但就像每天梳头掉几根头发一样，并不太在意。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0055ad757f54ee82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>当你某天想起曾经相交频繁的友人，满怀热情地打电话给他，他只是淡淡的回了一句：“喂，你是谁？”你的热情骤降到零点，根本没有心思再说什么，神伤地挂掉电话。也许对方早已把你的电话号码删掉了，也许，对方也是因为手机被盗或者是换号等原因丢失了你的号码，反正，你不再是住在他手机里的朋友。</p>\n<p>我们的社交圈子在扩大，交往常常目的明确，点个头的熟人渐渐多了，交心的友人却渐渐少了。你我，只是住在对方手机里的朋友，感情如浪潮退去后便不留痕迹。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yamida.org/2016/02/23/%e9%82%a3%e4%ba%9b%e4%bd%8f%e5%9c%a8%e6%89%8b%e6%9c%ba%e9%87%8c%e7%9a%84%e6%9c%8b%e5%8f%8b/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-882d2799c15cfa9c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<p>在这个通讯十分发达的时代，无论是初次相见还是老友重逢，我们都会交换手机号码。</p>\n<p>初次相识的喜悦，让你觉得似乎找到了知音。但渐渐地就不怎么联系了，接下来就是偶尔在节假日发短信问候。偶尔有一天，你发现，你发出的信息石沉大海。几次没有回音后，你也许会删掉那一个偶然在人海中拾来的联系方式，把那个偶尔认识的人完全淡忘。这个曾经的朋友，便像人海中的一朵浪花，偶尔与你相遇，然后被你记忆的余光蒸发。</p>\n<p>你还会与新的人相识，你还会不断地让新朋友住进你的手机。就这样，我们不知不觉中就成为住在别人手机里的朋友，也变成了别人手机里匆忙的过客。你有多少住在手机里的朋友？</p>\n<p>最怕的是突然有一天，你的手机不见了，通信录上的朋友们似乎一下子全部消失了，你的心也空掉了一块，就像不见了珍贵的首饰，令人难过，也许还能通过其他方式寻回，而那些浪花般有缘邂逅过的朋友，因一次偶然不见了他们的号码，这一生，也许你永远不会再与他们相遇，虽然心里也会觉得可惜，但就像每天梳头掉几根头发一样，并不太在意。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0055ad757f54ee82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>当你某天想起曾经相交频繁的友人，满怀热情地打电话给他，他只是淡淡的回了一句：“喂，你是谁？”你的热情骤降到零点，根本没有心思再说什么，神伤地挂掉电话。也许对方早已把你的电话号码删掉了，也许，对方也是因为手机被盗或者是换号等原因丢失了你的号码，反正，你不再是住在他手机里的朋友。</p>\n<p>我们的社交圈子在扩大，交往常常目的明确，点个头的熟人渐渐多了，交心的友人却渐渐少了。你我，只是住在对方手机里的朋友，感情如浪潮退去后便不留痕迹。</p>\n"},{"title":"还没有晾干的旧伞，闷在寂寞的房里","date":"2016-03-17T14:16:00.000Z","_content":"\n[![20160317](http://upload-images.jianshu.io/upload_images/1171873-e191b2876ea9a256.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/17/%e8%bf%98%e6%b2%a1%e6%9c%89%e6%99%be%e5%b9%b2%e7%9a%84%e6%97%a7%e4%bc%9e%ef%bc%8c%e9%97%b7%e5%9c%a8%e5%af%82%e5%af%9e%e7%9a%84%e6%88%bf%e9%87%8c/)\n\n雾蒙蒙的天持续了两周。每个早晨都能在走廊上看到零星雨点孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。\n\n昨天陪了五年的伞说它累了，想歇息一下。只好去附近店铺买把新的。特意选了一把和原来颜色（紫色），大小一样的伞。\n\n\n身边总有认识的看到我大伞，随口说一句“卧槽，这伞这么大”。通常会开玩笑回道“ 专为我未来的雨中情人准备的 ”……\n\n\n雨中，有你的痕迹，足以撑过这场雨。\n \n致现有的雨中情人——伞\n\n>这两天鼻梁上长了两颗痘痘，于是戴眼镜成了噩梦……\n\n","source":"_posts/碎碎念/还没有晾干的旧伞，闷在寂寞的房里.md","raw":"---\ntitle: 还没有晾干的旧伞，闷在寂寞的房里\ndate: 2016.03.17 22:16\ntags: \ncategories: 日记本\n---\n\n[![20160317](http://upload-images.jianshu.io/upload_images/1171873-e191b2876ea9a256.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://yamida.org/2016/03/17/%e8%bf%98%e6%b2%a1%e6%9c%89%e6%99%be%e5%b9%b2%e7%9a%84%e6%97%a7%e4%bc%9e%ef%bc%8c%e9%97%b7%e5%9c%a8%e5%af%82%e5%af%9e%e7%9a%84%e6%88%bf%e9%87%8c/)\n\n雾蒙蒙的天持续了两周。每个早晨都能在走廊上看到零星雨点孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。\n\n昨天陪了五年的伞说它累了，想歇息一下。只好去附近店铺买把新的。特意选了一把和原来颜色（紫色），大小一样的伞。\n\n\n身边总有认识的看到我大伞，随口说一句“卧槽，这伞这么大”。通常会开玩笑回道“ 专为我未来的雨中情人准备的 ”……\n\n\n雨中，有你的痕迹，足以撑过这场雨。\n \n致现有的雨中情人——伞\n\n>这两天鼻梁上长了两颗痘痘，于是戴眼镜成了噩梦……\n\n","slug":"碎碎念/还没有晾干的旧伞，闷在寂寞的房里","published":1,"updated":"2018-08-04T06:32:45.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7g0048m4cmpf9vlm9i","content":"<p><a href=\"http://yamida.org/2016/03/17/%e8%bf%98%e6%b2%a1%e6%9c%89%e6%99%be%e5%b9%b2%e7%9a%84%e6%97%a7%e4%bc%9e%ef%bc%8c%e9%97%b7%e5%9c%a8%e5%af%82%e5%af%9e%e7%9a%84%e6%88%bf%e9%87%8c/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-e191b2876ea9a256.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160317\"></a></p>\n<p>雾蒙蒙的天持续了两周。每个早晨都能在走廊上看到零星雨点孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。</p>\n<p>昨天陪了五年的伞说它累了，想歇息一下。只好去附近店铺买把新的。特意选了一把和原来颜色（紫色），大小一样的伞。</p>\n<p>身边总有认识的看到我大伞，随口说一句“卧槽，这伞这么大”。通常会开玩笑回道“ 专为我未来的雨中情人准备的 ”……</p>\n<p>雨中，有你的痕迹，足以撑过这场雨。</p>\n<p>致现有的雨中情人——伞</p>\n<blockquote>\n<p>这两天鼻梁上长了两颗痘痘，于是戴眼镜成了噩梦……</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yamida.org/2016/03/17/%e8%bf%98%e6%b2%a1%e6%9c%89%e6%99%be%e5%b9%b2%e7%9a%84%e6%97%a7%e4%bc%9e%ef%bc%8c%e9%97%b7%e5%9c%a8%e5%af%82%e5%af%9e%e7%9a%84%e6%88%bf%e9%87%8c/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-e191b2876ea9a256.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20160317\"></a></p>\n<p>雾蒙蒙的天持续了两周。每个早晨都能在走廊上看到零星雨点孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。</p>\n<p>昨天陪了五年的伞说它累了，想歇息一下。只好去附近店铺买把新的。特意选了一把和原来颜色（紫色），大小一样的伞。</p>\n<p>身边总有认识的看到我大伞，随口说一句“卧槽，这伞这么大”。通常会开玩笑回道“ 专为我未来的雨中情人准备的 ”……</p>\n<p>雨中，有你的痕迹，足以撑过这场雨。</p>\n<p>致现有的雨中情人——伞</p>\n<blockquote>\n<p>这两天鼻梁上长了两颗痘痘，于是戴眼镜成了噩梦……</p>\n</blockquote>\n"},{"title":"麻雀告诉我们的故事","date":"2016-03-13T16:00:00.000Z","_content":"\n一对父子坐在一个大树下，儿子在看着报纸，父亲在望着树上。\n\n父亲问：“你看树上那是什么呀？”\n儿子低着头看报纸，“那是麻雀。”\n\n过了一会，父亲又问：“树上的那都是什么呀？”\n儿子有点不耐烦了，说：“不是告诉你了吗？那是麻雀！”\n\n沉默…\n\n一会儿，父亲又指着树枝问：“这树上密密麻麻的是什么呀？”\n儿子噌地一下站起来，甩手把报纸一扔，气极了，扭过头对着父亲的耳朵大吼了起来：“你特么是不是有病啊？！！不是告诉你了那是该死的麻雀吗！！烦不烦啊你！”\n\n树上的麻雀惊得四散飞去。\n\n父亲很安静地坐着，看着暴跳如雷的儿子，安静得像只乖巧的猫咪，他的目光落在空落落的大树，落在远处随风摇摆的秋千，最后又回到了眼前青筋暴起的儿子，没有说话，仿佛在静静等待着什么…\n\n树上慢悠悠地飘落了一片枯叶，“簌”，被儿子狠狠地踩在了脚下。\n\n过了好久，儿子终于平静下来，坐回位子上，父亲开始哆哆嗦嗦地在身上摸索着，似乎在找一个很重要的物件。\n\n他掏出一本小小的日记本，小心翼翼的翻开其中的一页来，那昏黄的纸张上镶嵌着一尾毫不起眼的羽毛，那是鸟的羽毛。\n\n“你三岁的时候，常常跟着我坐在树底下，就在这里坐着”，\n他轻轻拍了拍木凳子——那条随着年岁的磨砺变得的些许破败的板条凳，低头望着地上绿油油的小草，自顾自地叙说着，\n\n​“当时我正在看书，你奶声奶气地问我：‘树上的那些是什么呀？’\n我说：‘那是麻雀，会唱歌的麻雀。’\n\n过了一会，你又指着树丫问我：‘树上的那个是什么呀？’\n我说：‘那是麻雀，会飞上天的麻雀。’ ”\n\n 父亲脸上的沟壑里填满了幸福的微笑，湿润的双眸仍然盯着小草，似乎那是他倾述的对象一般，\n\n“一只麻雀飞走了，打落了一根羽毛，\n你开心地追逐着，我把羽毛轻轻捧在手里递给你，\n你说：‘爸爸，我可以把它养起来吗？’\n我问：‘为什么呀？’\n你开心地张开双臂说：‘这样的话，等我长大以后就有好多好多羽毛，就可以像麻雀一样飞上天，就可以带着爸爸一起到处去玩了！’\n你很高兴的把它交到我手掌心，当你在秋千上荡着的时候，我把这片羽毛轻轻地收藏在我的日记本里，这是我儿子送给我的第一份礼物。”\n\n父亲舒了一口气，转过头来望着儿子。\n\n儿子早已，泪流满面。\n\n这是《飞越老人院》里老葛讲给他孙子的故事，故事还未结尾，一滴泪却悄然滑过我的脸颊，我想起了记忆中似乎永远不会疲惫的父亲，\n在我某一天归家的时候，突然发现，白发早已爬满他的黑发，而我回家的次数却越来越少……\n当有一天，父母都老了，我想安静地守在他们身边听他们讲，“那时候你才7岁……”\n![](http://upload-images.jianshu.io/upload_images/1171873-08196ed305a7977c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n***注：文章转载自[碎碎念](http://zhuweisheng.com.cn/)《[麻雀告诉我们的故事](http://zhuweisheng.com.cn/diary/love-your-old-family/)》本文首发于微信公众号：imdaoke，原标题为《像小时候那样耐心地对待我好吗？儿子。》——详细请查看 微信公众号imdaoke-历史消息。***\n>真的是含泪看完，因为我爸也曾心平气和地给我讲过极其相似的一段话，就在他反复问我同一个问题的时候而我却极其不耐烦……不知从什么时候对待家人变成如此这般，小时候的我可不这样……是时候反省一下了……\n\n","source":"_posts/碎碎念/麻雀告诉我们的故事.md","raw":"---\ntitle: 麻雀告诉我们的故事\ndate: 2016.03.14 00:00\ntags: \ncategories: 日记本\n---\n\n一对父子坐在一个大树下，儿子在看着报纸，父亲在望着树上。\n\n父亲问：“你看树上那是什么呀？”\n儿子低着头看报纸，“那是麻雀。”\n\n过了一会，父亲又问：“树上的那都是什么呀？”\n儿子有点不耐烦了，说：“不是告诉你了吗？那是麻雀！”\n\n沉默…\n\n一会儿，父亲又指着树枝问：“这树上密密麻麻的是什么呀？”\n儿子噌地一下站起来，甩手把报纸一扔，气极了，扭过头对着父亲的耳朵大吼了起来：“你特么是不是有病啊？！！不是告诉你了那是该死的麻雀吗！！烦不烦啊你！”\n\n树上的麻雀惊得四散飞去。\n\n父亲很安静地坐着，看着暴跳如雷的儿子，安静得像只乖巧的猫咪，他的目光落在空落落的大树，落在远处随风摇摆的秋千，最后又回到了眼前青筋暴起的儿子，没有说话，仿佛在静静等待着什么…\n\n树上慢悠悠地飘落了一片枯叶，“簌”，被儿子狠狠地踩在了脚下。\n\n过了好久，儿子终于平静下来，坐回位子上，父亲开始哆哆嗦嗦地在身上摸索着，似乎在找一个很重要的物件。\n\n他掏出一本小小的日记本，小心翼翼的翻开其中的一页来，那昏黄的纸张上镶嵌着一尾毫不起眼的羽毛，那是鸟的羽毛。\n\n“你三岁的时候，常常跟着我坐在树底下，就在这里坐着”，\n他轻轻拍了拍木凳子——那条随着年岁的磨砺变得的些许破败的板条凳，低头望着地上绿油油的小草，自顾自地叙说着，\n\n​“当时我正在看书，你奶声奶气地问我：‘树上的那些是什么呀？’\n我说：‘那是麻雀，会唱歌的麻雀。’\n\n过了一会，你又指着树丫问我：‘树上的那个是什么呀？’\n我说：‘那是麻雀，会飞上天的麻雀。’ ”\n\n 父亲脸上的沟壑里填满了幸福的微笑，湿润的双眸仍然盯着小草，似乎那是他倾述的对象一般，\n\n“一只麻雀飞走了，打落了一根羽毛，\n你开心地追逐着，我把羽毛轻轻捧在手里递给你，\n你说：‘爸爸，我可以把它养起来吗？’\n我问：‘为什么呀？’\n你开心地张开双臂说：‘这样的话，等我长大以后就有好多好多羽毛，就可以像麻雀一样飞上天，就可以带着爸爸一起到处去玩了！’\n你很高兴的把它交到我手掌心，当你在秋千上荡着的时候，我把这片羽毛轻轻地收藏在我的日记本里，这是我儿子送给我的第一份礼物。”\n\n父亲舒了一口气，转过头来望着儿子。\n\n儿子早已，泪流满面。\n\n这是《飞越老人院》里老葛讲给他孙子的故事，故事还未结尾，一滴泪却悄然滑过我的脸颊，我想起了记忆中似乎永远不会疲惫的父亲，\n在我某一天归家的时候，突然发现，白发早已爬满他的黑发，而我回家的次数却越来越少……\n当有一天，父母都老了，我想安静地守在他们身边听他们讲，“那时候你才7岁……”\n![](http://upload-images.jianshu.io/upload_images/1171873-08196ed305a7977c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n***注：文章转载自[碎碎念](http://zhuweisheng.com.cn/)《[麻雀告诉我们的故事](http://zhuweisheng.com.cn/diary/love-your-old-family/)》本文首发于微信公众号：imdaoke，原标题为《像小时候那样耐心地对待我好吗？儿子。》——详细请查看 微信公众号imdaoke-历史消息。***\n>真的是含泪看完，因为我爸也曾心平气和地给我讲过极其相似的一段话，就在他反复问我同一个问题的时候而我却极其不耐烦……不知从什么时候对待家人变成如此这般，小时候的我可不这样……是时候反省一下了……\n\n","slug":"碎碎念/麻雀告诉我们的故事","published":1,"updated":"2018-08-04T06:32:45.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7h004am4cmzz0dsvx0","content":"<p>一对父子坐在一个大树下，儿子在看着报纸，父亲在望着树上。</p>\n<p>父亲问：“你看树上那是什么呀？”<br>儿子低着头看报纸，“那是麻雀。”</p>\n<p>过了一会，父亲又问：“树上的那都是什么呀？”<br>儿子有点不耐烦了，说：“不是告诉你了吗？那是麻雀！”</p>\n<p>沉默…</p>\n<p>一会儿，父亲又指着树枝问：“这树上密密麻麻的是什么呀？”<br>儿子噌地一下站起来，甩手把报纸一扔，气极了，扭过头对着父亲的耳朵大吼了起来：“你特么是不是有病啊？！！不是告诉你了那是该死的麻雀吗！！烦不烦啊你！”</p>\n<p>树上的麻雀惊得四散飞去。</p>\n<p>父亲很安静地坐着，看着暴跳如雷的儿子，安静得像只乖巧的猫咪，他的目光落在空落落的大树，落在远处随风摇摆的秋千，最后又回到了眼前青筋暴起的儿子，没有说话，仿佛在静静等待着什么…</p>\n<p>树上慢悠悠地飘落了一片枯叶，“簌”，被儿子狠狠地踩在了脚下。</p>\n<p>过了好久，儿子终于平静下来，坐回位子上，父亲开始哆哆嗦嗦地在身上摸索着，似乎在找一个很重要的物件。</p>\n<p>他掏出一本小小的日记本，小心翼翼的翻开其中的一页来，那昏黄的纸张上镶嵌着一尾毫不起眼的羽毛，那是鸟的羽毛。</p>\n<p>“你三岁的时候，常常跟着我坐在树底下，就在这里坐着”，<br>他轻轻拍了拍木凳子——那条随着年岁的磨砺变得的些许破败的板条凳，低头望着地上绿油油的小草，自顾自地叙说着，</p>\n<p>​“当时我正在看书，你奶声奶气地问我：‘树上的那些是什么呀？’<br>我说：‘那是麻雀，会唱歌的麻雀。’</p>\n<p>过了一会，你又指着树丫问我：‘树上的那个是什么呀？’<br>我说：‘那是麻雀，会飞上天的麻雀。’ ”</p>\n<p> 父亲脸上的沟壑里填满了幸福的微笑，湿润的双眸仍然盯着小草，似乎那是他倾述的对象一般，</p>\n<p>“一只麻雀飞走了，打落了一根羽毛，<br>你开心地追逐着，我把羽毛轻轻捧在手里递给你，<br>你说：‘爸爸，我可以把它养起来吗？’<br>我问：‘为什么呀？’<br>你开心地张开双臂说：‘这样的话，等我长大以后就有好多好多羽毛，就可以像麻雀一样飞上天，就可以带着爸爸一起到处去玩了！’<br>你很高兴的把它交到我手掌心，当你在秋千上荡着的时候，我把这片羽毛轻轻地收藏在我的日记本里，这是我儿子送给我的第一份礼物。”</p>\n<p>父亲舒了一口气，转过头来望着儿子。</p>\n<p>儿子早已，泪流满面。</p>\n<p>这是《飞越老人院》里老葛讲给他孙子的故事，故事还未结尾，一滴泪却悄然滑过我的脸颊，我想起了记忆中似乎永远不会疲惫的父亲，<br>在我某一天归家的时候，突然发现，白发早已爬满他的黑发，而我回家的次数却越来越少……<br>当有一天，父母都老了，我想安静地守在他们身边听他们讲，“那时候你才7岁……”<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-08196ed305a7977c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong><em>注：文章转载自<a href=\"http://zhuweisheng.com.cn/\" target=\"_blank\" rel=\"noopener\">碎碎念</a>《<a href=\"http://zhuweisheng.com.cn/diary/love-your-old-family/\" target=\"_blank\" rel=\"noopener\">麻雀告诉我们的故事</a>》本文首发于微信公众号：imdaoke，原标题为《像小时候那样耐心地对待我好吗？儿子。》——详细请查看 微信公众号imdaoke-历史消息。</em></strong></p>\n<blockquote>\n<p>真的是含泪看完，因为我爸也曾心平气和地给我讲过极其相似的一段话，就在他反复问我同一个问题的时候而我却极其不耐烦……不知从什么时候对待家人变成如此这般，小时候的我可不这样……是时候反省一下了……</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>一对父子坐在一个大树下，儿子在看着报纸，父亲在望着树上。</p>\n<p>父亲问：“你看树上那是什么呀？”<br>儿子低着头看报纸，“那是麻雀。”</p>\n<p>过了一会，父亲又问：“树上的那都是什么呀？”<br>儿子有点不耐烦了，说：“不是告诉你了吗？那是麻雀！”</p>\n<p>沉默…</p>\n<p>一会儿，父亲又指着树枝问：“这树上密密麻麻的是什么呀？”<br>儿子噌地一下站起来，甩手把报纸一扔，气极了，扭过头对着父亲的耳朵大吼了起来：“你特么是不是有病啊？！！不是告诉你了那是该死的麻雀吗！！烦不烦啊你！”</p>\n<p>树上的麻雀惊得四散飞去。</p>\n<p>父亲很安静地坐着，看着暴跳如雷的儿子，安静得像只乖巧的猫咪，他的目光落在空落落的大树，落在远处随风摇摆的秋千，最后又回到了眼前青筋暴起的儿子，没有说话，仿佛在静静等待着什么…</p>\n<p>树上慢悠悠地飘落了一片枯叶，“簌”，被儿子狠狠地踩在了脚下。</p>\n<p>过了好久，儿子终于平静下来，坐回位子上，父亲开始哆哆嗦嗦地在身上摸索着，似乎在找一个很重要的物件。</p>\n<p>他掏出一本小小的日记本，小心翼翼的翻开其中的一页来，那昏黄的纸张上镶嵌着一尾毫不起眼的羽毛，那是鸟的羽毛。</p>\n<p>“你三岁的时候，常常跟着我坐在树底下，就在这里坐着”，<br>他轻轻拍了拍木凳子——那条随着年岁的磨砺变得的些许破败的板条凳，低头望着地上绿油油的小草，自顾自地叙说着，</p>\n<p>​“当时我正在看书，你奶声奶气地问我：‘树上的那些是什么呀？’<br>我说：‘那是麻雀，会唱歌的麻雀。’</p>\n<p>过了一会，你又指着树丫问我：‘树上的那个是什么呀？’<br>我说：‘那是麻雀，会飞上天的麻雀。’ ”</p>\n<p> 父亲脸上的沟壑里填满了幸福的微笑，湿润的双眸仍然盯着小草，似乎那是他倾述的对象一般，</p>\n<p>“一只麻雀飞走了，打落了一根羽毛，<br>你开心地追逐着，我把羽毛轻轻捧在手里递给你，<br>你说：‘爸爸，我可以把它养起来吗？’<br>我问：‘为什么呀？’<br>你开心地张开双臂说：‘这样的话，等我长大以后就有好多好多羽毛，就可以像麻雀一样飞上天，就可以带着爸爸一起到处去玩了！’<br>你很高兴的把它交到我手掌心，当你在秋千上荡着的时候，我把这片羽毛轻轻地收藏在我的日记本里，这是我儿子送给我的第一份礼物。”</p>\n<p>父亲舒了一口气，转过头来望着儿子。</p>\n<p>儿子早已，泪流满面。</p>\n<p>这是《飞越老人院》里老葛讲给他孙子的故事，故事还未结尾，一滴泪却悄然滑过我的脸颊，我想起了记忆中似乎永远不会疲惫的父亲，<br>在我某一天归家的时候，突然发现，白发早已爬满他的黑发，而我回家的次数却越来越少……<br>当有一天，父母都老了，我想安静地守在他们身边听他们讲，“那时候你才7岁……”<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-08196ed305a7977c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong><em>注：文章转载自<a href=\"http://zhuweisheng.com.cn/\" target=\"_blank\" rel=\"noopener\">碎碎念</a>《<a href=\"http://zhuweisheng.com.cn/diary/love-your-old-family/\" target=\"_blank\" rel=\"noopener\">麻雀告诉我们的故事</a>》本文首发于微信公众号：imdaoke，原标题为《像小时候那样耐心地对待我好吗？儿子。》——详细请查看 微信公众号imdaoke-历史消息。</em></strong></p>\n<blockquote>\n<p>真的是含泪看完，因为我爸也曾心平气和地给我讲过极其相似的一段话，就在他反复问我同一个问题的时候而我却极其不耐烦……不知从什么时候对待家人变成如此这般，小时候的我可不这样……是时候反省一下了……</p>\n</blockquote>\n"},{"title":"IaaS、SaaS 和 PaaS 的区别","date":"2018-08-01T06:49:18.000Z","_content":" - **IaaS**是卖笔记本电脑的，\n - **PaaS**卖操作系统的（比如windows），\n - **SaaS**是卖应用程序的（比如Office等办公软件，普通小白用户能直接用的东西）\n\n从售卖数量上来说，卖笔记本本身的**IaaS**大于卖电脑操作系统的**PaaS**，但是利润率正好反过来，卖操作系统的**PaaS**更赚钱，所以微软的头号摇钱树就是office；\n\n一个行业刚兴起的时候，一般是卖硬件的最赚钱。打个比方，智能手机刚兴起的时候是苹果最赚钱，其次赚钱的是卖操作系统的，例如小米等，最不赚钱的是卖应用程序的比如腾讯；\n\n但是随着时间推移和行业的发展，利润中心会逐步向后移，市场成熟后，利润都集中到应用程序（**SaaS**）上，因为应用程序才是普通用户最终接触到，直接能使用的。\n\n大概是酱紫。\n\n上面这个比喻使用和计算机领域相关的东西来比喻的，如果用日常生活中的东西来比喻的话：\n - IaaS是政府出租土地的，可以种地，可以盖楼，相当于出租资源；\n - PaaS是地产开发商，盖了楼卖毛坯房的，相当于有了应用的架子，但是并不能给最终用户使用；\n - SaaS是装修队，根据用户需求把房子装修出来给不同需求的人住，面向最终用户。\n\n你也可以想象一下中国地产的发展情况，20世纪时候成片出租土地最赚钱，21世纪初的时候是地产开放商最赚钱的时候，而现在房产泡沫没有之前那么繁荣了，利润点也就慢慢往诸如房产交易商、软装公司转移了~\n\n> 原文来自 [知乎](https://www.zhihu.com/question/20387284)","source":"_posts/科普/IaaS、SaaS 和 PaaS 的区别.md","raw":"---\ntitle:  IaaS、SaaS 和 PaaS 的区别\ndate: 2018-08-01 14:49:18\ntags: 科普\ncategories: 科普\n---\n - **IaaS**是卖笔记本电脑的，\n - **PaaS**卖操作系统的（比如windows），\n - **SaaS**是卖应用程序的（比如Office等办公软件，普通小白用户能直接用的东西）\n\n从售卖数量上来说，卖笔记本本身的**IaaS**大于卖电脑操作系统的**PaaS**，但是利润率正好反过来，卖操作系统的**PaaS**更赚钱，所以微软的头号摇钱树就是office；\n\n一个行业刚兴起的时候，一般是卖硬件的最赚钱。打个比方，智能手机刚兴起的时候是苹果最赚钱，其次赚钱的是卖操作系统的，例如小米等，最不赚钱的是卖应用程序的比如腾讯；\n\n但是随着时间推移和行业的发展，利润中心会逐步向后移，市场成熟后，利润都集中到应用程序（**SaaS**）上，因为应用程序才是普通用户最终接触到，直接能使用的。\n\n大概是酱紫。\n\n上面这个比喻使用和计算机领域相关的东西来比喻的，如果用日常生活中的东西来比喻的话：\n - IaaS是政府出租土地的，可以种地，可以盖楼，相当于出租资源；\n - PaaS是地产开发商，盖了楼卖毛坯房的，相当于有了应用的架子，但是并不能给最终用户使用；\n - SaaS是装修队，根据用户需求把房子装修出来给不同需求的人住，面向最终用户。\n\n你也可以想象一下中国地产的发展情况，20世纪时候成片出租土地最赚钱，21世纪初的时候是地产开放商最赚钱的时候，而现在房产泡沫没有之前那么繁荣了，利润点也就慢慢往诸如房产交易商、软装公司转移了~\n\n> 原文来自 [知乎](https://www.zhihu.com/question/20387284)","slug":"科普/IaaS、SaaS 和 PaaS 的区别","published":1,"updated":"2018-08-04T06:32:45.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7j004cm4cmq29ngeta","content":"<ul>\n<li><strong>IaaS</strong>是卖笔记本电脑的，</li>\n<li><strong>PaaS</strong>卖操作系统的（比如windows），</li>\n<li><strong>SaaS</strong>是卖应用程序的（比如Office等办公软件，普通小白用户能直接用的东西）</li>\n</ul>\n<p>从售卖数量上来说，卖笔记本本身的<strong>IaaS</strong>大于卖电脑操作系统的<strong>PaaS</strong>，但是利润率正好反过来，卖操作系统的<strong>PaaS</strong>更赚钱，所以微软的头号摇钱树就是office；</p>\n<p>一个行业刚兴起的时候，一般是卖硬件的最赚钱。打个比方，智能手机刚兴起的时候是苹果最赚钱，其次赚钱的是卖操作系统的，例如小米等，最不赚钱的是卖应用程序的比如腾讯；</p>\n<p>但是随着时间推移和行业的发展，利润中心会逐步向后移，市场成熟后，利润都集中到应用程序（<strong>SaaS</strong>）上，因为应用程序才是普通用户最终接触到，直接能使用的。</p>\n<p>大概是酱紫。</p>\n<p>上面这个比喻使用和计算机领域相关的东西来比喻的，如果用日常生活中的东西来比喻的话：</p>\n<ul>\n<li>IaaS是政府出租土地的，可以种地，可以盖楼，相当于出租资源；</li>\n<li>PaaS是地产开发商，盖了楼卖毛坯房的，相当于有了应用的架子，但是并不能给最终用户使用；</li>\n<li>SaaS是装修队，根据用户需求把房子装修出来给不同需求的人住，面向最终用户。</li>\n</ul>\n<p>你也可以想象一下中国地产的发展情况，20世纪时候成片出租土地最赚钱，21世纪初的时候是地产开放商最赚钱的时候，而现在房产泡沫没有之前那么繁荣了，利润点也就慢慢往诸如房产交易商、软装公司转移了~</p>\n<blockquote>\n<p>原文来自 <a href=\"https://www.zhihu.com/question/20387284\" target=\"_blank\" rel=\"noopener\">知乎</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong>IaaS</strong>是卖笔记本电脑的，</li>\n<li><strong>PaaS</strong>卖操作系统的（比如windows），</li>\n<li><strong>SaaS</strong>是卖应用程序的（比如Office等办公软件，普通小白用户能直接用的东西）</li>\n</ul>\n<p>从售卖数量上来说，卖笔记本本身的<strong>IaaS</strong>大于卖电脑操作系统的<strong>PaaS</strong>，但是利润率正好反过来，卖操作系统的<strong>PaaS</strong>更赚钱，所以微软的头号摇钱树就是office；</p>\n<p>一个行业刚兴起的时候，一般是卖硬件的最赚钱。打个比方，智能手机刚兴起的时候是苹果最赚钱，其次赚钱的是卖操作系统的，例如小米等，最不赚钱的是卖应用程序的比如腾讯；</p>\n<p>但是随着时间推移和行业的发展，利润中心会逐步向后移，市场成熟后，利润都集中到应用程序（<strong>SaaS</strong>）上，因为应用程序才是普通用户最终接触到，直接能使用的。</p>\n<p>大概是酱紫。</p>\n<p>上面这个比喻使用和计算机领域相关的东西来比喻的，如果用日常生活中的东西来比喻的话：</p>\n<ul>\n<li>IaaS是政府出租土地的，可以种地，可以盖楼，相当于出租资源；</li>\n<li>PaaS是地产开发商，盖了楼卖毛坯房的，相当于有了应用的架子，但是并不能给最终用户使用；</li>\n<li>SaaS是装修队，根据用户需求把房子装修出来给不同需求的人住，面向最终用户。</li>\n</ul>\n<p>你也可以想象一下中国地产的发展情况，20世纪时候成片出租土地最赚钱，21世纪初的时候是地产开放商最赚钱的时候，而现在房产泡沫没有之前那么繁荣了，利润点也就慢慢往诸如房产交易商、软装公司转移了~</p>\n<blockquote>\n<p>原文来自 <a href=\"https://www.zhihu.com/question/20387284\" target=\"_blank\" rel=\"noopener\">知乎</a></p>\n</blockquote>\n"},{"title":"Update 与 Modify 两者区别","date":"2017-03-24T14:01:00.000Z","_content":" - Update更强调时效性，侧重于新加的内容是近期才产生的。\n - Modify更偏向于调整和修改(措辞、语法、结构之类的润色)使内容更完善/完美之类的，对时效性之类的没有强调。\n","source":"_posts/科普/Update与Modify两者区别.md","raw":"---\ntitle: Update 与 Modify 两者区别\ndate: 2017-03-24 22:01:00\ncategories: 科普\n---\n - Update更强调时效性，侧重于新加的内容是近期才产生的。\n - Modify更偏向于调整和修改(措辞、语法、结构之类的润色)使内容更完善/完美之类的，对时效性之类的没有强调。\n","slug":"科普/Update与Modify两者区别","published":1,"updated":"2018-06-28T14:12:11.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7l004em4cmzwloidop","content":"<ul>\n<li>Update更强调时效性，侧重于新加的内容是近期才产生的。</li>\n<li>Modify更偏向于调整和修改(措辞、语法、结构之类的润色)使内容更完善/完美之类的，对时效性之类的没有强调。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Update更强调时效性，侧重于新加的内容是近期才产生的。</li>\n<li>Modify更偏向于调整和修改(措辞、语法、结构之类的润色)使内容更完善/完美之类的，对时效性之类的没有强调。</li>\n</ul>\n"},{"title":"常见视频格式","date":"2018-03-24T14:01:00.000Z","_content":"\n## 帧速率\n\n我们看到的视频是由一帧帧的画面，也就是一张张的图片构成；\n\n如果一秒钟跑过去的图片有24张，帧速率就是24帧/秒（fps）；\n\n只有8张，帧速率就是8帧/秒（fps）***看起来就一卡一卡的***；\n\n帧速率越大，画面就越流畅，当然大到一定程度，也不需要过大了，一方面肉眼也看不出有毛区别，另一方面电脑吃不消啊！\n\n## 分辨率\n\n我们所看到的图像都是由一个个的像素点构成的；\n\n分辨率就是所显示图像的精密程度，也可以理解为像素点的多少。\n\n在屏幕大小一定的情况下，分辨率越高，图像就会越清晰；在分辨率一定的情况下，屏幕越小，图像越清晰；\n\n从前我们看到的电视都是标清，大致都是720x576的分辨率，长宽比一般是4:3；\n\n如今我们看到的大部分都是16：9的电视和节目，分辨率为1920x1080；更大的分辨率就是4k。 \n\n> 1920*1080可以理解为，一个屏幕中，每行有1920个像素点，一共有1080行\n\n[了解更多](https://www.jianshu.com/p/c3387bcc4f6e)\n\n## 码率（比特率）\n\n码率，又叫比特率，是指每秒钟视频或音频的数据量，一般用兆／秒或K／秒表示。\n\n其他条件相同的情况下，码率越大，视频越清晰，但文件也越大；\n\n另外，码率超过一定数值，对图像并没多大影响，还搞得电脑吃不消呀～\n\n***\n\n平常我们总在想，如何让视频文件更小，让视频更清晰呢？答案就在码率上，对码率进行处理，就叫做编码方式，一般有CBR/ABR/VBR三种方式。\n\n| 编码方式 | 全称             | 意思               | 说人话                       |\n| -------- | ---------------- | ------------------ | ---------------------------- |\n| CBR      | constant bitrate | 固定码率（比特率） | 全片码率固定不变             |\n| ABR      | average bitrate  | 平均码率（比特率） | 介于CBR和VBC的折中选择       |\n| VBR      | variable bitrate | 可变码率（比特率） | 全片码率根据画面丰富程度变化 |\n\n- CBR全称constant bitrate，意思是固定码率,就是在整个视频当中，码率固定不变；\n\n- VBR全称Variable Bitrate，意为可变码率。\n\n  其实在视频当中，画面内容越丰富，所需码率越高，成像质量也会越好，画面内容不怎么丰富的地方用高码率就是浪费，\n\n  所以可变码率根据画面内容的丰富程度自动调节，保证成像质量的同时，让文件变得更小。\n\n  **所以要让视频文件更小，内容更清晰，采用VBR的编码方式，并设定科学的数值，就是解决问题的关键。**\n\n- ABR全称average bitrate ，意为平均码率，是一种介于CBR和VBR之间的折中方式。\n\n## 格式\n\n### MPEG\n\n1988年由众多世界知名公司组成的300多名成员成立了一个活动专家组，**Moving Picture Experts Group**，\n\n简称**MPEG**，他们制定提出不同标准，对图像进行压缩、编码，最终应用与不同领域。编码出来的视频就被称为**MPEG**格式，简称**MPG**。\n\n```\nMPEG 正式审核程序是 Moving Picture Experts Group 的简称。\n这个名字本来的含义是指一个研究视频和音频编码标准的“动态图像专家组”组织，\n成立于1988年，致力开发视频、音频的压缩编码技术。\n\n现在我们所说的MPEG泛指由该小组制定的一系列视频编码标准正式审核程序。\n该小组于1988年组成，至今已经制定了\nMPEG-1、MPEG-2、MPEG-3、MPEG-4、MPEG-7等多个标准，MPEG-21正在制定中。\n\nMPEG是ISO和IEC的工作组，\n它的官方头衔为：第一技术委员会第二十九子委员会第十一号工作组正式审核程序，\n英文头衔为ISO/IEC JTC1/SC29 WG11。\n\nMPEG大约每2-3个月举行一次会议，每次会议大约持续5天，在会议期间，\n新的建议和技术细节先在小组中讨论，成熟后进入标准化的正式审核程序。\n与MPEG工作组相关的其他几个视频标准化工作组包括ITU-T VCEG以及JVT。\n```\n\n> 另，常用的音频格式**mp3**，是**MPEG-1 Layer 3**的简称\n\n| 编码格式 | 应用于                                 |\n| -------- | -------------------------------------- |\n| MPEG-1   | VCD                                    |\n| MPEG-2   | DVD                                    |\n| MPEG-4   | 家庭摄影录像、网络传播、视像电话、邮件 |\n\n\n- MPEG-1的编码用于老VCD\n\n- MPEG-2的编码用于DVD\n\n- 之后的**MPEG-4**被用于更多更广泛的平台，这里的MPEG-4就是传说中的**MP4**  :)\n\n\n### ITU\n\n还有一个叫做国际电传视讯联盟（ITU）主导的另一套编码方式，称为**H.26X系列**，\n\n之后与MPEG合作弄出了 **H.264** 编码方式，成为如今最热门的编码方式。\n\n***\n\n#### flv\n\n全称  **flash video**，广泛用于网络视频，体积小，易于传播，\n\n遇到**h.264**的编码之后，生了个儿子 **f4v** ，有体积小、图像更清晰的特点。\n\n### 其他格式\n\n>  mov是由苹果公司开发出来的视频格式，wmv由微软开发出来。\n\n#### rmvb\n\n它的爸爸叫做就是**rm**格式，以前有个叫做 **[realplayer](https://www.google.com/search?q=realplayer&oq=realplayer&aqs=chrome..69i57.265j0j4&sourceid=chrome&ie=UTF-8)** 的播放器，**rm**就是它们公司开发的视频格式，现在后边添个**vb**，\n\n意思就是**variable bitrate**，可变比特率。\n\n## 总结\n\n|              | 格式                        | 老爸       |\n| ------------ | --------------------------- | ---------- |\n| 最好最常用   | MP4                         | MPG        |\n| 质量高文件小 | f4v                         | flv        |\n| 常用电影格式 | rmvb                        | rm         |\n| 剪辑编辑常用 | avi（适合编辑者进行再编辑） |            |\n| 其他         | mov、wmv                    | 苹果、微软 |\n\n提示：\n\n1. 电视、电脑、手机都能打开的格式一般是MP4格式（除苹果手机外）\n\n2. 要视频更清晰、文件更小，需要采用VBR，并使用最新的编码技术和格式\n\n3. 上传网络生成的视频质量越高越好，视频网站会进行二次转码\n\n4. 平常下载的视频如今的主流播放器都能打开，因为都有编码器\n\n***\n\n关于视频格式，传统一般叫做封装格式，包括编码格式在内，并非本文说的如此简单。\n\n这仅仅是科普，所没提到或者具体提到的avi、mkv，以及其他格式都属于封装格式的一种。\n\n封装格式并非完全按照编码技术命名，编码技术也并非仅此而已。","source":"_posts/科普/视频格式.md","raw":"---\ntitle: 常见视频格式\ndate: 2018-03-24 22:01:00\ncategories: 科普\n---\n\n## 帧速率\n\n我们看到的视频是由一帧帧的画面，也就是一张张的图片构成；\n\n如果一秒钟跑过去的图片有24张，帧速率就是24帧/秒（fps）；\n\n只有8张，帧速率就是8帧/秒（fps）***看起来就一卡一卡的***；\n\n帧速率越大，画面就越流畅，当然大到一定程度，也不需要过大了，一方面肉眼也看不出有毛区别，另一方面电脑吃不消啊！\n\n## 分辨率\n\n我们所看到的图像都是由一个个的像素点构成的；\n\n分辨率就是所显示图像的精密程度，也可以理解为像素点的多少。\n\n在屏幕大小一定的情况下，分辨率越高，图像就会越清晰；在分辨率一定的情况下，屏幕越小，图像越清晰；\n\n从前我们看到的电视都是标清，大致都是720x576的分辨率，长宽比一般是4:3；\n\n如今我们看到的大部分都是16：9的电视和节目，分辨率为1920x1080；更大的分辨率就是4k。 \n\n> 1920*1080可以理解为，一个屏幕中，每行有1920个像素点，一共有1080行\n\n[了解更多](https://www.jianshu.com/p/c3387bcc4f6e)\n\n## 码率（比特率）\n\n码率，又叫比特率，是指每秒钟视频或音频的数据量，一般用兆／秒或K／秒表示。\n\n其他条件相同的情况下，码率越大，视频越清晰，但文件也越大；\n\n另外，码率超过一定数值，对图像并没多大影响，还搞得电脑吃不消呀～\n\n***\n\n平常我们总在想，如何让视频文件更小，让视频更清晰呢？答案就在码率上，对码率进行处理，就叫做编码方式，一般有CBR/ABR/VBR三种方式。\n\n| 编码方式 | 全称             | 意思               | 说人话                       |\n| -------- | ---------------- | ------------------ | ---------------------------- |\n| CBR      | constant bitrate | 固定码率（比特率） | 全片码率固定不变             |\n| ABR      | average bitrate  | 平均码率（比特率） | 介于CBR和VBC的折中选择       |\n| VBR      | variable bitrate | 可变码率（比特率） | 全片码率根据画面丰富程度变化 |\n\n- CBR全称constant bitrate，意思是固定码率,就是在整个视频当中，码率固定不变；\n\n- VBR全称Variable Bitrate，意为可变码率。\n\n  其实在视频当中，画面内容越丰富，所需码率越高，成像质量也会越好，画面内容不怎么丰富的地方用高码率就是浪费，\n\n  所以可变码率根据画面内容的丰富程度自动调节，保证成像质量的同时，让文件变得更小。\n\n  **所以要让视频文件更小，内容更清晰，采用VBR的编码方式，并设定科学的数值，就是解决问题的关键。**\n\n- ABR全称average bitrate ，意为平均码率，是一种介于CBR和VBR之间的折中方式。\n\n## 格式\n\n### MPEG\n\n1988年由众多世界知名公司组成的300多名成员成立了一个活动专家组，**Moving Picture Experts Group**，\n\n简称**MPEG**，他们制定提出不同标准，对图像进行压缩、编码，最终应用与不同领域。编码出来的视频就被称为**MPEG**格式，简称**MPG**。\n\n```\nMPEG 正式审核程序是 Moving Picture Experts Group 的简称。\n这个名字本来的含义是指一个研究视频和音频编码标准的“动态图像专家组”组织，\n成立于1988年，致力开发视频、音频的压缩编码技术。\n\n现在我们所说的MPEG泛指由该小组制定的一系列视频编码标准正式审核程序。\n该小组于1988年组成，至今已经制定了\nMPEG-1、MPEG-2、MPEG-3、MPEG-4、MPEG-7等多个标准，MPEG-21正在制定中。\n\nMPEG是ISO和IEC的工作组，\n它的官方头衔为：第一技术委员会第二十九子委员会第十一号工作组正式审核程序，\n英文头衔为ISO/IEC JTC1/SC29 WG11。\n\nMPEG大约每2-3个月举行一次会议，每次会议大约持续5天，在会议期间，\n新的建议和技术细节先在小组中讨论，成熟后进入标准化的正式审核程序。\n与MPEG工作组相关的其他几个视频标准化工作组包括ITU-T VCEG以及JVT。\n```\n\n> 另，常用的音频格式**mp3**，是**MPEG-1 Layer 3**的简称\n\n| 编码格式 | 应用于                                 |\n| -------- | -------------------------------------- |\n| MPEG-1   | VCD                                    |\n| MPEG-2   | DVD                                    |\n| MPEG-4   | 家庭摄影录像、网络传播、视像电话、邮件 |\n\n\n- MPEG-1的编码用于老VCD\n\n- MPEG-2的编码用于DVD\n\n- 之后的**MPEG-4**被用于更多更广泛的平台，这里的MPEG-4就是传说中的**MP4**  :)\n\n\n### ITU\n\n还有一个叫做国际电传视讯联盟（ITU）主导的另一套编码方式，称为**H.26X系列**，\n\n之后与MPEG合作弄出了 **H.264** 编码方式，成为如今最热门的编码方式。\n\n***\n\n#### flv\n\n全称  **flash video**，广泛用于网络视频，体积小，易于传播，\n\n遇到**h.264**的编码之后，生了个儿子 **f4v** ，有体积小、图像更清晰的特点。\n\n### 其他格式\n\n>  mov是由苹果公司开发出来的视频格式，wmv由微软开发出来。\n\n#### rmvb\n\n它的爸爸叫做就是**rm**格式，以前有个叫做 **[realplayer](https://www.google.com/search?q=realplayer&oq=realplayer&aqs=chrome..69i57.265j0j4&sourceid=chrome&ie=UTF-8)** 的播放器，**rm**就是它们公司开发的视频格式，现在后边添个**vb**，\n\n意思就是**variable bitrate**，可变比特率。\n\n## 总结\n\n|              | 格式                        | 老爸       |\n| ------------ | --------------------------- | ---------- |\n| 最好最常用   | MP4                         | MPG        |\n| 质量高文件小 | f4v                         | flv        |\n| 常用电影格式 | rmvb                        | rm         |\n| 剪辑编辑常用 | avi（适合编辑者进行再编辑） |            |\n| 其他         | mov、wmv                    | 苹果、微软 |\n\n提示：\n\n1. 电视、电脑、手机都能打开的格式一般是MP4格式（除苹果手机外）\n\n2. 要视频更清晰、文件更小，需要采用VBR，并使用最新的编码技术和格式\n\n3. 上传网络生成的视频质量越高越好，视频网站会进行二次转码\n\n4. 平常下载的视频如今的主流播放器都能打开，因为都有编码器\n\n***\n\n关于视频格式，传统一般叫做封装格式，包括编码格式在内，并非本文说的如此简单。\n\n这仅仅是科普，所没提到或者具体提到的avi、mkv，以及其他格式都属于封装格式的一种。\n\n封装格式并非完全按照编码技术命名，编码技术也并非仅此而已。","slug":"科普/视频格式","published":1,"updated":"2018-06-28T14:12:11.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7n004im4cmlvtpfbhw","content":"<h2 id=\"帧速率\"><a href=\"#帧速率\" class=\"headerlink\" title=\"帧速率\"></a>帧速率</h2><p>我们看到的视频是由一帧帧的画面，也就是一张张的图片构成；</p>\n<p>如果一秒钟跑过去的图片有24张，帧速率就是24帧/秒（fps）；</p>\n<p>只有8张，帧速率就是8帧/秒（fps）<strong><em>看起来就一卡一卡的</em></strong>；</p>\n<p>帧速率越大，画面就越流畅，当然大到一定程度，也不需要过大了，一方面肉眼也看不出有毛区别，另一方面电脑吃不消啊！</p>\n<h2 id=\"分辨率\"><a href=\"#分辨率\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h2><p>我们所看到的图像都是由一个个的像素点构成的；</p>\n<p>分辨率就是所显示图像的精密程度，也可以理解为像素点的多少。</p>\n<p>在屏幕大小一定的情况下，分辨率越高，图像就会越清晰；在分辨率一定的情况下，屏幕越小，图像越清晰；</p>\n<p>从前我们看到的电视都是标清，大致都是720x576的分辨率，长宽比一般是4:3；</p>\n<p>如今我们看到的大部分都是16：9的电视和节目，分辨率为1920x1080；更大的分辨率就是4k。 </p>\n<blockquote>\n<p>1920*1080可以理解为，一个屏幕中，每行有1920个像素点，一共有1080行</p>\n</blockquote>\n<p><a href=\"https://www.jianshu.com/p/c3387bcc4f6e\" target=\"_blank\" rel=\"noopener\">了解更多</a></p>\n<h2 id=\"码率（比特率）\"><a href=\"#码率（比特率）\" class=\"headerlink\" title=\"码率（比特率）\"></a>码率（比特率）</h2><p>码率，又叫比特率，是指每秒钟视频或音频的数据量，一般用兆／秒或K／秒表示。</p>\n<p>其他条件相同的情况下，码率越大，视频越清晰，但文件也越大；</p>\n<p>另外，码率超过一定数值，对图像并没多大影响，还搞得电脑吃不消呀～</p>\n<hr>\n<p>平常我们总在想，如何让视频文件更小，让视频更清晰呢？答案就在码率上，对码率进行处理，就叫做编码方式，一般有CBR/ABR/VBR三种方式。</p>\n<table>\n<thead>\n<tr>\n<th>编码方式</th>\n<th>全称</th>\n<th>意思</th>\n<th>说人话</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CBR</td>\n<td>constant bitrate</td>\n<td>固定码率（比特率）</td>\n<td>全片码率固定不变</td>\n</tr>\n<tr>\n<td>ABR</td>\n<td>average bitrate</td>\n<td>平均码率（比特率）</td>\n<td>介于CBR和VBC的折中选择</td>\n</tr>\n<tr>\n<td>VBR</td>\n<td>variable bitrate</td>\n<td>可变码率（比特率）</td>\n<td>全片码率根据画面丰富程度变化</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>CBR全称constant bitrate，意思是固定码率,就是在整个视频当中，码率固定不变；</p>\n</li>\n<li><p>VBR全称Variable Bitrate，意为可变码率。</p>\n<p>其实在视频当中，画面内容越丰富，所需码率越高，成像质量也会越好，画面内容不怎么丰富的地方用高码率就是浪费，</p>\n<p>所以可变码率根据画面内容的丰富程度自动调节，保证成像质量的同时，让文件变得更小。</p>\n<p><strong>所以要让视频文件更小，内容更清晰，采用VBR的编码方式，并设定科学的数值，就是解决问题的关键。</strong></p>\n</li>\n<li><p>ABR全称average bitrate ，意为平均码率，是一种介于CBR和VBR之间的折中方式。</p>\n</li>\n</ul>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><h3 id=\"MPEG\"><a href=\"#MPEG\" class=\"headerlink\" title=\"MPEG\"></a>MPEG</h3><p>1988年由众多世界知名公司组成的300多名成员成立了一个活动专家组，<strong>Moving Picture Experts Group</strong>，</p>\n<p>简称<strong>MPEG</strong>，他们制定提出不同标准，对图像进行压缩、编码，最终应用与不同领域。编码出来的视频就被称为<strong>MPEG</strong>格式，简称<strong>MPG</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MPEG 正式审核程序是 Moving Picture Experts Group 的简称。</span><br><span class=\"line\">这个名字本来的含义是指一个研究视频和音频编码标准的“动态图像专家组”组织，</span><br><span class=\"line\">成立于1988年，致力开发视频、音频的压缩编码技术。</span><br><span class=\"line\"></span><br><span class=\"line\">现在我们所说的MPEG泛指由该小组制定的一系列视频编码标准正式审核程序。</span><br><span class=\"line\">该小组于1988年组成，至今已经制定了</span><br><span class=\"line\">MPEG-1、MPEG-2、MPEG-3、MPEG-4、MPEG-7等多个标准，MPEG-21正在制定中。</span><br><span class=\"line\"></span><br><span class=\"line\">MPEG是ISO和IEC的工作组，</span><br><span class=\"line\">它的官方头衔为：第一技术委员会第二十九子委员会第十一号工作组正式审核程序，</span><br><span class=\"line\">英文头衔为ISO/IEC JTC1/SC29 WG11。</span><br><span class=\"line\"></span><br><span class=\"line\">MPEG大约每2-3个月举行一次会议，每次会议大约持续5天，在会议期间，</span><br><span class=\"line\">新的建议和技术细节先在小组中讨论，成熟后进入标准化的正式审核程序。</span><br><span class=\"line\">与MPEG工作组相关的其他几个视频标准化工作组包括ITU-T VCEG以及JVT。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另，常用的音频格式<strong>mp3</strong>，是<strong>MPEG-1 Layer 3</strong>的简称</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>编码格式</th>\n<th>应用于</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MPEG-1</td>\n<td>VCD</td>\n</tr>\n<tr>\n<td>MPEG-2</td>\n<td>DVD</td>\n</tr>\n<tr>\n<td>MPEG-4</td>\n<td>家庭摄影录像、网络传播、视像电话、邮件</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>MPEG-1的编码用于老VCD</p>\n</li>\n<li><p>MPEG-2的编码用于DVD</p>\n</li>\n<li><p>之后的<strong>MPEG-4</strong>被用于更多更广泛的平台，这里的MPEG-4就是传说中的<strong>MP4</strong>  :)</p>\n</li>\n</ul>\n<h3 id=\"ITU\"><a href=\"#ITU\" class=\"headerlink\" title=\"ITU\"></a>ITU</h3><p>还有一个叫做国际电传视讯联盟（ITU）主导的另一套编码方式，称为<strong>H.26X系列</strong>，</p>\n<p>之后与MPEG合作弄出了 <strong>H.264</strong> 编码方式，成为如今最热门的编码方式。</p>\n<hr>\n<h4 id=\"flv\"><a href=\"#flv\" class=\"headerlink\" title=\"flv\"></a>flv</h4><p>全称  <strong>flash video</strong>，广泛用于网络视频，体积小，易于传播，</p>\n<p>遇到<strong>h.264</strong>的编码之后，生了个儿子 <strong>f4v</strong> ，有体积小、图像更清晰的特点。</p>\n<h3 id=\"其他格式\"><a href=\"#其他格式\" class=\"headerlink\" title=\"其他格式\"></a>其他格式</h3><blockquote>\n<p> mov是由苹果公司开发出来的视频格式，wmv由微软开发出来。</p>\n</blockquote>\n<h4 id=\"rmvb\"><a href=\"#rmvb\" class=\"headerlink\" title=\"rmvb\"></a>rmvb</h4><p>它的爸爸叫做就是<strong>rm</strong>格式，以前有个叫做 <strong><a href=\"https://www.google.com/search?q=realplayer&amp;oq=realplayer&amp;aqs=chrome..69i57.265j0j4&amp;sourceid=chrome&amp;ie=UTF-8\" target=\"_blank\" rel=\"noopener\">realplayer</a></strong> 的播放器，<strong>rm</strong>就是它们公司开发的视频格式，现在后边添个<strong>vb</strong>，</p>\n<p>意思就是<strong>variable bitrate</strong>，可变比特率。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>格式</th>\n<th>老爸</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最好最常用</td>\n<td>MP4</td>\n<td>MPG</td>\n</tr>\n<tr>\n<td>质量高文件小</td>\n<td>f4v</td>\n<td>flv</td>\n</tr>\n<tr>\n<td>常用电影格式</td>\n<td>rmvb</td>\n<td>rm</td>\n</tr>\n<tr>\n<td>剪辑编辑常用</td>\n<td>avi（适合编辑者进行再编辑）</td>\n<td></td>\n</tr>\n<tr>\n<td>其他</td>\n<td>mov、wmv</td>\n<td>苹果、微软</td>\n</tr>\n</tbody>\n</table>\n<p>提示：</p>\n<ol>\n<li><p>电视、电脑、手机都能打开的格式一般是MP4格式（除苹果手机外）</p>\n</li>\n<li><p>要视频更清晰、文件更小，需要采用VBR，并使用最新的编码技术和格式</p>\n</li>\n<li><p>上传网络生成的视频质量越高越好，视频网站会进行二次转码</p>\n</li>\n<li><p>平常下载的视频如今的主流播放器都能打开，因为都有编码器</p>\n</li>\n</ol>\n<hr>\n<p>关于视频格式，传统一般叫做封装格式，包括编码格式在内，并非本文说的如此简单。</p>\n<p>这仅仅是科普，所没提到或者具体提到的avi、mkv，以及其他格式都属于封装格式的一种。</p>\n<p>封装格式并非完全按照编码技术命名，编码技术也并非仅此而已。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"帧速率\"><a href=\"#帧速率\" class=\"headerlink\" title=\"帧速率\"></a>帧速率</h2><p>我们看到的视频是由一帧帧的画面，也就是一张张的图片构成；</p>\n<p>如果一秒钟跑过去的图片有24张，帧速率就是24帧/秒（fps）；</p>\n<p>只有8张，帧速率就是8帧/秒（fps）<strong><em>看起来就一卡一卡的</em></strong>；</p>\n<p>帧速率越大，画面就越流畅，当然大到一定程度，也不需要过大了，一方面肉眼也看不出有毛区别，另一方面电脑吃不消啊！</p>\n<h2 id=\"分辨率\"><a href=\"#分辨率\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h2><p>我们所看到的图像都是由一个个的像素点构成的；</p>\n<p>分辨率就是所显示图像的精密程度，也可以理解为像素点的多少。</p>\n<p>在屏幕大小一定的情况下，分辨率越高，图像就会越清晰；在分辨率一定的情况下，屏幕越小，图像越清晰；</p>\n<p>从前我们看到的电视都是标清，大致都是720x576的分辨率，长宽比一般是4:3；</p>\n<p>如今我们看到的大部分都是16：9的电视和节目，分辨率为1920x1080；更大的分辨率就是4k。 </p>\n<blockquote>\n<p>1920*1080可以理解为，一个屏幕中，每行有1920个像素点，一共有1080行</p>\n</blockquote>\n<p><a href=\"https://www.jianshu.com/p/c3387bcc4f6e\" target=\"_blank\" rel=\"noopener\">了解更多</a></p>\n<h2 id=\"码率（比特率）\"><a href=\"#码率（比特率）\" class=\"headerlink\" title=\"码率（比特率）\"></a>码率（比特率）</h2><p>码率，又叫比特率，是指每秒钟视频或音频的数据量，一般用兆／秒或K／秒表示。</p>\n<p>其他条件相同的情况下，码率越大，视频越清晰，但文件也越大；</p>\n<p>另外，码率超过一定数值，对图像并没多大影响，还搞得电脑吃不消呀～</p>\n<hr>\n<p>平常我们总在想，如何让视频文件更小，让视频更清晰呢？答案就在码率上，对码率进行处理，就叫做编码方式，一般有CBR/ABR/VBR三种方式。</p>\n<table>\n<thead>\n<tr>\n<th>编码方式</th>\n<th>全称</th>\n<th>意思</th>\n<th>说人话</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CBR</td>\n<td>constant bitrate</td>\n<td>固定码率（比特率）</td>\n<td>全片码率固定不变</td>\n</tr>\n<tr>\n<td>ABR</td>\n<td>average bitrate</td>\n<td>平均码率（比特率）</td>\n<td>介于CBR和VBC的折中选择</td>\n</tr>\n<tr>\n<td>VBR</td>\n<td>variable bitrate</td>\n<td>可变码率（比特率）</td>\n<td>全片码率根据画面丰富程度变化</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>CBR全称constant bitrate，意思是固定码率,就是在整个视频当中，码率固定不变；</p>\n</li>\n<li><p>VBR全称Variable Bitrate，意为可变码率。</p>\n<p>其实在视频当中，画面内容越丰富，所需码率越高，成像质量也会越好，画面内容不怎么丰富的地方用高码率就是浪费，</p>\n<p>所以可变码率根据画面内容的丰富程度自动调节，保证成像质量的同时，让文件变得更小。</p>\n<p><strong>所以要让视频文件更小，内容更清晰，采用VBR的编码方式，并设定科学的数值，就是解决问题的关键。</strong></p>\n</li>\n<li><p>ABR全称average bitrate ，意为平均码率，是一种介于CBR和VBR之间的折中方式。</p>\n</li>\n</ul>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><h3 id=\"MPEG\"><a href=\"#MPEG\" class=\"headerlink\" title=\"MPEG\"></a>MPEG</h3><p>1988年由众多世界知名公司组成的300多名成员成立了一个活动专家组，<strong>Moving Picture Experts Group</strong>，</p>\n<p>简称<strong>MPEG</strong>，他们制定提出不同标准，对图像进行压缩、编码，最终应用与不同领域。编码出来的视频就被称为<strong>MPEG</strong>格式，简称<strong>MPG</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MPEG 正式审核程序是 Moving Picture Experts Group 的简称。</span><br><span class=\"line\">这个名字本来的含义是指一个研究视频和音频编码标准的“动态图像专家组”组织，</span><br><span class=\"line\">成立于1988年，致力开发视频、音频的压缩编码技术。</span><br><span class=\"line\"></span><br><span class=\"line\">现在我们所说的MPEG泛指由该小组制定的一系列视频编码标准正式审核程序。</span><br><span class=\"line\">该小组于1988年组成，至今已经制定了</span><br><span class=\"line\">MPEG-1、MPEG-2、MPEG-3、MPEG-4、MPEG-7等多个标准，MPEG-21正在制定中。</span><br><span class=\"line\"></span><br><span class=\"line\">MPEG是ISO和IEC的工作组，</span><br><span class=\"line\">它的官方头衔为：第一技术委员会第二十九子委员会第十一号工作组正式审核程序，</span><br><span class=\"line\">英文头衔为ISO/IEC JTC1/SC29 WG11。</span><br><span class=\"line\"></span><br><span class=\"line\">MPEG大约每2-3个月举行一次会议，每次会议大约持续5天，在会议期间，</span><br><span class=\"line\">新的建议和技术细节先在小组中讨论，成熟后进入标准化的正式审核程序。</span><br><span class=\"line\">与MPEG工作组相关的其他几个视频标准化工作组包括ITU-T VCEG以及JVT。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另，常用的音频格式<strong>mp3</strong>，是<strong>MPEG-1 Layer 3</strong>的简称</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>编码格式</th>\n<th>应用于</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MPEG-1</td>\n<td>VCD</td>\n</tr>\n<tr>\n<td>MPEG-2</td>\n<td>DVD</td>\n</tr>\n<tr>\n<td>MPEG-4</td>\n<td>家庭摄影录像、网络传播、视像电话、邮件</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>MPEG-1的编码用于老VCD</p>\n</li>\n<li><p>MPEG-2的编码用于DVD</p>\n</li>\n<li><p>之后的<strong>MPEG-4</strong>被用于更多更广泛的平台，这里的MPEG-4就是传说中的<strong>MP4</strong>  :)</p>\n</li>\n</ul>\n<h3 id=\"ITU\"><a href=\"#ITU\" class=\"headerlink\" title=\"ITU\"></a>ITU</h3><p>还有一个叫做国际电传视讯联盟（ITU）主导的另一套编码方式，称为<strong>H.26X系列</strong>，</p>\n<p>之后与MPEG合作弄出了 <strong>H.264</strong> 编码方式，成为如今最热门的编码方式。</p>\n<hr>\n<h4 id=\"flv\"><a href=\"#flv\" class=\"headerlink\" title=\"flv\"></a>flv</h4><p>全称  <strong>flash video</strong>，广泛用于网络视频，体积小，易于传播，</p>\n<p>遇到<strong>h.264</strong>的编码之后，生了个儿子 <strong>f4v</strong> ，有体积小、图像更清晰的特点。</p>\n<h3 id=\"其他格式\"><a href=\"#其他格式\" class=\"headerlink\" title=\"其他格式\"></a>其他格式</h3><blockquote>\n<p> mov是由苹果公司开发出来的视频格式，wmv由微软开发出来。</p>\n</blockquote>\n<h4 id=\"rmvb\"><a href=\"#rmvb\" class=\"headerlink\" title=\"rmvb\"></a>rmvb</h4><p>它的爸爸叫做就是<strong>rm</strong>格式，以前有个叫做 <strong><a href=\"https://www.google.com/search?q=realplayer&amp;oq=realplayer&amp;aqs=chrome..69i57.265j0j4&amp;sourceid=chrome&amp;ie=UTF-8\" target=\"_blank\" rel=\"noopener\">realplayer</a></strong> 的播放器，<strong>rm</strong>就是它们公司开发的视频格式，现在后边添个<strong>vb</strong>，</p>\n<p>意思就是<strong>variable bitrate</strong>，可变比特率。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>格式</th>\n<th>老爸</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最好最常用</td>\n<td>MP4</td>\n<td>MPG</td>\n</tr>\n<tr>\n<td>质量高文件小</td>\n<td>f4v</td>\n<td>flv</td>\n</tr>\n<tr>\n<td>常用电影格式</td>\n<td>rmvb</td>\n<td>rm</td>\n</tr>\n<tr>\n<td>剪辑编辑常用</td>\n<td>avi（适合编辑者进行再编辑）</td>\n<td></td>\n</tr>\n<tr>\n<td>其他</td>\n<td>mov、wmv</td>\n<td>苹果、微软</td>\n</tr>\n</tbody>\n</table>\n<p>提示：</p>\n<ol>\n<li><p>电视、电脑、手机都能打开的格式一般是MP4格式（除苹果手机外）</p>\n</li>\n<li><p>要视频更清晰、文件更小，需要采用VBR，并使用最新的编码技术和格式</p>\n</li>\n<li><p>上传网络生成的视频质量越高越好，视频网站会进行二次转码</p>\n</li>\n<li><p>平常下载的视频如今的主流播放器都能打开，因为都有编码器</p>\n</li>\n</ol>\n<hr>\n<p>关于视频格式，传统一般叫做封装格式，包括编码格式在内，并非本文说的如此简单。</p>\n<p>这仅仅是科普，所没提到或者具体提到的avi、mkv，以及其他格式都属于封装格式的一种。</p>\n<p>封装格式并非完全按照编码技术命名，编码技术也并非仅此而已。</p>\n"},{"title":"Java调用Python","date":"2018-07-12T03:03:59.000Z","_content":"\n祝，获得一项新技能\n```java\npackage test;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\n\n/**\n * Java 调用 Python\n * test for chengzhan\n * @author anan\n * Created on 2018/7/12.\n */\n\npublic class InvokeByRuntime {\n  /**\n   * @param args\n   * @throws IOException\n   * @throws InterruptedException\n   */\n  public static void main(String[] args) throws IOException, InterruptedException {\n    System.out.println(\"-----------------\");\n    String exe = \"python3\"; // 执行命令\n    String command = \"./dtcTest.py\"; //执行文件\n    String num1 = \"1\"; // 入参\n    String num2 = \"2\"; // 入参\n    System.out.println(\"11111111111\");\n    String[] cmdArr = new String[] {exe, command, num1, num2};\n    Process process;\n\n    process = Runtime.getRuntime().exec(cmdArr); // 相当于在部署机中执行了：python3 ./dtcTest.py 1 2  返回的是输出结果\n\n    InputStream is = process.getInputStream();  //输出内容以 “流” 形式存在\n    String str;\n\n    InputStreamReader dat=new InputStreamReader(is);\n    BufferedReader bin=new BufferedReader(dat);\n    while((str=bin.readLine())!=null){\n      System.out.println(str);\n    }\n    process.waitFor();\n  }\n}\n```\n\n","source":"_posts/编程/Java调用Python.md","raw":"---\ntitle: Java调用Python\ndate: 2018-07-12 11:03:59\ntags:\ncategories: 编程\n---\n\n祝，获得一项新技能\n```java\npackage test;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\n\n/**\n * Java 调用 Python\n * test for chengzhan\n * @author anan\n * Created on 2018/7/12.\n */\n\npublic class InvokeByRuntime {\n  /**\n   * @param args\n   * @throws IOException\n   * @throws InterruptedException\n   */\n  public static void main(String[] args) throws IOException, InterruptedException {\n    System.out.println(\"-----------------\");\n    String exe = \"python3\"; // 执行命令\n    String command = \"./dtcTest.py\"; //执行文件\n    String num1 = \"1\"; // 入参\n    String num2 = \"2\"; // 入参\n    System.out.println(\"11111111111\");\n    String[] cmdArr = new String[] {exe, command, num1, num2};\n    Process process;\n\n    process = Runtime.getRuntime().exec(cmdArr); // 相当于在部署机中执行了：python3 ./dtcTest.py 1 2  返回的是输出结果\n\n    InputStream is = process.getInputStream();  //输出内容以 “流” 形式存在\n    String str;\n\n    InputStreamReader dat=new InputStreamReader(is);\n    BufferedReader bin=new BufferedReader(dat);\n    while((str=bin.readLine())!=null){\n      System.out.println(str);\n    }\n    process.waitFor();\n  }\n}\n```\n\n","slug":"编程/Java调用Python","published":1,"updated":"2018-08-04T06:32:45.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7o004km4cm0mdzbdvg","content":"<p>祝，获得一项新技能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java 调用 Python</span></span><br><span class=\"line\"><span class=\"comment\"> * test for chengzhan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> anan</span></span><br><span class=\"line\"><span class=\"comment\"> * Created on 2018/7/12.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvokeByRuntime</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"-----------------\"</span>);</span><br><span class=\"line\">    String exe = <span class=\"string\">\"python3\"</span>; <span class=\"comment\">// 执行命令</span></span><br><span class=\"line\">    String command = <span class=\"string\">\"./dtcTest.py\"</span>; <span class=\"comment\">//执行文件</span></span><br><span class=\"line\">    String num1 = <span class=\"string\">\"1\"</span>; <span class=\"comment\">// 入参</span></span><br><span class=\"line\">    String num2 = <span class=\"string\">\"2\"</span>; <span class=\"comment\">// 入参</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"11111111111\"</span>);</span><br><span class=\"line\">    String[] cmdArr = <span class=\"keyword\">new</span> String[] &#123;exe, command, num1, num2&#125;;</span><br><span class=\"line\">    Process process;</span><br><span class=\"line\"></span><br><span class=\"line\">    process = Runtime.getRuntime().exec(cmdArr); <span class=\"comment\">// 相当于在部署机中执行了：python3 ./dtcTest.py 1 2  返回的是输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    InputStream is = process.getInputStream();  <span class=\"comment\">//输出内容以 “流” 形式存在</span></span><br><span class=\"line\">    String str;</span><br><span class=\"line\"></span><br><span class=\"line\">    InputStreamReader dat=<span class=\"keyword\">new</span> InputStreamReader(is);</span><br><span class=\"line\">    BufferedReader bin=<span class=\"keyword\">new</span> BufferedReader(dat);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((str=bin.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">      System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    process.waitFor();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>祝，获得一项新技能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java 调用 Python</span></span><br><span class=\"line\"><span class=\"comment\"> * test for chengzhan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> anan</span></span><br><span class=\"line\"><span class=\"comment\"> * Created on 2018/7/12.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvokeByRuntime</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"-----------------\"</span>);</span><br><span class=\"line\">    String exe = <span class=\"string\">\"python3\"</span>; <span class=\"comment\">// 执行命令</span></span><br><span class=\"line\">    String command = <span class=\"string\">\"./dtcTest.py\"</span>; <span class=\"comment\">//执行文件</span></span><br><span class=\"line\">    String num1 = <span class=\"string\">\"1\"</span>; <span class=\"comment\">// 入参</span></span><br><span class=\"line\">    String num2 = <span class=\"string\">\"2\"</span>; <span class=\"comment\">// 入参</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"11111111111\"</span>);</span><br><span class=\"line\">    String[] cmdArr = <span class=\"keyword\">new</span> String[] &#123;exe, command, num1, num2&#125;;</span><br><span class=\"line\">    Process process;</span><br><span class=\"line\"></span><br><span class=\"line\">    process = Runtime.getRuntime().exec(cmdArr); <span class=\"comment\">// 相当于在部署机中执行了：python3 ./dtcTest.py 1 2  返回的是输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    InputStream is = process.getInputStream();  <span class=\"comment\">//输出内容以 “流” 形式存在</span></span><br><span class=\"line\">    String str;</span><br><span class=\"line\"></span><br><span class=\"line\">    InputStreamReader dat=<span class=\"keyword\">new</span> InputStreamReader(is);</span><br><span class=\"line\">    BufferedReader bin=<span class=\"keyword\">new</span> BufferedReader(dat);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((str=bin.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">      System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    process.waitFor();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"软件为何会有那么多权限","date":"2018-07-03T06:42:18.000Z","_content":"\n> 行业内的变革并不是由于行业内的人来改变的，往往是由外来者来改变的。\n\n这段是由oppo find X 和 vivo NEX 的弹出式摄像头引发的。\n\n前些日子，find X 和 NEX 的用户发现，开启某些软件时候，摄像头会弹出并立马缩回：\n - QQ浏览器在启动时调用了前置摄像头\n - 百度输入法调用了麦克风\n这种未提醒使用者就调用了设备，涉及到隐私问题。\n\n其实这几年社交，直播类的发展，渐渐减弱了人们面对摄像头的敏感度。\n隐私问题严重性一直存在，大家都知道，只是无奈，不给权限就得不到该软件带来的便利。\n加上隐私泄露带来的后果给受害者没有带来直接伤害，于是侥幸心理的人就多了起来。\n\n## 这里有个值得关注的点\n\n其实当开发者开发的一个日历软件，并不需要什么权限，可当它上架到各个软件市场的时候，这些软件市场会要求开发者：\n程序必须用软件市场提供的市场专用的程序包进行二次封装。\n\n当打开从软件市场上下载的程序，程序启动的画面中会出现几个小字：“XXX市场首发专版”，开发者们表示，这种软件二次封装包\n里面，通常包含着各种各样的权限。\n\n假如有机会的话，是可以到软件开发者自己的官方网站上下载的，一方面是权限的问题，另一方面是软件开发者在市场里面上架软件，每个市场是要分成的，一般是30-40%不等。","source":"_posts/科普/软件为何会有那么多权限.md","raw":"---\ntitle: 软件为何会有那么多权限\ndate: 2018-07-03 14:42:18\ntags: 科普\ncategories: 科普\n---\n\n> 行业内的变革并不是由于行业内的人来改变的，往往是由外来者来改变的。\n\n这段是由oppo find X 和 vivo NEX 的弹出式摄像头引发的。\n\n前些日子，find X 和 NEX 的用户发现，开启某些软件时候，摄像头会弹出并立马缩回：\n - QQ浏览器在启动时调用了前置摄像头\n - 百度输入法调用了麦克风\n这种未提醒使用者就调用了设备，涉及到隐私问题。\n\n其实这几年社交，直播类的发展，渐渐减弱了人们面对摄像头的敏感度。\n隐私问题严重性一直存在，大家都知道，只是无奈，不给权限就得不到该软件带来的便利。\n加上隐私泄露带来的后果给受害者没有带来直接伤害，于是侥幸心理的人就多了起来。\n\n## 这里有个值得关注的点\n\n其实当开发者开发的一个日历软件，并不需要什么权限，可当它上架到各个软件市场的时候，这些软件市场会要求开发者：\n程序必须用软件市场提供的市场专用的程序包进行二次封装。\n\n当打开从软件市场上下载的程序，程序启动的画面中会出现几个小字：“XXX市场首发专版”，开发者们表示，这种软件二次封装包\n里面，通常包含着各种各样的权限。\n\n假如有机会的话，是可以到软件开发者自己的官方网站上下载的，一方面是权限的问题，另一方面是软件开发者在市场里面上架软件，每个市场是要分成的，一般是30-40%不等。","slug":"科普/软件为何会有那么多权限","published":1,"updated":"2018-08-04T06:32:45.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkc7q004mm4cmnymucdhi","content":"<blockquote>\n<p>行业内的变革并不是由于行业内的人来改变的，往往是由外来者来改变的。</p>\n</blockquote>\n<p>这段是由oppo find X 和 vivo NEX 的弹出式摄像头引发的。</p>\n<p>前些日子，find X 和 NEX 的用户发现，开启某些软件时候，摄像头会弹出并立马缩回：</p>\n<ul>\n<li>QQ浏览器在启动时调用了前置摄像头</li>\n<li>百度输入法调用了麦克风<br>这种未提醒使用者就调用了设备，涉及到隐私问题。</li>\n</ul>\n<p>其实这几年社交，直播类的发展，渐渐减弱了人们面对摄像头的敏感度。<br>隐私问题严重性一直存在，大家都知道，只是无奈，不给权限就得不到该软件带来的便利。<br>加上隐私泄露带来的后果给受害者没有带来直接伤害，于是侥幸心理的人就多了起来。</p>\n<h2 id=\"这里有个值得关注的点\"><a href=\"#这里有个值得关注的点\" class=\"headerlink\" title=\"这里有个值得关注的点\"></a>这里有个值得关注的点</h2><p>其实当开发者开发的一个日历软件，并不需要什么权限，可当它上架到各个软件市场的时候，这些软件市场会要求开发者：<br>程序必须用软件市场提供的市场专用的程序包进行二次封装。</p>\n<p>当打开从软件市场上下载的程序，程序启动的画面中会出现几个小字：“XXX市场首发专版”，开发者们表示，这种软件二次封装包<br>里面，通常包含着各种各样的权限。</p>\n<p>假如有机会的话，是可以到软件开发者自己的官方网站上下载的，一方面是权限的问题，另一方面是软件开发者在市场里面上架软件，每个市场是要分成的，一般是30-40%不等。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>行业内的变革并不是由于行业内的人来改变的，往往是由外来者来改变的。</p>\n</blockquote>\n<p>这段是由oppo find X 和 vivo NEX 的弹出式摄像头引发的。</p>\n<p>前些日子，find X 和 NEX 的用户发现，开启某些软件时候，摄像头会弹出并立马缩回：</p>\n<ul>\n<li>QQ浏览器在启动时调用了前置摄像头</li>\n<li>百度输入法调用了麦克风<br>这种未提醒使用者就调用了设备，涉及到隐私问题。</li>\n</ul>\n<p>其实这几年社交，直播类的发展，渐渐减弱了人们面对摄像头的敏感度。<br>隐私问题严重性一直存在，大家都知道，只是无奈，不给权限就得不到该软件带来的便利。<br>加上隐私泄露带来的后果给受害者没有带来直接伤害，于是侥幸心理的人就多了起来。</p>\n<h2 id=\"这里有个值得关注的点\"><a href=\"#这里有个值得关注的点\" class=\"headerlink\" title=\"这里有个值得关注的点\"></a>这里有个值得关注的点</h2><p>其实当开发者开发的一个日历软件，并不需要什么权限，可当它上架到各个软件市场的时候，这些软件市场会要求开发者：<br>程序必须用软件市场提供的市场专用的程序包进行二次封装。</p>\n<p>当打开从软件市场上下载的程序，程序启动的画面中会出现几个小字：“XXX市场首发专版”，开发者们表示，这种软件二次封装包<br>里面，通常包含着各种各样的权限。</p>\n<p>假如有机会的话，是可以到软件开发者自己的官方网站上下载的，一方面是权限的问题，另一方面是软件开发者在市场里面上架软件，每个市场是要分成的，一般是30-40%不等。</p>\n"},{"title":"maven项目jar包导入失败","date":"2017-08-22T01:38:00.000Z","_content":"\neclipse中导入maven项目时，从仓库中下载jar包失败。\n提示缺失jar包\ncmd  maven install 命令\n```\nMaven 安装 JAR 包的命令是：\nmvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar\n```\neg:\n```\nmvn install:install-file -Dfile=c:/Access_JDBC30.jar -DgroupId=com.hxtt -DartifactId=Access_JDBC30 -Dversion=1.0 -Dpackaging=jar\n```\n***\n#参考\n##将jar包安装到本地repository中\n```\nmvn install:install-file -Dfile=my-jar.jar -DgroupId=org.richard -DartifactId=my-jar -Dversion=1.0 -Dpackaging=jar\n```\n在http://mvnrepository.com/中找到对应的jar：\n以 [spring](http://lib.csdn.net/base/javaee)-context-support-3.1.0.RELEASE.jar 为例，在 @3图中已经给出这个 jar 包的 groupId，artifactId，version信息，\n手动安装的时候这些信息不要改，否则 Maven 项目移植的话，jar 包下载就会失败。顺便把这信息帖下面，方便对照：\n```\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context-support</artifactId>\n    <version>3.1.0.RELEASE</version>\n</dependency>\n```\n\n***\n参考来自\n[向maven仓库中手动安装本地jar的三种方法 - - CSDN博客](http://blog.csdn.net/superit401/article/details/51567646)\n","source":"_posts/backEnd/maven/maven项目jar包导入失败.md","raw":"---\ntitle: maven项目jar包导入失败\ndate:  2017.08.22 09:38\ntags: maven\ncategories: Program\n---\n\neclipse中导入maven项目时，从仓库中下载jar包失败。\n提示缺失jar包\ncmd  maven install 命令\n```\nMaven 安装 JAR 包的命令是：\nmvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar\n```\neg:\n```\nmvn install:install-file -Dfile=c:/Access_JDBC30.jar -DgroupId=com.hxtt -DartifactId=Access_JDBC30 -Dversion=1.0 -Dpackaging=jar\n```\n***\n#参考\n##将jar包安装到本地repository中\n```\nmvn install:install-file -Dfile=my-jar.jar -DgroupId=org.richard -DartifactId=my-jar -Dversion=1.0 -Dpackaging=jar\n```\n在http://mvnrepository.com/中找到对应的jar：\n以 [spring](http://lib.csdn.net/base/javaee)-context-support-3.1.0.RELEASE.jar 为例，在 @3图中已经给出这个 jar 包的 groupId，artifactId，version信息，\n手动安装的时候这些信息不要改，否则 Maven 项目移植的话，jar 包下载就会失败。顺便把这信息帖下面，方便对照：\n```\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context-support</artifactId>\n    <version>3.1.0.RELEASE</version>\n</dependency>\n```\n\n***\n参考来自\n[向maven仓库中手动安装本地jar的三种方法 - - CSDN博客](http://blog.csdn.net/superit401/article/details/51567646)\n","slug":"backEnd/maven/maven项目jar包导入失败","published":1,"updated":"2018-08-04T06:32:45.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkccn004ym4cm8lg29z4k","content":"<p>eclipse中导入maven项目时，从仓库中下载jar包失败。<br>提示缺失jar包<br>cmd  maven install 命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maven 安装 JAR 包的命令是：</span><br><span class=\"line\">mvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar</span><br></pre></td></tr></table></figure></p>\n<p>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=c:/Access_JDBC30.jar -DgroupId=com.hxtt -DartifactId=Access_JDBC30 -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>#参考</p>\n<p>##将jar包安装到本地repository中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=my-jar.jar -DgroupId=org.richard -DartifactId=my-jar -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure></p>\n<p>在<a href=\"http://mvnrepository.com/中找到对应的jar：\" target=\"_blank\" rel=\"noopener\">http://mvnrepository.com/中找到对应的jar：</a><br>以 <a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\" rel=\"noopener\">spring</a>-context-support-3.1.0.RELEASE.jar 为例，在 @3图中已经给出这个 jar 包的 groupId，artifactId，version信息，<br>手动安装的时候这些信息不要改，否则 Maven 项目移植的话，jar 包下载就会失败。顺便把这信息帖下面，方便对照：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.1.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>参考来自<br><a href=\"http://blog.csdn.net/superit401/article/details/51567646\" target=\"_blank\" rel=\"noopener\">向maven仓库中手动安装本地jar的三种方法 - - CSDN博客</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>eclipse中导入maven项目时，从仓库中下载jar包失败。<br>提示缺失jar包<br>cmd  maven install 命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maven 安装 JAR 包的命令是：</span><br><span class=\"line\">mvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar</span><br></pre></td></tr></table></figure></p>\n<p>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=c:/Access_JDBC30.jar -DgroupId=com.hxtt -DartifactId=Access_JDBC30 -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>#参考</p>\n<p>##将jar包安装到本地repository中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=my-jar.jar -DgroupId=org.richard -DartifactId=my-jar -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure></p>\n<p>在<a href=\"http://mvnrepository.com/中找到对应的jar：\" target=\"_blank\" rel=\"noopener\">http://mvnrepository.com/中找到对应的jar：</a><br>以 <a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\" rel=\"noopener\">spring</a>-context-support-3.1.0.RELEASE.jar 为例，在 @3图中已经给出这个 jar 包的 groupId，artifactId，version信息，<br>手动安装的时候这些信息不要改，否则 Maven 项目移植的话，jar 包下载就会失败。顺便把这信息帖下面，方便对照：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.1.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>参考来自<br><a href=\"http://blog.csdn.net/superit401/article/details/51567646\" target=\"_blank\" rel=\"noopener\">向maven仓库中手动安装本地jar的三种方法 - - CSDN博客</a></p>\n"},{"title":"Spring Boot YML文件配置多环境","date":"2018-06-28T10:10:12.000Z","_content":"\n## yml与properties\n其实yml和properties文件是一样的原理，且一个项目上要么yml或者properties，二选一的存在。\n\n推荐使用yml，更简洁。\n\n## bootstrap与application\n### 加载顺序\n这里主要是说明application和bootstrap的加载顺序。\n\n>bootstrap.yml（bootstrap.properties）先加载\napplication.yml（application.properties）后加载\nbootstrap.yml 用于应用程序上下文的引导阶段。\n\nbootstrap.yml 由父Spring ApplicationContext加载。\n父ApplicationContext 被加载到使用 application.yml 的之前。\n\n### 配置区别\nbootstrap.yml 和application.yml 都可以用来配置参数。\n\nbootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。\napplication.yml 可以用来定义应用级别的，如果搭配 **spring-cloud-config** 使用 application.yml 里面定义的文件可以实现动态替换。\n使用**Spring-Cloud-Config-Server**时，应在 bootstrap.yml 中指定：\n\nspring.application.name\nspring.cloud.config.server.git.uri\n一些加密/解密信息\n实例：\n\nbootstrap.yml\n```yaml\nspring:\n  application:\n    name: service-a\n  cloud:\n    config:\n      uri: http://127.0.0.1:8888\n      fail-fast: true\n      username: user\n      password: ${CONFIG_SERVER_PASSWORD:password}\n      retry:\n        initial-interval: 2000\n        max-interval: 10000\n        multiplier: 2\n        max-attempts: 10\n```\n*** \n## 两种配置方式 1：在一个yml文件中，2：在多个yml文件中\n\n### 一个yml文件\napplication.yml\n```yaml\nspring:\n  profiles:\n    active: dev\n\n---\n#开发环境配置\nspring:\n  profiles: dev\n\nserver:\n  port: 1000\n\n\n---\n#测试环境配置\nspring:\n  profiles: stg\n\nserver:\n  port: 1001\n\n\n---\n#生产环境配置\nspring:\n  profiles: prd\n\nserver:\n  port: 1002\n```\n\n###  多个yml文件\n\napplication.yml\n\n```yaml\nspring:\n  profiles:\n    active: dev\n```\n\napplication-dev.yml\n```yaml\nserver:\n  port: 1000\n```\napplication-stg.yml\n```yaml\nserver:\n  port: 1001\n```\napplication-prd.yml\n```yaml\nserver:\n  port: 1002\n```\n\n","source":"_posts/backEnd/spring/Spring Boot YML文件配置多环境.md","raw":"---\ntitle: Spring Boot YML文件配置多环境\ndate: 2018-06-28 18:10:12\ntags: spring\ncategories: java Program\n---\n\n## yml与properties\n其实yml和properties文件是一样的原理，且一个项目上要么yml或者properties，二选一的存在。\n\n推荐使用yml，更简洁。\n\n## bootstrap与application\n### 加载顺序\n这里主要是说明application和bootstrap的加载顺序。\n\n>bootstrap.yml（bootstrap.properties）先加载\napplication.yml（application.properties）后加载\nbootstrap.yml 用于应用程序上下文的引导阶段。\n\nbootstrap.yml 由父Spring ApplicationContext加载。\n父ApplicationContext 被加载到使用 application.yml 的之前。\n\n### 配置区别\nbootstrap.yml 和application.yml 都可以用来配置参数。\n\nbootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。\napplication.yml 可以用来定义应用级别的，如果搭配 **spring-cloud-config** 使用 application.yml 里面定义的文件可以实现动态替换。\n使用**Spring-Cloud-Config-Server**时，应在 bootstrap.yml 中指定：\n\nspring.application.name\nspring.cloud.config.server.git.uri\n一些加密/解密信息\n实例：\n\nbootstrap.yml\n```yaml\nspring:\n  application:\n    name: service-a\n  cloud:\n    config:\n      uri: http://127.0.0.1:8888\n      fail-fast: true\n      username: user\n      password: ${CONFIG_SERVER_PASSWORD:password}\n      retry:\n        initial-interval: 2000\n        max-interval: 10000\n        multiplier: 2\n        max-attempts: 10\n```\n*** \n## 两种配置方式 1：在一个yml文件中，2：在多个yml文件中\n\n### 一个yml文件\napplication.yml\n```yaml\nspring:\n  profiles:\n    active: dev\n\n---\n#开发环境配置\nspring:\n  profiles: dev\n\nserver:\n  port: 1000\n\n\n---\n#测试环境配置\nspring:\n  profiles: stg\n\nserver:\n  port: 1001\n\n\n---\n#生产环境配置\nspring:\n  profiles: prd\n\nserver:\n  port: 1002\n```\n\n###  多个yml文件\n\napplication.yml\n\n```yaml\nspring:\n  profiles:\n    active: dev\n```\n\napplication-dev.yml\n```yaml\nserver:\n  port: 1000\n```\napplication-stg.yml\n```yaml\nserver:\n  port: 1001\n```\napplication-prd.yml\n```yaml\nserver:\n  port: 1002\n```\n\n","slug":"backEnd/spring/Spring Boot YML文件配置多环境","published":1,"updated":"2018-08-04T06:32:45.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkccs004zm4cmhe5mwxew","content":"<h2 id=\"yml与properties\"><a href=\"#yml与properties\" class=\"headerlink\" title=\"yml与properties\"></a>yml与properties</h2><p>其实yml和properties文件是一样的原理，且一个项目上要么yml或者properties，二选一的存在。</p>\n<p>推荐使用yml，更简洁。</p>\n<h2 id=\"bootstrap与application\"><a href=\"#bootstrap与application\" class=\"headerlink\" title=\"bootstrap与application\"></a>bootstrap与application</h2><h3 id=\"加载顺序\"><a href=\"#加载顺序\" class=\"headerlink\" title=\"加载顺序\"></a>加载顺序</h3><p>这里主要是说明application和bootstrap的加载顺序。</p>\n<blockquote>\n<p>bootstrap.yml（bootstrap.properties）先加载<br>application.yml（application.properties）后加载<br>bootstrap.yml 用于应用程序上下文的引导阶段。</p>\n</blockquote>\n<p>bootstrap.yml 由父Spring ApplicationContext加载。<br>父ApplicationContext 被加载到使用 application.yml 的之前。</p>\n<h3 id=\"配置区别\"><a href=\"#配置区别\" class=\"headerlink\" title=\"配置区别\"></a>配置区别</h3><p>bootstrap.yml 和application.yml 都可以用来配置参数。</p>\n<p>bootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。<br>application.yml 可以用来定义应用级别的，如果搭配 <strong>spring-cloud-config</strong> 使用 application.yml 里面定义的文件可以实现动态替换。<br>使用<strong>Spring-Cloud-Config-Server</strong>时，应在 bootstrap.yml 中指定：</p>\n<p>spring.application.name<br>spring.cloud.config.server.git.uri<br>一些加密/解密信息<br>实例：</p>\n<p>bootstrap.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">service-a</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      uri:</span> <span class=\"attr\">http://127.0.0.1:8888</span></span><br><span class=\"line\"><span class=\"attr\">      fail-fast:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">      username:</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">$&#123;CONFIG_SERVER_PASSWORD:password&#125;</span></span><br><span class=\"line\"><span class=\"attr\">      retry:</span></span><br><span class=\"line\"><span class=\"attr\">        initial-interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">        max-interval:</span> <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"attr\">        multiplier:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">        max-attempts:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"两种配置方式-1：在一个yml文件中，2：在多个yml文件中\"><a href=\"#两种配置方式-1：在一个yml文件中，2：在多个yml文件中\" class=\"headerlink\" title=\"两种配置方式 1：在一个yml文件中，2：在多个yml文件中\"></a>两种配置方式 1：在一个yml文件中，2：在多个yml文件中</h2><h3 id=\"一个yml文件\"><a href=\"#一个yml文件\" class=\"headerlink\" title=\"一个yml文件\"></a>一个yml文件</h3><p>application.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span></span><br><span class=\"line\"><span class=\"attr\">    active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#开发环境配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#测试环境配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">stg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1001</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#生产环境配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">prd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1002</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多个yml文件\"><a href=\"#多个yml文件\" class=\"headerlink\" title=\"多个yml文件\"></a>多个yml文件</h3><p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span></span><br><span class=\"line\"><span class=\"attr\">    active:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n<p>application-dev.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure></p>\n<p>application-stg.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1001</span></span><br></pre></td></tr></table></figure></p>\n<p>application-prd.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1002</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"yml与properties\"><a href=\"#yml与properties\" class=\"headerlink\" title=\"yml与properties\"></a>yml与properties</h2><p>其实yml和properties文件是一样的原理，且一个项目上要么yml或者properties，二选一的存在。</p>\n<p>推荐使用yml，更简洁。</p>\n<h2 id=\"bootstrap与application\"><a href=\"#bootstrap与application\" class=\"headerlink\" title=\"bootstrap与application\"></a>bootstrap与application</h2><h3 id=\"加载顺序\"><a href=\"#加载顺序\" class=\"headerlink\" title=\"加载顺序\"></a>加载顺序</h3><p>这里主要是说明application和bootstrap的加载顺序。</p>\n<blockquote>\n<p>bootstrap.yml（bootstrap.properties）先加载<br>application.yml（application.properties）后加载<br>bootstrap.yml 用于应用程序上下文的引导阶段。</p>\n</blockquote>\n<p>bootstrap.yml 由父Spring ApplicationContext加载。<br>父ApplicationContext 被加载到使用 application.yml 的之前。</p>\n<h3 id=\"配置区别\"><a href=\"#配置区别\" class=\"headerlink\" title=\"配置区别\"></a>配置区别</h3><p>bootstrap.yml 和application.yml 都可以用来配置参数。</p>\n<p>bootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。<br>application.yml 可以用来定义应用级别的，如果搭配 <strong>spring-cloud-config</strong> 使用 application.yml 里面定义的文件可以实现动态替换。<br>使用<strong>Spring-Cloud-Config-Server</strong>时，应在 bootstrap.yml 中指定：</p>\n<p>spring.application.name<br>spring.cloud.config.server.git.uri<br>一些加密/解密信息<br>实例：</p>\n<p>bootstrap.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">service-a</span></span><br><span class=\"line\"><span class=\"attr\">  cloud:</span></span><br><span class=\"line\"><span class=\"attr\">    config:</span></span><br><span class=\"line\"><span class=\"attr\">      uri:</span> <span class=\"attr\">http://127.0.0.1:8888</span></span><br><span class=\"line\"><span class=\"attr\">      fail-fast:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">      username:</span> <span class=\"string\">user</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">$&#123;CONFIG_SERVER_PASSWORD:password&#125;</span></span><br><span class=\"line\"><span class=\"attr\">      retry:</span></span><br><span class=\"line\"><span class=\"attr\">        initial-interval:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">        max-interval:</span> <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"attr\">        multiplier:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">        max-attempts:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"两种配置方式-1：在一个yml文件中，2：在多个yml文件中\"><a href=\"#两种配置方式-1：在一个yml文件中，2：在多个yml文件中\" class=\"headerlink\" title=\"两种配置方式 1：在一个yml文件中，2：在多个yml文件中\"></a>两种配置方式 1：在一个yml文件中，2：在多个yml文件中</h2><h3 id=\"一个yml文件\"><a href=\"#一个yml文件\" class=\"headerlink\" title=\"一个yml文件\"></a>一个yml文件</h3><p>application.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span></span><br><span class=\"line\"><span class=\"attr\">    active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#开发环境配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#测试环境配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">stg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1001</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#生产环境配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span> <span class=\"string\">prd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1002</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多个yml文件\"><a href=\"#多个yml文件\" class=\"headerlink\" title=\"多个yml文件\"></a>多个yml文件</h3><p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  profiles:</span></span><br><span class=\"line\"><span class=\"attr\">    active:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n<p>application-dev.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure></p>\n<p>application-stg.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1001</span></span><br></pre></td></tr></table></figure></p>\n<p>application-prd.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">1002</span></span><br></pre></td></tr></table></figure></p>\n"},{"layout":"spring","title":"Spring Boot多数据源整合","date":"2018-07-19T09:48:20.000Z","_content":"\n# 如何用Spring Boot 整合 MyBatis 连接多种数据源 & Spring Data Jpa 如何连接多种数据源\n\n> 引入依赖项公用\n\n```xml\ndependencies {\n\tcompile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')\n\tcompile('org.springframework.boot:spring-boot-starter-web')\n\truntime('mysql:mysql-connector-java')\n\truntime('com.microsoft.sqlserver:mssql-jdbc')\n\ttestCompile('org.springframework.boot:spring-boot-starter-test')\n}\n```\n***\n## 配置数据源公用\n> 新建数据源配置类\n\n```java\n@Configuration\npublic class DataSourceProperties {\n\n\t@Bean(\"mysqlDataSource\")\n\t@ConfigurationProperties(prefix = \"datasource.mysql\")\n\n\t@Primary\n\tpublic DataSource mysqlDataSource() {\n\t\treturn DataSourceBuilder.create().build();\n\t}\n\n\t@Bean(\"mssqlDataSource\")\n\t@ConfigurationProperties(prefix = \"datasource.mssql\")\n\tpublic DataSource mssqlDataSource(){\n\t\treturn DataSourceBuilder.create().build();\n\t}\n\n}\n```\n***\n\n## application.properties配置数据源\n```xml\ndatasource.mysql.url=jdbc:mysql://xx?serverTimezone=Asia/Shanghai&characterEncoding=utf8\ndatasource.mysql.username=xx\ndatasource.mysql.password=xx\ndatasource.mysql.driver-class-name=com.mysql.jdbc.Driver\ndatasource.mssql.url=jdbc:sqlserver://xx;databasename=xx\ndatasource.mssql.username=xx\ndatasource.mssql.password=xx\ndatasource.mssql.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver\n```\n***\n\n## MyBatis配置\n\n\n### mssql配置 \n```java\n@Configuration\n@EnableTransactionManagement\n@MapperScan(basePackages = \"指定mssql repository包名\", sqlSessionFactoryRef = \"mssqlSessionFactory\")\npublic class MssqlConfig {\n\t@Autowired\n\t@Qualifier(\"mssqlDataSource\")\n\tprivate DataSource mssqlDataSource;\n\n\t@Bean(name = \"mssqlTransactionManager\")\n\tpublic DataSourceTransactionManager dataSourceTransactionManager() {\n\t\treturn new DataSourceTransactionManager(mssqlDataSource);\n\t}\n\n\t@Bean(name = \"mssqlSessionFactory\")\n\tpublic SqlSessionFactory clusterSqlSessionFactory() throws Exception {\n\t\tfinal SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n\t\tsessionFactory.setDataSource(mssqlDataSource);\n\t\tsessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(\"classpath:config/mybatis/mapper/*.xml\"));\n\t\treturn sessionFactory.getObject();\n\t}\n\n}\n```\n\n### mysql配置\n```java\n@Configuration\n@EnableTransactionManagement\n@MapperScan(basePackages = \"指定mysql repository包名\", sqlSessionFactoryRef = \"mysqlSessionFactory\")\npublic class MySqlConfig {\n\t@Autowired\n\t@Qualifier(\"mysqlDataSource\")\n\tprivate DataSource mysqlDataSource;\n\t\n\t@Bean(name = \"mysqlTransactionManager\")\n\t@Primary\n\tpublic DataSourceTransactionManager dataSourceTransactionManager() {\n\t\treturn new DataSourceTransactionManager(mysqlDataSource);\n\t}\n\n\t@Bean(name = \"mysqlSessionFactory\")\n\t@Primary\n\tpublic SqlSessionFactory clusterSqlSessionFactory() throws Exception {\n\t\tfinal SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n\t\tsessionFactory.setDataSource(mysqlDataSource);\n\t\tsessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(\"classpath:config/mybatis/mapper/*.xml\"));\n\t\treturn sessionFactory.getObject();\n\t}\n}\n```\n\n## Spring Data Jpa配置\n\n### mssql配置\n\n```java\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(entityManagerFactoryRef=\"entityManagerFactorySecondary\",\n\t\ttransactionManagerRef=\"transactionManagerSecondary\",\n\t\tbasePackages= { \"指定mssql repository包名\" })\npublic class MSSqlConfig {\n\t@Autowired\n\t@Qualifier(\"mssqlDataSource\")\n\tprivate DataSource mssqlDataSource;\n\n\t@Bean(name = \"entityManagerSecondary\")\n\tpublic EntityManager entityManager(EntityManagerFactoryBuilder builder) {\n\t\treturn entityManagerFactorySecondary(builder).getObject().createEntityManager();\n\t}\n\n\t@Bean(name = \"entityManagerFactorySecondary\")\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactorySecondary (EntityManagerFactoryBuilder builder) {\n\t\treturn builder.dataSource(mssqlDataSource).properties(getVendorProperties(mssqlDataSource))\n\t\t//设置实体类所在位置\n\t\t.packages(\"指定实体路径\")\n\t\t.persistenceUnit(\"mssqlPersistenceUnit\")\n\t\t.build();\n\t}\n\n\t@Autowired\n\tprivate JpaProperties jpaProperties;\n\n\tprivate Map getVendorProperties(DataSource dataSource) {\n\t\treturn jpaProperties.getHibernateProperties(dataSource);\n\t}\n\n\t@Bean(name = \"transactionManagerSecondary\")\n\tPlatformTransactionManager transactionManagerSecondary(EntityManagerFactoryBuilder builder) {\n\t\treturn new JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());\n\t}\n\n}\n```\n\n\n### Mysql配置\n```java\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(entityManagerFactoryRef = \"entityManagerFactoryPrimary\",\n\t\ttransactionManagerRef = \"transactionManagerPrimary\",basePackages = {\"指定mysql repository包名\"})\npublic class MySqlConfig {\n\t\n\t@Autowired\n\t@Qualifier(\"mysqlDataSource\")\n\tprivate DataSource mysqlDataSource;\n\n\t@Primary\n\t@Bean(name = \"entityManagerPrimary\")\n\tpublic EntityManager entityManager(EntityManagerFactoryBuilder builder) {\n\treturn entityManagerFactoryPrimary(builder).getObject().createEntityManager();\n\t}\n\t@Primary\n\t@Bean(name = \"entityManagerFactoryPrimary\")\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactoryPrimary(EntityManagerFactoryBuilder builder) {\n\t\treturn builder.dataSource(mysqlDataSource).properties(getVendorProperties(mysqlDataSource))\n\t\t//设置实体类所在位置\n\t\t\t.packages(\"指定实体路径\")\n\t\t\t.persistenceUnit(\"mysqlPersistenceUnit\")\n\t\t\t.build();\n\t}\n\t@Autowired\n\tprivate JpaProperties jpaProperties;\n\t\n\tprivate Map getVendorProperties(DataSource dataSource) {\n\t\treturn jpaProperties.getHibernateProperties(dataSource);\n\t}\n\n\t@Primary\n\t@Bean(name = \"transactionManagerPrimary\")\n\tpublic PlatformTransactionManager transactionManagerPrimary(EntityManagerFactoryBuilder builder) {\n\t\treturn new JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());\n\t}\n\n}\n```\n\n\n## 关键注解的解析\n> 1. @Configuration\n\n相当于传统的xml配置文件，项目中如果需要依赖第三方的xml文件，仍然建议通过此配置类作为项目的配置主类，通过@ImportResource注解加载xml配置文件。\n\n> 2. @Bean\n\n该注解告诉Spring这个方法将会返回一个对象，该对象要注册为Spring应用上下文中的bean\n\n> 3. @ConfigurationProperties\n\n读取配置文件信息，读取并自动封装成实体类。这样在代码里使用更加方便。@Value需要单独建立xxxProperties进行映射，效果差不多\n\n> 4. @Primary\n\n当系统里面出现多个数据源的时候，需要进行人为指定主数据源\n\n> 5. @EnableTransactionManagement\n\nSpring Boot使用事务非常简单，使用该注解开启事务支持，然后在访问数据库的Service方法上添加注解@Transactional便可。\n\n> 6. @MapperScan\n\n在数据持久层使用MyBatis时候，使用该注解配置扫描Mapper位置\n\n> 7. @Autowired\n\n使用该注解进行自动注入，但是Spring 容器中匹配候选Bean数目必须有且仅有一个。当找不到一个匹配的时候，Spring容器会抛出异常\n\n> 8. @Qualifier\n\n在当使用@Autowired产生歧义的时候，可以使用该注解指定对应的name来消除歧义\n\n> 9. EnableJpaRepositories\n\n该注解开启对Spring Data JPA Repository的支持\n\n通过以上的配置，项目就可以同时访问多种数据源了。\n\n赶紧记下，别待会儿忘了\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/backEnd/spring/Spring Boot多数据源整合.md","raw":"---\nlayout: spring\ntitle: Spring Boot多数据源整合\ndate: 2018-07-19 17:48:20\ntags: spring\ncategories: java Program\n---\n\n# 如何用Spring Boot 整合 MyBatis 连接多种数据源 & Spring Data Jpa 如何连接多种数据源\n\n> 引入依赖项公用\n\n```xml\ndependencies {\n\tcompile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')\n\tcompile('org.springframework.boot:spring-boot-starter-web')\n\truntime('mysql:mysql-connector-java')\n\truntime('com.microsoft.sqlserver:mssql-jdbc')\n\ttestCompile('org.springframework.boot:spring-boot-starter-test')\n}\n```\n***\n## 配置数据源公用\n> 新建数据源配置类\n\n```java\n@Configuration\npublic class DataSourceProperties {\n\n\t@Bean(\"mysqlDataSource\")\n\t@ConfigurationProperties(prefix = \"datasource.mysql\")\n\n\t@Primary\n\tpublic DataSource mysqlDataSource() {\n\t\treturn DataSourceBuilder.create().build();\n\t}\n\n\t@Bean(\"mssqlDataSource\")\n\t@ConfigurationProperties(prefix = \"datasource.mssql\")\n\tpublic DataSource mssqlDataSource(){\n\t\treturn DataSourceBuilder.create().build();\n\t}\n\n}\n```\n***\n\n## application.properties配置数据源\n```xml\ndatasource.mysql.url=jdbc:mysql://xx?serverTimezone=Asia/Shanghai&characterEncoding=utf8\ndatasource.mysql.username=xx\ndatasource.mysql.password=xx\ndatasource.mysql.driver-class-name=com.mysql.jdbc.Driver\ndatasource.mssql.url=jdbc:sqlserver://xx;databasename=xx\ndatasource.mssql.username=xx\ndatasource.mssql.password=xx\ndatasource.mssql.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver\n```\n***\n\n## MyBatis配置\n\n\n### mssql配置 \n```java\n@Configuration\n@EnableTransactionManagement\n@MapperScan(basePackages = \"指定mssql repository包名\", sqlSessionFactoryRef = \"mssqlSessionFactory\")\npublic class MssqlConfig {\n\t@Autowired\n\t@Qualifier(\"mssqlDataSource\")\n\tprivate DataSource mssqlDataSource;\n\n\t@Bean(name = \"mssqlTransactionManager\")\n\tpublic DataSourceTransactionManager dataSourceTransactionManager() {\n\t\treturn new DataSourceTransactionManager(mssqlDataSource);\n\t}\n\n\t@Bean(name = \"mssqlSessionFactory\")\n\tpublic SqlSessionFactory clusterSqlSessionFactory() throws Exception {\n\t\tfinal SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n\t\tsessionFactory.setDataSource(mssqlDataSource);\n\t\tsessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(\"classpath:config/mybatis/mapper/*.xml\"));\n\t\treturn sessionFactory.getObject();\n\t}\n\n}\n```\n\n### mysql配置\n```java\n@Configuration\n@EnableTransactionManagement\n@MapperScan(basePackages = \"指定mysql repository包名\", sqlSessionFactoryRef = \"mysqlSessionFactory\")\npublic class MySqlConfig {\n\t@Autowired\n\t@Qualifier(\"mysqlDataSource\")\n\tprivate DataSource mysqlDataSource;\n\t\n\t@Bean(name = \"mysqlTransactionManager\")\n\t@Primary\n\tpublic DataSourceTransactionManager dataSourceTransactionManager() {\n\t\treturn new DataSourceTransactionManager(mysqlDataSource);\n\t}\n\n\t@Bean(name = \"mysqlSessionFactory\")\n\t@Primary\n\tpublic SqlSessionFactory clusterSqlSessionFactory() throws Exception {\n\t\tfinal SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n\t\tsessionFactory.setDataSource(mysqlDataSource);\n\t\tsessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(\"classpath:config/mybatis/mapper/*.xml\"));\n\t\treturn sessionFactory.getObject();\n\t}\n}\n```\n\n## Spring Data Jpa配置\n\n### mssql配置\n\n```java\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(entityManagerFactoryRef=\"entityManagerFactorySecondary\",\n\t\ttransactionManagerRef=\"transactionManagerSecondary\",\n\t\tbasePackages= { \"指定mssql repository包名\" })\npublic class MSSqlConfig {\n\t@Autowired\n\t@Qualifier(\"mssqlDataSource\")\n\tprivate DataSource mssqlDataSource;\n\n\t@Bean(name = \"entityManagerSecondary\")\n\tpublic EntityManager entityManager(EntityManagerFactoryBuilder builder) {\n\t\treturn entityManagerFactorySecondary(builder).getObject().createEntityManager();\n\t}\n\n\t@Bean(name = \"entityManagerFactorySecondary\")\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactorySecondary (EntityManagerFactoryBuilder builder) {\n\t\treturn builder.dataSource(mssqlDataSource).properties(getVendorProperties(mssqlDataSource))\n\t\t//设置实体类所在位置\n\t\t.packages(\"指定实体路径\")\n\t\t.persistenceUnit(\"mssqlPersistenceUnit\")\n\t\t.build();\n\t}\n\n\t@Autowired\n\tprivate JpaProperties jpaProperties;\n\n\tprivate Map getVendorProperties(DataSource dataSource) {\n\t\treturn jpaProperties.getHibernateProperties(dataSource);\n\t}\n\n\t@Bean(name = \"transactionManagerSecondary\")\n\tPlatformTransactionManager transactionManagerSecondary(EntityManagerFactoryBuilder builder) {\n\t\treturn new JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());\n\t}\n\n}\n```\n\n\n### Mysql配置\n```java\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(entityManagerFactoryRef = \"entityManagerFactoryPrimary\",\n\t\ttransactionManagerRef = \"transactionManagerPrimary\",basePackages = {\"指定mysql repository包名\"})\npublic class MySqlConfig {\n\t\n\t@Autowired\n\t@Qualifier(\"mysqlDataSource\")\n\tprivate DataSource mysqlDataSource;\n\n\t@Primary\n\t@Bean(name = \"entityManagerPrimary\")\n\tpublic EntityManager entityManager(EntityManagerFactoryBuilder builder) {\n\treturn entityManagerFactoryPrimary(builder).getObject().createEntityManager();\n\t}\n\t@Primary\n\t@Bean(name = \"entityManagerFactoryPrimary\")\n\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactoryPrimary(EntityManagerFactoryBuilder builder) {\n\t\treturn builder.dataSource(mysqlDataSource).properties(getVendorProperties(mysqlDataSource))\n\t\t//设置实体类所在位置\n\t\t\t.packages(\"指定实体路径\")\n\t\t\t.persistenceUnit(\"mysqlPersistenceUnit\")\n\t\t\t.build();\n\t}\n\t@Autowired\n\tprivate JpaProperties jpaProperties;\n\t\n\tprivate Map getVendorProperties(DataSource dataSource) {\n\t\treturn jpaProperties.getHibernateProperties(dataSource);\n\t}\n\n\t@Primary\n\t@Bean(name = \"transactionManagerPrimary\")\n\tpublic PlatformTransactionManager transactionManagerPrimary(EntityManagerFactoryBuilder builder) {\n\t\treturn new JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());\n\t}\n\n}\n```\n\n\n## 关键注解的解析\n> 1. @Configuration\n\n相当于传统的xml配置文件，项目中如果需要依赖第三方的xml文件，仍然建议通过此配置类作为项目的配置主类，通过@ImportResource注解加载xml配置文件。\n\n> 2. @Bean\n\n该注解告诉Spring这个方法将会返回一个对象，该对象要注册为Spring应用上下文中的bean\n\n> 3. @ConfigurationProperties\n\n读取配置文件信息，读取并自动封装成实体类。这样在代码里使用更加方便。@Value需要单独建立xxxProperties进行映射，效果差不多\n\n> 4. @Primary\n\n当系统里面出现多个数据源的时候，需要进行人为指定主数据源\n\n> 5. @EnableTransactionManagement\n\nSpring Boot使用事务非常简单，使用该注解开启事务支持，然后在访问数据库的Service方法上添加注解@Transactional便可。\n\n> 6. @MapperScan\n\n在数据持久层使用MyBatis时候，使用该注解配置扫描Mapper位置\n\n> 7. @Autowired\n\n使用该注解进行自动注入，但是Spring 容器中匹配候选Bean数目必须有且仅有一个。当找不到一个匹配的时候，Spring容器会抛出异常\n\n> 8. @Qualifier\n\n在当使用@Autowired产生歧义的时候，可以使用该注解指定对应的name来消除歧义\n\n> 9. EnableJpaRepositories\n\n该注解开启对Spring Data JPA Repository的支持\n\n通过以上的配置，项目就可以同时访问多种数据源了。\n\n赶紧记下，别待会儿忘了\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"backEnd/spring/Spring Boot多数据源整合","published":1,"updated":"2018-08-04T06:32:45.595Z","comments":1,"photos":[],"link":"","_id":"cjkgtkccv0051m4cmke5jcqvy","content":"<h1 id=\"如何用Spring-Boot-整合-MyBatis-连接多种数据源-amp-Spring-Data-Jpa-如何连接多种数据源\"><a href=\"#如何用Spring-Boot-整合-MyBatis-连接多种数据源-amp-Spring-Data-Jpa-如何连接多种数据源\" class=\"headerlink\" title=\"如何用Spring Boot 整合 MyBatis 连接多种数据源 &amp; Spring Data Jpa 如何连接多种数据源\"></a>如何用Spring Boot 整合 MyBatis 连接多种数据源 &amp; Spring Data Jpa 如何连接多种数据源</h1><blockquote>\n<p>引入依赖项公用</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tcompile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')</span><br><span class=\"line\">\tcompile('org.springframework.boot:spring-boot-starter-web')</span><br><span class=\"line\">\truntime('mysql:mysql-connector-java')</span><br><span class=\"line\">\truntime('com.microsoft.sqlserver:mssql-jdbc')</span><br><span class=\"line\">\ttestCompile('org.springframework.boot:spring-boot-starter-test')</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"配置数据源公用\"><a href=\"#配置数据源公用\" class=\"headerlink\" title=\"配置数据源公用\"></a>配置数据源公用</h2><blockquote>\n<p>新建数据源配置类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(<span class=\"string\">\"mysqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"datasource.mysql\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">mysqlDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> DataSourceBuilder.create().build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(<span class=\"string\">\"mssqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"datasource.mssql\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">mssqlDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> DataSourceBuilder.create().build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"application-properties配置数据源\"><a href=\"#application-properties配置数据源\" class=\"headerlink\" title=\"application.properties配置数据源\"></a>application.properties配置数据源</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datasource.mysql.url=jdbc:mysql://xx?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span><br><span class=\"line\">datasource.mysql.username=xx</span><br><span class=\"line\">datasource.mysql.password=xx</span><br><span class=\"line\">datasource.mysql.driver-class-name=com.mysql.jdbc.Driver</span><br><span class=\"line\">datasource.mssql.url=jdbc:sqlserver://xx;databasename=xx</span><br><span class=\"line\">datasource.mssql.username=xx</span><br><span class=\"line\">datasource.mssql.password=xx</span><br><span class=\"line\">datasource.mssql.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"MyBatis配置\"><a href=\"#MyBatis配置\" class=\"headerlink\" title=\"MyBatis配置\"></a>MyBatis配置</h2><h3 id=\"mssql配置\"><a href=\"#mssql配置\" class=\"headerlink\" title=\"mssql配置\"></a>mssql配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = <span class=\"string\">\"指定mssql repository包名\"</span>, sqlSessionFactoryRef = <span class=\"string\">\"mssqlSessionFactory\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MssqlConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"mssqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DataSource mssqlDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"mssqlTransactionManager\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">dataSourceTransactionManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(mssqlDataSource);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"mssqlSessionFactory\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">clusterSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> SqlSessionFactoryBean sessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">\t\tsessionFactory.setDataSource(mssqlDataSource);</span><br><span class=\"line\">\t\tsessionFactory.setMapperLocations(<span class=\"keyword\">new</span> PathMatchingResourcePatternResolver().getResources(<span class=\"string\">\"classpath:config/mybatis/mapper/*.xml\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sessionFactory.getObject();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql配置\"><a href=\"#mysql配置\" class=\"headerlink\" title=\"mysql配置\"></a>mysql配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = <span class=\"string\">\"指定mysql repository包名\"</span>, sqlSessionFactoryRef = <span class=\"string\">\"mysqlSessionFactory\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"mysqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DataSource mysqlDataSource;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"mysqlTransactionManager\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">dataSourceTransactionManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(mysqlDataSource);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"mysqlSessionFactory\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">clusterSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> SqlSessionFactoryBean sessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">\t\tsessionFactory.setDataSource(mysqlDataSource);</span><br><span class=\"line\">\t\tsessionFactory.setMapperLocations(<span class=\"keyword\">new</span> PathMatchingResourcePatternResolver().getResources(<span class=\"string\">\"classpath:config/mybatis/mapper/*.xml\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sessionFactory.getObject();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Spring-Data-Jpa配置\"><a href=\"#Spring-Data-Jpa配置\" class=\"headerlink\" title=\"Spring Data Jpa配置\"></a>Spring Data Jpa配置</h2><h3 id=\"mssql配置-1\"><a href=\"#mssql配置-1\" class=\"headerlink\" title=\"mssql配置\"></a>mssql配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories</span>(entityManagerFactoryRef=<span class=\"string\">\"entityManagerFactorySecondary\"</span>,</span><br><span class=\"line\">\t\ttransactionManagerRef=<span class=\"string\">\"transactionManagerSecondary\"</span>,</span><br><span class=\"line\">\t\tbasePackages= &#123; <span class=\"string\">\"指定mssql repository包名\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MSSqlConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"mssqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DataSource mssqlDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"entityManagerSecondary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> EntityManager <span class=\"title\">entityManager</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> entityManagerFactorySecondary(builder).getObject().createEntityManager();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"entityManagerFactorySecondary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> LocalContainerEntityManagerFactoryBean <span class=\"title\">entityManagerFactorySecondary</span> <span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> builder.dataSource(mssqlDataSource).properties(getVendorProperties(mssqlDataSource))</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置实体类所在位置</span></span><br><span class=\"line\">\t\t.packages(<span class=\"string\">\"指定实体路径\"</span>)</span><br><span class=\"line\">\t\t.persistenceUnit(<span class=\"string\">\"mssqlPersistenceUnit\"</span>)</span><br><span class=\"line\">\t\t.build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JpaProperties jpaProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Map <span class=\"title\">getVendorProperties</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jpaProperties.getHibernateProperties(dataSource);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionManagerSecondary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\">PlatformTransactionManager <span class=\"title\">transactionManagerSecondary</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mysql配置\"><a href=\"#Mysql配置\" class=\"headerlink\" title=\"Mysql配置\"></a>Mysql配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories</span>(entityManagerFactoryRef = <span class=\"string\">\"entityManagerFactoryPrimary\"</span>,</span><br><span class=\"line\">\t\ttransactionManagerRef = <span class=\"string\">\"transactionManagerPrimary\"</span>,basePackages = &#123;<span class=\"string\">\"指定mysql repository包名\"</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlConfig</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"mysqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DataSource mysqlDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"entityManagerPrimary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> EntityManager <span class=\"title\">entityManager</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"entityManagerFactoryPrimary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> LocalContainerEntityManagerFactoryBean <span class=\"title\">entityManagerFactoryPrimary</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> builder.dataSource(mysqlDataSource).properties(getVendorProperties(mysqlDataSource))</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置实体类所在位置</span></span><br><span class=\"line\">\t\t\t.packages(<span class=\"string\">\"指定实体路径\"</span>)</span><br><span class=\"line\">\t\t\t.persistenceUnit(<span class=\"string\">\"mysqlPersistenceUnit\"</span>)</span><br><span class=\"line\">\t\t\t.build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JpaProperties jpaProperties;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Map <span class=\"title\">getVendorProperties</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jpaProperties.getHibernateProperties(dataSource);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionManagerPrimary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManagerPrimary</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关键注解的解析\"><a href=\"#关键注解的解析\" class=\"headerlink\" title=\"关键注解的解析\"></a>关键注解的解析</h2><blockquote>\n<ol>\n<li>@Configuration</li>\n</ol>\n</blockquote>\n<p>相当于传统的xml配置文件，项目中如果需要依赖第三方的xml文件，仍然建议通过此配置类作为项目的配置主类，通过@ImportResource注解加载xml配置文件。</p>\n<blockquote>\n<ol start=\"2\">\n<li>@Bean</li>\n</ol>\n</blockquote>\n<p>该注解告诉Spring这个方法将会返回一个对象，该对象要注册为Spring应用上下文中的bean</p>\n<blockquote>\n<ol start=\"3\">\n<li>@ConfigurationProperties</li>\n</ol>\n</blockquote>\n<p>读取配置文件信息，读取并自动封装成实体类。这样在代码里使用更加方便。@Value需要单独建立xxxProperties进行映射，效果差不多</p>\n<blockquote>\n<ol start=\"4\">\n<li>@Primary</li>\n</ol>\n</blockquote>\n<p>当系统里面出现多个数据源的时候，需要进行人为指定主数据源</p>\n<blockquote>\n<ol start=\"5\">\n<li>@EnableTransactionManagement</li>\n</ol>\n</blockquote>\n<p>Spring Boot使用事务非常简单，使用该注解开启事务支持，然后在访问数据库的Service方法上添加注解@Transactional便可。</p>\n<blockquote>\n<ol start=\"6\">\n<li>@MapperScan</li>\n</ol>\n</blockquote>\n<p>在数据持久层使用MyBatis时候，使用该注解配置扫描Mapper位置</p>\n<blockquote>\n<ol start=\"7\">\n<li>@Autowired</li>\n</ol>\n</blockquote>\n<p>使用该注解进行自动注入，但是Spring 容器中匹配候选Bean数目必须有且仅有一个。当找不到一个匹配的时候，Spring容器会抛出异常</p>\n<blockquote>\n<ol start=\"8\">\n<li>@Qualifier</li>\n</ol>\n</blockquote>\n<p>在当使用@Autowired产生歧义的时候，可以使用该注解指定对应的name来消除歧义</p>\n<blockquote>\n<ol start=\"9\">\n<li>EnableJpaRepositories</li>\n</ol>\n</blockquote>\n<p>该注解开启对Spring Data JPA Repository的支持</p>\n<p>通过以上的配置，项目就可以同时访问多种数据源了。</p>\n<p>赶紧记下，别待会儿忘了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何用Spring-Boot-整合-MyBatis-连接多种数据源-amp-Spring-Data-Jpa-如何连接多种数据源\"><a href=\"#如何用Spring-Boot-整合-MyBatis-连接多种数据源-amp-Spring-Data-Jpa-如何连接多种数据源\" class=\"headerlink\" title=\"如何用Spring Boot 整合 MyBatis 连接多种数据源 &amp; Spring Data Jpa 如何连接多种数据源\"></a>如何用Spring Boot 整合 MyBatis 连接多种数据源 &amp; Spring Data Jpa 如何连接多种数据源</h1><blockquote>\n<p>引入依赖项公用</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tcompile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')</span><br><span class=\"line\">\tcompile('org.springframework.boot:spring-boot-starter-web')</span><br><span class=\"line\">\truntime('mysql:mysql-connector-java')</span><br><span class=\"line\">\truntime('com.microsoft.sqlserver:mssql-jdbc')</span><br><span class=\"line\">\ttestCompile('org.springframework.boot:spring-boot-starter-test')</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"配置数据源公用\"><a href=\"#配置数据源公用\" class=\"headerlink\" title=\"配置数据源公用\"></a>配置数据源公用</h2><blockquote>\n<p>新建数据源配置类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(<span class=\"string\">\"mysqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"datasource.mysql\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">mysqlDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> DataSourceBuilder.create().build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(<span class=\"string\">\"mssqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"datasource.mssql\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">mssqlDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> DataSourceBuilder.create().build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"application-properties配置数据源\"><a href=\"#application-properties配置数据源\" class=\"headerlink\" title=\"application.properties配置数据源\"></a>application.properties配置数据源</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datasource.mysql.url=jdbc:mysql://xx?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span><br><span class=\"line\">datasource.mysql.username=xx</span><br><span class=\"line\">datasource.mysql.password=xx</span><br><span class=\"line\">datasource.mysql.driver-class-name=com.mysql.jdbc.Driver</span><br><span class=\"line\">datasource.mssql.url=jdbc:sqlserver://xx;databasename=xx</span><br><span class=\"line\">datasource.mssql.username=xx</span><br><span class=\"line\">datasource.mssql.password=xx</span><br><span class=\"line\">datasource.mssql.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"MyBatis配置\"><a href=\"#MyBatis配置\" class=\"headerlink\" title=\"MyBatis配置\"></a>MyBatis配置</h2><h3 id=\"mssql配置\"><a href=\"#mssql配置\" class=\"headerlink\" title=\"mssql配置\"></a>mssql配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = <span class=\"string\">\"指定mssql repository包名\"</span>, sqlSessionFactoryRef = <span class=\"string\">\"mssqlSessionFactory\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MssqlConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"mssqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DataSource mssqlDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"mssqlTransactionManager\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">dataSourceTransactionManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(mssqlDataSource);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"mssqlSessionFactory\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">clusterSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> SqlSessionFactoryBean sessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">\t\tsessionFactory.setDataSource(mssqlDataSource);</span><br><span class=\"line\">\t\tsessionFactory.setMapperLocations(<span class=\"keyword\">new</span> PathMatchingResourcePatternResolver().getResources(<span class=\"string\">\"classpath:config/mybatis/mapper/*.xml\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sessionFactory.getObject();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql配置\"><a href=\"#mysql配置\" class=\"headerlink\" title=\"mysql配置\"></a>mysql配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = <span class=\"string\">\"指定mysql repository包名\"</span>, sqlSessionFactoryRef = <span class=\"string\">\"mysqlSessionFactory\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"mysqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DataSource mysqlDataSource;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"mysqlTransactionManager\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">dataSourceTransactionManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(mysqlDataSource);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"mysqlSessionFactory\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">clusterSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> SqlSessionFactoryBean sessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">\t\tsessionFactory.setDataSource(mysqlDataSource);</span><br><span class=\"line\">\t\tsessionFactory.setMapperLocations(<span class=\"keyword\">new</span> PathMatchingResourcePatternResolver().getResources(<span class=\"string\">\"classpath:config/mybatis/mapper/*.xml\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sessionFactory.getObject();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Spring-Data-Jpa配置\"><a href=\"#Spring-Data-Jpa配置\" class=\"headerlink\" title=\"Spring Data Jpa配置\"></a>Spring Data Jpa配置</h2><h3 id=\"mssql配置-1\"><a href=\"#mssql配置-1\" class=\"headerlink\" title=\"mssql配置\"></a>mssql配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories</span>(entityManagerFactoryRef=<span class=\"string\">\"entityManagerFactorySecondary\"</span>,</span><br><span class=\"line\">\t\ttransactionManagerRef=<span class=\"string\">\"transactionManagerSecondary\"</span>,</span><br><span class=\"line\">\t\tbasePackages= &#123; <span class=\"string\">\"指定mssql repository包名\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MSSqlConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"mssqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DataSource mssqlDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"entityManagerSecondary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> EntityManager <span class=\"title\">entityManager</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> entityManagerFactorySecondary(builder).getObject().createEntityManager();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"entityManagerFactorySecondary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> LocalContainerEntityManagerFactoryBean <span class=\"title\">entityManagerFactorySecondary</span> <span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> builder.dataSource(mssqlDataSource).properties(getVendorProperties(mssqlDataSource))</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置实体类所在位置</span></span><br><span class=\"line\">\t\t.packages(<span class=\"string\">\"指定实体路径\"</span>)</span><br><span class=\"line\">\t\t.persistenceUnit(<span class=\"string\">\"mssqlPersistenceUnit\"</span>)</span><br><span class=\"line\">\t\t.build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JpaProperties jpaProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Map <span class=\"title\">getVendorProperties</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jpaProperties.getHibernateProperties(dataSource);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionManagerSecondary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\">PlatformTransactionManager <span class=\"title\">transactionManagerSecondary</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mysql配置\"><a href=\"#Mysql配置\" class=\"headerlink\" title=\"Mysql配置\"></a>Mysql配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories</span>(entityManagerFactoryRef = <span class=\"string\">\"entityManagerFactoryPrimary\"</span>,</span><br><span class=\"line\">\t\ttransactionManagerRef = <span class=\"string\">\"transactionManagerPrimary\"</span>,basePackages = &#123;<span class=\"string\">\"指定mysql repository包名\"</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlConfig</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"mysqlDataSource\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DataSource mysqlDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"entityManagerPrimary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> EntityManager <span class=\"title\">entityManager</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"entityManagerFactoryPrimary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> LocalContainerEntityManagerFactoryBean <span class=\"title\">entityManagerFactoryPrimary</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> builder.dataSource(mysqlDataSource).properties(getVendorProperties(mysqlDataSource))</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置实体类所在位置</span></span><br><span class=\"line\">\t\t\t.packages(<span class=\"string\">\"指定实体路径\"</span>)</span><br><span class=\"line\">\t\t\t.persistenceUnit(<span class=\"string\">\"mysqlPersistenceUnit\"</span>)</span><br><span class=\"line\">\t\t\t.build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> JpaProperties jpaProperties;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Map <span class=\"title\">getVendorProperties</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jpaProperties.getHibernateProperties(dataSource);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Primary</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"transactionManagerPrimary\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManagerPrimary</span><span class=\"params\">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关键注解的解析\"><a href=\"#关键注解的解析\" class=\"headerlink\" title=\"关键注解的解析\"></a>关键注解的解析</h2><blockquote>\n<ol>\n<li>@Configuration</li>\n</ol>\n</blockquote>\n<p>相当于传统的xml配置文件，项目中如果需要依赖第三方的xml文件，仍然建议通过此配置类作为项目的配置主类，通过@ImportResource注解加载xml配置文件。</p>\n<blockquote>\n<ol start=\"2\">\n<li>@Bean</li>\n</ol>\n</blockquote>\n<p>该注解告诉Spring这个方法将会返回一个对象，该对象要注册为Spring应用上下文中的bean</p>\n<blockquote>\n<ol start=\"3\">\n<li>@ConfigurationProperties</li>\n</ol>\n</blockquote>\n<p>读取配置文件信息，读取并自动封装成实体类。这样在代码里使用更加方便。@Value需要单独建立xxxProperties进行映射，效果差不多</p>\n<blockquote>\n<ol start=\"4\">\n<li>@Primary</li>\n</ol>\n</blockquote>\n<p>当系统里面出现多个数据源的时候，需要进行人为指定主数据源</p>\n<blockquote>\n<ol start=\"5\">\n<li>@EnableTransactionManagement</li>\n</ol>\n</blockquote>\n<p>Spring Boot使用事务非常简单，使用该注解开启事务支持，然后在访问数据库的Service方法上添加注解@Transactional便可。</p>\n<blockquote>\n<ol start=\"6\">\n<li>@MapperScan</li>\n</ol>\n</blockquote>\n<p>在数据持久层使用MyBatis时候，使用该注解配置扫描Mapper位置</p>\n<blockquote>\n<ol start=\"7\">\n<li>@Autowired</li>\n</ol>\n</blockquote>\n<p>使用该注解进行自动注入，但是Spring 容器中匹配候选Bean数目必须有且仅有一个。当找不到一个匹配的时候，Spring容器会抛出异常</p>\n<blockquote>\n<ol start=\"8\">\n<li>@Qualifier</li>\n</ol>\n</blockquote>\n<p>在当使用@Autowired产生歧义的时候，可以使用该注解指定对应的name来消除歧义</p>\n<blockquote>\n<ol start=\"9\">\n<li>EnableJpaRepositories</li>\n</ol>\n</blockquote>\n<p>该注解开启对Spring Data JPA Repository的支持</p>\n<p>通过以上的配置，项目就可以同时访问多种数据源了。</p>\n<p>赶紧记下，别待会儿忘了</p>\n"},{"title":"tiny-spring 简介","date":"2018-03-18T11:50:12.000Z","_content":"\ntiny-spring是模拟Spring的一个简单的框架，主要包含如下设计模式：\n\n -  模板方法模式\n\n该模式大量使用，例如在 BeanFactory 中，把 getBean() 交给子类实现，不同的子类 **BeanFactory** 对其可以采取不同的实现。\n\n -  代理模式\n\n在tiny-spring 中，ApplicationContext继承了BeanFactory接口，具备了 getBean() 功能，但是又内置了一个BeanFactory实例，getBean()直接调用 BeanFactory的 getBean() 。但是ApplicationContext 加强了 BeanFactory，它把类定义的加载也包含进去了。\n\n -  策略模式\n\n生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现\n\n## tiny-spring IOC构建流程\n\n(节选之tiny-spring的changelog.md)\n\n### 1. step1-最基本的容器\n\nIoC最基本的角色有两个：容器(`BeanFactory`)和Bean本身。这里使用`BeanDefinition`来封装了bean对象，这样可以保存一些额外的元信息。测试代码：\n\n```\n// 1.初始化beanfactory\nBeanFactory beanFactory = new BeanFactory();\n\n// 2.注入bean\nBeanDefinition beanDefinition = new BeanDefinition(new HelloWorldService());\nbeanFactory.registerBeanDefinition(\"helloWorldService\", beanDefinition);\n\n// 3.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 2. step2-将bean创建放入工厂\n\nstep1中的bean是初始化好之后再set进去的，实际使用中，我们希望容器来管理bean的创建。于是我们将bean的初始化放入BeanFactory中。为了保证扩展性，我们使用Extract Interface的方法，将`BeanFactory`替换成接口，而使用`AbstractBeanFactory`和`AutowireCapableBeanFactory`作为其实现。\"AutowireCapable\"的意思是“可自动装配的”，为我们后面注入属性做准备。\n\n```\n // 1.初始化beanfactory\nBeanFactory beanFactory = new AutowireCapableBeanFactory();\n\n// 2.注入bean\nBeanDefinition beanDefinition = new BeanDefinition();\nbeanDefinition.setBeanClassName(\"us.codecraft.tinyioc.HelloWorldService\");\nbeanFactory.registerBeanDefinition(\"helloWorldService\", beanDefinition);\n\n// 3.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 3. step3-为bean注入属性\n\n这一步，我们想要为bean注入属性。我们选择将属性注入信息保存成`PropertyValue`对象，并且保存到`BeanDefinition`中。这样在初始化bean的时候，我们就可以根据PropertyValue来进行bean属性的注入。Spring本身使用了setter来进行注入，这里为了代码简洁，我们使用Field的形式来注入。\n\n```\n// 1.初始化beanfactory\nBeanFactory beanFactory = new AutowireCapableBeanFactory();\n\n// 2.bean定义\nBeanDefinition beanDefinition = new BeanDefinition();\nbeanDefinition.setBeanClassName(\"us.codecraft.tinyioc.HelloWorldService\");\n\n// 3.设置属性\nPropertyValues propertyValues = new PropertyValues();\npropertyValues.addPropertyValue(new PropertyValue(\"text\", \"Hello World!\"));\nbeanDefinition.setPropertyValues(propertyValues);\n\n// 4.生成bean\nbeanFactory.registerBeanDefinition(\"helloWorldService\", beanDefinition);\n\n// 5.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 4. step4-读取xml配置来初始化bean\n\n这么大一坨初始化代码让人心烦。这里的`BeanDefinition`只是一些配置，我们还是用xml来初始化吧。我们定义了`BeanDefinitionReader`初始化bean，它有一个实现是`XmlBeanDefinitionReader`。\n\n```\n// 1.读取配置\nXmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());\nxmlBeanDefinitionReader.loadBeanDefinitions(\"tinyioc.xml\");\n\n// 2.初始化BeanFactory并注册bean\nBeanFactory beanFactory = new AutowireCapableBeanFactory();\nfor (Map.Entry<String, BeanDefinition> beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) {\n        beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());\n}\n\n// 3.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 5. step5-为bean注入bean\n\n使用xml配置之后，似乎里我们熟知的Spring更近了一步！但是现在有一个大问题没有解决：我们无法处理bean之间的依赖，无法将bean注入到bean中，所以它无法称之为完整的IoC容器！如何实现呢？我们定义一个`BeanReference`，来表示这个属性是对另一个bean的引用。这个在读取xml的时候初始化，并在初始化bean的时候，进行解析和真实bean的注入。\n\n```\nfor (PropertyValue propertyValue : mbd.getPropertyValues().getPropertyValues()) {\n    Field declaredField = bean.getClass().getDeclaredField(propertyValue.getName());\n    declaredField.setAccessible(true);\n    Object value = propertyValue.getValue();\n    if (value instanceof BeanReference) {\n        BeanReference beanReference = (BeanReference) value;\n        value = getBean(beanReference.getName());\n    }\n    declaredField.set(bean, value);\n}\n```\n\n同时为了解决循环依赖的问题，我们使用lazy-init的方式，将createBean的事情放到`getBean`的时候才执行，是不是一下子方便很多？这样在注入bean的时候，如果该属性对应的bean找不到，那么就先创建！因为总是先创建后注入，所以不会存在两个循环依赖的bean创建死锁的问题。\n\n```\n// 1.读取配置\nXmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());\nxmlBeanDefinitionReader.loadBeanDefinitions(\"tinyioc.xml\");\n\n// 2.初始化BeanFactory并注册bean\nAbstractBeanFactory beanFactory = new AutowireCapableBeanFactory();\nfor (Map.Entry<String, BeanDefinition> beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) {\n    beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());\n}\n\n// 3.初始化bean\nbeanFactory.preInstantiateSingletons();\n\n// 4.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 6. step6-ApplicationContext登场\n\n现在BeanFactory的功能齐全了，但是使用起来有点麻烦。于是我们引入熟悉的`ApplicationContext`接口，并在`AbstractApplicationContext`的`refresh()`方法中进行bean的初始化工作。\n\n```\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"tinyioc.xml\");\nHelloWorldService helloWorldService = (HelloWorldService) applicationContext.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n是不是非常熟悉？至此为止，我们的tiny-spring的IoC部分可说完工了。这部分的类、方法命名和作用，都是对应Spring中相应的组件。虽然代码量只有400多行，但是已经有了基本的IoC功能！\n\n## tiny-spring的核心类\n\n### 1. Resource家族\n\nResource以及继承它的几个类，用于IOC的类定位，也就是：**配置文件从哪读、如何读。**\n\n#### Resource接口\n\n标识一个外部资源。定义getInputStream()方法来获取资源的输入流。\n\n#### UrlResource\n\n实现 Resource 接口的资源类，通过 URL 获取资源。\n\n#### ResourceLoader\n\n资源加载类。通过 getResource(String)方法获取一个Resouce对象，是获取Resouce的主要途径。\n\n### 2. BeanDefinition家族\n\nBeanDefinition为核心的几个类，是用来**定义Bean**：名字是什么、类型是什么、属性赋予了哪些值或者引用，使得IoC容器可以根据这个定义来生成实例。\n\n#### BeanDefinition\n\n该类保存了Bean定义，包括，名字(String beanClassName)、类型(Class beanClass)、属性(PropertyValues propertyValues)。根据其类型可以生成一个类实例，然后可以把属性 注入进去。\n\n#### BeanDefinitionReader\n\n解析BeanDefinition的接口。通过loadBeanDefinitions(String)从一个地址加载类定义。\n\n#### AbstractBeanDefinitionReader\n\n实现 BeanDefinitionReader 接口的抽象类（未具体实现 loadBeanDefinitions，而是规范了 BeanDefinitionReader 的基本结构）。内置一个 HashMap rigistry，用于保存 String - beanDefinition 的键值对。内置一个 ResourceLoader resourceLoader，用于保存类加载器。使用时，只需要向其 loadBeanDefinitions() 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 BeanDefinition 保存到 registry 中去。\n\n#### XmlBeanDefinitionReader\n\n具体实现了loadBeanDefinitions()方法，并从XML文件中读取类定义。\n\n### 3. BeanFactory家族\n\n以BeanFactory为核心的类，用于IoC容器在已经获取Bean时，对Bean实例的装配、获取。\n\n#### BeanFactory\n\n接口，标识一个 IoC 容器。通过 getBean(String) 方法来获取一个对象\n\n#### AbstractBeanFactory\n\nBeanFactory 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 Bean 的具体实现方式留给子类实现。\n\n同时维护一个 beanDefinitionMap 哈希表用于保存类的定义信息（BeanDefinition）。获取 Bean 时，如果 Bean 已经存在于容器中，则返回之，否则则调用 doCreateBean 方法装配一个 Bean。\n\n#### AutowireCapableBeanFactory\n\n实现了 doCreateBean 方法，该方法分三步：1 通过 BeanDefinition 中保存的类信息实例化一个对象；2 把对象保存在 BeanDefinition 中，以备下次获取；3 为其装配属性。\n\n### 4. ApplicationContext家族\n\n以ApplicationContext 接口为核心的类，主要是对前面 Resouce、BeanFactoryBeanDefinition 进行了功能的封装，解决 **根据地址获取 IoC 容器并使用**的问题。\n\n#### ApplicationContext\n\n标记接口，继承了 BeanFactory。通常，要实现一个 IoC 容器时，需要先通过 ResourceLoader 获取一个 Resource，其中包括了容器的配置、Bean 的定义信息。接着，使用 BeanDefinitionReader 读取该 Resource 中的 BeanDefinition 信息。最后，把 BeanDefinition 保存在 BeanFactory 中，容器配置完毕可以使用。\n\n注意到 BeanFactory只实现了Bean的装配、获取，并未说明Bean的来源 也就是 BeanDefinition是如何加载的。该接口把 BeanFactory 和 BeanDefinitionReader 结合在了一起。\n\n#### AbstractApplicationContext\n\nApplicationContext的抽象实现，内部包含一个BeanFactory类。主要方法有 getBean() 和 refresh() 方法。getBean() 直接调用了内置 BeanFactory 的 getBean() 方法，refresh() 则用于实现 BeanFactory 的刷新，也就是告诉 BeanFactory 该使用哪个资源（Resource）加载类定义（BeanDefinition）信息，该方法留给子类实现，用以实现 从不同来源的不同类型的资源加载类定义 的效果\n\n#### ClassPathXmlApplicationContext\n\n从类路径加载资源的具体实现类。内部通过 XmlBeanDefinitionReader 解析 UrlResourceLoader 读取到的 Resource，获取 BeanDefinition 信息，然后将其保存到内置的 BeanFactory 中。","source":"_posts/backEnd/spring/tiny-spring 简介.md","raw":"---\ntitle: tiny-spring 简介\ndate: 2018-03-18 19:50:12\ntags: spring\ncategories: java Program\n---\n\ntiny-spring是模拟Spring的一个简单的框架，主要包含如下设计模式：\n\n -  模板方法模式\n\n该模式大量使用，例如在 BeanFactory 中，把 getBean() 交给子类实现，不同的子类 **BeanFactory** 对其可以采取不同的实现。\n\n -  代理模式\n\n在tiny-spring 中，ApplicationContext继承了BeanFactory接口，具备了 getBean() 功能，但是又内置了一个BeanFactory实例，getBean()直接调用 BeanFactory的 getBean() 。但是ApplicationContext 加强了 BeanFactory，它把类定义的加载也包含进去了。\n\n -  策略模式\n\n生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现\n\n## tiny-spring IOC构建流程\n\n(节选之tiny-spring的changelog.md)\n\n### 1. step1-最基本的容器\n\nIoC最基本的角色有两个：容器(`BeanFactory`)和Bean本身。这里使用`BeanDefinition`来封装了bean对象，这样可以保存一些额外的元信息。测试代码：\n\n```\n// 1.初始化beanfactory\nBeanFactory beanFactory = new BeanFactory();\n\n// 2.注入bean\nBeanDefinition beanDefinition = new BeanDefinition(new HelloWorldService());\nbeanFactory.registerBeanDefinition(\"helloWorldService\", beanDefinition);\n\n// 3.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 2. step2-将bean创建放入工厂\n\nstep1中的bean是初始化好之后再set进去的，实际使用中，我们希望容器来管理bean的创建。于是我们将bean的初始化放入BeanFactory中。为了保证扩展性，我们使用Extract Interface的方法，将`BeanFactory`替换成接口，而使用`AbstractBeanFactory`和`AutowireCapableBeanFactory`作为其实现。\"AutowireCapable\"的意思是“可自动装配的”，为我们后面注入属性做准备。\n\n```\n // 1.初始化beanfactory\nBeanFactory beanFactory = new AutowireCapableBeanFactory();\n\n// 2.注入bean\nBeanDefinition beanDefinition = new BeanDefinition();\nbeanDefinition.setBeanClassName(\"us.codecraft.tinyioc.HelloWorldService\");\nbeanFactory.registerBeanDefinition(\"helloWorldService\", beanDefinition);\n\n// 3.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 3. step3-为bean注入属性\n\n这一步，我们想要为bean注入属性。我们选择将属性注入信息保存成`PropertyValue`对象，并且保存到`BeanDefinition`中。这样在初始化bean的时候，我们就可以根据PropertyValue来进行bean属性的注入。Spring本身使用了setter来进行注入，这里为了代码简洁，我们使用Field的形式来注入。\n\n```\n// 1.初始化beanfactory\nBeanFactory beanFactory = new AutowireCapableBeanFactory();\n\n// 2.bean定义\nBeanDefinition beanDefinition = new BeanDefinition();\nbeanDefinition.setBeanClassName(\"us.codecraft.tinyioc.HelloWorldService\");\n\n// 3.设置属性\nPropertyValues propertyValues = new PropertyValues();\npropertyValues.addPropertyValue(new PropertyValue(\"text\", \"Hello World!\"));\nbeanDefinition.setPropertyValues(propertyValues);\n\n// 4.生成bean\nbeanFactory.registerBeanDefinition(\"helloWorldService\", beanDefinition);\n\n// 5.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 4. step4-读取xml配置来初始化bean\n\n这么大一坨初始化代码让人心烦。这里的`BeanDefinition`只是一些配置，我们还是用xml来初始化吧。我们定义了`BeanDefinitionReader`初始化bean，它有一个实现是`XmlBeanDefinitionReader`。\n\n```\n// 1.读取配置\nXmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());\nxmlBeanDefinitionReader.loadBeanDefinitions(\"tinyioc.xml\");\n\n// 2.初始化BeanFactory并注册bean\nBeanFactory beanFactory = new AutowireCapableBeanFactory();\nfor (Map.Entry<String, BeanDefinition> beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) {\n        beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());\n}\n\n// 3.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 5. step5-为bean注入bean\n\n使用xml配置之后，似乎里我们熟知的Spring更近了一步！但是现在有一个大问题没有解决：我们无法处理bean之间的依赖，无法将bean注入到bean中，所以它无法称之为完整的IoC容器！如何实现呢？我们定义一个`BeanReference`，来表示这个属性是对另一个bean的引用。这个在读取xml的时候初始化，并在初始化bean的时候，进行解析和真实bean的注入。\n\n```\nfor (PropertyValue propertyValue : mbd.getPropertyValues().getPropertyValues()) {\n    Field declaredField = bean.getClass().getDeclaredField(propertyValue.getName());\n    declaredField.setAccessible(true);\n    Object value = propertyValue.getValue();\n    if (value instanceof BeanReference) {\n        BeanReference beanReference = (BeanReference) value;\n        value = getBean(beanReference.getName());\n    }\n    declaredField.set(bean, value);\n}\n```\n\n同时为了解决循环依赖的问题，我们使用lazy-init的方式，将createBean的事情放到`getBean`的时候才执行，是不是一下子方便很多？这样在注入bean的时候，如果该属性对应的bean找不到，那么就先创建！因为总是先创建后注入，所以不会存在两个循环依赖的bean创建死锁的问题。\n\n```\n// 1.读取配置\nXmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());\nxmlBeanDefinitionReader.loadBeanDefinitions(\"tinyioc.xml\");\n\n// 2.初始化BeanFactory并注册bean\nAbstractBeanFactory beanFactory = new AutowireCapableBeanFactory();\nfor (Map.Entry<String, BeanDefinition> beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) {\n    beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());\n}\n\n// 3.初始化bean\nbeanFactory.preInstantiateSingletons();\n\n// 4.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n### 6. step6-ApplicationContext登场\n\n现在BeanFactory的功能齐全了，但是使用起来有点麻烦。于是我们引入熟悉的`ApplicationContext`接口，并在`AbstractApplicationContext`的`refresh()`方法中进行bean的初始化工作。\n\n```\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"tinyioc.xml\");\nHelloWorldService helloWorldService = (HelloWorldService) applicationContext.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n是不是非常熟悉？至此为止，我们的tiny-spring的IoC部分可说完工了。这部分的类、方法命名和作用，都是对应Spring中相应的组件。虽然代码量只有400多行，但是已经有了基本的IoC功能！\n\n## tiny-spring的核心类\n\n### 1. Resource家族\n\nResource以及继承它的几个类，用于IOC的类定位，也就是：**配置文件从哪读、如何读。**\n\n#### Resource接口\n\n标识一个外部资源。定义getInputStream()方法来获取资源的输入流。\n\n#### UrlResource\n\n实现 Resource 接口的资源类，通过 URL 获取资源。\n\n#### ResourceLoader\n\n资源加载类。通过 getResource(String)方法获取一个Resouce对象，是获取Resouce的主要途径。\n\n### 2. BeanDefinition家族\n\nBeanDefinition为核心的几个类，是用来**定义Bean**：名字是什么、类型是什么、属性赋予了哪些值或者引用，使得IoC容器可以根据这个定义来生成实例。\n\n#### BeanDefinition\n\n该类保存了Bean定义，包括，名字(String beanClassName)、类型(Class beanClass)、属性(PropertyValues propertyValues)。根据其类型可以生成一个类实例，然后可以把属性 注入进去。\n\n#### BeanDefinitionReader\n\n解析BeanDefinition的接口。通过loadBeanDefinitions(String)从一个地址加载类定义。\n\n#### AbstractBeanDefinitionReader\n\n实现 BeanDefinitionReader 接口的抽象类（未具体实现 loadBeanDefinitions，而是规范了 BeanDefinitionReader 的基本结构）。内置一个 HashMap rigistry，用于保存 String - beanDefinition 的键值对。内置一个 ResourceLoader resourceLoader，用于保存类加载器。使用时，只需要向其 loadBeanDefinitions() 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 BeanDefinition 保存到 registry 中去。\n\n#### XmlBeanDefinitionReader\n\n具体实现了loadBeanDefinitions()方法，并从XML文件中读取类定义。\n\n### 3. BeanFactory家族\n\n以BeanFactory为核心的类，用于IoC容器在已经获取Bean时，对Bean实例的装配、获取。\n\n#### BeanFactory\n\n接口，标识一个 IoC 容器。通过 getBean(String) 方法来获取一个对象\n\n#### AbstractBeanFactory\n\nBeanFactory 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 Bean 的具体实现方式留给子类实现。\n\n同时维护一个 beanDefinitionMap 哈希表用于保存类的定义信息（BeanDefinition）。获取 Bean 时，如果 Bean 已经存在于容器中，则返回之，否则则调用 doCreateBean 方法装配一个 Bean。\n\n#### AutowireCapableBeanFactory\n\n实现了 doCreateBean 方法，该方法分三步：1 通过 BeanDefinition 中保存的类信息实例化一个对象；2 把对象保存在 BeanDefinition 中，以备下次获取；3 为其装配属性。\n\n### 4. ApplicationContext家族\n\n以ApplicationContext 接口为核心的类，主要是对前面 Resouce、BeanFactoryBeanDefinition 进行了功能的封装，解决 **根据地址获取 IoC 容器并使用**的问题。\n\n#### ApplicationContext\n\n标记接口，继承了 BeanFactory。通常，要实现一个 IoC 容器时，需要先通过 ResourceLoader 获取一个 Resource，其中包括了容器的配置、Bean 的定义信息。接着，使用 BeanDefinitionReader 读取该 Resource 中的 BeanDefinition 信息。最后，把 BeanDefinition 保存在 BeanFactory 中，容器配置完毕可以使用。\n\n注意到 BeanFactory只实现了Bean的装配、获取，并未说明Bean的来源 也就是 BeanDefinition是如何加载的。该接口把 BeanFactory 和 BeanDefinitionReader 结合在了一起。\n\n#### AbstractApplicationContext\n\nApplicationContext的抽象实现，内部包含一个BeanFactory类。主要方法有 getBean() 和 refresh() 方法。getBean() 直接调用了内置 BeanFactory 的 getBean() 方法，refresh() 则用于实现 BeanFactory 的刷新，也就是告诉 BeanFactory 该使用哪个资源（Resource）加载类定义（BeanDefinition）信息，该方法留给子类实现，用以实现 从不同来源的不同类型的资源加载类定义 的效果\n\n#### ClassPathXmlApplicationContext\n\n从类路径加载资源的具体实现类。内部通过 XmlBeanDefinitionReader 解析 UrlResourceLoader 读取到的 Resource，获取 BeanDefinition 信息，然后将其保存到内置的 BeanFactory 中。","slug":"backEnd/spring/tiny-spring 简介","published":1,"updated":"2018-08-04T06:32:45.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkccy0053m4cmhczblgfo","content":"<p>tiny-spring是模拟Spring的一个简单的框架，主要包含如下设计模式：</p>\n<ul>\n<li>模板方法模式</li>\n</ul>\n<p>该模式大量使用，例如在 BeanFactory 中，把 getBean() 交给子类实现，不同的子类 <strong>BeanFactory</strong> 对其可以采取不同的实现。</p>\n<ul>\n<li>代理模式</li>\n</ul>\n<p>在tiny-spring 中，ApplicationContext继承了BeanFactory接口，具备了 getBean() 功能，但是又内置了一个BeanFactory实例，getBean()直接调用 BeanFactory的 getBean() 。但是ApplicationContext 加强了 BeanFactory，它把类定义的加载也包含进去了。</p>\n<ul>\n<li>策略模式</li>\n</ul>\n<p>生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现</p>\n<h2 id=\"tiny-spring-IOC构建流程\"><a href=\"#tiny-spring-IOC构建流程\" class=\"headerlink\" title=\"tiny-spring IOC构建流程\"></a>tiny-spring IOC构建流程</h2><p>(节选之tiny-spring的changelog.md)</p>\n<h3 id=\"1-step1-最基本的容器\"><a href=\"#1-step1-最基本的容器\" class=\"headerlink\" title=\"1. step1-最基本的容器\"></a>1. step1-最基本的容器</h3><p>IoC最基本的角色有两个：容器(<code>BeanFactory</code>)和Bean本身。这里使用<code>BeanDefinition</code>来封装了bean对象，这样可以保存一些额外的元信息。测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.初始化beanfactory</span><br><span class=\"line\">BeanFactory beanFactory = new BeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.注入bean</span><br><span class=\"line\">BeanDefinition beanDefinition = new BeanDefinition(new HelloWorldService());</span><br><span class=\"line\">beanFactory.registerBeanDefinition(&quot;helloWorldService&quot;, beanDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-step2-将bean创建放入工厂\"><a href=\"#2-step2-将bean创建放入工厂\" class=\"headerlink\" title=\"2. step2-将bean创建放入工厂\"></a>2. step2-将bean创建放入工厂</h3><p>step1中的bean是初始化好之后再set进去的，实际使用中，我们希望容器来管理bean的创建。于是我们将bean的初始化放入BeanFactory中。为了保证扩展性，我们使用Extract Interface的方法，将<code>BeanFactory</code>替换成接口，而使用<code>AbstractBeanFactory</code>和<code>AutowireCapableBeanFactory</code>作为其实现。”AutowireCapable”的意思是“可自动装配的”，为我们后面注入属性做准备。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 1.初始化beanfactory</span><br><span class=\"line\">BeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.注入bean</span><br><span class=\"line\">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class=\"line\">beanDefinition.setBeanClassName(&quot;us.codecraft.tinyioc.HelloWorldService&quot;);</span><br><span class=\"line\">beanFactory.registerBeanDefinition(&quot;helloWorldService&quot;, beanDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-step3-为bean注入属性\"><a href=\"#3-step3-为bean注入属性\" class=\"headerlink\" title=\"3. step3-为bean注入属性\"></a>3. step3-为bean注入属性</h3><p>这一步，我们想要为bean注入属性。我们选择将属性注入信息保存成<code>PropertyValue</code>对象，并且保存到<code>BeanDefinition</code>中。这样在初始化bean的时候，我们就可以根据PropertyValue来进行bean属性的注入。Spring本身使用了setter来进行注入，这里为了代码简洁，我们使用Field的形式来注入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.初始化beanfactory</span><br><span class=\"line\">BeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.bean定义</span><br><span class=\"line\">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class=\"line\">beanDefinition.setBeanClassName(&quot;us.codecraft.tinyioc.HelloWorldService&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.设置属性</span><br><span class=\"line\">PropertyValues propertyValues = new PropertyValues();</span><br><span class=\"line\">propertyValues.addPropertyValue(new PropertyValue(&quot;text&quot;, &quot;Hello World!&quot;));</span><br><span class=\"line\">beanDefinition.setPropertyValues(propertyValues);</span><br><span class=\"line\"></span><br><span class=\"line\">// 4.生成bean</span><br><span class=\"line\">beanFactory.registerBeanDefinition(&quot;helloWorldService&quot;, beanDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 5.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-step4-读取xml配置来初始化bean\"><a href=\"#4-step4-读取xml配置来初始化bean\" class=\"headerlink\" title=\"4. step4-读取xml配置来初始化bean\"></a>4. step4-读取xml配置来初始化bean</h3><p>这么大一坨初始化代码让人心烦。这里的<code>BeanDefinition</code>只是一些配置，我们还是用xml来初始化吧。我们定义了<code>BeanDefinitionReader</code>初始化bean，它有一个实现是<code>XmlBeanDefinitionReader</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.读取配置</span><br><span class=\"line\">XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());</span><br><span class=\"line\">xmlBeanDefinitionReader.loadBeanDefinitions(&quot;tinyioc.xml&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.初始化BeanFactory并注册bean</span><br><span class=\"line\">BeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class=\"line\">for (Map.Entry&lt;String, BeanDefinition&gt; beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) &#123;</span><br><span class=\"line\">        beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-step5-为bean注入bean\"><a href=\"#5-step5-为bean注入bean\" class=\"headerlink\" title=\"5. step5-为bean注入bean\"></a>5. step5-为bean注入bean</h3><p>使用xml配置之后，似乎里我们熟知的Spring更近了一步！但是现在有一个大问题没有解决：我们无法处理bean之间的依赖，无法将bean注入到bean中，所以它无法称之为完整的IoC容器！如何实现呢？我们定义一个<code>BeanReference</code>，来表示这个属性是对另一个bean的引用。这个在读取xml的时候初始化，并在初始化bean的时候，进行解析和真实bean的注入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (PropertyValue propertyValue : mbd.getPropertyValues().getPropertyValues()) &#123;</span><br><span class=\"line\">    Field declaredField = bean.getClass().getDeclaredField(propertyValue.getName());</span><br><span class=\"line\">    declaredField.setAccessible(true);</span><br><span class=\"line\">    Object value = propertyValue.getValue();</span><br><span class=\"line\">    if (value instanceof BeanReference) &#123;</span><br><span class=\"line\">        BeanReference beanReference = (BeanReference) value;</span><br><span class=\"line\">        value = getBean(beanReference.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    declaredField.set(bean, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时为了解决循环依赖的问题，我们使用lazy-init的方式，将createBean的事情放到<code>getBean</code>的时候才执行，是不是一下子方便很多？这样在注入bean的时候，如果该属性对应的bean找不到，那么就先创建！因为总是先创建后注入，所以不会存在两个循环依赖的bean创建死锁的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.读取配置</span><br><span class=\"line\">XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());</span><br><span class=\"line\">xmlBeanDefinitionReader.loadBeanDefinitions(&quot;tinyioc.xml&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.初始化BeanFactory并注册bean</span><br><span class=\"line\">AbstractBeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class=\"line\">for (Map.Entry&lt;String, BeanDefinition&gt; beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) &#123;</span><br><span class=\"line\">    beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.初始化bean</span><br><span class=\"line\">beanFactory.preInstantiateSingletons();</span><br><span class=\"line\"></span><br><span class=\"line\">// 4.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-step6-ApplicationContext登场\"><a href=\"#6-step6-ApplicationContext登场\" class=\"headerlink\" title=\"6. step6-ApplicationContext登场\"></a>6. step6-ApplicationContext登场</h3><p>现在BeanFactory的功能齐全了，但是使用起来有点麻烦。于是我们引入熟悉的<code>ApplicationContext</code>接口，并在<code>AbstractApplicationContext</code>的<code>refresh()</code>方法中进行bean的初始化工作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;tinyioc.xml&quot;);</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) applicationContext.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<p>是不是非常熟悉？至此为止，我们的tiny-spring的IoC部分可说完工了。这部分的类、方法命名和作用，都是对应Spring中相应的组件。虽然代码量只有400多行，但是已经有了基本的IoC功能！</p>\n<h2 id=\"tiny-spring的核心类\"><a href=\"#tiny-spring的核心类\" class=\"headerlink\" title=\"tiny-spring的核心类\"></a>tiny-spring的核心类</h2><h3 id=\"1-Resource家族\"><a href=\"#1-Resource家族\" class=\"headerlink\" title=\"1. Resource家族\"></a>1. Resource家族</h3><p>Resource以及继承它的几个类，用于IOC的类定位，也就是：<strong>配置文件从哪读、如何读。</strong></p>\n<h4 id=\"Resource接口\"><a href=\"#Resource接口\" class=\"headerlink\" title=\"Resource接口\"></a>Resource接口</h4><p>标识一个外部资源。定义getInputStream()方法来获取资源的输入流。</p>\n<h4 id=\"UrlResource\"><a href=\"#UrlResource\" class=\"headerlink\" title=\"UrlResource\"></a>UrlResource</h4><p>实现 Resource 接口的资源类，通过 URL 获取资源。</p>\n<h4 id=\"ResourceLoader\"><a href=\"#ResourceLoader\" class=\"headerlink\" title=\"ResourceLoader\"></a>ResourceLoader</h4><p>资源加载类。通过 getResource(String)方法获取一个Resouce对象，是获取Resouce的主要途径。</p>\n<h3 id=\"2-BeanDefinition家族\"><a href=\"#2-BeanDefinition家族\" class=\"headerlink\" title=\"2. BeanDefinition家族\"></a>2. BeanDefinition家族</h3><p>BeanDefinition为核心的几个类，是用来<strong>定义Bean</strong>：名字是什么、类型是什么、属性赋予了哪些值或者引用，使得IoC容器可以根据这个定义来生成实例。</p>\n<h4 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a>BeanDefinition</h4><p>该类保存了Bean定义，包括，名字(String beanClassName)、类型(Class beanClass)、属性(PropertyValues propertyValues)。根据其类型可以生成一个类实例，然后可以把属性 注入进去。</p>\n<h4 id=\"BeanDefinitionReader\"><a href=\"#BeanDefinitionReader\" class=\"headerlink\" title=\"BeanDefinitionReader\"></a>BeanDefinitionReader</h4><p>解析BeanDefinition的接口。通过loadBeanDefinitions(String)从一个地址加载类定义。</p>\n<h4 id=\"AbstractBeanDefinitionReader\"><a href=\"#AbstractBeanDefinitionReader\" class=\"headerlink\" title=\"AbstractBeanDefinitionReader\"></a>AbstractBeanDefinitionReader</h4><p>实现 BeanDefinitionReader 接口的抽象类（未具体实现 loadBeanDefinitions，而是规范了 BeanDefinitionReader 的基本结构）。内置一个 HashMap rigistry，用于保存 String - beanDefinition 的键值对。内置一个 ResourceLoader resourceLoader，用于保存类加载器。使用时，只需要向其 loadBeanDefinitions() 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 BeanDefinition 保存到 registry 中去。</p>\n<h4 id=\"XmlBeanDefinitionReader\"><a href=\"#XmlBeanDefinitionReader\" class=\"headerlink\" title=\"XmlBeanDefinitionReader\"></a>XmlBeanDefinitionReader</h4><p>具体实现了loadBeanDefinitions()方法，并从XML文件中读取类定义。</p>\n<h3 id=\"3-BeanFactory家族\"><a href=\"#3-BeanFactory家族\" class=\"headerlink\" title=\"3. BeanFactory家族\"></a>3. BeanFactory家族</h3><p>以BeanFactory为核心的类，用于IoC容器在已经获取Bean时，对Bean实例的装配、获取。</p>\n<h4 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h4><p>接口，标识一个 IoC 容器。通过 getBean(String) 方法来获取一个对象</p>\n<h4 id=\"AbstractBeanFactory\"><a href=\"#AbstractBeanFactory\" class=\"headerlink\" title=\"AbstractBeanFactory\"></a>AbstractBeanFactory</h4><p>BeanFactory 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 Bean 的具体实现方式留给子类实现。</p>\n<p>同时维护一个 beanDefinitionMap 哈希表用于保存类的定义信息（BeanDefinition）。获取 Bean 时，如果 Bean 已经存在于容器中，则返回之，否则则调用 doCreateBean 方法装配一个 Bean。</p>\n<h4 id=\"AutowireCapableBeanFactory\"><a href=\"#AutowireCapableBeanFactory\" class=\"headerlink\" title=\"AutowireCapableBeanFactory\"></a>AutowireCapableBeanFactory</h4><p>实现了 doCreateBean 方法，该方法分三步：1 通过 BeanDefinition 中保存的类信息实例化一个对象；2 把对象保存在 BeanDefinition 中，以备下次获取；3 为其装配属性。</p>\n<h3 id=\"4-ApplicationContext家族\"><a href=\"#4-ApplicationContext家族\" class=\"headerlink\" title=\"4. ApplicationContext家族\"></a>4. ApplicationContext家族</h3><p>以ApplicationContext 接口为核心的类，主要是对前面 Resouce、BeanFactoryBeanDefinition 进行了功能的封装，解决 <strong>根据地址获取 IoC 容器并使用</strong>的问题。</p>\n<h4 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h4><p>标记接口，继承了 BeanFactory。通常，要实现一个 IoC 容器时，需要先通过 ResourceLoader 获取一个 Resource，其中包括了容器的配置、Bean 的定义信息。接着，使用 BeanDefinitionReader 读取该 Resource 中的 BeanDefinition 信息。最后，把 BeanDefinition 保存在 BeanFactory 中，容器配置完毕可以使用。</p>\n<p>注意到 BeanFactory只实现了Bean的装配、获取，并未说明Bean的来源 也就是 BeanDefinition是如何加载的。该接口把 BeanFactory 和 BeanDefinitionReader 结合在了一起。</p>\n<h4 id=\"AbstractApplicationContext\"><a href=\"#AbstractApplicationContext\" class=\"headerlink\" title=\"AbstractApplicationContext\"></a>AbstractApplicationContext</h4><p>ApplicationContext的抽象实现，内部包含一个BeanFactory类。主要方法有 getBean() 和 refresh() 方法。getBean() 直接调用了内置 BeanFactory 的 getBean() 方法，refresh() 则用于实现 BeanFactory 的刷新，也就是告诉 BeanFactory 该使用哪个资源（Resource）加载类定义（BeanDefinition）信息，该方法留给子类实现，用以实现 从不同来源的不同类型的资源加载类定义 的效果</p>\n<h4 id=\"ClassPathXmlApplicationContext\"><a href=\"#ClassPathXmlApplicationContext\" class=\"headerlink\" title=\"ClassPathXmlApplicationContext\"></a>ClassPathXmlApplicationContext</h4><p>从类路径加载资源的具体实现类。内部通过 XmlBeanDefinitionReader 解析 UrlResourceLoader 读取到的 Resource，获取 BeanDefinition 信息，然后将其保存到内置的 BeanFactory 中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>tiny-spring是模拟Spring的一个简单的框架，主要包含如下设计模式：</p>\n<ul>\n<li>模板方法模式</li>\n</ul>\n<p>该模式大量使用，例如在 BeanFactory 中，把 getBean() 交给子类实现，不同的子类 <strong>BeanFactory</strong> 对其可以采取不同的实现。</p>\n<ul>\n<li>代理模式</li>\n</ul>\n<p>在tiny-spring 中，ApplicationContext继承了BeanFactory接口，具备了 getBean() 功能，但是又内置了一个BeanFactory实例，getBean()直接调用 BeanFactory的 getBean() 。但是ApplicationContext 加强了 BeanFactory，它把类定义的加载也包含进去了。</p>\n<ul>\n<li>策略模式</li>\n</ul>\n<p>生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现</p>\n<h2 id=\"tiny-spring-IOC构建流程\"><a href=\"#tiny-spring-IOC构建流程\" class=\"headerlink\" title=\"tiny-spring IOC构建流程\"></a>tiny-spring IOC构建流程</h2><p>(节选之tiny-spring的changelog.md)</p>\n<h3 id=\"1-step1-最基本的容器\"><a href=\"#1-step1-最基本的容器\" class=\"headerlink\" title=\"1. step1-最基本的容器\"></a>1. step1-最基本的容器</h3><p>IoC最基本的角色有两个：容器(<code>BeanFactory</code>)和Bean本身。这里使用<code>BeanDefinition</code>来封装了bean对象，这样可以保存一些额外的元信息。测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.初始化beanfactory</span><br><span class=\"line\">BeanFactory beanFactory = new BeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.注入bean</span><br><span class=\"line\">BeanDefinition beanDefinition = new BeanDefinition(new HelloWorldService());</span><br><span class=\"line\">beanFactory.registerBeanDefinition(&quot;helloWorldService&quot;, beanDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-step2-将bean创建放入工厂\"><a href=\"#2-step2-将bean创建放入工厂\" class=\"headerlink\" title=\"2. step2-将bean创建放入工厂\"></a>2. step2-将bean创建放入工厂</h3><p>step1中的bean是初始化好之后再set进去的，实际使用中，我们希望容器来管理bean的创建。于是我们将bean的初始化放入BeanFactory中。为了保证扩展性，我们使用Extract Interface的方法，将<code>BeanFactory</code>替换成接口，而使用<code>AbstractBeanFactory</code>和<code>AutowireCapableBeanFactory</code>作为其实现。”AutowireCapable”的意思是“可自动装配的”，为我们后面注入属性做准备。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 1.初始化beanfactory</span><br><span class=\"line\">BeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.注入bean</span><br><span class=\"line\">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class=\"line\">beanDefinition.setBeanClassName(&quot;us.codecraft.tinyioc.HelloWorldService&quot;);</span><br><span class=\"line\">beanFactory.registerBeanDefinition(&quot;helloWorldService&quot;, beanDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-step3-为bean注入属性\"><a href=\"#3-step3-为bean注入属性\" class=\"headerlink\" title=\"3. step3-为bean注入属性\"></a>3. step3-为bean注入属性</h3><p>这一步，我们想要为bean注入属性。我们选择将属性注入信息保存成<code>PropertyValue</code>对象，并且保存到<code>BeanDefinition</code>中。这样在初始化bean的时候，我们就可以根据PropertyValue来进行bean属性的注入。Spring本身使用了setter来进行注入，这里为了代码简洁，我们使用Field的形式来注入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.初始化beanfactory</span><br><span class=\"line\">BeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.bean定义</span><br><span class=\"line\">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class=\"line\">beanDefinition.setBeanClassName(&quot;us.codecraft.tinyioc.HelloWorldService&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.设置属性</span><br><span class=\"line\">PropertyValues propertyValues = new PropertyValues();</span><br><span class=\"line\">propertyValues.addPropertyValue(new PropertyValue(&quot;text&quot;, &quot;Hello World!&quot;));</span><br><span class=\"line\">beanDefinition.setPropertyValues(propertyValues);</span><br><span class=\"line\"></span><br><span class=\"line\">// 4.生成bean</span><br><span class=\"line\">beanFactory.registerBeanDefinition(&quot;helloWorldService&quot;, beanDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">// 5.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-step4-读取xml配置来初始化bean\"><a href=\"#4-step4-读取xml配置来初始化bean\" class=\"headerlink\" title=\"4. step4-读取xml配置来初始化bean\"></a>4. step4-读取xml配置来初始化bean</h3><p>这么大一坨初始化代码让人心烦。这里的<code>BeanDefinition</code>只是一些配置，我们还是用xml来初始化吧。我们定义了<code>BeanDefinitionReader</code>初始化bean，它有一个实现是<code>XmlBeanDefinitionReader</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.读取配置</span><br><span class=\"line\">XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());</span><br><span class=\"line\">xmlBeanDefinitionReader.loadBeanDefinitions(&quot;tinyioc.xml&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.初始化BeanFactory并注册bean</span><br><span class=\"line\">BeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class=\"line\">for (Map.Entry&lt;String, BeanDefinition&gt; beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) &#123;</span><br><span class=\"line\">        beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-step5-为bean注入bean\"><a href=\"#5-step5-为bean注入bean\" class=\"headerlink\" title=\"5. step5-为bean注入bean\"></a>5. step5-为bean注入bean</h3><p>使用xml配置之后，似乎里我们熟知的Spring更近了一步！但是现在有一个大问题没有解决：我们无法处理bean之间的依赖，无法将bean注入到bean中，所以它无法称之为完整的IoC容器！如何实现呢？我们定义一个<code>BeanReference</code>，来表示这个属性是对另一个bean的引用。这个在读取xml的时候初始化，并在初始化bean的时候，进行解析和真实bean的注入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (PropertyValue propertyValue : mbd.getPropertyValues().getPropertyValues()) &#123;</span><br><span class=\"line\">    Field declaredField = bean.getClass().getDeclaredField(propertyValue.getName());</span><br><span class=\"line\">    declaredField.setAccessible(true);</span><br><span class=\"line\">    Object value = propertyValue.getValue();</span><br><span class=\"line\">    if (value instanceof BeanReference) &#123;</span><br><span class=\"line\">        BeanReference beanReference = (BeanReference) value;</span><br><span class=\"line\">        value = getBean(beanReference.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    declaredField.set(bean, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时为了解决循环依赖的问题，我们使用lazy-init的方式，将createBean的事情放到<code>getBean</code>的时候才执行，是不是一下子方便很多？这样在注入bean的时候，如果该属性对应的bean找不到，那么就先创建！因为总是先创建后注入，所以不会存在两个循环依赖的bean创建死锁的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.读取配置</span><br><span class=\"line\">XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());</span><br><span class=\"line\">xmlBeanDefinitionReader.loadBeanDefinitions(&quot;tinyioc.xml&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.初始化BeanFactory并注册bean</span><br><span class=\"line\">AbstractBeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class=\"line\">for (Map.Entry&lt;String, BeanDefinition&gt; beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) &#123;</span><br><span class=\"line\">    beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3.初始化bean</span><br><span class=\"line\">beanFactory.preInstantiateSingletons();</span><br><span class=\"line\"></span><br><span class=\"line\">// 4.获取bean</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-step6-ApplicationContext登场\"><a href=\"#6-step6-ApplicationContext登场\" class=\"headerlink\" title=\"6. step6-ApplicationContext登场\"></a>6. step6-ApplicationContext登场</h3><p>现在BeanFactory的功能齐全了，但是使用起来有点麻烦。于是我们引入熟悉的<code>ApplicationContext</code>接口，并在<code>AbstractApplicationContext</code>的<code>refresh()</code>方法中进行bean的初始化工作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;tinyioc.xml&quot;);</span><br><span class=\"line\">HelloWorldService helloWorldService = (HelloWorldService) applicationContext.getBean(&quot;helloWorldService&quot;);</span><br><span class=\"line\">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure>\n<p>是不是非常熟悉？至此为止，我们的tiny-spring的IoC部分可说完工了。这部分的类、方法命名和作用，都是对应Spring中相应的组件。虽然代码量只有400多行，但是已经有了基本的IoC功能！</p>\n<h2 id=\"tiny-spring的核心类\"><a href=\"#tiny-spring的核心类\" class=\"headerlink\" title=\"tiny-spring的核心类\"></a>tiny-spring的核心类</h2><h3 id=\"1-Resource家族\"><a href=\"#1-Resource家族\" class=\"headerlink\" title=\"1. Resource家族\"></a>1. Resource家族</h3><p>Resource以及继承它的几个类，用于IOC的类定位，也就是：<strong>配置文件从哪读、如何读。</strong></p>\n<h4 id=\"Resource接口\"><a href=\"#Resource接口\" class=\"headerlink\" title=\"Resource接口\"></a>Resource接口</h4><p>标识一个外部资源。定义getInputStream()方法来获取资源的输入流。</p>\n<h4 id=\"UrlResource\"><a href=\"#UrlResource\" class=\"headerlink\" title=\"UrlResource\"></a>UrlResource</h4><p>实现 Resource 接口的资源类，通过 URL 获取资源。</p>\n<h4 id=\"ResourceLoader\"><a href=\"#ResourceLoader\" class=\"headerlink\" title=\"ResourceLoader\"></a>ResourceLoader</h4><p>资源加载类。通过 getResource(String)方法获取一个Resouce对象，是获取Resouce的主要途径。</p>\n<h3 id=\"2-BeanDefinition家族\"><a href=\"#2-BeanDefinition家族\" class=\"headerlink\" title=\"2. BeanDefinition家族\"></a>2. BeanDefinition家族</h3><p>BeanDefinition为核心的几个类，是用来<strong>定义Bean</strong>：名字是什么、类型是什么、属性赋予了哪些值或者引用，使得IoC容器可以根据这个定义来生成实例。</p>\n<h4 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a>BeanDefinition</h4><p>该类保存了Bean定义，包括，名字(String beanClassName)、类型(Class beanClass)、属性(PropertyValues propertyValues)。根据其类型可以生成一个类实例，然后可以把属性 注入进去。</p>\n<h4 id=\"BeanDefinitionReader\"><a href=\"#BeanDefinitionReader\" class=\"headerlink\" title=\"BeanDefinitionReader\"></a>BeanDefinitionReader</h4><p>解析BeanDefinition的接口。通过loadBeanDefinitions(String)从一个地址加载类定义。</p>\n<h4 id=\"AbstractBeanDefinitionReader\"><a href=\"#AbstractBeanDefinitionReader\" class=\"headerlink\" title=\"AbstractBeanDefinitionReader\"></a>AbstractBeanDefinitionReader</h4><p>实现 BeanDefinitionReader 接口的抽象类（未具体实现 loadBeanDefinitions，而是规范了 BeanDefinitionReader 的基本结构）。内置一个 HashMap rigistry，用于保存 String - beanDefinition 的键值对。内置一个 ResourceLoader resourceLoader，用于保存类加载器。使用时，只需要向其 loadBeanDefinitions() 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 BeanDefinition 保存到 registry 中去。</p>\n<h4 id=\"XmlBeanDefinitionReader\"><a href=\"#XmlBeanDefinitionReader\" class=\"headerlink\" title=\"XmlBeanDefinitionReader\"></a>XmlBeanDefinitionReader</h4><p>具体实现了loadBeanDefinitions()方法，并从XML文件中读取类定义。</p>\n<h3 id=\"3-BeanFactory家族\"><a href=\"#3-BeanFactory家族\" class=\"headerlink\" title=\"3. BeanFactory家族\"></a>3. BeanFactory家族</h3><p>以BeanFactory为核心的类，用于IoC容器在已经获取Bean时，对Bean实例的装配、获取。</p>\n<h4 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h4><p>接口，标识一个 IoC 容器。通过 getBean(String) 方法来获取一个对象</p>\n<h4 id=\"AbstractBeanFactory\"><a href=\"#AbstractBeanFactory\" class=\"headerlink\" title=\"AbstractBeanFactory\"></a>AbstractBeanFactory</h4><p>BeanFactory 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 Bean 的具体实现方式留给子类实现。</p>\n<p>同时维护一个 beanDefinitionMap 哈希表用于保存类的定义信息（BeanDefinition）。获取 Bean 时，如果 Bean 已经存在于容器中，则返回之，否则则调用 doCreateBean 方法装配一个 Bean。</p>\n<h4 id=\"AutowireCapableBeanFactory\"><a href=\"#AutowireCapableBeanFactory\" class=\"headerlink\" title=\"AutowireCapableBeanFactory\"></a>AutowireCapableBeanFactory</h4><p>实现了 doCreateBean 方法，该方法分三步：1 通过 BeanDefinition 中保存的类信息实例化一个对象；2 把对象保存在 BeanDefinition 中，以备下次获取；3 为其装配属性。</p>\n<h3 id=\"4-ApplicationContext家族\"><a href=\"#4-ApplicationContext家族\" class=\"headerlink\" title=\"4. ApplicationContext家族\"></a>4. ApplicationContext家族</h3><p>以ApplicationContext 接口为核心的类，主要是对前面 Resouce、BeanFactoryBeanDefinition 进行了功能的封装，解决 <strong>根据地址获取 IoC 容器并使用</strong>的问题。</p>\n<h4 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h4><p>标记接口，继承了 BeanFactory。通常，要实现一个 IoC 容器时，需要先通过 ResourceLoader 获取一个 Resource，其中包括了容器的配置、Bean 的定义信息。接着，使用 BeanDefinitionReader 读取该 Resource 中的 BeanDefinition 信息。最后，把 BeanDefinition 保存在 BeanFactory 中，容器配置完毕可以使用。</p>\n<p>注意到 BeanFactory只实现了Bean的装配、获取，并未说明Bean的来源 也就是 BeanDefinition是如何加载的。该接口把 BeanFactory 和 BeanDefinitionReader 结合在了一起。</p>\n<h4 id=\"AbstractApplicationContext\"><a href=\"#AbstractApplicationContext\" class=\"headerlink\" title=\"AbstractApplicationContext\"></a>AbstractApplicationContext</h4><p>ApplicationContext的抽象实现，内部包含一个BeanFactory类。主要方法有 getBean() 和 refresh() 方法。getBean() 直接调用了内置 BeanFactory 的 getBean() 方法，refresh() 则用于实现 BeanFactory 的刷新，也就是告诉 BeanFactory 该使用哪个资源（Resource）加载类定义（BeanDefinition）信息，该方法留给子类实现，用以实现 从不同来源的不同类型的资源加载类定义 的效果</p>\n<h4 id=\"ClassPathXmlApplicationContext\"><a href=\"#ClassPathXmlApplicationContext\" class=\"headerlink\" title=\"ClassPathXmlApplicationContext\"></a>ClassPathXmlApplicationContext</h4><p>从类路径加载资源的具体实现类。内部通过 XmlBeanDefinitionReader 解析 UrlResourceLoader 读取到的 Resource，获取 BeanDefinition 信息，然后将其保存到内置的 BeanFactory 中。</p>\n"},{"title":"tiny-spring 分析","date":"2018-03-18T09:45:25.000Z","_content":"\n—— 转载自D佬笔记：[原文](https://www.zybuluo.com/dugu9sword/note/382745)\n\n**前言**\n\n在阅读 Spring 的源代码（依赖注入部分和面向切面编程部分）时遇到不少困惑，庞大的类文件结构、纷繁复杂的方法调用、波诡云谲的多态实现，让自己深陷其中、一头雾水。 \n后来注意到 [code4craft](https://github.com/code4craft) 的 [tiny-spring](https://github.com/code4craft/tiny-spring) 项目，实现了一个微型的 Spring，提供对 IoC 和 AOP 的最基本支持，麻雀虽小，五脏俱全，对 Spring 的认知清晰了不少。这个微型框架的结构包括文件名、方法名都是参照 Spring 来实现的，对于初读 Spring 的学习者，作为研究 Spring 的辅助工具应该能够受益匪浅。 \n在研究 [tiny-spring](https://github.com/code4craft/tiny-spring) 的时候，收获颇多，把对这个微型框架的一些分析写了下来，行文可能有点紊乱。\n\n**本文结构**\n\n1. 第一部分 **IoC 容器的实现** 对应了 [tiny-spring](https://github.com/code4craft/tiny-spring) 的 [step-1](https://github.com/code4craft/tiny-spring/releases) 到 [step-5](https://github.com/code4craft/tiny-spring/releases) 部分，这 5 个 step 实现了基本的 IoC 容器，支持singleton类型的bean，包括初始化、属性注入、以及依赖 Bean 注入，可从 XML 中读取配置，XML 读取方式没有具体深入。\n2. 第二部分 **AOP 容器的实现** 对应了 [tiny-spring](https://github.com/code4craft/tiny-spring) 的 [step-6](https://github.com/code4craft/tiny-spring/releases) 到 [step-9](https://github.com/code4craft/tiny-spring/releases) 部分。[step-10](https://github.com/code4craft/tiny-spring/releases) 中对 cglib 的支持没有分析。这 4 个 step 可以使用 AspectJ 的语法进行 AOP 编写，支持接口代理。考虑到 AspectJ 语法仅用于实现 `execution(\"***\")` 部分的解析，不是主要内容，也可以使用 Java 的正则表达式粗略地完成，因此没有关注这些细节。\n\n**参考书目** \n《Spring 实战》《Spring 技术内幕》\n\n------\n\ntiny-spring 分析\n\n- IoC 容器的实现\n  - 文件结构\n    - [Resource](https://www.zybuluo.com/dugu9sword/note/382745#resource)\n    - [BeanDefinition](https://www.zybuluo.com/dugu9sword/note/382745#beandefinition)\n    - [BeanFactory](https://www.zybuluo.com/dugu9sword/note/382745#beanfactory)\n    - [ApplicationContext](https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext)\n  - 设计模式\n    - [模板方法模式](https://www.zybuluo.com/dugu9sword/note/382745#%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F)\n    - [代理模式](https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F)\n- AOP 的实现\n  - 重新分析 IoC 容器\n    - [BeanFactory 的构造与执行](https://www.zybuluo.com/dugu9sword/note/382745#beanfactory-%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%89%A7%E8%A1%8C)\n    - [ApplicationContext 的构造和执行](https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext-%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%89%A7%E8%A1%8C)\n    - IoC 实现的一些思考与分析\n      - [分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？](https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-1aop-%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%BD%95%E5%A4%84%E8%A2%AB%E5%B5%8C%E5%85%A5%E5%88%B0-ioc-%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%8E%BB)\n      - [分析 2：BeanFactory 和 ApplicationContext 设计上的耦合](https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-2beanfactory-%E5%92%8C-applicationcontext-%E8%AE%BE%E8%AE%A1%E4%B8%8A%E7%9A%84%E8%80%A6%E5%90%88)\n      - [分析 3：tiny-spring 总体流程的分析](https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-3tiny-spring-%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B%E7%9A%84%E5%88%86%E6%9E%90)\n  - [JDK 对动态代理的支持](https://www.zybuluo.com/dugu9sword/note/382745#jdk-%E5%AF%B9%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%AF%E6%8C%81)\n  - AOP 的植入与实现细节\n    - [在 Bean 初始化过程中完成 AOP 的植入](https://www.zybuluo.com/dugu9sword/note/382745#%E5%9C%A8-bean-%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%AE%8C%E6%88%90-aop-%E7%9A%84%E6%A4%8D%E5%85%A5)\n    - AOP 中动态代理的实现步骤\n      - [动态代理的内容](https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%86%85%E5%AE%B9)\n      - [动态代理的步骤](https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%AD%A5%E9%AA%A4)\n  - 设计模式\n    - [代理模式](https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-1)\n    - [策略模式](https://www.zybuluo.com/dugu9sword/note/382745#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F)\n  - [为 tiny-spring 添加拦截器链](https://www.zybuluo.com/dugu9sword/note/382745#%E4%B8%BA-tiny-spring-%E6%B7%BB%E5%8A%A0%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE)\n\n## IoC 容器的实现\n\n### 文件结构\n\n#### Resource\n\n以 `Resource` 接口为核心发散出的几个类，都是用于解决 IoC 容器中的内容从哪里来的问题，也就是 **配置文件从哪里读取、配置文件如何读取** 的问题。\n\n| 类名             | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| `Resource`       | 接口，标识一个外部资源。通过 `getInputStream()` 方法 **获取资源的输入流** 。 |\n| `UrlResource`    | 实现 `Resource` 接口的资源类，通过 URL 获取资源。            |\n| `ResourceLoader` | 资源加载类。通过 `getResource(String)` 方法获取一个 `Resouce` 对象，是 **获取 Resouce 的主要途径** 。 |\n\n*注：* 这里在设计上有一定的问题，`ResourceLoader` 直接返回了一个 `UrlResource`，更好的方法是声明一个 `ResourceLoader` 接口，再实现一个 `UrlResourceLoader` 类用于加载 `UrlResource`。\n\n#### BeanDefinition\n\n以 `BeanDefinition` 类为核心发散出的几个类，都是用于解决 `Bean` 的具体定义问题，包括 `Bean` 的名字是什么、它的类型是什么，它的属性赋予了哪些值或者引用，也就是 **如何在 IoC 容器中定义一个 Bean，使得 IoC 容器可以根据这个定义来生成实例** 的问题。\n\n| 类名                           | 说明                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| `BeanDefinition`               | 该类保存了 `Bean` 定义。包括 `Bean` 的 **名字** `String beanClassName`、**类型**`Class beanClass`、**属性** `PropertyValues propertyValues`。根据其 **类型** 可以生成一个类实例，然后可以把 **属性** 注入进去。`propertyValues` 里面包含了一个个 `PropertyValue` 条目，每个条目都是键值对 `String` - `Object`，分别对应要生成实例的属性的名字与类型。在 Spring 的 XML 中的 `property` 中，键是 `key` ，值是 `value` 或者 `ref`。对于 `value` 只要直接注入属性就行了，但是 `ref` 要先进行解析。`Object` 如果是 `BeanReference` 类型，则说明其是一个引用，其中保存了引用的名字，需要用先进行解析，转化为对应的实际 `Object`。 |\n| `BeanDefinitionReader`         | 解析 `BeanDefinition` 的接口。通过 `loadBeanDefinitions(String)` 来从一个地址加载类定义。 |\n| `AbstractBeanDefinitionReader` | 实现 `BeanDefinitionReader` 接口的抽象类（未具体实现 `loadBeanDefinitions`，而是规范了 `BeanDefinitionReader` 的基本结构）。内置一个 `HashMap rigistry`，用于保存 `String` - `beanDefinition` 的键值对。内置一个 `ResourceLoader resourceLoader`，用于保存类加载器。用意在于，使用时，只需要向其 `loadBeanDefinitions()` 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 `BeanDefinition` 保存到 `registry` 中去。 |\n| `XmlBeanDefinitionReader`      | 具体实现了 `loadBeanDefinitions()` 方法，从 XML 文件中读取类定义。 |\n\n#### BeanFactory\n\n以 `BeanFactory` 接口为核心发散出的几个类，都是用于解决 IoC 容器在 **已经获取 Bean 的定义的情况下，如何装配、获取 Bean 实例** 的问题。\n\n| 类名                         | 说明                                                         |\n| ---------------------------- | ------------------------------------------------------------ |\n| `BeanFactory`                | 接口，标识一个 IoC 容器。通过 `getBean(String)` 方法来 **获取一个对象** |\n| `AbstractBeanFactory`        | `BeanFactory` 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 `Bean`的具体实现方式留给子类实现。IoC 容器的结构：`AbstractBeanFactory` 维护一个 `beanDefinitionMap` 哈希表用于保存类的定义信息（`BeanDefinition`）。获取 `Bean` 时，如果 `Bean` 已经存在于容器中，则返回之，否则则调用 `doCreateBean`方法装配一个 `Bean`。（所谓存在于容器中，是指容器可以通过 `beanDefinitionMap` 获取 `BeanDefinition` 进而通过其 `getBean()` 方法获取 `Bean`。） |\n| `AutowireCapableBeanFactory` | 可以实现自动装配的 `BeanFactory`。在这个工厂中，实现了 `doCreateBean` 方法，该方法分三步：1，通过 `BeanDefinition` 中保存的类信息实例化一个对象；2，把对象保存在 `BeanDefinition` 中，以备下次获取；3，为其装配属性。装配属性时，通过 `BeanDefinition` 中维护的 `PropertyValues` 集合类，把 `String` - `Value` 键值对注入到 `Bean` 的属性中去。如果 `Value` 的类型是 `BeanReference`则说明其是一个引用（对应于 XML 中的 `ref`），通过 `getBean` 对其进行获取，然后注入到属性中。 |\n\n#### ApplicationContext\n\n以 `ApplicationContext` 接口为核心发散出的几个类，主要是对前面 `Resouce` 、 `BeanFactory`、`BeanDefinition` 进行了功能的封装，解决 **根据地址获取 IoC 容器并使用** 的问题。\n\n| 类名                           | 说明                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| `ApplicationContext`           | 标记接口，继承了 `BeanFactory`。通常，要实现一个 IoC 容器时，需要先通过 `ResourceLoader` 获取一个 `Resource`，其中包括了容器的配置、`Bean` 的定义信息。接着，使用 `BeanDefinitionReader` 读取该 `Resource` 中的 `BeanDefinition` 信息。最后，把 `BeanDefinition` 保存在 `BeanFactory`中，容器配置完毕可以使用。注意到 `BeanFactory` 只实现了 `Bean` 的 **装配、获取**，并未说明 `Bean` 的 **来源** 也就是 `BeanDefinition` 是如何 **加载** 的。该接口把 `BeanFactory` 和 `BeanDefinitionReader` 结合在了一起。 |\n| `AbstractApplicationContext`   | `ApplicationContext` 的抽象实现，内部包含一个 `BeanFactory` 类。主要方法有 `getBean()` 和 `refresh()` 方法。`getBean()` 直接调用了内置 `BeanFactory` 的 `getBean()` 方法，`refresh()` 则用于实现 `BeanFactory` 的刷新，也就是告诉 `BeanFactory` 该使用哪个资源（`Resource`）加载类定义（`BeanDefinition`）信息，该方法留给子类实现，用以实现 **从不同来源的不同类型的资源加载类定义** 的效果。 |\n| ClassPathXmlApplicationContext | 从类路径加载资源的具体实现类。内部通过 `XmlBeanDefinitionReader` 解析 `UrlResourceLoader` 读取到的 `Resource`，获取 `BeanDefinition` 信息，然后将其保存到内置的 `BeanFactory` 中。 |\n\n*注 1：*在 Spring 的实现中，对 `ApplicatinoContext` 的分层更为细致。`AbstractApplicationContext` 中为了实现 **不同来源** 的 **不同类型** 的资源加载类定义，把这两步分层实现。以“从类路径读取 XML 定义”为例，首先使用 `AbstractXmlApplicationContext` 来实现 **不同类型** 的资源解析，接着，通过 `ClassPathXmlApplicationContext` 来实现 **不同来源** 的资源解析。 \n*注 2：*在 tiny-spring 的实现中，先用 `BeanDefinitionReader` 读取 `BeanDefiniton` 后，保存在内置的 `registry`（键值对为 `String` - `BeanDefinition` 的哈希表，通过 `getRigistry()` 获取）中，然后由 `ApplicationContext` 把 `BeanDefinitionReader` 中 `registry` 的键值对一个个赋值给 `BeanFactory` 中保存的 `beanDefinitionMap`。而在 Spring 的实现中，`BeanDefinitionReader` 直接操作 `BeanDefinition` ，它的 `getRegistry()` 获取的不是内置的 `registry`，而是 `BeanFactory` 的实例。如何实现呢？以 `DefaultListableBeanFactory` 为例，它实现了一个 `BeanDefinitonRigistry` 接口，该接口把 `BeanDefinition` 的 **注册** 、**获取** 等方法都暴露了出来，这样，`BeanDefinitionReader` 可以直接通过这些方法把 `BeanDefiniton` 直接加载到 `BeanFactory` 中去。\n\n### 设计模式\n\n*注：此处的设计模式分析不限于 tiny-spring，也包括 Spring 本身的内容*\n\n#### 模板方法模式\n\n该模式大量使用，例如在 `BeanFactory` 中，把 `getBean()` 交给子类实现，不同的子类 `**BeanFactory` 对其可以采取不同的实现。\n\n#### 代理模式\n\n在 tiny-spring 中（Spring 中也有类似但不完全相同的实现方式），`ApplicationContext` 继承了 `BeanFactory` 接口，具备了 `getBean()` 功能，但是又内置了一个 `BeanFactory` 实例，`getBean()` 直接调用 `BeanFactory` 的 `getBean()` 。但是`ApplicationContext` 加强了 `BeanFactory`，它把类定义的加载也包含进去了。\n\n## AOP 的实现\n\n### 重新分析 IoC 容器\n\n*注：以下所说的 BeanFactory 和 ApplicationContext 不是指的那几个最基本的接口类（例如 BeanFactory 接口，它除了 getBean 空方法之外，什么都没有，无法用来分析。），而是指这一类对象总体的表现，比如 ClasspathXmlApplicationContext、FileSystemXmlApplicationContext 都算是 ApplicationContext。*\n\n#### BeanFactory 的构造与执行\n\n`BeanFactory` 的核心方法是 `getBean(String)` 方法，用于从工厂中取出所需要的 `Bean` 。`AbstractBeanFactory` 规定了基本的构造和执行流程。\n\n`getBean` 的流程：*包括实例化和初始化，也就是生成 Bean，再执行一些初始化操作。*\n\n1. `doCreateBean` ：实例化 `Bean`。 \n   a. `createInstance` ：生成一个新的实例。 \n   b. `applyProperties` ：注入属性，包括依赖注入的过程。在依赖注入的过程中，如果 `Bean` 实现了 `BeanFactoryAware` 接口，则将容器的引用传入到 `Bean` 中去，这样，`Bean` 将获取对容器操作的权限，也就允许了 **编写扩展 IoC 容器的功能的 Bean**。\n2. `initializeBean(bean)` ： 初始化 `Bean`。 \n   a. 从 `BeanPostProcessor` 列表中，依次取出 `BeanPostProcessor` 执行 `bean = postProcessBeforeInitialization(bean,beanName)` 。（*为什么调用 BeanPostProceesor 中提供方法时，不是直接 post...(bean,beanName) 而是 bean = post...(bean,beanName) 呢？见分析1 。另外，BeanPostProcessor 列表的获取有问题，见分析2。*） \n   b. 初始化方法（tiny-spring 未实现对初始化方法的支持）。 \n   c. 从 `BeanPostProcessor` 列表中， 依次取出 `BeanPostProcessor` 执行其 `bean = postProcessAfterInitialization(bean,beanName)`。\n\n#### ApplicationContext 的构造和执行\n\n`ApplicationContext` 的核心方法是 `refresh()` 方法，用于从资源文件加载类定义、扩展容器的功能。\n\n`refresh` 的流程：\n\n1. `loadBeanDefinitions(BeanFactory)` ：加载类定义，并注入到内置的 `BeanFactory` 中，这里的可扩展性在于，**未对加载方法进行要求，也就是可以从不同来源的不同类型的资源进行加载**。\n2. `registerBeanPostProcessors(BeanFactory)` ：获取所有的 `BeanPostProcessor`，并注册到 `BeanFactory` 维护的 `BeanPostProcessor` 列表去。\n3. `onRefresh` ： \n   a. `preInstantiateSingletons` ：以单例的方式，初始化所有 `Bean`。tiny-spring 只支持 `singleton` 模式。\n\n#### IoC 实现的一些思考与分析\n\n##### 分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？\n\n在 `Bean` 的初始化过程中，会调用 `BeanPostProcessor` 对其进行一些处理。在它的 `postProcess...Initialization`方法中返回了一个 `Bean`，这个返回的 `Bean` 可能已经不是原来传入的 `Bean` 了，**这为实现 AOP 的代理提供了可能**！以 JDK 提供的动态代理为例，假设方法要求传入的对象实现了 `IObj` 接口，实际传入的对象是 `Obj`，那么在方法中，通过动态代理，可以 **生成一个实现了 IObj 接口并把 Obj 作为内置对象的代理类 Proxy 返回**，此时 `Bean` 已经被偷偷换成了它的代理类。\n\n##### 分析 2：BeanFactory 和 ApplicationContext 设计上的耦合\n\n`BeanFactory` 中的 `BeanPostProcessor` 的列表是哪里生成的呢？是在 `ApplicationContext` 中的 `refresh` 方法的第二步，这里设计上应该有些问题，按理说 `ApplicationContext` 是基于 `BeanFactory` 的，`BeanFactory` 的属性的获取，怎么能依赖于 `ApplicationContext` 的调用呢？\n\n##### 分析 3：tiny-spring 总体流程的分析\n\n总体来说，tiny-spring 的 `ApplicaitonContext` 使用流程是这样的： \n1. `ApplicationContext` 完成了类定义的读取和加载，并注册到 `BeanFactory` 中去。 \n2. `ApplicationContext` 从 `BeanFactory` 中寻找 `BeanPostProcessor`，注册到 `BeanFactory` \n维护的 `BeanPostProcessor` 列表中去。 \n3. `ApplicationContext` 以单例的模式，通过主动调用 `getBean` 实例化、注入属性、然后初始化 `BeanFactory` 中所有的 `Bean`。由于所有的 `BeanPostProcessor` 都已经在第 2 步中完成实例化了，因此接下来实例化的是普通 `Bean`，因此普通 `Bean` 的初始化过程可以正常执行。 \n\\4. 调用 `getBean` 时，委托给 `BeanFactory`，此时只是简单的返回每个 `Bean` 单例，因为所有的 `Bean` 实例在第三步都已经生成了。\n\n### JDK 对动态代理的支持\n\nJDK 中几个关键的类：\n\n| 类名                | 说明                                                         |\n| ------------------- | ------------------------------------------------------------ |\n| `Proxy`             | 来自 JDK API。提供生成对象的动态代理的功能，通过`Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)`方法返回一个代理对象。 |\n| `InvocationHandler` | 来自 JDK API。通过 `Object invoke(Object proxy, Method method,Object[] args)` 方法实现代理对象中方法的调用和其他处理。 |\n\n假设以下的情况：\n\n- 对象 `obj` 实现了 `IObj` 接口，接口中有一个方法 `func(Object[] args)`。\n- 对象 `handler` 是 `InvocationHandler` 的实例。\n\n那么，通过 `Proxy` 的 `newProxyInstance(obj.getClassLoader(), obj.getClass().getInterfaces(), handler`，可以返回 `obj` 的代理对象 `proxy`。\n\n当调用 `proxy.func(args)` 时，对象内部将委托给 `handler.invoke(proxy, func, args)` 函数实现。\n\n因此，**在 handler 的 invoke 中，可以完成对方法拦截的处理**。可以先判断是不是要拦截的方法，如果是，进行拦截（比如先做一些操作，再调用原来的方法，对应了 Spring 中的前置通知）；如果不是，则直接调用原来的方法。\n\n### AOP 的植入与实现细节\n\n#### 在 `Bean` 初始化过程中完成 AOP 的植入\n\n解决 AOP 的植入问题，首先要解决 **在 IoC 容器的何处植入 AOP** 的问题，其次要解决 **为哪些对象提供 AOP 的植入** 的问题。 \ntiny-spring 中 `AspectJAwareAdvisorAutoProxyCreator` 类（以下简称 `AutoProxyCreator`）是实现 AOP 植入的关键类，它实现了两个接口：\n\n1. `BeanPostProcessor` ：在 `postProcessorAfterInitialization` 方法中，使用动态代理的方式，返回一个对象的代理对象。解决了 **在 IoC 容器的何处植入 AOP** 的问题。\n2. `BeanFactoryAware` ：这个接口提供了对 `BeanFactory` 的感知，这样，尽管它是容器中的一个 `Bean`，却可以获取容器的引用，进而获取容器中所有的切点对象，决定对哪些对象的哪些方法进行代理。解决了 **为哪些对象提供 AOP 的植入** 的问题。\n\n#### AOP 中动态代理的实现步骤\n\n##### 动态代理的内容\n\n首先，要知道动态代理的内容（拦截哪个对象、在哪个方法拦截、拦截具体内容），下面是几个关键的类：\n\n| 类名              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `PointcutAdvisor` | 切点通知器，用于提供 **对哪个对象的哪个方法进行什么样的拦截** 的具体内容。通过它可以获取一个切点对象 `Pointcut` 和一个通知器对象 `Advisor`。 |\n| `Pointcut`        | 切点对象可以获取一个 `ClassFilter` 对象和一个 `MethodMatcher` 对象。前者用于判断是否对某个对象进行拦截（用于 **筛选要代理的目标对象**），后者用于判断是否对某个方法进行拦截（用于 **在代理对象中对不同的方法进行不同的操作**）。 |\n| `Advisor`         | 通知器对象可以获取一个通知对象 `Advice` 。就是用于实现 **具体的方法拦截**，需要使用者编写，也就对应了 Spring 中的前置通知、后置通知、环切通知等。 |\n\n##### 动态代理的步骤\n\n接着要知道动态代理的步骤：\n\n1. `AutoProxyCreator`（实现了 `BeanPostProcessor` 接口）在实例化所有的 `Bean` 前，最先被实例化。\n2. 其他普通 `Bean` 被实例化、初始化，在初始化的过程中，`AutoProxyCreator` 加载 `BeanFactory` 中所有的 `PointcutAdvisor`（这也保证了 `PointcutAdvisor` 的实例化顺序优于普通 `Bean`。），然后依次使用 `PointcutAdvisor` 内置的 `ClassFilter`，判断当前对象是不是要拦截的类。\n3. 如果是，则生成一个 `TargetSource`（要拦截的对象和其类型），并取出 `AutoProxyCreator` 的 `MethodMatcher`（对哪些方法进行拦截）、`Advice`（拦截的具体操作），再，交给 `AopProxy` 去生成代理对象。\n4. `AopProxy` 生成一个 `InvocationHandler`，在它的 `invoke` 函数中，首先使用 `MethodMatcher` 判断是不是要拦截的方法，如果是则交给 `Advice` 来执行（`Advice` 由用户来编写，其中也要手动/自动调用原始对象的方法），如果不是，则直接交给 `TargetSource` 的原始对象来执行。\n\n### 设计模式\n\n#### 代理模式\n\n通过动态代理实现，见分析1中的内容，不再赘述。\n\n#### 策略模式\n\n生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现。\n\n### 为 tiny-spring 添加拦截器链\n\ntiny-spring 不支持拦截器链，可以模仿 Spring 中拦截器链的实现，实现对多拦截器的支持。 \ntiny-spring 中的 `proceed()` 方法是调用原始对象的方法 `method.invoke(object,args)`。（参见 `ReflectiveMethodInvocation` 类) \n为了支持多拦截器，做出以下修改：\n\n- 将 `proceed()` 方法修改为调用代理对象的方法 `method.invoke(proxy,args)`。\n- 在代理对象的 `InvocationHandler` 的 `invoke` 函数中，查看拦截器列表，如果有拦截器，则调用第一个拦截器并返回，否则调用原始对象的方法。","source":"_posts/backEnd/spring/tiny-spring分析.md","raw":"---\ntitle: tiny-spring 分析\ndate: 2018-03-18 17:45:25\ntags: spring\ncategories: java Program\n---\n\n—— 转载自D佬笔记：[原文](https://www.zybuluo.com/dugu9sword/note/382745)\n\n**前言**\n\n在阅读 Spring 的源代码（依赖注入部分和面向切面编程部分）时遇到不少困惑，庞大的类文件结构、纷繁复杂的方法调用、波诡云谲的多态实现，让自己深陷其中、一头雾水。 \n后来注意到 [code4craft](https://github.com/code4craft) 的 [tiny-spring](https://github.com/code4craft/tiny-spring) 项目，实现了一个微型的 Spring，提供对 IoC 和 AOP 的最基本支持，麻雀虽小，五脏俱全，对 Spring 的认知清晰了不少。这个微型框架的结构包括文件名、方法名都是参照 Spring 来实现的，对于初读 Spring 的学习者，作为研究 Spring 的辅助工具应该能够受益匪浅。 \n在研究 [tiny-spring](https://github.com/code4craft/tiny-spring) 的时候，收获颇多，把对这个微型框架的一些分析写了下来，行文可能有点紊乱。\n\n**本文结构**\n\n1. 第一部分 **IoC 容器的实现** 对应了 [tiny-spring](https://github.com/code4craft/tiny-spring) 的 [step-1](https://github.com/code4craft/tiny-spring/releases) 到 [step-5](https://github.com/code4craft/tiny-spring/releases) 部分，这 5 个 step 实现了基本的 IoC 容器，支持singleton类型的bean，包括初始化、属性注入、以及依赖 Bean 注入，可从 XML 中读取配置，XML 读取方式没有具体深入。\n2. 第二部分 **AOP 容器的实现** 对应了 [tiny-spring](https://github.com/code4craft/tiny-spring) 的 [step-6](https://github.com/code4craft/tiny-spring/releases) 到 [step-9](https://github.com/code4craft/tiny-spring/releases) 部分。[step-10](https://github.com/code4craft/tiny-spring/releases) 中对 cglib 的支持没有分析。这 4 个 step 可以使用 AspectJ 的语法进行 AOP 编写，支持接口代理。考虑到 AspectJ 语法仅用于实现 `execution(\"***\")` 部分的解析，不是主要内容，也可以使用 Java 的正则表达式粗略地完成，因此没有关注这些细节。\n\n**参考书目** \n《Spring 实战》《Spring 技术内幕》\n\n------\n\ntiny-spring 分析\n\n- IoC 容器的实现\n  - 文件结构\n    - [Resource](https://www.zybuluo.com/dugu9sword/note/382745#resource)\n    - [BeanDefinition](https://www.zybuluo.com/dugu9sword/note/382745#beandefinition)\n    - [BeanFactory](https://www.zybuluo.com/dugu9sword/note/382745#beanfactory)\n    - [ApplicationContext](https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext)\n  - 设计模式\n    - [模板方法模式](https://www.zybuluo.com/dugu9sword/note/382745#%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F)\n    - [代理模式](https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F)\n- AOP 的实现\n  - 重新分析 IoC 容器\n    - [BeanFactory 的构造与执行](https://www.zybuluo.com/dugu9sword/note/382745#beanfactory-%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%89%A7%E8%A1%8C)\n    - [ApplicationContext 的构造和执行](https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext-%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%89%A7%E8%A1%8C)\n    - IoC 实现的一些思考与分析\n      - [分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？](https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-1aop-%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%BD%95%E5%A4%84%E8%A2%AB%E5%B5%8C%E5%85%A5%E5%88%B0-ioc-%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%8E%BB)\n      - [分析 2：BeanFactory 和 ApplicationContext 设计上的耦合](https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-2beanfactory-%E5%92%8C-applicationcontext-%E8%AE%BE%E8%AE%A1%E4%B8%8A%E7%9A%84%E8%80%A6%E5%90%88)\n      - [分析 3：tiny-spring 总体流程的分析](https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-3tiny-spring-%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B%E7%9A%84%E5%88%86%E6%9E%90)\n  - [JDK 对动态代理的支持](https://www.zybuluo.com/dugu9sword/note/382745#jdk-%E5%AF%B9%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%AF%E6%8C%81)\n  - AOP 的植入与实现细节\n    - [在 Bean 初始化过程中完成 AOP 的植入](https://www.zybuluo.com/dugu9sword/note/382745#%E5%9C%A8-bean-%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%AE%8C%E6%88%90-aop-%E7%9A%84%E6%A4%8D%E5%85%A5)\n    - AOP 中动态代理的实现步骤\n      - [动态代理的内容](https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%86%85%E5%AE%B9)\n      - [动态代理的步骤](https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%AD%A5%E9%AA%A4)\n  - 设计模式\n    - [代理模式](https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-1)\n    - [策略模式](https://www.zybuluo.com/dugu9sword/note/382745#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F)\n  - [为 tiny-spring 添加拦截器链](https://www.zybuluo.com/dugu9sword/note/382745#%E4%B8%BA-tiny-spring-%E6%B7%BB%E5%8A%A0%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE)\n\n## IoC 容器的实现\n\n### 文件结构\n\n#### Resource\n\n以 `Resource` 接口为核心发散出的几个类，都是用于解决 IoC 容器中的内容从哪里来的问题，也就是 **配置文件从哪里读取、配置文件如何读取** 的问题。\n\n| 类名             | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| `Resource`       | 接口，标识一个外部资源。通过 `getInputStream()` 方法 **获取资源的输入流** 。 |\n| `UrlResource`    | 实现 `Resource` 接口的资源类，通过 URL 获取资源。            |\n| `ResourceLoader` | 资源加载类。通过 `getResource(String)` 方法获取一个 `Resouce` 对象，是 **获取 Resouce 的主要途径** 。 |\n\n*注：* 这里在设计上有一定的问题，`ResourceLoader` 直接返回了一个 `UrlResource`，更好的方法是声明一个 `ResourceLoader` 接口，再实现一个 `UrlResourceLoader` 类用于加载 `UrlResource`。\n\n#### BeanDefinition\n\n以 `BeanDefinition` 类为核心发散出的几个类，都是用于解决 `Bean` 的具体定义问题，包括 `Bean` 的名字是什么、它的类型是什么，它的属性赋予了哪些值或者引用，也就是 **如何在 IoC 容器中定义一个 Bean，使得 IoC 容器可以根据这个定义来生成实例** 的问题。\n\n| 类名                           | 说明                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| `BeanDefinition`               | 该类保存了 `Bean` 定义。包括 `Bean` 的 **名字** `String beanClassName`、**类型**`Class beanClass`、**属性** `PropertyValues propertyValues`。根据其 **类型** 可以生成一个类实例，然后可以把 **属性** 注入进去。`propertyValues` 里面包含了一个个 `PropertyValue` 条目，每个条目都是键值对 `String` - `Object`，分别对应要生成实例的属性的名字与类型。在 Spring 的 XML 中的 `property` 中，键是 `key` ，值是 `value` 或者 `ref`。对于 `value` 只要直接注入属性就行了，但是 `ref` 要先进行解析。`Object` 如果是 `BeanReference` 类型，则说明其是一个引用，其中保存了引用的名字，需要用先进行解析，转化为对应的实际 `Object`。 |\n| `BeanDefinitionReader`         | 解析 `BeanDefinition` 的接口。通过 `loadBeanDefinitions(String)` 来从一个地址加载类定义。 |\n| `AbstractBeanDefinitionReader` | 实现 `BeanDefinitionReader` 接口的抽象类（未具体实现 `loadBeanDefinitions`，而是规范了 `BeanDefinitionReader` 的基本结构）。内置一个 `HashMap rigistry`，用于保存 `String` - `beanDefinition` 的键值对。内置一个 `ResourceLoader resourceLoader`，用于保存类加载器。用意在于，使用时，只需要向其 `loadBeanDefinitions()` 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 `BeanDefinition` 保存到 `registry` 中去。 |\n| `XmlBeanDefinitionReader`      | 具体实现了 `loadBeanDefinitions()` 方法，从 XML 文件中读取类定义。 |\n\n#### BeanFactory\n\n以 `BeanFactory` 接口为核心发散出的几个类，都是用于解决 IoC 容器在 **已经获取 Bean 的定义的情况下，如何装配、获取 Bean 实例** 的问题。\n\n| 类名                         | 说明                                                         |\n| ---------------------------- | ------------------------------------------------------------ |\n| `BeanFactory`                | 接口，标识一个 IoC 容器。通过 `getBean(String)` 方法来 **获取一个对象** |\n| `AbstractBeanFactory`        | `BeanFactory` 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 `Bean`的具体实现方式留给子类实现。IoC 容器的结构：`AbstractBeanFactory` 维护一个 `beanDefinitionMap` 哈希表用于保存类的定义信息（`BeanDefinition`）。获取 `Bean` 时，如果 `Bean` 已经存在于容器中，则返回之，否则则调用 `doCreateBean`方法装配一个 `Bean`。（所谓存在于容器中，是指容器可以通过 `beanDefinitionMap` 获取 `BeanDefinition` 进而通过其 `getBean()` 方法获取 `Bean`。） |\n| `AutowireCapableBeanFactory` | 可以实现自动装配的 `BeanFactory`。在这个工厂中，实现了 `doCreateBean` 方法，该方法分三步：1，通过 `BeanDefinition` 中保存的类信息实例化一个对象；2，把对象保存在 `BeanDefinition` 中，以备下次获取；3，为其装配属性。装配属性时，通过 `BeanDefinition` 中维护的 `PropertyValues` 集合类，把 `String` - `Value` 键值对注入到 `Bean` 的属性中去。如果 `Value` 的类型是 `BeanReference`则说明其是一个引用（对应于 XML 中的 `ref`），通过 `getBean` 对其进行获取，然后注入到属性中。 |\n\n#### ApplicationContext\n\n以 `ApplicationContext` 接口为核心发散出的几个类，主要是对前面 `Resouce` 、 `BeanFactory`、`BeanDefinition` 进行了功能的封装，解决 **根据地址获取 IoC 容器并使用** 的问题。\n\n| 类名                           | 说明                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| `ApplicationContext`           | 标记接口，继承了 `BeanFactory`。通常，要实现一个 IoC 容器时，需要先通过 `ResourceLoader` 获取一个 `Resource`，其中包括了容器的配置、`Bean` 的定义信息。接着，使用 `BeanDefinitionReader` 读取该 `Resource` 中的 `BeanDefinition` 信息。最后，把 `BeanDefinition` 保存在 `BeanFactory`中，容器配置完毕可以使用。注意到 `BeanFactory` 只实现了 `Bean` 的 **装配、获取**，并未说明 `Bean` 的 **来源** 也就是 `BeanDefinition` 是如何 **加载** 的。该接口把 `BeanFactory` 和 `BeanDefinitionReader` 结合在了一起。 |\n| `AbstractApplicationContext`   | `ApplicationContext` 的抽象实现，内部包含一个 `BeanFactory` 类。主要方法有 `getBean()` 和 `refresh()` 方法。`getBean()` 直接调用了内置 `BeanFactory` 的 `getBean()` 方法，`refresh()` 则用于实现 `BeanFactory` 的刷新，也就是告诉 `BeanFactory` 该使用哪个资源（`Resource`）加载类定义（`BeanDefinition`）信息，该方法留给子类实现，用以实现 **从不同来源的不同类型的资源加载类定义** 的效果。 |\n| ClassPathXmlApplicationContext | 从类路径加载资源的具体实现类。内部通过 `XmlBeanDefinitionReader` 解析 `UrlResourceLoader` 读取到的 `Resource`，获取 `BeanDefinition` 信息，然后将其保存到内置的 `BeanFactory` 中。 |\n\n*注 1：*在 Spring 的实现中，对 `ApplicatinoContext` 的分层更为细致。`AbstractApplicationContext` 中为了实现 **不同来源** 的 **不同类型** 的资源加载类定义，把这两步分层实现。以“从类路径读取 XML 定义”为例，首先使用 `AbstractXmlApplicationContext` 来实现 **不同类型** 的资源解析，接着，通过 `ClassPathXmlApplicationContext` 来实现 **不同来源** 的资源解析。 \n*注 2：*在 tiny-spring 的实现中，先用 `BeanDefinitionReader` 读取 `BeanDefiniton` 后，保存在内置的 `registry`（键值对为 `String` - `BeanDefinition` 的哈希表，通过 `getRigistry()` 获取）中，然后由 `ApplicationContext` 把 `BeanDefinitionReader` 中 `registry` 的键值对一个个赋值给 `BeanFactory` 中保存的 `beanDefinitionMap`。而在 Spring 的实现中，`BeanDefinitionReader` 直接操作 `BeanDefinition` ，它的 `getRegistry()` 获取的不是内置的 `registry`，而是 `BeanFactory` 的实例。如何实现呢？以 `DefaultListableBeanFactory` 为例，它实现了一个 `BeanDefinitonRigistry` 接口，该接口把 `BeanDefinition` 的 **注册** 、**获取** 等方法都暴露了出来，这样，`BeanDefinitionReader` 可以直接通过这些方法把 `BeanDefiniton` 直接加载到 `BeanFactory` 中去。\n\n### 设计模式\n\n*注：此处的设计模式分析不限于 tiny-spring，也包括 Spring 本身的内容*\n\n#### 模板方法模式\n\n该模式大量使用，例如在 `BeanFactory` 中，把 `getBean()` 交给子类实现，不同的子类 `**BeanFactory` 对其可以采取不同的实现。\n\n#### 代理模式\n\n在 tiny-spring 中（Spring 中也有类似但不完全相同的实现方式），`ApplicationContext` 继承了 `BeanFactory` 接口，具备了 `getBean()` 功能，但是又内置了一个 `BeanFactory` 实例，`getBean()` 直接调用 `BeanFactory` 的 `getBean()` 。但是`ApplicationContext` 加强了 `BeanFactory`，它把类定义的加载也包含进去了。\n\n## AOP 的实现\n\n### 重新分析 IoC 容器\n\n*注：以下所说的 BeanFactory 和 ApplicationContext 不是指的那几个最基本的接口类（例如 BeanFactory 接口，它除了 getBean 空方法之外，什么都没有，无法用来分析。），而是指这一类对象总体的表现，比如 ClasspathXmlApplicationContext、FileSystemXmlApplicationContext 都算是 ApplicationContext。*\n\n#### BeanFactory 的构造与执行\n\n`BeanFactory` 的核心方法是 `getBean(String)` 方法，用于从工厂中取出所需要的 `Bean` 。`AbstractBeanFactory` 规定了基本的构造和执行流程。\n\n`getBean` 的流程：*包括实例化和初始化，也就是生成 Bean，再执行一些初始化操作。*\n\n1. `doCreateBean` ：实例化 `Bean`。 \n   a. `createInstance` ：生成一个新的实例。 \n   b. `applyProperties` ：注入属性，包括依赖注入的过程。在依赖注入的过程中，如果 `Bean` 实现了 `BeanFactoryAware` 接口，则将容器的引用传入到 `Bean` 中去，这样，`Bean` 将获取对容器操作的权限，也就允许了 **编写扩展 IoC 容器的功能的 Bean**。\n2. `initializeBean(bean)` ： 初始化 `Bean`。 \n   a. 从 `BeanPostProcessor` 列表中，依次取出 `BeanPostProcessor` 执行 `bean = postProcessBeforeInitialization(bean,beanName)` 。（*为什么调用 BeanPostProceesor 中提供方法时，不是直接 post...(bean,beanName) 而是 bean = post...(bean,beanName) 呢？见分析1 。另外，BeanPostProcessor 列表的获取有问题，见分析2。*） \n   b. 初始化方法（tiny-spring 未实现对初始化方法的支持）。 \n   c. 从 `BeanPostProcessor` 列表中， 依次取出 `BeanPostProcessor` 执行其 `bean = postProcessAfterInitialization(bean,beanName)`。\n\n#### ApplicationContext 的构造和执行\n\n`ApplicationContext` 的核心方法是 `refresh()` 方法，用于从资源文件加载类定义、扩展容器的功能。\n\n`refresh` 的流程：\n\n1. `loadBeanDefinitions(BeanFactory)` ：加载类定义，并注入到内置的 `BeanFactory` 中，这里的可扩展性在于，**未对加载方法进行要求，也就是可以从不同来源的不同类型的资源进行加载**。\n2. `registerBeanPostProcessors(BeanFactory)` ：获取所有的 `BeanPostProcessor`，并注册到 `BeanFactory` 维护的 `BeanPostProcessor` 列表去。\n3. `onRefresh` ： \n   a. `preInstantiateSingletons` ：以单例的方式，初始化所有 `Bean`。tiny-spring 只支持 `singleton` 模式。\n\n#### IoC 实现的一些思考与分析\n\n##### 分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？\n\n在 `Bean` 的初始化过程中，会调用 `BeanPostProcessor` 对其进行一些处理。在它的 `postProcess...Initialization`方法中返回了一个 `Bean`，这个返回的 `Bean` 可能已经不是原来传入的 `Bean` 了，**这为实现 AOP 的代理提供了可能**！以 JDK 提供的动态代理为例，假设方法要求传入的对象实现了 `IObj` 接口，实际传入的对象是 `Obj`，那么在方法中，通过动态代理，可以 **生成一个实现了 IObj 接口并把 Obj 作为内置对象的代理类 Proxy 返回**，此时 `Bean` 已经被偷偷换成了它的代理类。\n\n##### 分析 2：BeanFactory 和 ApplicationContext 设计上的耦合\n\n`BeanFactory` 中的 `BeanPostProcessor` 的列表是哪里生成的呢？是在 `ApplicationContext` 中的 `refresh` 方法的第二步，这里设计上应该有些问题，按理说 `ApplicationContext` 是基于 `BeanFactory` 的，`BeanFactory` 的属性的获取，怎么能依赖于 `ApplicationContext` 的调用呢？\n\n##### 分析 3：tiny-spring 总体流程的分析\n\n总体来说，tiny-spring 的 `ApplicaitonContext` 使用流程是这样的： \n1. `ApplicationContext` 完成了类定义的读取和加载，并注册到 `BeanFactory` 中去。 \n2. `ApplicationContext` 从 `BeanFactory` 中寻找 `BeanPostProcessor`，注册到 `BeanFactory` \n维护的 `BeanPostProcessor` 列表中去。 \n3. `ApplicationContext` 以单例的模式，通过主动调用 `getBean` 实例化、注入属性、然后初始化 `BeanFactory` 中所有的 `Bean`。由于所有的 `BeanPostProcessor` 都已经在第 2 步中完成实例化了，因此接下来实例化的是普通 `Bean`，因此普通 `Bean` 的初始化过程可以正常执行。 \n\\4. 调用 `getBean` 时，委托给 `BeanFactory`，此时只是简单的返回每个 `Bean` 单例，因为所有的 `Bean` 实例在第三步都已经生成了。\n\n### JDK 对动态代理的支持\n\nJDK 中几个关键的类：\n\n| 类名                | 说明                                                         |\n| ------------------- | ------------------------------------------------------------ |\n| `Proxy`             | 来自 JDK API。提供生成对象的动态代理的功能，通过`Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)`方法返回一个代理对象。 |\n| `InvocationHandler` | 来自 JDK API。通过 `Object invoke(Object proxy, Method method,Object[] args)` 方法实现代理对象中方法的调用和其他处理。 |\n\n假设以下的情况：\n\n- 对象 `obj` 实现了 `IObj` 接口，接口中有一个方法 `func(Object[] args)`。\n- 对象 `handler` 是 `InvocationHandler` 的实例。\n\n那么，通过 `Proxy` 的 `newProxyInstance(obj.getClassLoader(), obj.getClass().getInterfaces(), handler`，可以返回 `obj` 的代理对象 `proxy`。\n\n当调用 `proxy.func(args)` 时，对象内部将委托给 `handler.invoke(proxy, func, args)` 函数实现。\n\n因此，**在 handler 的 invoke 中，可以完成对方法拦截的处理**。可以先判断是不是要拦截的方法，如果是，进行拦截（比如先做一些操作，再调用原来的方法，对应了 Spring 中的前置通知）；如果不是，则直接调用原来的方法。\n\n### AOP 的植入与实现细节\n\n#### 在 `Bean` 初始化过程中完成 AOP 的植入\n\n解决 AOP 的植入问题，首先要解决 **在 IoC 容器的何处植入 AOP** 的问题，其次要解决 **为哪些对象提供 AOP 的植入** 的问题。 \ntiny-spring 中 `AspectJAwareAdvisorAutoProxyCreator` 类（以下简称 `AutoProxyCreator`）是实现 AOP 植入的关键类，它实现了两个接口：\n\n1. `BeanPostProcessor` ：在 `postProcessorAfterInitialization` 方法中，使用动态代理的方式，返回一个对象的代理对象。解决了 **在 IoC 容器的何处植入 AOP** 的问题。\n2. `BeanFactoryAware` ：这个接口提供了对 `BeanFactory` 的感知，这样，尽管它是容器中的一个 `Bean`，却可以获取容器的引用，进而获取容器中所有的切点对象，决定对哪些对象的哪些方法进行代理。解决了 **为哪些对象提供 AOP 的植入** 的问题。\n\n#### AOP 中动态代理的实现步骤\n\n##### 动态代理的内容\n\n首先，要知道动态代理的内容（拦截哪个对象、在哪个方法拦截、拦截具体内容），下面是几个关键的类：\n\n| 类名              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `PointcutAdvisor` | 切点通知器，用于提供 **对哪个对象的哪个方法进行什么样的拦截** 的具体内容。通过它可以获取一个切点对象 `Pointcut` 和一个通知器对象 `Advisor`。 |\n| `Pointcut`        | 切点对象可以获取一个 `ClassFilter` 对象和一个 `MethodMatcher` 对象。前者用于判断是否对某个对象进行拦截（用于 **筛选要代理的目标对象**），后者用于判断是否对某个方法进行拦截（用于 **在代理对象中对不同的方法进行不同的操作**）。 |\n| `Advisor`         | 通知器对象可以获取一个通知对象 `Advice` 。就是用于实现 **具体的方法拦截**，需要使用者编写，也就对应了 Spring 中的前置通知、后置通知、环切通知等。 |\n\n##### 动态代理的步骤\n\n接着要知道动态代理的步骤：\n\n1. `AutoProxyCreator`（实现了 `BeanPostProcessor` 接口）在实例化所有的 `Bean` 前，最先被实例化。\n2. 其他普通 `Bean` 被实例化、初始化，在初始化的过程中，`AutoProxyCreator` 加载 `BeanFactory` 中所有的 `PointcutAdvisor`（这也保证了 `PointcutAdvisor` 的实例化顺序优于普通 `Bean`。），然后依次使用 `PointcutAdvisor` 内置的 `ClassFilter`，判断当前对象是不是要拦截的类。\n3. 如果是，则生成一个 `TargetSource`（要拦截的对象和其类型），并取出 `AutoProxyCreator` 的 `MethodMatcher`（对哪些方法进行拦截）、`Advice`（拦截的具体操作），再，交给 `AopProxy` 去生成代理对象。\n4. `AopProxy` 生成一个 `InvocationHandler`，在它的 `invoke` 函数中，首先使用 `MethodMatcher` 判断是不是要拦截的方法，如果是则交给 `Advice` 来执行（`Advice` 由用户来编写，其中也要手动/自动调用原始对象的方法），如果不是，则直接交给 `TargetSource` 的原始对象来执行。\n\n### 设计模式\n\n#### 代理模式\n\n通过动态代理实现，见分析1中的内容，不再赘述。\n\n#### 策略模式\n\n生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现。\n\n### 为 tiny-spring 添加拦截器链\n\ntiny-spring 不支持拦截器链，可以模仿 Spring 中拦截器链的实现，实现对多拦截器的支持。 \ntiny-spring 中的 `proceed()` 方法是调用原始对象的方法 `method.invoke(object,args)`。（参见 `ReflectiveMethodInvocation` 类) \n为了支持多拦截器，做出以下修改：\n\n- 将 `proceed()` 方法修改为调用代理对象的方法 `method.invoke(proxy,args)`。\n- 在代理对象的 `InvocationHandler` 的 `invoke` 函数中，查看拦截器列表，如果有拦截器，则调用第一个拦截器并返回，否则调用原始对象的方法。","slug":"backEnd/spring/tiny-spring分析","published":1,"updated":"2018-08-04T06:32:45.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcd00055m4cmey8lkm8t","content":"<p>—— 转载自D佬笔记：<a href=\"https://www.zybuluo.com/dugu9sword/note/382745\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p><strong>前言</strong></p>\n<p>在阅读 Spring 的源代码（依赖注入部分和面向切面编程部分）时遇到不少困惑，庞大的类文件结构、纷繁复杂的方法调用、波诡云谲的多态实现，让自己深陷其中、一头雾水。<br>后来注意到 <a href=\"https://github.com/code4craft\" target=\"_blank\" rel=\"noopener\">code4craft</a> 的 <a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">tiny-spring</a> 项目，实现了一个微型的 Spring，提供对 IoC 和 AOP 的最基本支持，麻雀虽小，五脏俱全，对 Spring 的认知清晰了不少。这个微型框架的结构包括文件名、方法名都是参照 Spring 来实现的，对于初读 Spring 的学习者，作为研究 Spring 的辅助工具应该能够受益匪浅。<br>在研究 <a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">tiny-spring</a> 的时候，收获颇多，把对这个微型框架的一些分析写了下来，行文可能有点紊乱。</p>\n<p><strong>本文结构</strong></p>\n<ol>\n<li>第一部分 <strong>IoC 容器的实现</strong> 对应了 <a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">tiny-spring</a> 的 <a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-1</a> 到 <a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-5</a> 部分，这 5 个 step 实现了基本的 IoC 容器，支持singleton类型的bean，包括初始化、属性注入、以及依赖 Bean 注入，可从 XML 中读取配置，XML 读取方式没有具体深入。</li>\n<li>第二部分 <strong>AOP 容器的实现</strong> 对应了 <a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">tiny-spring</a> 的 <a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-6</a> 到 <a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-9</a> 部分。<a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-10</a> 中对 cglib 的支持没有分析。这 4 个 step 可以使用 AspectJ 的语法进行 AOP 编写，支持接口代理。考虑到 AspectJ 语法仅用于实现 <code>execution(&quot;***&quot;)</code> 部分的解析，不是主要内容，也可以使用 Java 的正则表达式粗略地完成，因此没有关注这些细节。</li>\n</ol>\n<p><strong>参考书目</strong><br>《Spring 实战》《Spring 技术内幕》</p>\n<hr>\n<p>tiny-spring 分析</p>\n<ul>\n<li>IoC 容器的实现<ul>\n<li>文件结构<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#resource\" target=\"_blank\" rel=\"noopener\">Resource</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#beandefinition\" target=\"_blank\" rel=\"noopener\">BeanDefinition</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#beanfactory\" target=\"_blank\" rel=\"noopener\">BeanFactory</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext\" target=\"_blank\" rel=\"noopener\">ApplicationContext</a></li>\n</ul>\n</li>\n<li>设计模式<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">模板方法模式</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">代理模式</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>AOP 的实现<ul>\n<li>重新分析 IoC 容器<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#beanfactory-%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%89%A7%E8%A1%8C\" target=\"_blank\" rel=\"noopener\">BeanFactory 的构造与执行</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext-%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%89%A7%E8%A1%8C\" target=\"_blank\" rel=\"noopener\">ApplicationContext 的构造和执行</a></li>\n<li>IoC 实现的一些思考与分析<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-1aop-%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%BD%95%E5%A4%84%E8%A2%AB%E5%B5%8C%E5%85%A5%E5%88%B0-ioc-%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%8E%BB\" target=\"_blank\" rel=\"noopener\">分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-2beanfactory-%E5%92%8C-applicationcontext-%E8%AE%BE%E8%AE%A1%E4%B8%8A%E7%9A%84%E8%80%A6%E5%90%88\" target=\"_blank\" rel=\"noopener\">分析 2：BeanFactory 和 ApplicationContext 设计上的耦合</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-3tiny-spring-%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B%E7%9A%84%E5%88%86%E6%9E%90\" target=\"_blank\" rel=\"noopener\">分析 3：tiny-spring 总体流程的分析</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#jdk-%E5%AF%B9%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%AF%E6%8C%81\" target=\"_blank\" rel=\"noopener\">JDK 对动态代理的支持</a></li>\n<li>AOP 的植入与实现细节<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%9C%A8-bean-%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%AE%8C%E6%88%90-aop-%E7%9A%84%E6%A4%8D%E5%85%A5\" target=\"_blank\" rel=\"noopener\">在 Bean 初始化过程中完成 AOP 的植入</a></li>\n<li>AOP 中动态代理的实现步骤<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%86%85%E5%AE%B9\" target=\"_blank\" rel=\"noopener\">动态代理的内容</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%AD%A5%E9%AA%A4\" target=\"_blank\" rel=\"noopener\">动态代理的步骤</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设计模式<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-1\" target=\"_blank\" rel=\"noopener\">代理模式</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">策略模式</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E4%B8%BA-tiny-spring-%E6%B7%BB%E5%8A%A0%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE\" target=\"_blank\" rel=\"noopener\">为 tiny-spring 添加拦截器链</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"IoC-容器的实现\"><a href=\"#IoC-容器的实现\" class=\"headerlink\" title=\"IoC 容器的实现\"></a>IoC 容器的实现</h2><h3 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h3><h4 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h4><p>以 <code>Resource</code> 接口为核心发散出的几个类，都是用于解决 IoC 容器中的内容从哪里来的问题，也就是 <strong>配置文件从哪里读取、配置文件如何读取</strong> 的问题。</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Resource</code></td>\n<td>接口，标识一个外部资源。通过 <code>getInputStream()</code> 方法 <strong>获取资源的输入流</strong> 。</td>\n</tr>\n<tr>\n<td><code>UrlResource</code></td>\n<td>实现 <code>Resource</code> 接口的资源类，通过 URL 获取资源。</td>\n</tr>\n<tr>\n<td><code>ResourceLoader</code></td>\n<td>资源加载类。通过 <code>getResource(String)</code> 方法获取一个 <code>Resouce</code> 对象，是 <strong>获取 Resouce 的主要途径</strong> 。</td>\n</tr>\n</tbody>\n</table>\n<p><em>注：</em> 这里在设计上有一定的问题，<code>ResourceLoader</code> 直接返回了一个 <code>UrlResource</code>，更好的方法是声明一个 <code>ResourceLoader</code> 接口，再实现一个 <code>UrlResourceLoader</code> 类用于加载 <code>UrlResource</code>。</p>\n<h4 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a>BeanDefinition</h4><p>以 <code>BeanDefinition</code> 类为核心发散出的几个类，都是用于解决 <code>Bean</code> 的具体定义问题，包括 <code>Bean</code> 的名字是什么、它的类型是什么，它的属性赋予了哪些值或者引用，也就是 <strong>如何在 IoC 容器中定义一个 Bean，使得 IoC 容器可以根据这个定义来生成实例</strong> 的问题。</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BeanDefinition</code></td>\n<td>该类保存了 <code>Bean</code> 定义。包括 <code>Bean</code> 的 <strong>名字</strong> <code>String beanClassName</code>、<strong>类型</strong><code>Class beanClass</code>、<strong>属性</strong> <code>PropertyValues propertyValues</code>。根据其 <strong>类型</strong> 可以生成一个类实例，然后可以把 <strong>属性</strong> 注入进去。<code>propertyValues</code> 里面包含了一个个 <code>PropertyValue</code> 条目，每个条目都是键值对 <code>String</code> - <code>Object</code>，分别对应要生成实例的属性的名字与类型。在 Spring 的 XML 中的 <code>property</code> 中，键是 <code>key</code> ，值是 <code>value</code> 或者 <code>ref</code>。对于 <code>value</code> 只要直接注入属性就行了，但是 <code>ref</code> 要先进行解析。<code>Object</code> 如果是 <code>BeanReference</code> 类型，则说明其是一个引用，其中保存了引用的名字，需要用先进行解析，转化为对应的实际 <code>Object</code>。</td>\n</tr>\n<tr>\n<td><code>BeanDefinitionReader</code></td>\n<td>解析 <code>BeanDefinition</code> 的接口。通过 <code>loadBeanDefinitions(String)</code> 来从一个地址加载类定义。</td>\n</tr>\n<tr>\n<td><code>AbstractBeanDefinitionReader</code></td>\n<td>实现 <code>BeanDefinitionReader</code> 接口的抽象类（未具体实现 <code>loadBeanDefinitions</code>，而是规范了 <code>BeanDefinitionReader</code> 的基本结构）。内置一个 <code>HashMap rigistry</code>，用于保存 <code>String</code> - <code>beanDefinition</code> 的键值对。内置一个 <code>ResourceLoader resourceLoader</code>，用于保存类加载器。用意在于，使用时，只需要向其 <code>loadBeanDefinitions()</code> 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 <code>BeanDefinition</code> 保存到 <code>registry</code> 中去。</td>\n</tr>\n<tr>\n<td><code>XmlBeanDefinitionReader</code></td>\n<td>具体实现了 <code>loadBeanDefinitions()</code> 方法，从 XML 文件中读取类定义。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h4><p>以 <code>BeanFactory</code> 接口为核心发散出的几个类，都是用于解决 IoC 容器在 <strong>已经获取 Bean 的定义的情况下，如何装配、获取 Bean 实例</strong> 的问题。</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BeanFactory</code></td>\n<td>接口，标识一个 IoC 容器。通过 <code>getBean(String)</code> 方法来 <strong>获取一个对象</strong></td>\n</tr>\n<tr>\n<td><code>AbstractBeanFactory</code></td>\n<td><code>BeanFactory</code> 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 <code>Bean</code>的具体实现方式留给子类实现。IoC 容器的结构：<code>AbstractBeanFactory</code> 维护一个 <code>beanDefinitionMap</code> 哈希表用于保存类的定义信息（<code>BeanDefinition</code>）。获取 <code>Bean</code> 时，如果 <code>Bean</code> 已经存在于容器中，则返回之，否则则调用 <code>doCreateBean</code>方法装配一个 <code>Bean</code>。（所谓存在于容器中，是指容器可以通过 <code>beanDefinitionMap</code> 获取 <code>BeanDefinition</code> 进而通过其 <code>getBean()</code> 方法获取 <code>Bean</code>。）</td>\n</tr>\n<tr>\n<td><code>AutowireCapableBeanFactory</code></td>\n<td>可以实现自动装配的 <code>BeanFactory</code>。在这个工厂中，实现了 <code>doCreateBean</code> 方法，该方法分三步：1，通过 <code>BeanDefinition</code> 中保存的类信息实例化一个对象；2，把对象保存在 <code>BeanDefinition</code> 中，以备下次获取；3，为其装配属性。装配属性时，通过 <code>BeanDefinition</code> 中维护的 <code>PropertyValues</code> 集合类，把 <code>String</code> - <code>Value</code> 键值对注入到 <code>Bean</code> 的属性中去。如果 <code>Value</code> 的类型是 <code>BeanReference</code>则说明其是一个引用（对应于 XML 中的 <code>ref</code>），通过 <code>getBean</code> 对其进行获取，然后注入到属性中。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h4><p>以 <code>ApplicationContext</code> 接口为核心发散出的几个类，主要是对前面 <code>Resouce</code> 、 <code>BeanFactory</code>、<code>BeanDefinition</code> 进行了功能的封装，解决 <strong>根据地址获取 IoC 容器并使用</strong> 的问题。</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ApplicationContext</code></td>\n<td>标记接口，继承了 <code>BeanFactory</code>。通常，要实现一个 IoC 容器时，需要先通过 <code>ResourceLoader</code> 获取一个 <code>Resource</code>，其中包括了容器的配置、<code>Bean</code> 的定义信息。接着，使用 <code>BeanDefinitionReader</code> 读取该 <code>Resource</code> 中的 <code>BeanDefinition</code> 信息。最后，把 <code>BeanDefinition</code> 保存在 <code>BeanFactory</code>中，容器配置完毕可以使用。注意到 <code>BeanFactory</code> 只实现了 <code>Bean</code> 的 <strong>装配、获取</strong>，并未说明 <code>Bean</code> 的 <strong>来源</strong> 也就是 <code>BeanDefinition</code> 是如何 <strong>加载</strong> 的。该接口把 <code>BeanFactory</code> 和 <code>BeanDefinitionReader</code> 结合在了一起。</td>\n</tr>\n<tr>\n<td><code>AbstractApplicationContext</code></td>\n<td><code>ApplicationContext</code> 的抽象实现，内部包含一个 <code>BeanFactory</code> 类。主要方法有 <code>getBean()</code> 和 <code>refresh()</code> 方法。<code>getBean()</code> 直接调用了内置 <code>BeanFactory</code> 的 <code>getBean()</code> 方法，<code>refresh()</code> 则用于实现 <code>BeanFactory</code> 的刷新，也就是告诉 <code>BeanFactory</code> 该使用哪个资源（<code>Resource</code>）加载类定义（<code>BeanDefinition</code>）信息，该方法留给子类实现，用以实现 <strong>从不同来源的不同类型的资源加载类定义</strong> 的效果。</td>\n</tr>\n<tr>\n<td>ClassPathXmlApplicationContext</td>\n<td>从类路径加载资源的具体实现类。内部通过 <code>XmlBeanDefinitionReader</code> 解析 <code>UrlResourceLoader</code> 读取到的 <code>Resource</code>，获取 <code>BeanDefinition</code> 信息，然后将其保存到内置的 <code>BeanFactory</code> 中。</td>\n</tr>\n</tbody>\n</table>\n<p><em>注 1：</em>在 Spring 的实现中，对 <code>ApplicatinoContext</code> 的分层更为细致。<code>AbstractApplicationContext</code> 中为了实现 <strong>不同来源</strong> 的 <strong>不同类型</strong> 的资源加载类定义，把这两步分层实现。以“从类路径读取 XML 定义”为例，首先使用 <code>AbstractXmlApplicationContext</code> 来实现 <strong>不同类型</strong> 的资源解析，接着，通过 <code>ClassPathXmlApplicationContext</code> 来实现 <strong>不同来源</strong> 的资源解析。<br><em>注 2：</em>在 tiny-spring 的实现中，先用 <code>BeanDefinitionReader</code> 读取 <code>BeanDefiniton</code> 后，保存在内置的 <code>registry</code>（键值对为 <code>String</code> - <code>BeanDefinition</code> 的哈希表，通过 <code>getRigistry()</code> 获取）中，然后由 <code>ApplicationContext</code> 把 <code>BeanDefinitionReader</code> 中 <code>registry</code> 的键值对一个个赋值给 <code>BeanFactory</code> 中保存的 <code>beanDefinitionMap</code>。而在 Spring 的实现中，<code>BeanDefinitionReader</code> 直接操作 <code>BeanDefinition</code> ，它的 <code>getRegistry()</code> 获取的不是内置的 <code>registry</code>，而是 <code>BeanFactory</code> 的实例。如何实现呢？以 <code>DefaultListableBeanFactory</code> 为例，它实现了一个 <code>BeanDefinitonRigistry</code> 接口，该接口把 <code>BeanDefinition</code> 的 <strong>注册</strong> 、<strong>获取</strong> 等方法都暴露了出来，这样，<code>BeanDefinitionReader</code> 可以直接通过这些方法把 <code>BeanDefiniton</code> 直接加载到 <code>BeanFactory</code> 中去。</p>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><p><em>注：此处的设计模式分析不限于 tiny-spring，也包括 Spring 本身的内容</em></p>\n<h4 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h4><p>该模式大量使用，例如在 <code>BeanFactory</code> 中，把 <code>getBean()</code> 交给子类实现，不同的子类 <code>**BeanFactory</code> 对其可以采取不同的实现。</p>\n<h4 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><p>在 tiny-spring 中（Spring 中也有类似但不完全相同的实现方式），<code>ApplicationContext</code> 继承了 <code>BeanFactory</code> 接口，具备了 <code>getBean()</code> 功能，但是又内置了一个 <code>BeanFactory</code> 实例，<code>getBean()</code> 直接调用 <code>BeanFactory</code> 的 <code>getBean()</code> 。但是<code>ApplicationContext</code> 加强了 <code>BeanFactory</code>，它把类定义的加载也包含进去了。</p>\n<h2 id=\"AOP-的实现\"><a href=\"#AOP-的实现\" class=\"headerlink\" title=\"AOP 的实现\"></a>AOP 的实现</h2><h3 id=\"重新分析-IoC-容器\"><a href=\"#重新分析-IoC-容器\" class=\"headerlink\" title=\"重新分析 IoC 容器\"></a>重新分析 IoC 容器</h3><p><em>注：以下所说的 BeanFactory 和 ApplicationContext 不是指的那几个最基本的接口类（例如 BeanFactory 接口，它除了 getBean 空方法之外，什么都没有，无法用来分析。），而是指这一类对象总体的表现，比如 ClasspathXmlApplicationContext、FileSystemXmlApplicationContext 都算是 ApplicationContext。</em></p>\n<h4 id=\"BeanFactory-的构造与执行\"><a href=\"#BeanFactory-的构造与执行\" class=\"headerlink\" title=\"BeanFactory 的构造与执行\"></a>BeanFactory 的构造与执行</h4><p><code>BeanFactory</code> 的核心方法是 <code>getBean(String)</code> 方法，用于从工厂中取出所需要的 <code>Bean</code> 。<code>AbstractBeanFactory</code> 规定了基本的构造和执行流程。</p>\n<p><code>getBean</code> 的流程：<em>包括实例化和初始化，也就是生成 Bean，再执行一些初始化操作。</em></p>\n<ol>\n<li><code>doCreateBean</code> ：实例化 <code>Bean</code>。<br>a. <code>createInstance</code> ：生成一个新的实例。<br>b. <code>applyProperties</code> ：注入属性，包括依赖注入的过程。在依赖注入的过程中，如果 <code>Bean</code> 实现了 <code>BeanFactoryAware</code> 接口，则将容器的引用传入到 <code>Bean</code> 中去，这样，<code>Bean</code> 将获取对容器操作的权限，也就允许了 <strong>编写扩展 IoC 容器的功能的 Bean</strong>。</li>\n<li><code>initializeBean(bean)</code> ： 初始化 <code>Bean</code>。<br>a. 从 <code>BeanPostProcessor</code> 列表中，依次取出 <code>BeanPostProcessor</code> 执行 <code>bean = postProcessBeforeInitialization(bean,beanName)</code> 。（<em>为什么调用 BeanPostProceesor 中提供方法时，不是直接 post…(bean,beanName) 而是 bean = post…(bean,beanName) 呢？见分析1 。另外，BeanPostProcessor 列表的获取有问题，见分析2。</em>）<br>b. 初始化方法（tiny-spring 未实现对初始化方法的支持）。<br>c. 从 <code>BeanPostProcessor</code> 列表中， 依次取出 <code>BeanPostProcessor</code> 执行其 <code>bean = postProcessAfterInitialization(bean,beanName)</code>。</li>\n</ol>\n<h4 id=\"ApplicationContext-的构造和执行\"><a href=\"#ApplicationContext-的构造和执行\" class=\"headerlink\" title=\"ApplicationContext 的构造和执行\"></a>ApplicationContext 的构造和执行</h4><p><code>ApplicationContext</code> 的核心方法是 <code>refresh()</code> 方法，用于从资源文件加载类定义、扩展容器的功能。</p>\n<p><code>refresh</code> 的流程：</p>\n<ol>\n<li><code>loadBeanDefinitions(BeanFactory)</code> ：加载类定义，并注入到内置的 <code>BeanFactory</code> 中，这里的可扩展性在于，<strong>未对加载方法进行要求，也就是可以从不同来源的不同类型的资源进行加载</strong>。</li>\n<li><code>registerBeanPostProcessors(BeanFactory)</code> ：获取所有的 <code>BeanPostProcessor</code>，并注册到 <code>BeanFactory</code> 维护的 <code>BeanPostProcessor</code> 列表去。</li>\n<li><code>onRefresh</code> ：<br>a. <code>preInstantiateSingletons</code> ：以单例的方式，初始化所有 <code>Bean</code>。tiny-spring 只支持 <code>singleton</code> 模式。</li>\n</ol>\n<h4 id=\"IoC-实现的一些思考与分析\"><a href=\"#IoC-实现的一些思考与分析\" class=\"headerlink\" title=\"IoC 实现的一些思考与分析\"></a>IoC 实现的一些思考与分析</h4><h5 id=\"分析-1：AOP-可以在何处被嵌入到-IoC-容器中去？\"><a href=\"#分析-1：AOP-可以在何处被嵌入到-IoC-容器中去？\" class=\"headerlink\" title=\"分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？\"></a>分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？</h5><p>在 <code>Bean</code> 的初始化过程中，会调用 <code>BeanPostProcessor</code> 对其进行一些处理。在它的 <code>postProcess...Initialization</code>方法中返回了一个 <code>Bean</code>，这个返回的 <code>Bean</code> 可能已经不是原来传入的 <code>Bean</code> 了，<strong>这为实现 AOP 的代理提供了可能</strong>！以 JDK 提供的动态代理为例，假设方法要求传入的对象实现了 <code>IObj</code> 接口，实际传入的对象是 <code>Obj</code>，那么在方法中，通过动态代理，可以 <strong>生成一个实现了 IObj 接口并把 Obj 作为内置对象的代理类 Proxy 返回</strong>，此时 <code>Bean</code> 已经被偷偷换成了它的代理类。</p>\n<h5 id=\"分析-2：BeanFactory-和-ApplicationContext-设计上的耦合\"><a href=\"#分析-2：BeanFactory-和-ApplicationContext-设计上的耦合\" class=\"headerlink\" title=\"分析 2：BeanFactory 和 ApplicationContext 设计上的耦合\"></a>分析 2：BeanFactory 和 ApplicationContext 设计上的耦合</h5><p><code>BeanFactory</code> 中的 <code>BeanPostProcessor</code> 的列表是哪里生成的呢？是在 <code>ApplicationContext</code> 中的 <code>refresh</code> 方法的第二步，这里设计上应该有些问题，按理说 <code>ApplicationContext</code> 是基于 <code>BeanFactory</code> 的，<code>BeanFactory</code> 的属性的获取，怎么能依赖于 <code>ApplicationContext</code> 的调用呢？</p>\n<h5 id=\"分析-3：tiny-spring-总体流程的分析\"><a href=\"#分析-3：tiny-spring-总体流程的分析\" class=\"headerlink\" title=\"分析 3：tiny-spring 总体流程的分析\"></a>分析 3：tiny-spring 总体流程的分析</h5><p>总体来说，tiny-spring 的 <code>ApplicaitonContext</code> 使用流程是这样的： </p>\n<ol>\n<li><code>ApplicationContext</code> 完成了类定义的读取和加载，并注册到 <code>BeanFactory</code> 中去。 </li>\n<li><code>ApplicationContext</code> 从 <code>BeanFactory</code> 中寻找 <code>BeanPostProcessor</code>，注册到 <code>BeanFactory</code><br>维护的 <code>BeanPostProcessor</code> 列表中去。 </li>\n<li><code>ApplicationContext</code> 以单例的模式，通过主动调用 <code>getBean</code> 实例化、注入属性、然后初始化 <code>BeanFactory</code> 中所有的 <code>Bean</code>。由于所有的 <code>BeanPostProcessor</code> 都已经在第 2 步中完成实例化了，因此接下来实例化的是普通 <code>Bean</code>，因此普通 <code>Bean</code> 的初始化过程可以正常执行。<br>\\4. 调用 <code>getBean</code> 时，委托给 <code>BeanFactory</code>，此时只是简单的返回每个 <code>Bean</code> 单例，因为所有的 <code>Bean</code> 实例在第三步都已经生成了。</li>\n</ol>\n<h3 id=\"JDK-对动态代理的支持\"><a href=\"#JDK-对动态代理的支持\" class=\"headerlink\" title=\"JDK 对动态代理的支持\"></a>JDK 对动态代理的支持</h3><p>JDK 中几个关键的类：</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Proxy</code></td>\n<td>来自 JDK API。提供生成对象的动态代理的功能，通过<code>Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code>方法返回一个代理对象。</td>\n</tr>\n<tr>\n<td><code>InvocationHandler</code></td>\n<td>来自 JDK API。通过 <code>Object invoke(Object proxy, Method method,Object[] args)</code> 方法实现代理对象中方法的调用和其他处理。</td>\n</tr>\n</tbody>\n</table>\n<p>假设以下的情况：</p>\n<ul>\n<li>对象 <code>obj</code> 实现了 <code>IObj</code> 接口，接口中有一个方法 <code>func(Object[] args)</code>。</li>\n<li>对象 <code>handler</code> 是 <code>InvocationHandler</code> 的实例。</li>\n</ul>\n<p>那么，通过 <code>Proxy</code> 的 <code>newProxyInstance(obj.getClassLoader(), obj.getClass().getInterfaces(), handler</code>，可以返回 <code>obj</code> 的代理对象 <code>proxy</code>。</p>\n<p>当调用 <code>proxy.func(args)</code> 时，对象内部将委托给 <code>handler.invoke(proxy, func, args)</code> 函数实现。</p>\n<p>因此，<strong>在 handler 的 invoke 中，可以完成对方法拦截的处理</strong>。可以先判断是不是要拦截的方法，如果是，进行拦截（比如先做一些操作，再调用原来的方法，对应了 Spring 中的前置通知）；如果不是，则直接调用原来的方法。</p>\n<h3 id=\"AOP-的植入与实现细节\"><a href=\"#AOP-的植入与实现细节\" class=\"headerlink\" title=\"AOP 的植入与实现细节\"></a>AOP 的植入与实现细节</h3><h4 id=\"在-Bean-初始化过程中完成-AOP-的植入\"><a href=\"#在-Bean-初始化过程中完成-AOP-的植入\" class=\"headerlink\" title=\"在 Bean 初始化过程中完成 AOP 的植入\"></a>在 <code>Bean</code> 初始化过程中完成 AOP 的植入</h4><p>解决 AOP 的植入问题，首先要解决 <strong>在 IoC 容器的何处植入 AOP</strong> 的问题，其次要解决 <strong>为哪些对象提供 AOP 的植入</strong> 的问题。<br>tiny-spring 中 <code>AspectJAwareAdvisorAutoProxyCreator</code> 类（以下简称 <code>AutoProxyCreator</code>）是实现 AOP 植入的关键类，它实现了两个接口：</p>\n<ol>\n<li><code>BeanPostProcessor</code> ：在 <code>postProcessorAfterInitialization</code> 方法中，使用动态代理的方式，返回一个对象的代理对象。解决了 <strong>在 IoC 容器的何处植入 AOP</strong> 的问题。</li>\n<li><code>BeanFactoryAware</code> ：这个接口提供了对 <code>BeanFactory</code> 的感知，这样，尽管它是容器中的一个 <code>Bean</code>，却可以获取容器的引用，进而获取容器中所有的切点对象，决定对哪些对象的哪些方法进行代理。解决了 <strong>为哪些对象提供 AOP 的植入</strong> 的问题。</li>\n</ol>\n<h4 id=\"AOP-中动态代理的实现步骤\"><a href=\"#AOP-中动态代理的实现步骤\" class=\"headerlink\" title=\"AOP 中动态代理的实现步骤\"></a>AOP 中动态代理的实现步骤</h4><h5 id=\"动态代理的内容\"><a href=\"#动态代理的内容\" class=\"headerlink\" title=\"动态代理的内容\"></a>动态代理的内容</h5><p>首先，要知道动态代理的内容（拦截哪个对象、在哪个方法拦截、拦截具体内容），下面是几个关键的类：</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PointcutAdvisor</code></td>\n<td>切点通知器，用于提供 <strong>对哪个对象的哪个方法进行什么样的拦截</strong> 的具体内容。通过它可以获取一个切点对象 <code>Pointcut</code> 和一个通知器对象 <code>Advisor</code>。</td>\n</tr>\n<tr>\n<td><code>Pointcut</code></td>\n<td>切点对象可以获取一个 <code>ClassFilter</code> 对象和一个 <code>MethodMatcher</code> 对象。前者用于判断是否对某个对象进行拦截（用于 <strong>筛选要代理的目标对象</strong>），后者用于判断是否对某个方法进行拦截（用于 <strong>在代理对象中对不同的方法进行不同的操作</strong>）。</td>\n</tr>\n<tr>\n<td><code>Advisor</code></td>\n<td>通知器对象可以获取一个通知对象 <code>Advice</code> 。就是用于实现 <strong>具体的方法拦截</strong>，需要使用者编写，也就对应了 Spring 中的前置通知、后置通知、环切通知等。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"动态代理的步骤\"><a href=\"#动态代理的步骤\" class=\"headerlink\" title=\"动态代理的步骤\"></a>动态代理的步骤</h5><p>接着要知道动态代理的步骤：</p>\n<ol>\n<li><code>AutoProxyCreator</code>（实现了 <code>BeanPostProcessor</code> 接口）在实例化所有的 <code>Bean</code> 前，最先被实例化。</li>\n<li>其他普通 <code>Bean</code> 被实例化、初始化，在初始化的过程中，<code>AutoProxyCreator</code> 加载 <code>BeanFactory</code> 中所有的 <code>PointcutAdvisor</code>（这也保证了 <code>PointcutAdvisor</code> 的实例化顺序优于普通 <code>Bean</code>。），然后依次使用 <code>PointcutAdvisor</code> 内置的 <code>ClassFilter</code>，判断当前对象是不是要拦截的类。</li>\n<li>如果是，则生成一个 <code>TargetSource</code>（要拦截的对象和其类型），并取出 <code>AutoProxyCreator</code> 的 <code>MethodMatcher</code>（对哪些方法进行拦截）、<code>Advice</code>（拦截的具体操作），再，交给 <code>AopProxy</code> 去生成代理对象。</li>\n<li><code>AopProxy</code> 生成一个 <code>InvocationHandler</code>，在它的 <code>invoke</code> 函数中，首先使用 <code>MethodMatcher</code> 判断是不是要拦截的方法，如果是则交给 <code>Advice</code> 来执行（<code>Advice</code> 由用户来编写，其中也要手动/自动调用原始对象的方法），如果不是，则直接交给 <code>TargetSource</code> 的原始对象来执行。</li>\n</ol>\n<h3 id=\"设计模式-1\"><a href=\"#设计模式-1\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><h4 id=\"代理模式-1\"><a href=\"#代理模式-1\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><p>通过动态代理实现，见分析1中的内容，不再赘述。</p>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><p>生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现。</p>\n<h3 id=\"为-tiny-spring-添加拦截器链\"><a href=\"#为-tiny-spring-添加拦截器链\" class=\"headerlink\" title=\"为 tiny-spring 添加拦截器链\"></a>为 tiny-spring 添加拦截器链</h3><p>tiny-spring 不支持拦截器链，可以模仿 Spring 中拦截器链的实现，实现对多拦截器的支持。<br>tiny-spring 中的 <code>proceed()</code> 方法是调用原始对象的方法 <code>method.invoke(object,args)</code>。（参见 <code>ReflectiveMethodInvocation</code> 类)<br>为了支持多拦截器，做出以下修改：</p>\n<ul>\n<li>将 <code>proceed()</code> 方法修改为调用代理对象的方法 <code>method.invoke(proxy,args)</code>。</li>\n<li>在代理对象的 <code>InvocationHandler</code> 的 <code>invoke</code> 函数中，查看拦截器列表，如果有拦截器，则调用第一个拦截器并返回，否则调用原始对象的方法。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>—— 转载自D佬笔记：<a href=\"https://www.zybuluo.com/dugu9sword/note/382745\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p><strong>前言</strong></p>\n<p>在阅读 Spring 的源代码（依赖注入部分和面向切面编程部分）时遇到不少困惑，庞大的类文件结构、纷繁复杂的方法调用、波诡云谲的多态实现，让自己深陷其中、一头雾水。<br>后来注意到 <a href=\"https://github.com/code4craft\" target=\"_blank\" rel=\"noopener\">code4craft</a> 的 <a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">tiny-spring</a> 项目，实现了一个微型的 Spring，提供对 IoC 和 AOP 的最基本支持，麻雀虽小，五脏俱全，对 Spring 的认知清晰了不少。这个微型框架的结构包括文件名、方法名都是参照 Spring 来实现的，对于初读 Spring 的学习者，作为研究 Spring 的辅助工具应该能够受益匪浅。<br>在研究 <a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">tiny-spring</a> 的时候，收获颇多，把对这个微型框架的一些分析写了下来，行文可能有点紊乱。</p>\n<p><strong>本文结构</strong></p>\n<ol>\n<li>第一部分 <strong>IoC 容器的实现</strong> 对应了 <a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">tiny-spring</a> 的 <a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-1</a> 到 <a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-5</a> 部分，这 5 个 step 实现了基本的 IoC 容器，支持singleton类型的bean，包括初始化、属性注入、以及依赖 Bean 注入，可从 XML 中读取配置，XML 读取方式没有具体深入。</li>\n<li>第二部分 <strong>AOP 容器的实现</strong> 对应了 <a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">tiny-spring</a> 的 <a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-6</a> 到 <a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-9</a> 部分。<a href=\"https://github.com/code4craft/tiny-spring/releases\" target=\"_blank\" rel=\"noopener\">step-10</a> 中对 cglib 的支持没有分析。这 4 个 step 可以使用 AspectJ 的语法进行 AOP 编写，支持接口代理。考虑到 AspectJ 语法仅用于实现 <code>execution(&quot;***&quot;)</code> 部分的解析，不是主要内容，也可以使用 Java 的正则表达式粗略地完成，因此没有关注这些细节。</li>\n</ol>\n<p><strong>参考书目</strong><br>《Spring 实战》《Spring 技术内幕》</p>\n<hr>\n<p>tiny-spring 分析</p>\n<ul>\n<li>IoC 容器的实现<ul>\n<li>文件结构<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#resource\" target=\"_blank\" rel=\"noopener\">Resource</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#beandefinition\" target=\"_blank\" rel=\"noopener\">BeanDefinition</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#beanfactory\" target=\"_blank\" rel=\"noopener\">BeanFactory</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext\" target=\"_blank\" rel=\"noopener\">ApplicationContext</a></li>\n</ul>\n</li>\n<li>设计模式<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">模板方法模式</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">代理模式</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>AOP 的实现<ul>\n<li>重新分析 IoC 容器<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#beanfactory-%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%89%A7%E8%A1%8C\" target=\"_blank\" rel=\"noopener\">BeanFactory 的构造与执行</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext-%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%89%A7%E8%A1%8C\" target=\"_blank\" rel=\"noopener\">ApplicationContext 的构造和执行</a></li>\n<li>IoC 实现的一些思考与分析<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-1aop-%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%BD%95%E5%A4%84%E8%A2%AB%E5%B5%8C%E5%85%A5%E5%88%B0-ioc-%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%8E%BB\" target=\"_blank\" rel=\"noopener\">分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-2beanfactory-%E5%92%8C-applicationcontext-%E8%AE%BE%E8%AE%A1%E4%B8%8A%E7%9A%84%E8%80%A6%E5%90%88\" target=\"_blank\" rel=\"noopener\">分析 2：BeanFactory 和 ApplicationContext 设计上的耦合</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-3tiny-spring-%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B%E7%9A%84%E5%88%86%E6%9E%90\" target=\"_blank\" rel=\"noopener\">分析 3：tiny-spring 总体流程的分析</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#jdk-%E5%AF%B9%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%AF%E6%8C%81\" target=\"_blank\" rel=\"noopener\">JDK 对动态代理的支持</a></li>\n<li>AOP 的植入与实现细节<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%9C%A8-bean-%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%AE%8C%E6%88%90-aop-%E7%9A%84%E6%A4%8D%E5%85%A5\" target=\"_blank\" rel=\"noopener\">在 Bean 初始化过程中完成 AOP 的植入</a></li>\n<li>AOP 中动态代理的实现步骤<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%86%85%E5%AE%B9\" target=\"_blank\" rel=\"noopener\">动态代理的内容</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%AD%A5%E9%AA%A4\" target=\"_blank\" rel=\"noopener\">动态代理的步骤</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设计模式<ul>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-1\" target=\"_blank\" rel=\"noopener\">代理模式</a></li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"noopener\">策略模式</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.zybuluo.com/dugu9sword/note/382745#%E4%B8%BA-tiny-spring-%E6%B7%BB%E5%8A%A0%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE\" target=\"_blank\" rel=\"noopener\">为 tiny-spring 添加拦截器链</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"IoC-容器的实现\"><a href=\"#IoC-容器的实现\" class=\"headerlink\" title=\"IoC 容器的实现\"></a>IoC 容器的实现</h2><h3 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h3><h4 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h4><p>以 <code>Resource</code> 接口为核心发散出的几个类，都是用于解决 IoC 容器中的内容从哪里来的问题，也就是 <strong>配置文件从哪里读取、配置文件如何读取</strong> 的问题。</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Resource</code></td>\n<td>接口，标识一个外部资源。通过 <code>getInputStream()</code> 方法 <strong>获取资源的输入流</strong> 。</td>\n</tr>\n<tr>\n<td><code>UrlResource</code></td>\n<td>实现 <code>Resource</code> 接口的资源类，通过 URL 获取资源。</td>\n</tr>\n<tr>\n<td><code>ResourceLoader</code></td>\n<td>资源加载类。通过 <code>getResource(String)</code> 方法获取一个 <code>Resouce</code> 对象，是 <strong>获取 Resouce 的主要途径</strong> 。</td>\n</tr>\n</tbody>\n</table>\n<p><em>注：</em> 这里在设计上有一定的问题，<code>ResourceLoader</code> 直接返回了一个 <code>UrlResource</code>，更好的方法是声明一个 <code>ResourceLoader</code> 接口，再实现一个 <code>UrlResourceLoader</code> 类用于加载 <code>UrlResource</code>。</p>\n<h4 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a>BeanDefinition</h4><p>以 <code>BeanDefinition</code> 类为核心发散出的几个类，都是用于解决 <code>Bean</code> 的具体定义问题，包括 <code>Bean</code> 的名字是什么、它的类型是什么，它的属性赋予了哪些值或者引用，也就是 <strong>如何在 IoC 容器中定义一个 Bean，使得 IoC 容器可以根据这个定义来生成实例</strong> 的问题。</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BeanDefinition</code></td>\n<td>该类保存了 <code>Bean</code> 定义。包括 <code>Bean</code> 的 <strong>名字</strong> <code>String beanClassName</code>、<strong>类型</strong><code>Class beanClass</code>、<strong>属性</strong> <code>PropertyValues propertyValues</code>。根据其 <strong>类型</strong> 可以生成一个类实例，然后可以把 <strong>属性</strong> 注入进去。<code>propertyValues</code> 里面包含了一个个 <code>PropertyValue</code> 条目，每个条目都是键值对 <code>String</code> - <code>Object</code>，分别对应要生成实例的属性的名字与类型。在 Spring 的 XML 中的 <code>property</code> 中，键是 <code>key</code> ，值是 <code>value</code> 或者 <code>ref</code>。对于 <code>value</code> 只要直接注入属性就行了，但是 <code>ref</code> 要先进行解析。<code>Object</code> 如果是 <code>BeanReference</code> 类型，则说明其是一个引用，其中保存了引用的名字，需要用先进行解析，转化为对应的实际 <code>Object</code>。</td>\n</tr>\n<tr>\n<td><code>BeanDefinitionReader</code></td>\n<td>解析 <code>BeanDefinition</code> 的接口。通过 <code>loadBeanDefinitions(String)</code> 来从一个地址加载类定义。</td>\n</tr>\n<tr>\n<td><code>AbstractBeanDefinitionReader</code></td>\n<td>实现 <code>BeanDefinitionReader</code> 接口的抽象类（未具体实现 <code>loadBeanDefinitions</code>，而是规范了 <code>BeanDefinitionReader</code> 的基本结构）。内置一个 <code>HashMap rigistry</code>，用于保存 <code>String</code> - <code>beanDefinition</code> 的键值对。内置一个 <code>ResourceLoader resourceLoader</code>，用于保存类加载器。用意在于，使用时，只需要向其 <code>loadBeanDefinitions()</code> 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 <code>BeanDefinition</code> 保存到 <code>registry</code> 中去。</td>\n</tr>\n<tr>\n<td><code>XmlBeanDefinitionReader</code></td>\n<td>具体实现了 <code>loadBeanDefinitions()</code> 方法，从 XML 文件中读取类定义。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h4><p>以 <code>BeanFactory</code> 接口为核心发散出的几个类，都是用于解决 IoC 容器在 <strong>已经获取 Bean 的定义的情况下，如何装配、获取 Bean 实例</strong> 的问题。</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BeanFactory</code></td>\n<td>接口，标识一个 IoC 容器。通过 <code>getBean(String)</code> 方法来 <strong>获取一个对象</strong></td>\n</tr>\n<tr>\n<td><code>AbstractBeanFactory</code></td>\n<td><code>BeanFactory</code> 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 <code>Bean</code>的具体实现方式留给子类实现。IoC 容器的结构：<code>AbstractBeanFactory</code> 维护一个 <code>beanDefinitionMap</code> 哈希表用于保存类的定义信息（<code>BeanDefinition</code>）。获取 <code>Bean</code> 时，如果 <code>Bean</code> 已经存在于容器中，则返回之，否则则调用 <code>doCreateBean</code>方法装配一个 <code>Bean</code>。（所谓存在于容器中，是指容器可以通过 <code>beanDefinitionMap</code> 获取 <code>BeanDefinition</code> 进而通过其 <code>getBean()</code> 方法获取 <code>Bean</code>。）</td>\n</tr>\n<tr>\n<td><code>AutowireCapableBeanFactory</code></td>\n<td>可以实现自动装配的 <code>BeanFactory</code>。在这个工厂中，实现了 <code>doCreateBean</code> 方法，该方法分三步：1，通过 <code>BeanDefinition</code> 中保存的类信息实例化一个对象；2，把对象保存在 <code>BeanDefinition</code> 中，以备下次获取；3，为其装配属性。装配属性时，通过 <code>BeanDefinition</code> 中维护的 <code>PropertyValues</code> 集合类，把 <code>String</code> - <code>Value</code> 键值对注入到 <code>Bean</code> 的属性中去。如果 <code>Value</code> 的类型是 <code>BeanReference</code>则说明其是一个引用（对应于 XML 中的 <code>ref</code>），通过 <code>getBean</code> 对其进行获取，然后注入到属性中。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h4><p>以 <code>ApplicationContext</code> 接口为核心发散出的几个类，主要是对前面 <code>Resouce</code> 、 <code>BeanFactory</code>、<code>BeanDefinition</code> 进行了功能的封装，解决 <strong>根据地址获取 IoC 容器并使用</strong> 的问题。</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ApplicationContext</code></td>\n<td>标记接口，继承了 <code>BeanFactory</code>。通常，要实现一个 IoC 容器时，需要先通过 <code>ResourceLoader</code> 获取一个 <code>Resource</code>，其中包括了容器的配置、<code>Bean</code> 的定义信息。接着，使用 <code>BeanDefinitionReader</code> 读取该 <code>Resource</code> 中的 <code>BeanDefinition</code> 信息。最后，把 <code>BeanDefinition</code> 保存在 <code>BeanFactory</code>中，容器配置完毕可以使用。注意到 <code>BeanFactory</code> 只实现了 <code>Bean</code> 的 <strong>装配、获取</strong>，并未说明 <code>Bean</code> 的 <strong>来源</strong> 也就是 <code>BeanDefinition</code> 是如何 <strong>加载</strong> 的。该接口把 <code>BeanFactory</code> 和 <code>BeanDefinitionReader</code> 结合在了一起。</td>\n</tr>\n<tr>\n<td><code>AbstractApplicationContext</code></td>\n<td><code>ApplicationContext</code> 的抽象实现，内部包含一个 <code>BeanFactory</code> 类。主要方法有 <code>getBean()</code> 和 <code>refresh()</code> 方法。<code>getBean()</code> 直接调用了内置 <code>BeanFactory</code> 的 <code>getBean()</code> 方法，<code>refresh()</code> 则用于实现 <code>BeanFactory</code> 的刷新，也就是告诉 <code>BeanFactory</code> 该使用哪个资源（<code>Resource</code>）加载类定义（<code>BeanDefinition</code>）信息，该方法留给子类实现，用以实现 <strong>从不同来源的不同类型的资源加载类定义</strong> 的效果。</td>\n</tr>\n<tr>\n<td>ClassPathXmlApplicationContext</td>\n<td>从类路径加载资源的具体实现类。内部通过 <code>XmlBeanDefinitionReader</code> 解析 <code>UrlResourceLoader</code> 读取到的 <code>Resource</code>，获取 <code>BeanDefinition</code> 信息，然后将其保存到内置的 <code>BeanFactory</code> 中。</td>\n</tr>\n</tbody>\n</table>\n<p><em>注 1：</em>在 Spring 的实现中，对 <code>ApplicatinoContext</code> 的分层更为细致。<code>AbstractApplicationContext</code> 中为了实现 <strong>不同来源</strong> 的 <strong>不同类型</strong> 的资源加载类定义，把这两步分层实现。以“从类路径读取 XML 定义”为例，首先使用 <code>AbstractXmlApplicationContext</code> 来实现 <strong>不同类型</strong> 的资源解析，接着，通过 <code>ClassPathXmlApplicationContext</code> 来实现 <strong>不同来源</strong> 的资源解析。<br><em>注 2：</em>在 tiny-spring 的实现中，先用 <code>BeanDefinitionReader</code> 读取 <code>BeanDefiniton</code> 后，保存在内置的 <code>registry</code>（键值对为 <code>String</code> - <code>BeanDefinition</code> 的哈希表，通过 <code>getRigistry()</code> 获取）中，然后由 <code>ApplicationContext</code> 把 <code>BeanDefinitionReader</code> 中 <code>registry</code> 的键值对一个个赋值给 <code>BeanFactory</code> 中保存的 <code>beanDefinitionMap</code>。而在 Spring 的实现中，<code>BeanDefinitionReader</code> 直接操作 <code>BeanDefinition</code> ，它的 <code>getRegistry()</code> 获取的不是内置的 <code>registry</code>，而是 <code>BeanFactory</code> 的实例。如何实现呢？以 <code>DefaultListableBeanFactory</code> 为例，它实现了一个 <code>BeanDefinitonRigistry</code> 接口，该接口把 <code>BeanDefinition</code> 的 <strong>注册</strong> 、<strong>获取</strong> 等方法都暴露了出来，这样，<code>BeanDefinitionReader</code> 可以直接通过这些方法把 <code>BeanDefiniton</code> 直接加载到 <code>BeanFactory</code> 中去。</p>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><p><em>注：此处的设计模式分析不限于 tiny-spring，也包括 Spring 本身的内容</em></p>\n<h4 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h4><p>该模式大量使用，例如在 <code>BeanFactory</code> 中，把 <code>getBean()</code> 交给子类实现，不同的子类 <code>**BeanFactory</code> 对其可以采取不同的实现。</p>\n<h4 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><p>在 tiny-spring 中（Spring 中也有类似但不完全相同的实现方式），<code>ApplicationContext</code> 继承了 <code>BeanFactory</code> 接口，具备了 <code>getBean()</code> 功能，但是又内置了一个 <code>BeanFactory</code> 实例，<code>getBean()</code> 直接调用 <code>BeanFactory</code> 的 <code>getBean()</code> 。但是<code>ApplicationContext</code> 加强了 <code>BeanFactory</code>，它把类定义的加载也包含进去了。</p>\n<h2 id=\"AOP-的实现\"><a href=\"#AOP-的实现\" class=\"headerlink\" title=\"AOP 的实现\"></a>AOP 的实现</h2><h3 id=\"重新分析-IoC-容器\"><a href=\"#重新分析-IoC-容器\" class=\"headerlink\" title=\"重新分析 IoC 容器\"></a>重新分析 IoC 容器</h3><p><em>注：以下所说的 BeanFactory 和 ApplicationContext 不是指的那几个最基本的接口类（例如 BeanFactory 接口，它除了 getBean 空方法之外，什么都没有，无法用来分析。），而是指这一类对象总体的表现，比如 ClasspathXmlApplicationContext、FileSystemXmlApplicationContext 都算是 ApplicationContext。</em></p>\n<h4 id=\"BeanFactory-的构造与执行\"><a href=\"#BeanFactory-的构造与执行\" class=\"headerlink\" title=\"BeanFactory 的构造与执行\"></a>BeanFactory 的构造与执行</h4><p><code>BeanFactory</code> 的核心方法是 <code>getBean(String)</code> 方法，用于从工厂中取出所需要的 <code>Bean</code> 。<code>AbstractBeanFactory</code> 规定了基本的构造和执行流程。</p>\n<p><code>getBean</code> 的流程：<em>包括实例化和初始化，也就是生成 Bean，再执行一些初始化操作。</em></p>\n<ol>\n<li><code>doCreateBean</code> ：实例化 <code>Bean</code>。<br>a. <code>createInstance</code> ：生成一个新的实例。<br>b. <code>applyProperties</code> ：注入属性，包括依赖注入的过程。在依赖注入的过程中，如果 <code>Bean</code> 实现了 <code>BeanFactoryAware</code> 接口，则将容器的引用传入到 <code>Bean</code> 中去，这样，<code>Bean</code> 将获取对容器操作的权限，也就允许了 <strong>编写扩展 IoC 容器的功能的 Bean</strong>。</li>\n<li><code>initializeBean(bean)</code> ： 初始化 <code>Bean</code>。<br>a. 从 <code>BeanPostProcessor</code> 列表中，依次取出 <code>BeanPostProcessor</code> 执行 <code>bean = postProcessBeforeInitialization(bean,beanName)</code> 。（<em>为什么调用 BeanPostProceesor 中提供方法时，不是直接 post…(bean,beanName) 而是 bean = post…(bean,beanName) 呢？见分析1 。另外，BeanPostProcessor 列表的获取有问题，见分析2。</em>）<br>b. 初始化方法（tiny-spring 未实现对初始化方法的支持）。<br>c. 从 <code>BeanPostProcessor</code> 列表中， 依次取出 <code>BeanPostProcessor</code> 执行其 <code>bean = postProcessAfterInitialization(bean,beanName)</code>。</li>\n</ol>\n<h4 id=\"ApplicationContext-的构造和执行\"><a href=\"#ApplicationContext-的构造和执行\" class=\"headerlink\" title=\"ApplicationContext 的构造和执行\"></a>ApplicationContext 的构造和执行</h4><p><code>ApplicationContext</code> 的核心方法是 <code>refresh()</code> 方法，用于从资源文件加载类定义、扩展容器的功能。</p>\n<p><code>refresh</code> 的流程：</p>\n<ol>\n<li><code>loadBeanDefinitions(BeanFactory)</code> ：加载类定义，并注入到内置的 <code>BeanFactory</code> 中，这里的可扩展性在于，<strong>未对加载方法进行要求，也就是可以从不同来源的不同类型的资源进行加载</strong>。</li>\n<li><code>registerBeanPostProcessors(BeanFactory)</code> ：获取所有的 <code>BeanPostProcessor</code>，并注册到 <code>BeanFactory</code> 维护的 <code>BeanPostProcessor</code> 列表去。</li>\n<li><code>onRefresh</code> ：<br>a. <code>preInstantiateSingletons</code> ：以单例的方式，初始化所有 <code>Bean</code>。tiny-spring 只支持 <code>singleton</code> 模式。</li>\n</ol>\n<h4 id=\"IoC-实现的一些思考与分析\"><a href=\"#IoC-实现的一些思考与分析\" class=\"headerlink\" title=\"IoC 实现的一些思考与分析\"></a>IoC 实现的一些思考与分析</h4><h5 id=\"分析-1：AOP-可以在何处被嵌入到-IoC-容器中去？\"><a href=\"#分析-1：AOP-可以在何处被嵌入到-IoC-容器中去？\" class=\"headerlink\" title=\"分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？\"></a>分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？</h5><p>在 <code>Bean</code> 的初始化过程中，会调用 <code>BeanPostProcessor</code> 对其进行一些处理。在它的 <code>postProcess...Initialization</code>方法中返回了一个 <code>Bean</code>，这个返回的 <code>Bean</code> 可能已经不是原来传入的 <code>Bean</code> 了，<strong>这为实现 AOP 的代理提供了可能</strong>！以 JDK 提供的动态代理为例，假设方法要求传入的对象实现了 <code>IObj</code> 接口，实际传入的对象是 <code>Obj</code>，那么在方法中，通过动态代理，可以 <strong>生成一个实现了 IObj 接口并把 Obj 作为内置对象的代理类 Proxy 返回</strong>，此时 <code>Bean</code> 已经被偷偷换成了它的代理类。</p>\n<h5 id=\"分析-2：BeanFactory-和-ApplicationContext-设计上的耦合\"><a href=\"#分析-2：BeanFactory-和-ApplicationContext-设计上的耦合\" class=\"headerlink\" title=\"分析 2：BeanFactory 和 ApplicationContext 设计上的耦合\"></a>分析 2：BeanFactory 和 ApplicationContext 设计上的耦合</h5><p><code>BeanFactory</code> 中的 <code>BeanPostProcessor</code> 的列表是哪里生成的呢？是在 <code>ApplicationContext</code> 中的 <code>refresh</code> 方法的第二步，这里设计上应该有些问题，按理说 <code>ApplicationContext</code> 是基于 <code>BeanFactory</code> 的，<code>BeanFactory</code> 的属性的获取，怎么能依赖于 <code>ApplicationContext</code> 的调用呢？</p>\n<h5 id=\"分析-3：tiny-spring-总体流程的分析\"><a href=\"#分析-3：tiny-spring-总体流程的分析\" class=\"headerlink\" title=\"分析 3：tiny-spring 总体流程的分析\"></a>分析 3：tiny-spring 总体流程的分析</h5><p>总体来说，tiny-spring 的 <code>ApplicaitonContext</code> 使用流程是这样的： </p>\n<ol>\n<li><code>ApplicationContext</code> 完成了类定义的读取和加载，并注册到 <code>BeanFactory</code> 中去。 </li>\n<li><code>ApplicationContext</code> 从 <code>BeanFactory</code> 中寻找 <code>BeanPostProcessor</code>，注册到 <code>BeanFactory</code><br>维护的 <code>BeanPostProcessor</code> 列表中去。 </li>\n<li><code>ApplicationContext</code> 以单例的模式，通过主动调用 <code>getBean</code> 实例化、注入属性、然后初始化 <code>BeanFactory</code> 中所有的 <code>Bean</code>。由于所有的 <code>BeanPostProcessor</code> 都已经在第 2 步中完成实例化了，因此接下来实例化的是普通 <code>Bean</code>，因此普通 <code>Bean</code> 的初始化过程可以正常执行。<br>\\4. 调用 <code>getBean</code> 时，委托给 <code>BeanFactory</code>，此时只是简单的返回每个 <code>Bean</code> 单例，因为所有的 <code>Bean</code> 实例在第三步都已经生成了。</li>\n</ol>\n<h3 id=\"JDK-对动态代理的支持\"><a href=\"#JDK-对动态代理的支持\" class=\"headerlink\" title=\"JDK 对动态代理的支持\"></a>JDK 对动态代理的支持</h3><p>JDK 中几个关键的类：</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Proxy</code></td>\n<td>来自 JDK API。提供生成对象的动态代理的功能，通过<code>Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code>方法返回一个代理对象。</td>\n</tr>\n<tr>\n<td><code>InvocationHandler</code></td>\n<td>来自 JDK API。通过 <code>Object invoke(Object proxy, Method method,Object[] args)</code> 方法实现代理对象中方法的调用和其他处理。</td>\n</tr>\n</tbody>\n</table>\n<p>假设以下的情况：</p>\n<ul>\n<li>对象 <code>obj</code> 实现了 <code>IObj</code> 接口，接口中有一个方法 <code>func(Object[] args)</code>。</li>\n<li>对象 <code>handler</code> 是 <code>InvocationHandler</code> 的实例。</li>\n</ul>\n<p>那么，通过 <code>Proxy</code> 的 <code>newProxyInstance(obj.getClassLoader(), obj.getClass().getInterfaces(), handler</code>，可以返回 <code>obj</code> 的代理对象 <code>proxy</code>。</p>\n<p>当调用 <code>proxy.func(args)</code> 时，对象内部将委托给 <code>handler.invoke(proxy, func, args)</code> 函数实现。</p>\n<p>因此，<strong>在 handler 的 invoke 中，可以完成对方法拦截的处理</strong>。可以先判断是不是要拦截的方法，如果是，进行拦截（比如先做一些操作，再调用原来的方法，对应了 Spring 中的前置通知）；如果不是，则直接调用原来的方法。</p>\n<h3 id=\"AOP-的植入与实现细节\"><a href=\"#AOP-的植入与实现细节\" class=\"headerlink\" title=\"AOP 的植入与实现细节\"></a>AOP 的植入与实现细节</h3><h4 id=\"在-Bean-初始化过程中完成-AOP-的植入\"><a href=\"#在-Bean-初始化过程中完成-AOP-的植入\" class=\"headerlink\" title=\"在 Bean 初始化过程中完成 AOP 的植入\"></a>在 <code>Bean</code> 初始化过程中完成 AOP 的植入</h4><p>解决 AOP 的植入问题，首先要解决 <strong>在 IoC 容器的何处植入 AOP</strong> 的问题，其次要解决 <strong>为哪些对象提供 AOP 的植入</strong> 的问题。<br>tiny-spring 中 <code>AspectJAwareAdvisorAutoProxyCreator</code> 类（以下简称 <code>AutoProxyCreator</code>）是实现 AOP 植入的关键类，它实现了两个接口：</p>\n<ol>\n<li><code>BeanPostProcessor</code> ：在 <code>postProcessorAfterInitialization</code> 方法中，使用动态代理的方式，返回一个对象的代理对象。解决了 <strong>在 IoC 容器的何处植入 AOP</strong> 的问题。</li>\n<li><code>BeanFactoryAware</code> ：这个接口提供了对 <code>BeanFactory</code> 的感知，这样，尽管它是容器中的一个 <code>Bean</code>，却可以获取容器的引用，进而获取容器中所有的切点对象，决定对哪些对象的哪些方法进行代理。解决了 <strong>为哪些对象提供 AOP 的植入</strong> 的问题。</li>\n</ol>\n<h4 id=\"AOP-中动态代理的实现步骤\"><a href=\"#AOP-中动态代理的实现步骤\" class=\"headerlink\" title=\"AOP 中动态代理的实现步骤\"></a>AOP 中动态代理的实现步骤</h4><h5 id=\"动态代理的内容\"><a href=\"#动态代理的内容\" class=\"headerlink\" title=\"动态代理的内容\"></a>动态代理的内容</h5><p>首先，要知道动态代理的内容（拦截哪个对象、在哪个方法拦截、拦截具体内容），下面是几个关键的类：</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PointcutAdvisor</code></td>\n<td>切点通知器，用于提供 <strong>对哪个对象的哪个方法进行什么样的拦截</strong> 的具体内容。通过它可以获取一个切点对象 <code>Pointcut</code> 和一个通知器对象 <code>Advisor</code>。</td>\n</tr>\n<tr>\n<td><code>Pointcut</code></td>\n<td>切点对象可以获取一个 <code>ClassFilter</code> 对象和一个 <code>MethodMatcher</code> 对象。前者用于判断是否对某个对象进行拦截（用于 <strong>筛选要代理的目标对象</strong>），后者用于判断是否对某个方法进行拦截（用于 <strong>在代理对象中对不同的方法进行不同的操作</strong>）。</td>\n</tr>\n<tr>\n<td><code>Advisor</code></td>\n<td>通知器对象可以获取一个通知对象 <code>Advice</code> 。就是用于实现 <strong>具体的方法拦截</strong>，需要使用者编写，也就对应了 Spring 中的前置通知、后置通知、环切通知等。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"动态代理的步骤\"><a href=\"#动态代理的步骤\" class=\"headerlink\" title=\"动态代理的步骤\"></a>动态代理的步骤</h5><p>接着要知道动态代理的步骤：</p>\n<ol>\n<li><code>AutoProxyCreator</code>（实现了 <code>BeanPostProcessor</code> 接口）在实例化所有的 <code>Bean</code> 前，最先被实例化。</li>\n<li>其他普通 <code>Bean</code> 被实例化、初始化，在初始化的过程中，<code>AutoProxyCreator</code> 加载 <code>BeanFactory</code> 中所有的 <code>PointcutAdvisor</code>（这也保证了 <code>PointcutAdvisor</code> 的实例化顺序优于普通 <code>Bean</code>。），然后依次使用 <code>PointcutAdvisor</code> 内置的 <code>ClassFilter</code>，判断当前对象是不是要拦截的类。</li>\n<li>如果是，则生成一个 <code>TargetSource</code>（要拦截的对象和其类型），并取出 <code>AutoProxyCreator</code> 的 <code>MethodMatcher</code>（对哪些方法进行拦截）、<code>Advice</code>（拦截的具体操作），再，交给 <code>AopProxy</code> 去生成代理对象。</li>\n<li><code>AopProxy</code> 生成一个 <code>InvocationHandler</code>，在它的 <code>invoke</code> 函数中，首先使用 <code>MethodMatcher</code> 判断是不是要拦截的方法，如果是则交给 <code>Advice</code> 来执行（<code>Advice</code> 由用户来编写，其中也要手动/自动调用原始对象的方法），如果不是，则直接交给 <code>TargetSource</code> 的原始对象来执行。</li>\n</ol>\n<h3 id=\"设计模式-1\"><a href=\"#设计模式-1\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><h4 id=\"代理模式-1\"><a href=\"#代理模式-1\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><p>通过动态代理实现，见分析1中的内容，不再赘述。</p>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><p>生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现。</p>\n<h3 id=\"为-tiny-spring-添加拦截器链\"><a href=\"#为-tiny-spring-添加拦截器链\" class=\"headerlink\" title=\"为 tiny-spring 添加拦截器链\"></a>为 tiny-spring 添加拦截器链</h3><p>tiny-spring 不支持拦截器链，可以模仿 Spring 中拦截器链的实现，实现对多拦截器的支持。<br>tiny-spring 中的 <code>proceed()</code> 方法是调用原始对象的方法 <code>method.invoke(object,args)</code>。（参见 <code>ReflectiveMethodInvocation</code> 类)<br>为了支持多拦截器，做出以下修改：</p>\n<ul>\n<li>将 <code>proceed()</code> 方法修改为调用代理对象的方法 <code>method.invoke(proxy,args)</code>。</li>\n<li>在代理对象的 <code>InvocationHandler</code> 的 <code>invoke</code> 函数中，查看拦截器列表，如果有拦截器，则调用第一个拦截器并返回，否则调用原始对象的方法。</li>\n</ul>\n"},{"title":"$(this)-id和$(this)-attr('id')","date":"2017-06-18T12:39:25.000Z","_content":"\n返回元素都是**ID**，但如果元素没有**ID**，$(this).id  会返回一个空字符串，而\n  $(this).attr(\"id\")  将返回**undefined**。\n```\n<a class=\"btn btn-info  modifyuser\" href=\"#\"  id=\"${user.id }\">\n    <i class=\"icon-edit icon-white \"></i>  \n\t修改                                            \n</a>\n```\njs中：\n```\n$(\".modifyuser\").click(function(e){\n\tvar m_id = $(this).attr('id');\n\te.preventDefault();\n})\n```\n当中的$(this).attr('id')。\"this\"是指为\".modifyuser\"所在的标签，这个标签当中的属性：id\n既$(\".modifyuser\").getAttribute('id')。\n***\n参考：[this.id vs. $(this).attr('id')](https://stackoverflow.com/questions/5597317/this-id-vs-this-attrid)\n","source":"_posts/frontEnd/ajax/$(this)-id和$(this)-attr('id').md","raw":"---\ntitle: $(this)-id和$(this)-attr('id')\ndate: 2017.06.18 20:39:25\ntags: ajax 前端\ncategories: Program\n---\n\n返回元素都是**ID**，但如果元素没有**ID**，$(this).id  会返回一个空字符串，而\n  $(this).attr(\"id\")  将返回**undefined**。\n```\n<a class=\"btn btn-info  modifyuser\" href=\"#\"  id=\"${user.id }\">\n    <i class=\"icon-edit icon-white \"></i>  \n\t修改                                            \n</a>\n```\njs中：\n```\n$(\".modifyuser\").click(function(e){\n\tvar m_id = $(this).attr('id');\n\te.preventDefault();\n})\n```\n当中的$(this).attr('id')。\"this\"是指为\".modifyuser\"所在的标签，这个标签当中的属性：id\n既$(\".modifyuser\").getAttribute('id')。\n***\n参考：[this.id vs. $(this).attr('id')](https://stackoverflow.com/questions/5597317/this-id-vs-this-attrid)\n","slug":"frontEnd/ajax/$(this)-id和$(this)-attr('id')","published":1,"updated":"2018-08-04T06:32:45.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcd20058m4cmvdagmofl","content":"<p>返回元素都是<strong>ID</strong>，但如果元素没有<strong>ID</strong>，$(this).id  会返回一个空字符串，而<br>  $(this).attr(“id”)  将返回<strong>undefined</strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a class=&quot;btn btn-info  modifyuser&quot; href=&quot;#&quot;  id=&quot;$&#123;user.id &#125;&quot;&gt;</span><br><span class=\"line\">    &lt;i class=&quot;icon-edit icon-white &quot;&gt;&lt;/i&gt;  </span><br><span class=\"line\">\t修改                                            </span><br><span class=\"line\">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<p>js中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;.modifyuser&quot;).click(function(e)&#123;</span><br><span class=\"line\">\tvar m_id = $(this).attr(&apos;id&apos;);</span><br><span class=\"line\">\te.preventDefault();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>当中的$(this).attr(‘id’)。”this”是指为”.modifyuser”所在的标签，这个标签当中的属性：id<br>既$(“.modifyuser”).getAttribute(‘id’)。</p>\n<hr>\n<p>参考：<a href=\"https://stackoverflow.com/questions/5597317/this-id-vs-this-attrid\" target=\"_blank\" rel=\"noopener\">this.id vs. $(this).attr(‘id’)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>返回元素都是<strong>ID</strong>，但如果元素没有<strong>ID</strong>，$(this).id  会返回一个空字符串，而<br>  $(this).attr(“id”)  将返回<strong>undefined</strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a class=&quot;btn btn-info  modifyuser&quot; href=&quot;#&quot;  id=&quot;$&#123;user.id &#125;&quot;&gt;</span><br><span class=\"line\">    &lt;i class=&quot;icon-edit icon-white &quot;&gt;&lt;/i&gt;  </span><br><span class=\"line\">\t修改                                            </span><br><span class=\"line\">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<p>js中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;.modifyuser&quot;).click(function(e)&#123;</span><br><span class=\"line\">\tvar m_id = $(this).attr(&apos;id&apos;);</span><br><span class=\"line\">\te.preventDefault();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>当中的$(this).attr(‘id’)。”this”是指为”.modifyuser”所在的标签，这个标签当中的属性：id<br>既$(“.modifyuser”).getAttribute(‘id’)。</p>\n<hr>\n<p>参考：<a href=\"https://stackoverflow.com/questions/5597317/this-id-vs-this-attrid\" target=\"_blank\" rel=\"noopener\">this.id vs. $(this).attr(‘id’)</a></p>\n"},{"title":"Redis 配置安装","date":"2017-03-24T14:01:00.000Z","_content":"\n## Install Redis for windows\n\nhttps://github.com/ServiceStack/redis-windows\n\n\n\n安装步骤：\n\n1. 安装linux虚拟机\n\n2. 拷贝Redis压缩包\n\n3. 解压缩\n\n4. 进入解压目录，进行make操作\n\n5. make PREFIX=\"/opt/kgc/install/redis3\" install\n\n   cd src && make install\n\n   > PREFIX=\"\"：是安装的路径\n\n6. 如果出现一个bin目录，说明安装成功了\n\n## Redis工具简介\n\nredis-server：用来启动Redis的工具\n\nredis-bencnmark：检测Redis在本机的运行效率\n\nredis-check-aof：修复AOE持久化\n\nredis-check-rdb：修复RDB持久化文件\n\nredis-cli：命令行工具\n\nredis-sentinel：软链接\n\n\n\n## Redis使用\n\n### 启动\n\n想启动Redis，需要Redis的配置文件\n\n> 路径：cd redis-3.2.3\n>\n> 当中有“redis.conf”，是redis默认的配置文件\n>\n> 将这个文件拷贝出去，cp 文件名  拷贝后的路径\n\n接着，在redis解压后中的bin文件夹，找到“redis-server“\n\n启动服务\n\n> ./redis-server  ../redis.conf      #启动server命令，并让server启动哪个配置文件\n\n当看到一个六角形图标出现的时候，就说明Redis启动成功了\n\n![](http://upload-images.jianshu.io/upload_images/1171873-e0742e98607cbed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n### redis-bencnmark\n\n在bin目录下。执行：./redis-bencnmark\n\n会进行一段比较长的时间扫描、检测\n\n\n![image.png](http://upload-images.jianshu.io/upload_images/1171873-d25045bd9595e1fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n> redis-bencnmark检测后的吞吐量：37313.43。（配置：deepin、2G内存、1核CPU）\n>\n> 2013年Redis官方发布，如果没有性能评定的话**Redis**的秒吞吐量应该能达到60万。\n\n\n\n### redis-cli\n\n进入Redis命令界面\n\n因为是key、value的存储方式\n\n命令：\n\nredis-cli  #进入redis\n\n> set k1 v1\n>\n> 会提示：OK\n>\n> 取出数据：get k1\n>\n> 弹出：”v1“\n\n\n![](http://upload-images.jianshu.io/upload_images/1171873-786d168690352aba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n### redis-sentinel\n\n软连接，相当于**redis-server**\n\n\n\n------\n\n**（运行redis以上的命令的前提：启动redis成功，既执行：redis-server）**\n\n\n\n## Redis常见应用场景\n\n- 缓存（最基本的优点）\n- 取最新N个数据的操作，List\n- 排行榜类的应用\n- 计数器应用\n  - Redis本身自带这方面的API\n- 存储关系\n- 实时分析系统\n- 记录日志（最基本的优点）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/backEnd/服务配置/Redis.md","raw":"---\ntitle: Redis 配置安装\ndate: 2017-03-24 22:01:00\ncategories: 服务配置\n---\n\n## Install Redis for windows\n\nhttps://github.com/ServiceStack/redis-windows\n\n\n\n安装步骤：\n\n1. 安装linux虚拟机\n\n2. 拷贝Redis压缩包\n\n3. 解压缩\n\n4. 进入解压目录，进行make操作\n\n5. make PREFIX=\"/opt/kgc/install/redis3\" install\n\n   cd src && make install\n\n   > PREFIX=\"\"：是安装的路径\n\n6. 如果出现一个bin目录，说明安装成功了\n\n## Redis工具简介\n\nredis-server：用来启动Redis的工具\n\nredis-bencnmark：检测Redis在本机的运行效率\n\nredis-check-aof：修复AOE持久化\n\nredis-check-rdb：修复RDB持久化文件\n\nredis-cli：命令行工具\n\nredis-sentinel：软链接\n\n\n\n## Redis使用\n\n### 启动\n\n想启动Redis，需要Redis的配置文件\n\n> 路径：cd redis-3.2.3\n>\n> 当中有“redis.conf”，是redis默认的配置文件\n>\n> 将这个文件拷贝出去，cp 文件名  拷贝后的路径\n\n接着，在redis解压后中的bin文件夹，找到“redis-server“\n\n启动服务\n\n> ./redis-server  ../redis.conf      #启动server命令，并让server启动哪个配置文件\n\n当看到一个六角形图标出现的时候，就说明Redis启动成功了\n\n![](http://upload-images.jianshu.io/upload_images/1171873-e0742e98607cbed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n### redis-bencnmark\n\n在bin目录下。执行：./redis-bencnmark\n\n会进行一段比较长的时间扫描、检测\n\n\n![image.png](http://upload-images.jianshu.io/upload_images/1171873-d25045bd9595e1fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n> redis-bencnmark检测后的吞吐量：37313.43。（配置：deepin、2G内存、1核CPU）\n>\n> 2013年Redis官方发布，如果没有性能评定的话**Redis**的秒吞吐量应该能达到60万。\n\n\n\n### redis-cli\n\n进入Redis命令界面\n\n因为是key、value的存储方式\n\n命令：\n\nredis-cli  #进入redis\n\n> set k1 v1\n>\n> 会提示：OK\n>\n> 取出数据：get k1\n>\n> 弹出：”v1“\n\n\n![](http://upload-images.jianshu.io/upload_images/1171873-786d168690352aba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n### redis-sentinel\n\n软连接，相当于**redis-server**\n\n\n\n------\n\n**（运行redis以上的命令的前提：启动redis成功，既执行：redis-server）**\n\n\n\n## Redis常见应用场景\n\n- 缓存（最基本的优点）\n- 取最新N个数据的操作，List\n- 排行榜类的应用\n- 计数器应用\n  - Redis本身自带这方面的API\n- 存储关系\n- 实时分析系统\n- 记录日志（最基本的优点）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"backEnd/服务配置/Redis","published":1,"updated":"2018-08-04T06:32:45.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcd4005am4cm1z7dqix5","content":"<h2 id=\"Install-Redis-for-windows\"><a href=\"#Install-Redis-for-windows\" class=\"headerlink\" title=\"Install Redis for windows\"></a>Install Redis for windows</h2><p><a href=\"https://github.com/ServiceStack/redis-windows\" target=\"_blank\" rel=\"noopener\">https://github.com/ServiceStack/redis-windows</a></p>\n<p>安装步骤：</p>\n<ol>\n<li><p>安装linux虚拟机</p>\n</li>\n<li><p>拷贝Redis压缩包</p>\n</li>\n<li><p>解压缩</p>\n</li>\n<li><p>进入解压目录，进行make操作</p>\n</li>\n<li><p>make PREFIX=”/opt/kgc/install/redis3” install</p>\n<p>cd src &amp;&amp; make install</p>\n<blockquote>\n<p>PREFIX=””：是安装的路径</p>\n</blockquote>\n</li>\n<li><p>如果出现一个bin目录，说明安装成功了</p>\n</li>\n</ol>\n<h2 id=\"Redis工具简介\"><a href=\"#Redis工具简介\" class=\"headerlink\" title=\"Redis工具简介\"></a>Redis工具简介</h2><p>redis-server：用来启动Redis的工具</p>\n<p>redis-bencnmark：检测Redis在本机的运行效率</p>\n<p>redis-check-aof：修复AOE持久化</p>\n<p>redis-check-rdb：修复RDB持久化文件</p>\n<p>redis-cli：命令行工具</p>\n<p>redis-sentinel：软链接</p>\n<h2 id=\"Redis使用\"><a href=\"#Redis使用\" class=\"headerlink\" title=\"Redis使用\"></a>Redis使用</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>想启动Redis，需要Redis的配置文件</p>\n<blockquote>\n<p>路径：cd redis-3.2.3</p>\n<p>当中有“redis.conf”，是redis默认的配置文件</p>\n<p>将这个文件拷贝出去，cp 文件名  拷贝后的路径</p>\n</blockquote>\n<p>接着，在redis解压后中的bin文件夹，找到“redis-server“</p>\n<p>启动服务</p>\n<blockquote>\n<p>./redis-server  ../redis.conf      #启动server命令，并让server启动哪个配置文件</p>\n</blockquote>\n<p>当看到一个六角形图标出现的时候，就说明Redis启动成功了</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-e0742e98607cbed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"redis-bencnmark\"><a href=\"#redis-bencnmark\" class=\"headerlink\" title=\"redis-bencnmark\"></a>redis-bencnmark</h3><p>在bin目录下。执行：./redis-bencnmark</p>\n<p>会进行一段比较长的时间扫描、检测</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-d25045bd9595e1fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<blockquote>\n<p>redis-bencnmark检测后的吞吐量：37313.43。（配置：deepin、2G内存、1核CPU）</p>\n<p>2013年Redis官方发布，如果没有性能评定的话<strong>Redis</strong>的秒吞吐量应该能达到60万。</p>\n</blockquote>\n<h3 id=\"redis-cli\"><a href=\"#redis-cli\" class=\"headerlink\" title=\"redis-cli\"></a>redis-cli</h3><p>进入Redis命令界面</p>\n<p>因为是key、value的存储方式</p>\n<p>命令：</p>\n<p>redis-cli  #进入redis</p>\n<blockquote>\n<p>set k1 v1</p>\n<p>会提示：OK</p>\n<p>取出数据：get k1</p>\n<p>弹出：”v1“</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-786d168690352aba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"redis-sentinel\"><a href=\"#redis-sentinel\" class=\"headerlink\" title=\"redis-sentinel\"></a>redis-sentinel</h3><p>软连接，相当于<strong>redis-server</strong></p>\n<hr>\n<p><strong>（运行redis以上的命令的前提：启动redis成功，既执行：redis-server）</strong></p>\n<h2 id=\"Redis常见应用场景\"><a href=\"#Redis常见应用场景\" class=\"headerlink\" title=\"Redis常见应用场景\"></a>Redis常见应用场景</h2><ul>\n<li>缓存（最基本的优点）</li>\n<li>取最新N个数据的操作，List</li>\n<li>排行榜类的应用</li>\n<li>计数器应用<ul>\n<li>Redis本身自带这方面的API</li>\n</ul>\n</li>\n<li>存储关系</li>\n<li>实时分析系统</li>\n<li>记录日志（最基本的优点）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Install-Redis-for-windows\"><a href=\"#Install-Redis-for-windows\" class=\"headerlink\" title=\"Install Redis for windows\"></a>Install Redis for windows</h2><p><a href=\"https://github.com/ServiceStack/redis-windows\" target=\"_blank\" rel=\"noopener\">https://github.com/ServiceStack/redis-windows</a></p>\n<p>安装步骤：</p>\n<ol>\n<li><p>安装linux虚拟机</p>\n</li>\n<li><p>拷贝Redis压缩包</p>\n</li>\n<li><p>解压缩</p>\n</li>\n<li><p>进入解压目录，进行make操作</p>\n</li>\n<li><p>make PREFIX=”/opt/kgc/install/redis3” install</p>\n<p>cd src &amp;&amp; make install</p>\n<blockquote>\n<p>PREFIX=””：是安装的路径</p>\n</blockquote>\n</li>\n<li><p>如果出现一个bin目录，说明安装成功了</p>\n</li>\n</ol>\n<h2 id=\"Redis工具简介\"><a href=\"#Redis工具简介\" class=\"headerlink\" title=\"Redis工具简介\"></a>Redis工具简介</h2><p>redis-server：用来启动Redis的工具</p>\n<p>redis-bencnmark：检测Redis在本机的运行效率</p>\n<p>redis-check-aof：修复AOE持久化</p>\n<p>redis-check-rdb：修复RDB持久化文件</p>\n<p>redis-cli：命令行工具</p>\n<p>redis-sentinel：软链接</p>\n<h2 id=\"Redis使用\"><a href=\"#Redis使用\" class=\"headerlink\" title=\"Redis使用\"></a>Redis使用</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>想启动Redis，需要Redis的配置文件</p>\n<blockquote>\n<p>路径：cd redis-3.2.3</p>\n<p>当中有“redis.conf”，是redis默认的配置文件</p>\n<p>将这个文件拷贝出去，cp 文件名  拷贝后的路径</p>\n</blockquote>\n<p>接着，在redis解压后中的bin文件夹，找到“redis-server“</p>\n<p>启动服务</p>\n<blockquote>\n<p>./redis-server  ../redis.conf      #启动server命令，并让server启动哪个配置文件</p>\n</blockquote>\n<p>当看到一个六角形图标出现的时候，就说明Redis启动成功了</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-e0742e98607cbed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"redis-bencnmark\"><a href=\"#redis-bencnmark\" class=\"headerlink\" title=\"redis-bencnmark\"></a>redis-bencnmark</h3><p>在bin目录下。执行：./redis-bencnmark</p>\n<p>会进行一段比较长的时间扫描、检测</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-d25045bd9595e1fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<blockquote>\n<p>redis-bencnmark检测后的吞吐量：37313.43。（配置：deepin、2G内存、1核CPU）</p>\n<p>2013年Redis官方发布，如果没有性能评定的话<strong>Redis</strong>的秒吞吐量应该能达到60万。</p>\n</blockquote>\n<h3 id=\"redis-cli\"><a href=\"#redis-cli\" class=\"headerlink\" title=\"redis-cli\"></a>redis-cli</h3><p>进入Redis命令界面</p>\n<p>因为是key、value的存储方式</p>\n<p>命令：</p>\n<p>redis-cli  #进入redis</p>\n<blockquote>\n<p>set k1 v1</p>\n<p>会提示：OK</p>\n<p>取出数据：get k1</p>\n<p>弹出：”v1“</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-786d168690352aba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"redis-sentinel\"><a href=\"#redis-sentinel\" class=\"headerlink\" title=\"redis-sentinel\"></a>redis-sentinel</h3><p>软连接，相当于<strong>redis-server</strong></p>\n<hr>\n<p><strong>（运行redis以上的命令的前提：启动redis成功，既执行：redis-server）</strong></p>\n<h2 id=\"Redis常见应用场景\"><a href=\"#Redis常见应用场景\" class=\"headerlink\" title=\"Redis常见应用场景\"></a>Redis常见应用场景</h2><ul>\n<li>缓存（最基本的优点）</li>\n<li>取最新N个数据的操作，List</li>\n<li>排行榜类的应用</li>\n<li>计数器应用<ul>\n<li>Redis本身自带这方面的API</li>\n</ul>\n</li>\n<li>存储关系</li>\n<li>实时分析系统</li>\n<li>记录日志（最基本的优点）</li>\n</ul>\n"},{"title":"使用ajax()方法加载服务器数据","date":"2017-06-16T13:01:00.000Z","_content":"\n使用**ajax()**方法是最底层、功能最强大的请求服务器数据的方法，它不仅可以获取服务器返回的数据，还能向服务器发送请求并传递数值，它的调用格式如下：\n\n>  jQuery.ajax([settings])或$.ajax([settings])\n\n其中参数**settings**为发送**ajax**请求时的配置对象，\n在该对象中，\n**url**表示服务器请求的路径，\n**data**为请求时传递的数据，\n**dataType**为服务器返回的数据类型，\n**success**为请求成功的执行的回调函数，\n**type**为发送数据请求的方式，默认为**get**。\n\n例如，点击页面中的“加载”按钮，调用ajax()方法向服务器请求加载一个txt文件，并将返回的文件中的内容显示在页面，如下图所示：\n![](http://upload-images.jianshu.io/upload_images/1171873-b519733b1067b0d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在浏览器中显示的效果：\n![](http://upload-images.jianshu.io/upload_images/1171873-f303213b27973778.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n从图中可以看出，当点击“加载”按钮时，调用$.ajax()\n方法请求服务器中txt文件，当请求成功时调用success回调函数，获取传回的数据，并显示在页面中。\n\n``` \n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <head>\n        <title>使用ajax()方法加载服务器数据</title>\n        <script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\" type=\"text/javascript\"></script>\n        <link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" />\n    </head>    \n    <body>\n        <div id=\"divtest\">\n            <div class=\"title\">\n                <span class=\"fl\">检测数字的奇偶性</span> \n                <span class=\"fr\">\n                    <input id=\"btnCheck\" type=\"button\" value=\"检测\" />\n                </span>\n            </div>\n            <ul>\n               <li>请求输入一个数字 \n                   <input id=\"txtNumber\" type=\"text\" size=\"12\" />\n               </li>\n            </ul>\n        </div>\n        <script type=\"text/javascript\">\n            $(function () {\n                $(\"#btnCheck\").bind(\"click\", function () {\n                    $.ajax({\n                        url:\"http://www.imooc.com/data/check.php\",\n                        data: { num: $(\"#txtNumber\").val() },\n                        type:\"GET\",\n                        success: function (data) {\n                            $(\"ul\").append(\"<li>你输入的<b>  \"\n                            + $(\"#txtNumber\").val() + \" </b>是<b> \"\n                            + data + \" </b></li>\");\n                        }\n                    });\n                })\n            });\n        </script>\n    </body>\n</html>``` \n\n***\nsuccess中的\"**result**\"的值是服务器处理后返回的值，返回值类型在dataType中定义了\n***\n>success\n类型：Function\n请求成功后的回调函数。\n参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。\n这是一个 Ajax 事件。\n\n[jQuery ajax - ajax() 方法](http://www.w3school.com.cn/jquery/ajax_ajax.asp)\n[慕课网——jQuery基础(五)一Ajax应用与常用插件](http://www.imooc.com/code/13474)\n","source":"_posts/frontEnd/ajax/使用ajax()方法加载服务器数据.md","raw":"---\ntitle: 使用ajax()方法加载服务器数据\ndate:  2017.06.16 21:01\ntags: ajax 前端\ncategories: Program\n---\n\n使用**ajax()**方法是最底层、功能最强大的请求服务器数据的方法，它不仅可以获取服务器返回的数据，还能向服务器发送请求并传递数值，它的调用格式如下：\n\n>  jQuery.ajax([settings])或$.ajax([settings])\n\n其中参数**settings**为发送**ajax**请求时的配置对象，\n在该对象中，\n**url**表示服务器请求的路径，\n**data**为请求时传递的数据，\n**dataType**为服务器返回的数据类型，\n**success**为请求成功的执行的回调函数，\n**type**为发送数据请求的方式，默认为**get**。\n\n例如，点击页面中的“加载”按钮，调用ajax()方法向服务器请求加载一个txt文件，并将返回的文件中的内容显示在页面，如下图所示：\n![](http://upload-images.jianshu.io/upload_images/1171873-b519733b1067b0d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在浏览器中显示的效果：\n![](http://upload-images.jianshu.io/upload_images/1171873-f303213b27973778.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n从图中可以看出，当点击“加载”按钮时，调用$.ajax()\n方法请求服务器中txt文件，当请求成功时调用success回调函数，获取传回的数据，并显示在页面中。\n\n``` \n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <head>\n        <title>使用ajax()方法加载服务器数据</title>\n        <script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\" type=\"text/javascript\"></script>\n        <link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" />\n    </head>    \n    <body>\n        <div id=\"divtest\">\n            <div class=\"title\">\n                <span class=\"fl\">检测数字的奇偶性</span> \n                <span class=\"fr\">\n                    <input id=\"btnCheck\" type=\"button\" value=\"检测\" />\n                </span>\n            </div>\n            <ul>\n               <li>请求输入一个数字 \n                   <input id=\"txtNumber\" type=\"text\" size=\"12\" />\n               </li>\n            </ul>\n        </div>\n        <script type=\"text/javascript\">\n            $(function () {\n                $(\"#btnCheck\").bind(\"click\", function () {\n                    $.ajax({\n                        url:\"http://www.imooc.com/data/check.php\",\n                        data: { num: $(\"#txtNumber\").val() },\n                        type:\"GET\",\n                        success: function (data) {\n                            $(\"ul\").append(\"<li>你输入的<b>  \"\n                            + $(\"#txtNumber\").val() + \" </b>是<b> \"\n                            + data + \" </b></li>\");\n                        }\n                    });\n                })\n            });\n        </script>\n    </body>\n</html>``` \n\n***\nsuccess中的\"**result**\"的值是服务器处理后返回的值，返回值类型在dataType中定义了\n***\n>success\n类型：Function\n请求成功后的回调函数。\n参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。\n这是一个 Ajax 事件。\n\n[jQuery ajax - ajax() 方法](http://www.w3school.com.cn/jquery/ajax_ajax.asp)\n[慕课网——jQuery基础(五)一Ajax应用与常用插件](http://www.imooc.com/code/13474)\n","slug":"frontEnd/ajax/使用ajax()方法加载服务器数据","published":1,"updated":"2018-08-04T06:32:45.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcd6005cm4cmh55bam4h","content":"<p>使用<strong>ajax()</strong>方法是最底层、功能最强大的请求服务器数据的方法，它不仅可以获取服务器返回的数据，还能向服务器发送请求并传递数值，它的调用格式如下：</p>\n<blockquote>\n<p> jQuery.ajax([settings])或$.ajax([settings])</p>\n</blockquote>\n<p>其中参数<strong>settings</strong>为发送<strong>ajax</strong>请求时的配置对象，<br>在该对象中，<br><strong>url</strong>表示服务器请求的路径，<br><strong>data</strong>为请求时传递的数据，<br><strong>dataType</strong>为服务器返回的数据类型，<br><strong>success</strong>为请求成功的执行的回调函数，<br><strong>type</strong>为发送数据请求的方式，默认为<strong>get</strong>。</p>\n<p>例如，点击页面中的“加载”按钮，调用ajax()方法向服务器请求加载一个txt文件，并将返回的文件中的内容显示在页面，如下图所示：<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-b519733b1067b0d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在浏览器中显示的效果：<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f303213b27973778.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>从图中可以看出，当点击“加载”按钮时，调用$.ajax()<br>方法请求服务器中txt文件，当请求成功时调用success回调函数，获取传回的数据，并显示在页面中。</p>\n<pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n    &lt;head&gt;\n        &lt;title&gt;使用ajax()方法加载服务器数据&lt;/title&gt;\n        &lt;script src=&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\n        &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n    &lt;/head&gt;    \n    &lt;body&gt;\n        &lt;div id=&quot;divtest&quot;&gt;\n            &lt;div class=&quot;title&quot;&gt;\n                &lt;span class=&quot;fl&quot;&gt;检测数字的奇偶性&lt;/span&gt; \n                &lt;span class=&quot;fr&quot;&gt;\n                    &lt;input id=&quot;btnCheck&quot; type=&quot;button&quot; value=&quot;检测&quot; /&gt;\n                &lt;/span&gt;\n            &lt;/div&gt;\n            &lt;ul&gt;\n               &lt;li&gt;请求输入一个数字 \n                   &lt;input id=&quot;txtNumber&quot; type=&quot;text&quot; size=&quot;12&quot; /&gt;\n               &lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;script type=&quot;text/javascript&quot;&gt;\n            $(function () {\n                $(&quot;#btnCheck&quot;).bind(&quot;click&quot;, function () {\n                    $.ajax({\n                        url:&quot;http://www.imooc.com/data/check.php&quot;,\n                        data: { num: $(&quot;#txtNumber&quot;).val() },\n                        type:&quot;GET&quot;,\n                        success: function (data) {\n                            $(&quot;ul&quot;).append(&quot;&lt;li&gt;你输入的&lt;b&gt;  &quot;\n                            + $(&quot;#txtNumber&quot;).val() + &quot; &lt;/b&gt;是&lt;b&gt; &quot;\n                            + data + &quot; &lt;/b&gt;&lt;/li&gt;&quot;);\n                        }\n                    });\n                })\n            });\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><hr>\n<p>success中的”<strong>result</strong>“的值是服务器处理后返回的值，返回值类型在dataType中定义了</p>\n<hr>\n<blockquote>\n<p>success<br>类型：Function<br>请求成功后的回调函数。<br>参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。<br>这是一个 Ajax 事件。</p>\n</blockquote>\n<p><a href=\"http://www.w3school.com.cn/jquery/ajax_ajax.asp\" target=\"_blank\" rel=\"noopener\">jQuery ajax - ajax() 方法</a><br><a href=\"http://www.imooc.com/code/13474\" target=\"_blank\" rel=\"noopener\">慕课网——jQuery基础(五)一Ajax应用与常用插件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用<strong>ajax()</strong>方法是最底层、功能最强大的请求服务器数据的方法，它不仅可以获取服务器返回的数据，还能向服务器发送请求并传递数值，它的调用格式如下：</p>\n<blockquote>\n<p> jQuery.ajax([settings])或$.ajax([settings])</p>\n</blockquote>\n<p>其中参数<strong>settings</strong>为发送<strong>ajax</strong>请求时的配置对象，<br>在该对象中，<br><strong>url</strong>表示服务器请求的路径，<br><strong>data</strong>为请求时传递的数据，<br><strong>dataType</strong>为服务器返回的数据类型，<br><strong>success</strong>为请求成功的执行的回调函数，<br><strong>type</strong>为发送数据请求的方式，默认为<strong>get</strong>。</p>\n<p>例如，点击页面中的“加载”按钮，调用ajax()方法向服务器请求加载一个txt文件，并将返回的文件中的内容显示在页面，如下图所示：<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-b519733b1067b0d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在浏览器中显示的效果：<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-f303213b27973778.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>从图中可以看出，当点击“加载”按钮时，调用$.ajax()<br>方法请求服务器中txt文件，当请求成功时调用success回调函数，获取传回的数据，并显示在页面中。</p>\n<pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n    &lt;head&gt;\n        &lt;title&gt;使用ajax()方法加载服务器数据&lt;/title&gt;\n        &lt;script src=&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\n        &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n    &lt;/head&gt;    \n    &lt;body&gt;\n        &lt;div id=&quot;divtest&quot;&gt;\n            &lt;div class=&quot;title&quot;&gt;\n                &lt;span class=&quot;fl&quot;&gt;检测数字的奇偶性&lt;/span&gt; \n                &lt;span class=&quot;fr&quot;&gt;\n                    &lt;input id=&quot;btnCheck&quot; type=&quot;button&quot; value=&quot;检测&quot; /&gt;\n                &lt;/span&gt;\n            &lt;/div&gt;\n            &lt;ul&gt;\n               &lt;li&gt;请求输入一个数字 \n                   &lt;input id=&quot;txtNumber&quot; type=&quot;text&quot; size=&quot;12&quot; /&gt;\n               &lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;script type=&quot;text/javascript&quot;&gt;\n            $(function () {\n                $(&quot;#btnCheck&quot;).bind(&quot;click&quot;, function () {\n                    $.ajax({\n                        url:&quot;http://www.imooc.com/data/check.php&quot;,\n                        data: { num: $(&quot;#txtNumber&quot;).val() },\n                        type:&quot;GET&quot;,\n                        success: function (data) {\n                            $(&quot;ul&quot;).append(&quot;&lt;li&gt;你输入的&lt;b&gt;  &quot;\n                            + $(&quot;#txtNumber&quot;).val() + &quot; &lt;/b&gt;是&lt;b&gt; &quot;\n                            + data + &quot; &lt;/b&gt;&lt;/li&gt;&quot;);\n                        }\n                    });\n                })\n            });\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><hr>\n<p>success中的”<strong>result</strong>“的值是服务器处理后返回的值，返回值类型在dataType中定义了</p>\n<hr>\n<blockquote>\n<p>success<br>类型：Function<br>请求成功后的回调函数。<br>参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。<br>这是一个 Ajax 事件。</p>\n</blockquote>\n<p><a href=\"http://www.w3school.com.cn/jquery/ajax_ajax.asp\" target=\"_blank\" rel=\"noopener\">jQuery ajax - ajax() 方法</a><br><a href=\"http://www.imooc.com/code/13474\" target=\"_blank\" rel=\"noopener\">慕课网——jQuery基础(五)一Ajax应用与常用插件</a></p>\n"},{"title":"apahce错误提示the-requested-operation-has-failed","date":"2017-04-23T07:08:48.000Z","_content":"\n今天在修改了**httpd.conf**文件配置之后启动**apache**时提示**the requested operation has failed **\n错误，无法正常启动apache了，后来搜索了一些解决办法，下面分享给各位同学，有需要了解的朋友可参考。**\n\n**找到解决方法：**\n运行cmd 进入到[apache](http://www.111cn.net/list-121/)的bin目录。输入httpd.exe -w -n \"Apache2.2\" -k start\n看到这个哥就笑了 原来是180行有问题 找到的时候才知道 180行这个\nDocumentRoot \"D:/www/demo\"  就是没有这个目录\n之后把这个删除了 就运动正常了 后来才明白 之前服务器主人 www 目录下有demo这个文件夹 之后删除了\n就没有把http.conf 下的配置删除\n重启就没有问题了\n如果不会ddos命令的朋友我们可以进入你apache安装上当，然后打开httpd.conf，修改你写错误的地址也是可以地。\n后来网上找到了一些导致apache 提示**the [request](http://www.111cn.net/tags.php/request/)ed operation has failed** 原因总结\n原因一：80端口占用 例如IIS，另外就是迅雷。我的apache服务器就是被迅雷害得无法启用！\n原因二：软件冲突 装了某些软件会使apache无法启动如Dr.com 你打开网络连接->TcpIp属性->高级->WINS标签 把netbios的lmhosts对勾去掉，禁用tcp/ip的netbios. 然后再启动应该就可以了。\n原因三：httpd.conf配置错误 如果apache的配置文件httpd.conf搞错了，在windows里启动它，会提示the requested operation has failed\n\n\n","source":"_posts/backEnd/服务配置/apahce错误提示the-requested-operation-has-failed.md","raw":"---\ntitle: apahce错误提示the-requested-operation-has-failed\ndate: 2017-04-23 15:08:48\ntags: apahce\ncategories: 服务配置\n---\n\n今天在修改了**httpd.conf**文件配置之后启动**apache**时提示**the requested operation has failed **\n错误，无法正常启动apache了，后来搜索了一些解决办法，下面分享给各位同学，有需要了解的朋友可参考。**\n\n**找到解决方法：**\n运行cmd 进入到[apache](http://www.111cn.net/list-121/)的bin目录。输入httpd.exe -w -n \"Apache2.2\" -k start\n看到这个哥就笑了 原来是180行有问题 找到的时候才知道 180行这个\nDocumentRoot \"D:/www/demo\"  就是没有这个目录\n之后把这个删除了 就运动正常了 后来才明白 之前服务器主人 www 目录下有demo这个文件夹 之后删除了\n就没有把http.conf 下的配置删除\n重启就没有问题了\n如果不会ddos命令的朋友我们可以进入你apache安装上当，然后打开httpd.conf，修改你写错误的地址也是可以地。\n后来网上找到了一些导致apache 提示**the [request](http://www.111cn.net/tags.php/request/)ed operation has failed** 原因总结\n原因一：80端口占用 例如IIS，另外就是迅雷。我的apache服务器就是被迅雷害得无法启用！\n原因二：软件冲突 装了某些软件会使apache无法启动如Dr.com 你打开网络连接->TcpIp属性->高级->WINS标签 把netbios的lmhosts对勾去掉，禁用tcp/ip的netbios. 然后再启动应该就可以了。\n原因三：httpd.conf配置错误 如果apache的配置文件httpd.conf搞错了，在windows里启动它，会提示the requested operation has failed\n\n\n","slug":"backEnd/服务配置/apahce错误提示the-requested-operation-has-failed","published":1,"updated":"2018-08-04T06:32:45.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdd005gm4cmf0ysqib5","content":"<p>今天在修改了<strong>httpd.conf</strong>文件配置之后启动<strong>apache</strong>时提示<strong>the requested operation has failed </strong><br>错误，无法正常启动apache了，后来搜索了一些解决办法，下面分享给各位同学，有需要了解的朋友可参考。**</p>\n<p><strong>找到解决方法：</strong><br>运行cmd 进入到<a href=\"http://www.111cn.net/list-121/\" target=\"_blank\" rel=\"noopener\">apache</a>的bin目录。输入httpd.exe -w -n “Apache2.2” -k start<br>看到这个哥就笑了 原来是180行有问题 找到的时候才知道 180行这个<br>DocumentRoot “D:/www/demo”  就是没有这个目录<br>之后把这个删除了 就运动正常了 后来才明白 之前服务器主人 www 目录下有demo这个文件夹 之后删除了<br>就没有把http.conf 下的配置删除<br>重启就没有问题了<br>如果不会ddos命令的朋友我们可以进入你apache安装上当，然后打开httpd.conf，修改你写错误的地址也是可以地。<br>后来网上找到了一些导致apache 提示<strong>the <a href=\"http://www.111cn.net/tags.php/request/\" target=\"_blank\" rel=\"noopener\">request</a>ed operation has failed</strong> 原因总结<br>原因一：80端口占用 例如IIS，另外就是迅雷。我的apache服务器就是被迅雷害得无法启用！<br>原因二：软件冲突 装了某些软件会使apache无法启动如Dr.com 你打开网络连接-&gt;TcpIp属性-&gt;高级-&gt;WINS标签 把netbios的lmhosts对勾去掉，禁用tcp/ip的netbios. 然后再启动应该就可以了。<br>原因三：httpd.conf配置错误 如果apache的配置文件httpd.conf搞错了，在windows里启动它，会提示the requested operation has failed</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在修改了<strong>httpd.conf</strong>文件配置之后启动<strong>apache</strong>时提示<strong>the requested operation has failed </strong><br>错误，无法正常启动apache了，后来搜索了一些解决办法，下面分享给各位同学，有需要了解的朋友可参考。**</p>\n<p><strong>找到解决方法：</strong><br>运行cmd 进入到<a href=\"http://www.111cn.net/list-121/\" target=\"_blank\" rel=\"noopener\">apache</a>的bin目录。输入httpd.exe -w -n “Apache2.2” -k start<br>看到这个哥就笑了 原来是180行有问题 找到的时候才知道 180行这个<br>DocumentRoot “D:/www/demo”  就是没有这个目录<br>之后把这个删除了 就运动正常了 后来才明白 之前服务器主人 www 目录下有demo这个文件夹 之后删除了<br>就没有把http.conf 下的配置删除<br>重启就没有问题了<br>如果不会ddos命令的朋友我们可以进入你apache安装上当，然后打开httpd.conf，修改你写错误的地址也是可以地。<br>后来网上找到了一些导致apache 提示<strong>the <a href=\"http://www.111cn.net/tags.php/request/\" target=\"_blank\" rel=\"noopener\">request</a>ed operation has failed</strong> 原因总结<br>原因一：80端口占用 例如IIS，另外就是迅雷。我的apache服务器就是被迅雷害得无法启用！<br>原因二：软件冲突 装了某些软件会使apache无法启动如Dr.com 你打开网络连接-&gt;TcpIp属性-&gt;高级-&gt;WINS标签 把netbios的lmhosts对勾去掉，禁用tcp/ip的netbios. 然后再启动应该就可以了。<br>原因三：httpd.conf配置错误 如果apache的配置文件httpd.conf搞错了，在windows里启动它，会提示the requested operation has failed</p>\n"},{"title":"arch开机自启动脚本","date":"2018-04-23T07:08:48.000Z","_content":"\n在写启动脚本之前，需要写一个service：\n\n1. 首先切换用户到root，然后进入/etc/systemd/system目录\n\n2. 创建一个.service文件，名称顺便取，本例中为**AutoExec.service**\n\n3. 设置权限：\n```\nchmod 644 AutoExec.service\n```\n\n4. 添加以下内容到AutoExec.service\n\n```\n[Unit]\nDescription=AutoExec\n[Service]\nExecStart=/root/AutoExec.sh\n[Install]\nWantedBy=multi-user.target\n```\n\n5. 上面的ExecStart=/root/AutoExec.sh表明开机会执行/root/AutoExec.sh，那么命令写在这里面就行了，\n当然，文件是可以任意指定的，改为/etc/rc.local之类的都没问题。\n\n6. 连接到multi-user.target.wants：\nln -s AutoExec.service multi-user.target.wants/\n（注：这一步是为了让这个服务开机自启动，效果和systemctl enable AutoExec.service是等价的）\n\n7. 创建/root/AutoExec.sh，向里面写入想要开机启动的命令，\n\n并设置权限：\n```\nchmod 744 /root/AutoExec.sh\n```\n（文件路径和文件名可随便改，但一定要添加可执行权限）\n\n以上就设置完了，**systemctl start AutoExec.service**，就能看到**AutoExec.sh**里的命令执行了，当然，每次开机也是自动执行的。\n\n","source":"_posts/搭建笔记/翻墙/arch-开机自启动脚本.md","raw":"---\ntitle: arch开机自启动脚本\ndate: 2018-04-23 15:08:48\ntags: 翻墙 Shadowsocks arch\ncategories: 翻墙 Linux\n---\n\n在写启动脚本之前，需要写一个service：\n\n1. 首先切换用户到root，然后进入/etc/systemd/system目录\n\n2. 创建一个.service文件，名称顺便取，本例中为**AutoExec.service**\n\n3. 设置权限：\n```\nchmod 644 AutoExec.service\n```\n\n4. 添加以下内容到AutoExec.service\n\n```\n[Unit]\nDescription=AutoExec\n[Service]\nExecStart=/root/AutoExec.sh\n[Install]\nWantedBy=multi-user.target\n```\n\n5. 上面的ExecStart=/root/AutoExec.sh表明开机会执行/root/AutoExec.sh，那么命令写在这里面就行了，\n当然，文件是可以任意指定的，改为/etc/rc.local之类的都没问题。\n\n6. 连接到multi-user.target.wants：\nln -s AutoExec.service multi-user.target.wants/\n（注：这一步是为了让这个服务开机自启动，效果和systemctl enable AutoExec.service是等价的）\n\n7. 创建/root/AutoExec.sh，向里面写入想要开机启动的命令，\n\n并设置权限：\n```\nchmod 744 /root/AutoExec.sh\n```\n（文件路径和文件名可随便改，但一定要添加可执行权限）\n\n以上就设置完了，**systemctl start AutoExec.service**，就能看到**AutoExec.sh**里的命令执行了，当然，每次开机也是自动执行的。\n\n","slug":"搭建笔记/翻墙/arch-开机自启动脚本","published":1,"updated":"2018-08-04T06:32:45.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdf005jm4cmc179ns4g","content":"<p>在写启动脚本之前，需要写一个service：</p>\n<ol>\n<li><p>首先切换用户到root，然后进入/etc/systemd/system目录</p>\n</li>\n<li><p>创建一个.service文件，名称顺便取，本例中为<strong>AutoExec.service</strong></p>\n</li>\n<li><p>设置权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 644 AutoExec.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下内容到AutoExec.service</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=AutoExec</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/root/AutoExec.sh</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><p>上面的ExecStart=/root/AutoExec.sh表明开机会执行/root/AutoExec.sh，那么命令写在这里面就行了，<br>当然，文件是可以任意指定的，改为/etc/rc.local之类的都没问题。</p>\n</li>\n<li><p>连接到multi-user.target.wants：<br>ln -s AutoExec.service multi-user.target.wants/<br>（注：这一步是为了让这个服务开机自启动，效果和systemctl enable AutoExec.service是等价的）</p>\n</li>\n<li><p>创建/root/AutoExec.sh，向里面写入想要开机启动的命令，</p>\n</li>\n</ol>\n<p>并设置权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 744 /root/AutoExec.sh</span><br></pre></td></tr></table></figure></p>\n<p>（文件路径和文件名可随便改，但一定要添加可执行权限）</p>\n<p>以上就设置完了，<strong>systemctl start AutoExec.service</strong>，就能看到<strong>AutoExec.sh</strong>里的命令执行了，当然，每次开机也是自动执行的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在写启动脚本之前，需要写一个service：</p>\n<ol>\n<li><p>首先切换用户到root，然后进入/etc/systemd/system目录</p>\n</li>\n<li><p>创建一个.service文件，名称顺便取，本例中为<strong>AutoExec.service</strong></p>\n</li>\n<li><p>设置权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 644 AutoExec.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下内容到AutoExec.service</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=AutoExec</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/root/AutoExec.sh</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><p>上面的ExecStart=/root/AutoExec.sh表明开机会执行/root/AutoExec.sh，那么命令写在这里面就行了，<br>当然，文件是可以任意指定的，改为/etc/rc.local之类的都没问题。</p>\n</li>\n<li><p>连接到multi-user.target.wants：<br>ln -s AutoExec.service multi-user.target.wants/<br>（注：这一步是为了让这个服务开机自启动，效果和systemctl enable AutoExec.service是等价的）</p>\n</li>\n<li><p>创建/root/AutoExec.sh，向里面写入想要开机启动的命令，</p>\n</li>\n</ol>\n<p>并设置权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 744 /root/AutoExec.sh</span><br></pre></td></tr></table></figure></p>\n<p>（文件路径和文件名可随便改，但一定要添加可执行权限）</p>\n<p>以上就设置完了，<strong>systemctl start AutoExec.service</strong>，就能看到<strong>AutoExec.sh</strong>里的命令执行了，当然，每次开机也是自动执行的。</p>\n"},{"title":"回调函数（callback）是什么？","date":"2017-08-31T09:44:00.000Z","_content":"\n\n你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 \n发布于 2011-08-06\n\n作者：常溪玲链接：https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n***\n参考：\n[回调函数（callback）是什么？](https://www.zhihu.com/question/19801131)\n","source":"_posts/frontEnd/ajax/回调函数（callback）是什么？.md","raw":"---\ntitle: 回调函数（callback）是什么？\ndate:  2017.08.31 17:44\ntags: ajax 前端\ncategories: Program\n---\n\n\n你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 \n发布于 2011-08-06\n\n作者：常溪玲链接：https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n***\n参考：\n[回调函数（callback）是什么？](https://www.zhihu.com/question/19801131)\n","slug":"frontEnd/ajax/回调函数（callback）是什么？","published":1,"updated":"2018-08-04T06:32:45.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdh005nm4cm96k8tcgv","content":"<p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。<br>发布于 2011-08-06</p>\n<p>作者：常溪玲链接：<a href=\"https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>\n<hr>\n<p>参考：<br><a href=\"https://www.zhihu.com/question/19801131\" target=\"_blank\" rel=\"noopener\">回调函数（callback）是什么？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。<br>发布于 2011-08-06</p>\n<p>作者：常溪玲链接：<a href=\"https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>\n<hr>\n<p>参考：<br><a href=\"https://www.zhihu.com/question/19801131\" target=\"_blank\" rel=\"noopener\">回调函数（callback）是什么？</a></p>\n"},{"title":"Shadowsocks搭建过程(客户端)","date":"2018-04-23T06:17:23.000Z","_content":"\n这里着重介绍 **macOS**上的配置\n\n>链接扩展 \n[shadowsocks](https://shadowsocks.org/en/index.html)\n[shadowsocks-windows](https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9)\n[shadowsocks-libev](https://github.com/shadowsocks/shadowsocks-libev/)\n[v2ray](https://v2ray.com)\n[vultr](https://vultr.com)\n\n\n## 一些通用的配置\n\n### 服务器\n填IP和域名都可以，不过shadowsocks服务器域名的解析应该用的是本地的DNS（毕竟还没有连上代理），所以尽量填IP吧。\n\n### 端口\n服务器端如果是自己搭的，尽量把端口设置为80或443这种常用端口，因为有的网络环境会限制一些端口，8080，25这种非HTTP端口也可以。\n\n### 算法&密码\n现在所有平台的客户端都支持AEAD加密算法，推荐AEAD。另外shadowsocks基本上没有什么多用户的概念，如果是多人使用多个密码的话一般就是开多个端口，每个端口设置一个密码。\n\n### 全局 & 自动代理\n全局代理指全局的SOCKS代理，所有流量都走代理端口。\n\n自动代理一般使用PAC文件，黑名单指在黑名单内域名走代理，不在黑名单内的不走代理；\n\n白名单相反，只有在白名单内的域名不走代理。如果代理流量有限制，最好使用黑名单，不限制流量的话，白名单更好一些。\n\n黑名单一般都是用著名的[gfwlist](https://github.com/gfwlist/gfwlist)，白名单个人推荐[这个](https://github.com/R0uter/gfw_domain_whitelist)。\n\n## Android、Windows、OpenWrt/LEDE端\n\n参考[这篇](https://cokebar.info/archives/978)\n\n## macOS端\n\ngithub上的GUI版本不怎么能满足我的使用需求，所以我用的是shadowocks-libev。\n\n### 安装shadowsocks-libev\n\n使用[homebrew](https://brew.sh/)安装即可，没必要手动编译源码。没安装 homebrew 的用户，需要先到 App Store 下载 **Xcode**，之后在终端运行：\n\n```\nlocal$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n其实就是运行一个ruby脚本。用homebrew来管理macOS上的命令行工具是不错的选择，软件包更新也跟得上。安装好homebrew后就可以安装shadowsocks-libev：\n\n```\nlocal$ brew update    #更新homebrew软件源\nlocal$ brew install shadowsocks-libev\n```\n\n### 开机自动启动\n\n安装之后我们会看到终端中提示这样的信息：\n\n```\nTo have launchd start shadowsocks-libev now and restart at login:\n  brew services start shadowsocks-libev\nOr, if you don't want/need a background service you can just run:\n  /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.json\n```\n\n\n这是告诉我们开机自动运行shadowsocks的方法，和手动运行的方法。开机自动运行使用的是homebrew提供的服务，相当于执行了下面的命令：\n\n```\nlocal$ ss-local -c /usr/local/etc/shadowsocks-libev.json\n```\n\n\nss-local是shadowsocks-libev中的客户端命令。可以看出，homebrew安装shadowsocks时\n在/usr/local/etc/路径下建立了配置文件，供开机启动shadowsocks服务用。\n使用vim或是文本编辑器都可以，这可是macOS，不是没有GUI的Linux VPS了\n\n```\n{\n    \"server\":\"server_ip\",\n    \"server_port\":8088,\n    \"local_port\":1080,\n    \"password\":\"password\",\n    \"timeout\":5,\n    \"method\":\"chacha20-ietf-poly1305\",\n    \"mode\":\"tcp_and_udp\"\n}\n```\n\n同服务器上的配置文件基本一至，不过多了一个local_port，\n这是因为上面说的本地要开一个端口用于把流量转发到shadowsocks服务器，\n所以要显式地写明端口，如果不写会默认1080端口。之后就可以启用shadowsocks的homebrew服务：\n\n```\nlocal$ brew services start shadowsocks-libev\n```\n\n可以看到成功的提示信息。\n\n## 全局代理\n\n本地开启socks代理，在系统设置里填上端口就可以使用全局代理。\n\n### 白名单\n\n当然，平时我们不会使用全局代理的，所以接下来要配置上面提到过的PAC自动代理。\n\n首先下载[域名白名单](https://github.com/R0uter/gfw_domain_whitelist)，\n要使用的是里面的PAC文件。\n\n如果本地代理端口不是默认的1080，下好的PAC文件还需要编辑一下脚本上使用的socks端口：\n\n```\nvar proxy = new Array( \"SOCKS5 127.0.0.1:port;\")\n```\n\n将代理端口改为我们上面设置的本地端口。\n\n因为10.12开始macOS不允许使用本地文件路么作为PAC文件路径，\n所以要把PAC文件放在网络环境下才可以正常使用，使用macOS自带的网页服务器即可。\n\n将PAC文件复制到/Library/WebServer/Documents/目录下，之后启用网页服务：\n\n```\nlocal$ sudo apachectl start\n```\n\n输入密码后，在浏览器中输入http://localhost可以看到It works!字样即为启动成功，\n\n接着在网络设置中自动代理的地址填写白名单的地址即可。\n\n### 代理切换\n\n可以在网络设置添加一个网络位置，通过切换网络位置来切换代理方式，不过在切换网络位置的时候会断开wifi，显得不够优雅。使用networksetup命令来切换代理，这个命令实际上就相当于我们有网络没置中进行的设置的命令行形式。\n\n```\n# 打开PAC\nlocal$ networksetup -setautoproxyurl Wi-Fi http://127.0.0.1:80/whitelist.pac\n\n#关闭PAC\nlocal$ networksetup -setautoproxystate Wi-Fi off\n\n# 打开socks\nlocal$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 on\n\n# 关闭socks\nlocal$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 off\n```\n\n应该一下子就能看明白怎么使用，其中Wi-Fi是网络接口的服务名称，如果用的是wifi就不用改了，可以在网络设置右边看到各个接口的名称，PAC文件的位置和socks端口对应修改就好了。\n\n可以把这几个命令写成脚本，因为我也使用Alfred，所以就写了个Alfred的workflow，用Alfred的可以直接下载使用。更改网络设置需要root权限，所以会提示输入密码。\n\n\n> 文章摘自[shino.space](https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AF%87/#androidwindowsopenwrtlede)\n","source":"_posts/搭建笔记/翻墙/shadowsocks搭建过程(客户端).md","raw":"---\ntitle: Shadowsocks搭建过程(客户端)\ndate: 2018-04-23 14:17:23\ntags: 翻墙 Shadowsocks\ncategories: 翻墙 \n---\n\n这里着重介绍 **macOS**上的配置\n\n>链接扩展 \n[shadowsocks](https://shadowsocks.org/en/index.html)\n[shadowsocks-windows](https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9)\n[shadowsocks-libev](https://github.com/shadowsocks/shadowsocks-libev/)\n[v2ray](https://v2ray.com)\n[vultr](https://vultr.com)\n\n\n## 一些通用的配置\n\n### 服务器\n填IP和域名都可以，不过shadowsocks服务器域名的解析应该用的是本地的DNS（毕竟还没有连上代理），所以尽量填IP吧。\n\n### 端口\n服务器端如果是自己搭的，尽量把端口设置为80或443这种常用端口，因为有的网络环境会限制一些端口，8080，25这种非HTTP端口也可以。\n\n### 算法&密码\n现在所有平台的客户端都支持AEAD加密算法，推荐AEAD。另外shadowsocks基本上没有什么多用户的概念，如果是多人使用多个密码的话一般就是开多个端口，每个端口设置一个密码。\n\n### 全局 & 自动代理\n全局代理指全局的SOCKS代理，所有流量都走代理端口。\n\n自动代理一般使用PAC文件，黑名单指在黑名单内域名走代理，不在黑名单内的不走代理；\n\n白名单相反，只有在白名单内的域名不走代理。如果代理流量有限制，最好使用黑名单，不限制流量的话，白名单更好一些。\n\n黑名单一般都是用著名的[gfwlist](https://github.com/gfwlist/gfwlist)，白名单个人推荐[这个](https://github.com/R0uter/gfw_domain_whitelist)。\n\n## Android、Windows、OpenWrt/LEDE端\n\n参考[这篇](https://cokebar.info/archives/978)\n\n## macOS端\n\ngithub上的GUI版本不怎么能满足我的使用需求，所以我用的是shadowocks-libev。\n\n### 安装shadowsocks-libev\n\n使用[homebrew](https://brew.sh/)安装即可，没必要手动编译源码。没安装 homebrew 的用户，需要先到 App Store 下载 **Xcode**，之后在终端运行：\n\n```\nlocal$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n其实就是运行一个ruby脚本。用homebrew来管理macOS上的命令行工具是不错的选择，软件包更新也跟得上。安装好homebrew后就可以安装shadowsocks-libev：\n\n```\nlocal$ brew update    #更新homebrew软件源\nlocal$ brew install shadowsocks-libev\n```\n\n### 开机自动启动\n\n安装之后我们会看到终端中提示这样的信息：\n\n```\nTo have launchd start shadowsocks-libev now and restart at login:\n  brew services start shadowsocks-libev\nOr, if you don't want/need a background service you can just run:\n  /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.json\n```\n\n\n这是告诉我们开机自动运行shadowsocks的方法，和手动运行的方法。开机自动运行使用的是homebrew提供的服务，相当于执行了下面的命令：\n\n```\nlocal$ ss-local -c /usr/local/etc/shadowsocks-libev.json\n```\n\n\nss-local是shadowsocks-libev中的客户端命令。可以看出，homebrew安装shadowsocks时\n在/usr/local/etc/路径下建立了配置文件，供开机启动shadowsocks服务用。\n使用vim或是文本编辑器都可以，这可是macOS，不是没有GUI的Linux VPS了\n\n```\n{\n    \"server\":\"server_ip\",\n    \"server_port\":8088,\n    \"local_port\":1080,\n    \"password\":\"password\",\n    \"timeout\":5,\n    \"method\":\"chacha20-ietf-poly1305\",\n    \"mode\":\"tcp_and_udp\"\n}\n```\n\n同服务器上的配置文件基本一至，不过多了一个local_port，\n这是因为上面说的本地要开一个端口用于把流量转发到shadowsocks服务器，\n所以要显式地写明端口，如果不写会默认1080端口。之后就可以启用shadowsocks的homebrew服务：\n\n```\nlocal$ brew services start shadowsocks-libev\n```\n\n可以看到成功的提示信息。\n\n## 全局代理\n\n本地开启socks代理，在系统设置里填上端口就可以使用全局代理。\n\n### 白名单\n\n当然，平时我们不会使用全局代理的，所以接下来要配置上面提到过的PAC自动代理。\n\n首先下载[域名白名单](https://github.com/R0uter/gfw_domain_whitelist)，\n要使用的是里面的PAC文件。\n\n如果本地代理端口不是默认的1080，下好的PAC文件还需要编辑一下脚本上使用的socks端口：\n\n```\nvar proxy = new Array( \"SOCKS5 127.0.0.1:port;\")\n```\n\n将代理端口改为我们上面设置的本地端口。\n\n因为10.12开始macOS不允许使用本地文件路么作为PAC文件路径，\n所以要把PAC文件放在网络环境下才可以正常使用，使用macOS自带的网页服务器即可。\n\n将PAC文件复制到/Library/WebServer/Documents/目录下，之后启用网页服务：\n\n```\nlocal$ sudo apachectl start\n```\n\n输入密码后，在浏览器中输入http://localhost可以看到It works!字样即为启动成功，\n\n接着在网络设置中自动代理的地址填写白名单的地址即可。\n\n### 代理切换\n\n可以在网络设置添加一个网络位置，通过切换网络位置来切换代理方式，不过在切换网络位置的时候会断开wifi，显得不够优雅。使用networksetup命令来切换代理，这个命令实际上就相当于我们有网络没置中进行的设置的命令行形式。\n\n```\n# 打开PAC\nlocal$ networksetup -setautoproxyurl Wi-Fi http://127.0.0.1:80/whitelist.pac\n\n#关闭PAC\nlocal$ networksetup -setautoproxystate Wi-Fi off\n\n# 打开socks\nlocal$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 on\n\n# 关闭socks\nlocal$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 off\n```\n\n应该一下子就能看明白怎么使用，其中Wi-Fi是网络接口的服务名称，如果用的是wifi就不用改了，可以在网络设置右边看到各个接口的名称，PAC文件的位置和socks端口对应修改就好了。\n\n可以把这几个命令写成脚本，因为我也使用Alfred，所以就写了个Alfred的workflow，用Alfred的可以直接下载使用。更改网络设置需要root权限，所以会提示输入密码。\n\n\n> 文章摘自[shino.space](https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AF%87/#androidwindowsopenwrtlede)\n","slug":"搭建笔记/翻墙/shadowsocks搭建过程(客户端)","published":1,"updated":"2018-08-04T06:32:45.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdk005qm4cm64yyj4dt","content":"<p>这里着重介绍 <strong>macOS</strong>上的配置</p>\n<blockquote>\n<p>链接扩展<br><a href=\"https://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">shadowsocks</a><br><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9\" target=\"_blank\" rel=\"noopener\">shadowsocks-windows</a><br><a href=\"https://github.com/shadowsocks/shadowsocks-libev/\" target=\"_blank\" rel=\"noopener\">shadowsocks-libev</a><br><a href=\"https://v2ray.com\" target=\"_blank\" rel=\"noopener\">v2ray</a><br><a href=\"https://vultr.com\" target=\"_blank\" rel=\"noopener\">vultr</a></p>\n</blockquote>\n<h2 id=\"一些通用的配置\"><a href=\"#一些通用的配置\" class=\"headerlink\" title=\"一些通用的配置\"></a>一些通用的配置</h2><h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><p>填IP和域名都可以，不过shadowsocks服务器域名的解析应该用的是本地的DNS（毕竟还没有连上代理），所以尽量填IP吧。</p>\n<h3 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h3><p>服务器端如果是自己搭的，尽量把端口设置为80或443这种常用端口，因为有的网络环境会限制一些端口，8080，25这种非HTTP端口也可以。</p>\n<h3 id=\"算法-amp-密码\"><a href=\"#算法-amp-密码\" class=\"headerlink\" title=\"算法&amp;密码\"></a>算法&amp;密码</h3><p>现在所有平台的客户端都支持AEAD加密算法，推荐AEAD。另外shadowsocks基本上没有什么多用户的概念，如果是多人使用多个密码的话一般就是开多个端口，每个端口设置一个密码。</p>\n<h3 id=\"全局-amp-自动代理\"><a href=\"#全局-amp-自动代理\" class=\"headerlink\" title=\"全局 &amp; 自动代理\"></a>全局 &amp; 自动代理</h3><p>全局代理指全局的SOCKS代理，所有流量都走代理端口。</p>\n<p>自动代理一般使用PAC文件，黑名单指在黑名单内域名走代理，不在黑名单内的不走代理；</p>\n<p>白名单相反，只有在白名单内的域名不走代理。如果代理流量有限制，最好使用黑名单，不限制流量的话，白名单更好一些。</p>\n<p>黑名单一般都是用著名的<a href=\"https://github.com/gfwlist/gfwlist\" target=\"_blank\" rel=\"noopener\">gfwlist</a>，白名单个人推荐<a href=\"https://github.com/R0uter/gfw_domain_whitelist\" target=\"_blank\" rel=\"noopener\">这个</a>。</p>\n<h2 id=\"Android、Windows、OpenWrt-LEDE端\"><a href=\"#Android、Windows、OpenWrt-LEDE端\" class=\"headerlink\" title=\"Android、Windows、OpenWrt/LEDE端\"></a>Android、Windows、OpenWrt/LEDE端</h2><p>参考<a href=\"https://cokebar.info/archives/978\" target=\"_blank\" rel=\"noopener\">这篇</a></p>\n<h2 id=\"macOS端\"><a href=\"#macOS端\" class=\"headerlink\" title=\"macOS端\"></a>macOS端</h2><p>github上的GUI版本不怎么能满足我的使用需求，所以我用的是shadowocks-libev。</p>\n<h3 id=\"安装shadowsocks-libev\"><a href=\"#安装shadowsocks-libev\" class=\"headerlink\" title=\"安装shadowsocks-libev\"></a>安装shadowsocks-libev</h3><p>使用<a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">homebrew</a>安装即可，没必要手动编译源码。没安装 homebrew 的用户，需要先到 App Store 下载 <strong>Xcode</strong>，之后在终端运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<p>其实就是运行一个ruby脚本。用homebrew来管理macOS上的命令行工具是不错的选择，软件包更新也跟得上。安装好homebrew后就可以安装shadowsocks-libev：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ brew update    #更新homebrew软件源</span><br><span class=\"line\">local$ brew install shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<h3 id=\"开机自动启动\"><a href=\"#开机自动启动\" class=\"headerlink\" title=\"开机自动启动\"></a>开机自动启动</h3><p>安装之后我们会看到终端中提示这样的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To have launchd start shadowsocks-libev now and restart at login:</span><br><span class=\"line\">  brew services start shadowsocks-libev</span><br><span class=\"line\">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class=\"line\">  /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.json</span><br></pre></td></tr></table></figure>\n<p>这是告诉我们开机自动运行shadowsocks的方法，和手动运行的方法。开机自动运行使用的是homebrew提供的服务，相当于执行了下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ ss-local -c /usr/local/etc/shadowsocks-libev.json</span><br></pre></td></tr></table></figure>\n<p>ss-local是shadowsocks-libev中的客户端命令。可以看出，homebrew安装shadowsocks时<br>在/usr/local/etc/路径下建立了配置文件，供开机启动shadowsocks服务用。<br>使用vim或是文本编辑器都可以，这可是macOS，不是没有GUI的Linux VPS了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;server_ip&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:8088,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;password&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:5,</span><br><span class=\"line\">    &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;,</span><br><span class=\"line\">    &quot;mode&quot;:&quot;tcp_and_udp&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同服务器上的配置文件基本一至，不过多了一个local_port，<br>这是因为上面说的本地要开一个端口用于把流量转发到shadowsocks服务器，<br>所以要显式地写明端口，如果不写会默认1080端口。之后就可以启用shadowsocks的homebrew服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ brew services start shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<p>可以看到成功的提示信息。</p>\n<h2 id=\"全局代理\"><a href=\"#全局代理\" class=\"headerlink\" title=\"全局代理\"></a>全局代理</h2><p>本地开启socks代理，在系统设置里填上端口就可以使用全局代理。</p>\n<h3 id=\"白名单\"><a href=\"#白名单\" class=\"headerlink\" title=\"白名单\"></a>白名单</h3><p>当然，平时我们不会使用全局代理的，所以接下来要配置上面提到过的PAC自动代理。</p>\n<p>首先下载<a href=\"https://github.com/R0uter/gfw_domain_whitelist\" target=\"_blank\" rel=\"noopener\">域名白名单</a>，<br>要使用的是里面的PAC文件。</p>\n<p>如果本地代理端口不是默认的1080，下好的PAC文件还需要编辑一下脚本上使用的socks端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = new Array( &quot;SOCKS5 127.0.0.1:port;&quot;)</span><br></pre></td></tr></table></figure>\n<p>将代理端口改为我们上面设置的本地端口。</p>\n<p>因为10.12开始macOS不允许使用本地文件路么作为PAC文件路径，<br>所以要把PAC文件放在网络环境下才可以正常使用，使用macOS自带的网页服务器即可。</p>\n<p>将PAC文件复制到/Library/WebServer/Documents/目录下，之后启用网页服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ sudo apachectl start</span><br></pre></td></tr></table></figure>\n<p>输入密码后，在浏览器中输入<a href=\"http://localhost可以看到It\" target=\"_blank\" rel=\"noopener\">http://localhost可以看到It</a> works!字样即为启动成功，</p>\n<p>接着在网络设置中自动代理的地址填写白名单的地址即可。</p>\n<h3 id=\"代理切换\"><a href=\"#代理切换\" class=\"headerlink\" title=\"代理切换\"></a>代理切换</h3><p>可以在网络设置添加一个网络位置，通过切换网络位置来切换代理方式，不过在切换网络位置的时候会断开wifi，显得不够优雅。使用networksetup命令来切换代理，这个命令实际上就相当于我们有网络没置中进行的设置的命令行形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开PAC</span><br><span class=\"line\">local$ networksetup -setautoproxyurl Wi-Fi http://127.0.0.1:80/whitelist.pac</span><br><span class=\"line\"></span><br><span class=\"line\">#关闭PAC</span><br><span class=\"line\">local$ networksetup -setautoproxystate Wi-Fi off</span><br><span class=\"line\"></span><br><span class=\"line\"># 打开socks</span><br><span class=\"line\">local$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 on</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭socks</span><br><span class=\"line\">local$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 off</span><br></pre></td></tr></table></figure>\n<p>应该一下子就能看明白怎么使用，其中Wi-Fi是网络接口的服务名称，如果用的是wifi就不用改了，可以在网络设置右边看到各个接口的名称，PAC文件的位置和socks端口对应修改就好了。</p>\n<p>可以把这几个命令写成脚本，因为我也使用Alfred，所以就写了个Alfred的workflow，用Alfred的可以直接下载使用。更改网络设置需要root权限，所以会提示输入密码。</p>\n<blockquote>\n<p>文章摘自<a href=\"https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AF%87/#androidwindowsopenwrtlede\" target=\"_blank\" rel=\"noopener\">shino.space</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>这里着重介绍 <strong>macOS</strong>上的配置</p>\n<blockquote>\n<p>链接扩展<br><a href=\"https://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">shadowsocks</a><br><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9\" target=\"_blank\" rel=\"noopener\">shadowsocks-windows</a><br><a href=\"https://github.com/shadowsocks/shadowsocks-libev/\" target=\"_blank\" rel=\"noopener\">shadowsocks-libev</a><br><a href=\"https://v2ray.com\" target=\"_blank\" rel=\"noopener\">v2ray</a><br><a href=\"https://vultr.com\" target=\"_blank\" rel=\"noopener\">vultr</a></p>\n</blockquote>\n<h2 id=\"一些通用的配置\"><a href=\"#一些通用的配置\" class=\"headerlink\" title=\"一些通用的配置\"></a>一些通用的配置</h2><h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><p>填IP和域名都可以，不过shadowsocks服务器域名的解析应该用的是本地的DNS（毕竟还没有连上代理），所以尽量填IP吧。</p>\n<h3 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h3><p>服务器端如果是自己搭的，尽量把端口设置为80或443这种常用端口，因为有的网络环境会限制一些端口，8080，25这种非HTTP端口也可以。</p>\n<h3 id=\"算法-amp-密码\"><a href=\"#算法-amp-密码\" class=\"headerlink\" title=\"算法&amp;密码\"></a>算法&amp;密码</h3><p>现在所有平台的客户端都支持AEAD加密算法，推荐AEAD。另外shadowsocks基本上没有什么多用户的概念，如果是多人使用多个密码的话一般就是开多个端口，每个端口设置一个密码。</p>\n<h3 id=\"全局-amp-自动代理\"><a href=\"#全局-amp-自动代理\" class=\"headerlink\" title=\"全局 &amp; 自动代理\"></a>全局 &amp; 自动代理</h3><p>全局代理指全局的SOCKS代理，所有流量都走代理端口。</p>\n<p>自动代理一般使用PAC文件，黑名单指在黑名单内域名走代理，不在黑名单内的不走代理；</p>\n<p>白名单相反，只有在白名单内的域名不走代理。如果代理流量有限制，最好使用黑名单，不限制流量的话，白名单更好一些。</p>\n<p>黑名单一般都是用著名的<a href=\"https://github.com/gfwlist/gfwlist\" target=\"_blank\" rel=\"noopener\">gfwlist</a>，白名单个人推荐<a href=\"https://github.com/R0uter/gfw_domain_whitelist\" target=\"_blank\" rel=\"noopener\">这个</a>。</p>\n<h2 id=\"Android、Windows、OpenWrt-LEDE端\"><a href=\"#Android、Windows、OpenWrt-LEDE端\" class=\"headerlink\" title=\"Android、Windows、OpenWrt/LEDE端\"></a>Android、Windows、OpenWrt/LEDE端</h2><p>参考<a href=\"https://cokebar.info/archives/978\" target=\"_blank\" rel=\"noopener\">这篇</a></p>\n<h2 id=\"macOS端\"><a href=\"#macOS端\" class=\"headerlink\" title=\"macOS端\"></a>macOS端</h2><p>github上的GUI版本不怎么能满足我的使用需求，所以我用的是shadowocks-libev。</p>\n<h3 id=\"安装shadowsocks-libev\"><a href=\"#安装shadowsocks-libev\" class=\"headerlink\" title=\"安装shadowsocks-libev\"></a>安装shadowsocks-libev</h3><p>使用<a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">homebrew</a>安装即可，没必要手动编译源码。没安装 homebrew 的用户，需要先到 App Store 下载 <strong>Xcode</strong>，之后在终端运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<p>其实就是运行一个ruby脚本。用homebrew来管理macOS上的命令行工具是不错的选择，软件包更新也跟得上。安装好homebrew后就可以安装shadowsocks-libev：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ brew update    #更新homebrew软件源</span><br><span class=\"line\">local$ brew install shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<h3 id=\"开机自动启动\"><a href=\"#开机自动启动\" class=\"headerlink\" title=\"开机自动启动\"></a>开机自动启动</h3><p>安装之后我们会看到终端中提示这样的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To have launchd start shadowsocks-libev now and restart at login:</span><br><span class=\"line\">  brew services start shadowsocks-libev</span><br><span class=\"line\">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class=\"line\">  /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.json</span><br></pre></td></tr></table></figure>\n<p>这是告诉我们开机自动运行shadowsocks的方法，和手动运行的方法。开机自动运行使用的是homebrew提供的服务，相当于执行了下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ ss-local -c /usr/local/etc/shadowsocks-libev.json</span><br></pre></td></tr></table></figure>\n<p>ss-local是shadowsocks-libev中的客户端命令。可以看出，homebrew安装shadowsocks时<br>在/usr/local/etc/路径下建立了配置文件，供开机启动shadowsocks服务用。<br>使用vim或是文本编辑器都可以，这可是macOS，不是没有GUI的Linux VPS了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;server_ip&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:8088,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;password&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:5,</span><br><span class=\"line\">    &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;,</span><br><span class=\"line\">    &quot;mode&quot;:&quot;tcp_and_udp&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同服务器上的配置文件基本一至，不过多了一个local_port，<br>这是因为上面说的本地要开一个端口用于把流量转发到shadowsocks服务器，<br>所以要显式地写明端口，如果不写会默认1080端口。之后就可以启用shadowsocks的homebrew服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ brew services start shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<p>可以看到成功的提示信息。</p>\n<h2 id=\"全局代理\"><a href=\"#全局代理\" class=\"headerlink\" title=\"全局代理\"></a>全局代理</h2><p>本地开启socks代理，在系统设置里填上端口就可以使用全局代理。</p>\n<h3 id=\"白名单\"><a href=\"#白名单\" class=\"headerlink\" title=\"白名单\"></a>白名单</h3><p>当然，平时我们不会使用全局代理的，所以接下来要配置上面提到过的PAC自动代理。</p>\n<p>首先下载<a href=\"https://github.com/R0uter/gfw_domain_whitelist\" target=\"_blank\" rel=\"noopener\">域名白名单</a>，<br>要使用的是里面的PAC文件。</p>\n<p>如果本地代理端口不是默认的1080，下好的PAC文件还需要编辑一下脚本上使用的socks端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = new Array( &quot;SOCKS5 127.0.0.1:port;&quot;)</span><br></pre></td></tr></table></figure>\n<p>将代理端口改为我们上面设置的本地端口。</p>\n<p>因为10.12开始macOS不允许使用本地文件路么作为PAC文件路径，<br>所以要把PAC文件放在网络环境下才可以正常使用，使用macOS自带的网页服务器即可。</p>\n<p>将PAC文件复制到/Library/WebServer/Documents/目录下，之后启用网页服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local$ sudo apachectl start</span><br></pre></td></tr></table></figure>\n<p>输入密码后，在浏览器中输入<a href=\"http://localhost可以看到It\" target=\"_blank\" rel=\"noopener\">http://localhost可以看到It</a> works!字样即为启动成功，</p>\n<p>接着在网络设置中自动代理的地址填写白名单的地址即可。</p>\n<h3 id=\"代理切换\"><a href=\"#代理切换\" class=\"headerlink\" title=\"代理切换\"></a>代理切换</h3><p>可以在网络设置添加一个网络位置，通过切换网络位置来切换代理方式，不过在切换网络位置的时候会断开wifi，显得不够优雅。使用networksetup命令来切换代理，这个命令实际上就相当于我们有网络没置中进行的设置的命令行形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开PAC</span><br><span class=\"line\">local$ networksetup -setautoproxyurl Wi-Fi http://127.0.0.1:80/whitelist.pac</span><br><span class=\"line\"></span><br><span class=\"line\">#关闭PAC</span><br><span class=\"line\">local$ networksetup -setautoproxystate Wi-Fi off</span><br><span class=\"line\"></span><br><span class=\"line\"># 打开socks</span><br><span class=\"line\">local$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 on</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭socks</span><br><span class=\"line\">local$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 off</span><br></pre></td></tr></table></figure>\n<p>应该一下子就能看明白怎么使用，其中Wi-Fi是网络接口的服务名称，如果用的是wifi就不用改了，可以在网络设置右边看到各个接口的名称，PAC文件的位置和socks端口对应修改就好了。</p>\n<p>可以把这几个命令写成脚本，因为我也使用Alfred，所以就写了个Alfred的workflow，用Alfred的可以直接下载使用。更改网络设置需要root权限，所以会提示输入密码。</p>\n<blockquote>\n<p>文章摘自<a href=\"https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AF%87/#androidwindowsopenwrtlede\" target=\"_blank\" rel=\"noopener\">shino.space</a></p>\n</blockquote>\n"},{"title":"Shadowsocks搭建过程(服务端)","date":"2018-04-23T05:42:50.000Z","_content":"\n>链接扩展 \n[shadowsocks](https://shadowsocks.org/en/index.html)\n[shadowsocks-windows](https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9)\n[shadowsocks-libev](https://github.com/shadowsocks/shadowsocks-libev/)\n[v2ray](https://v2ray.com)\n[vultr](https://vultr.com)\n\n## 安装shadowsocks-libev\n\nshadowsocks的服务端也分python版本、go版本以及C语言写的shadowsocks-libev，因为libev版更新快，而且C语言编写的运行效率更高些，所以采用libev版。\n\n### 安装预编译包\n\n在shadowsocks-libev的github项目上有release预编译版本，可以直接安装（以目前的3.1.3版本为例）：\n\n```\n#下载预编译文件\nwget https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.0.3/shadowsocks-libev-3.1.3.tar.gz\ntar zxf shadowsocks-libev-3.0.3.tar.gz    #解压缩\ncd shadowsocks    #进入项目文件夹\n./configure    #配置安装\nmake\nmake install\n```\n\n### 编译源码安装\n\n```\ngit clone https://github.com/shadowsocks/shadowsocks-libev.git #下载源码\ncd shadowsocks-libev/    #进入项目目录\ngit submodule update --init    #下载git子模块\n./autogen.sh    #生成配置文件\n./configure    #配置编译环境\nmake     #编译\nmake install    #安装\n```\n\n这样就装好了，shadowsocks-libev中常用的命令有\n**ss-server**、**ss-local**、**ss-redir**、**ss-tunnel**等，\n服务端只用**ss-server**。关于使用方法，可以man shadowsocks-libev或者man ss-server来查看，下面只会提到必要用法。\n\n\n## 编辑配置文件\n\n一般为了方便，会将shadowsocks设置的参数写成配置文件，配置文件为json格式，服务端可以使用的key如下：\n\n|key|说明|\n| :--: | :--: |\n|server\t|服务器IP|\n|server_port\t|服务端口|\n|password\t|密码|\n|method\t|加密算法|\n|timeout\t|超时|\n|mode\t|代理协议|\n\n\n服务器IP如果设为0.0.0.0则绑定所有IP；代理协议指的是代理TCP还是UDP，\n至于加密算法，3.0以上版本的shadowsocks目前支持18种算法，但推荐使用以下支持AEAD加密的：\n\n - chacha20-ietf-poly1305\n - aes-256-gcm\n - aes-192-gcm\n - aes-128-gcm\n\n至于原因可以参考这篇文章这里以我常用的配置文件为例：\n\n```\ntouch config.json    #新建文件\nvim config.json    #编辑文件\n```\n\nconfig.json\n\n```\n{\n    \"server\":\"0.0.0.0\",    //服务器IP，0.0.0.0代表绑定服务器的所有IP\n    \"server_port\":8088,    //服务端口\n    \"password\":\"password\",    //密码\n    \"timeout\":\"5\",    //超时重连\n    \"method\":\"chacha20-ietf-poly1305\",    //加密方式\n    \"mode\":\"tcp_and_udp\"    //代理TCP和UDP\n}\n```\n\n\n配置文件为json格式，//后为注释，方便说明加的，实际配置文件里不能写注释（看那个红色就知道不能加）。\n\n这里用的是在移动设备上性能相对效好的chacha20-ietf-poly1305。\n\n因为只有shadowsocks-libev更新了AEAD加密，所以为了兼容可以改为chacha20等非AEAD加密算法。\n\n## 运行shadowsocks-libev\n\n```\nss-server -c config.json\n```\n\n可以看到服务在前台运行，-c后面接配置文件。若要后台运行，可以加上-f参数，后面接一个pid文件名，运行后会生成这个pid文件，里面保存着这个后台ss-server进程的pid。\n\n```\nss-server -c config.json -f proxy.pid\n```\n\n\n如果想开多个端口，可以使用多个配置文件+多个pid文件的方式来管理。这样服务端就完成了。\n\n\n> 文章摘自[shino.space](https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/)\n","source":"_posts/搭建笔记/翻墙/shadowsocks搭建过程(服务端).md","raw":"---\ntitle: Shadowsocks搭建过程(服务端)\ndate: 2018-04-23 13:42:50\ntags: 翻墙 Shadowsocks\ncategories: 翻墙 \n---\n\n>链接扩展 \n[shadowsocks](https://shadowsocks.org/en/index.html)\n[shadowsocks-windows](https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9)\n[shadowsocks-libev](https://github.com/shadowsocks/shadowsocks-libev/)\n[v2ray](https://v2ray.com)\n[vultr](https://vultr.com)\n\n## 安装shadowsocks-libev\n\nshadowsocks的服务端也分python版本、go版本以及C语言写的shadowsocks-libev，因为libev版更新快，而且C语言编写的运行效率更高些，所以采用libev版。\n\n### 安装预编译包\n\n在shadowsocks-libev的github项目上有release预编译版本，可以直接安装（以目前的3.1.3版本为例）：\n\n```\n#下载预编译文件\nwget https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.0.3/shadowsocks-libev-3.1.3.tar.gz\ntar zxf shadowsocks-libev-3.0.3.tar.gz    #解压缩\ncd shadowsocks    #进入项目文件夹\n./configure    #配置安装\nmake\nmake install\n```\n\n### 编译源码安装\n\n```\ngit clone https://github.com/shadowsocks/shadowsocks-libev.git #下载源码\ncd shadowsocks-libev/    #进入项目目录\ngit submodule update --init    #下载git子模块\n./autogen.sh    #生成配置文件\n./configure    #配置编译环境\nmake     #编译\nmake install    #安装\n```\n\n这样就装好了，shadowsocks-libev中常用的命令有\n**ss-server**、**ss-local**、**ss-redir**、**ss-tunnel**等，\n服务端只用**ss-server**。关于使用方法，可以man shadowsocks-libev或者man ss-server来查看，下面只会提到必要用法。\n\n\n## 编辑配置文件\n\n一般为了方便，会将shadowsocks设置的参数写成配置文件，配置文件为json格式，服务端可以使用的key如下：\n\n|key|说明|\n| :--: | :--: |\n|server\t|服务器IP|\n|server_port\t|服务端口|\n|password\t|密码|\n|method\t|加密算法|\n|timeout\t|超时|\n|mode\t|代理协议|\n\n\n服务器IP如果设为0.0.0.0则绑定所有IP；代理协议指的是代理TCP还是UDP，\n至于加密算法，3.0以上版本的shadowsocks目前支持18种算法，但推荐使用以下支持AEAD加密的：\n\n - chacha20-ietf-poly1305\n - aes-256-gcm\n - aes-192-gcm\n - aes-128-gcm\n\n至于原因可以参考这篇文章这里以我常用的配置文件为例：\n\n```\ntouch config.json    #新建文件\nvim config.json    #编辑文件\n```\n\nconfig.json\n\n```\n{\n    \"server\":\"0.0.0.0\",    //服务器IP，0.0.0.0代表绑定服务器的所有IP\n    \"server_port\":8088,    //服务端口\n    \"password\":\"password\",    //密码\n    \"timeout\":\"5\",    //超时重连\n    \"method\":\"chacha20-ietf-poly1305\",    //加密方式\n    \"mode\":\"tcp_and_udp\"    //代理TCP和UDP\n}\n```\n\n\n配置文件为json格式，//后为注释，方便说明加的，实际配置文件里不能写注释（看那个红色就知道不能加）。\n\n这里用的是在移动设备上性能相对效好的chacha20-ietf-poly1305。\n\n因为只有shadowsocks-libev更新了AEAD加密，所以为了兼容可以改为chacha20等非AEAD加密算法。\n\n## 运行shadowsocks-libev\n\n```\nss-server -c config.json\n```\n\n可以看到服务在前台运行，-c后面接配置文件。若要后台运行，可以加上-f参数，后面接一个pid文件名，运行后会生成这个pid文件，里面保存着这个后台ss-server进程的pid。\n\n```\nss-server -c config.json -f proxy.pid\n```\n\n\n如果想开多个端口，可以使用多个配置文件+多个pid文件的方式来管理。这样服务端就完成了。\n\n\n> 文章摘自[shino.space](https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/)\n","slug":"搭建笔记/翻墙/shadowsocks搭建过程(服务端)","published":1,"updated":"2018-08-04T06:32:45.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdm005um4cmn5hk9w8l","content":"<blockquote>\n<p>链接扩展<br><a href=\"https://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">shadowsocks</a><br><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9\" target=\"_blank\" rel=\"noopener\">shadowsocks-windows</a><br><a href=\"https://github.com/shadowsocks/shadowsocks-libev/\" target=\"_blank\" rel=\"noopener\">shadowsocks-libev</a><br><a href=\"https://v2ray.com\" target=\"_blank\" rel=\"noopener\">v2ray</a><br><a href=\"https://vultr.com\" target=\"_blank\" rel=\"noopener\">vultr</a></p>\n</blockquote>\n<h2 id=\"安装shadowsocks-libev\"><a href=\"#安装shadowsocks-libev\" class=\"headerlink\" title=\"安装shadowsocks-libev\"></a>安装shadowsocks-libev</h2><p>shadowsocks的服务端也分python版本、go版本以及C语言写的shadowsocks-libev，因为libev版更新快，而且C语言编写的运行效率更高些，所以采用libev版。</p>\n<h3 id=\"安装预编译包\"><a href=\"#安装预编译包\" class=\"headerlink\" title=\"安装预编译包\"></a>安装预编译包</h3><p>在shadowsocks-libev的github项目上有release预编译版本，可以直接安装（以目前的3.1.3版本为例）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#下载预编译文件</span><br><span class=\"line\">wget https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.0.3/shadowsocks-libev-3.1.3.tar.gz</span><br><span class=\"line\">tar zxf shadowsocks-libev-3.0.3.tar.gz    #解压缩</span><br><span class=\"line\">cd shadowsocks    #进入项目文件夹</span><br><span class=\"line\">./configure    #配置安装</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译源码安装\"><a href=\"#编译源码安装\" class=\"headerlink\" title=\"编译源码安装\"></a>编译源码安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/shadowsocks/shadowsocks-libev.git #下载源码</span><br><span class=\"line\">cd shadowsocks-libev/    #进入项目目录</span><br><span class=\"line\">git submodule update --init    #下载git子模块</span><br><span class=\"line\">./autogen.sh    #生成配置文件</span><br><span class=\"line\">./configure    #配置编译环境</span><br><span class=\"line\">make     #编译</span><br><span class=\"line\">make install    #安装</span><br></pre></td></tr></table></figure>\n<p>这样就装好了，shadowsocks-libev中常用的命令有<br><strong>ss-server</strong>、<strong>ss-local</strong>、<strong>ss-redir</strong>、<strong>ss-tunnel</strong>等，<br>服务端只用<strong>ss-server</strong>。关于使用方法，可以man shadowsocks-libev或者man ss-server来查看，下面只会提到必要用法。</p>\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><p>一般为了方便，会将shadowsocks设置的参数写成配置文件，配置文件为json格式，服务端可以使用的key如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">key</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">server</td>\n<td style=\"text-align:center\">服务器IP</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">server_port</td>\n<td style=\"text-align:center\">服务端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">password</td>\n<td style=\"text-align:center\">密码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method</td>\n<td style=\"text-align:center\">加密算法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:center\">超时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mode</td>\n<td style=\"text-align:center\">代理协议</td>\n</tr>\n</tbody>\n</table>\n<p>服务器IP如果设为0.0.0.0则绑定所有IP；代理协议指的是代理TCP还是UDP，<br>至于加密算法，3.0以上版本的shadowsocks目前支持18种算法，但推荐使用以下支持AEAD加密的：</p>\n<ul>\n<li>chacha20-ietf-poly1305</li>\n<li>aes-256-gcm</li>\n<li>aes-192-gcm</li>\n<li>aes-128-gcm</li>\n</ul>\n<p>至于原因可以参考这篇文章这里以我常用的配置文件为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch config.json    #新建文件</span><br><span class=\"line\">vim config.json    #编辑文件</span><br></pre></td></tr></table></figure>\n<p>config.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;0.0.0.0&quot;,    //服务器IP，0.0.0.0代表绑定服务器的所有IP</span><br><span class=\"line\">    &quot;server_port&quot;:8088,    //服务端口</span><br><span class=\"line\">    &quot;password&quot;:&quot;password&quot;,    //密码</span><br><span class=\"line\">    &quot;timeout&quot;:&quot;5&quot;,    //超时重连</span><br><span class=\"line\">    &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;,    //加密方式</span><br><span class=\"line\">    &quot;mode&quot;:&quot;tcp_and_udp&quot;    //代理TCP和UDP</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件为json格式，//后为注释，方便说明加的，实际配置文件里不能写注释（看那个红色就知道不能加）。</p>\n<p>这里用的是在移动设备上性能相对效好的chacha20-ietf-poly1305。</p>\n<p>因为只有shadowsocks-libev更新了AEAD加密，所以为了兼容可以改为chacha20等非AEAD加密算法。</p>\n<h2 id=\"运行shadowsocks-libev\"><a href=\"#运行shadowsocks-libev\" class=\"headerlink\" title=\"运行shadowsocks-libev\"></a>运行shadowsocks-libev</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-server -c config.json</span><br></pre></td></tr></table></figure>\n<p>可以看到服务在前台运行，-c后面接配置文件。若要后台运行，可以加上-f参数，后面接一个pid文件名，运行后会生成这个pid文件，里面保存着这个后台ss-server进程的pid。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-server -c config.json -f proxy.pid</span><br></pre></td></tr></table></figure>\n<p>如果想开多个端口，可以使用多个配置文件+多个pid文件的方式来管理。这样服务端就完成了。</p>\n<blockquote>\n<p>文章摘自<a href=\"https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/\" target=\"_blank\" rel=\"noopener\">shino.space</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>链接扩展<br><a href=\"https://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">shadowsocks</a><br><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9\" target=\"_blank\" rel=\"noopener\">shadowsocks-windows</a><br><a href=\"https://github.com/shadowsocks/shadowsocks-libev/\" target=\"_blank\" rel=\"noopener\">shadowsocks-libev</a><br><a href=\"https://v2ray.com\" target=\"_blank\" rel=\"noopener\">v2ray</a><br><a href=\"https://vultr.com\" target=\"_blank\" rel=\"noopener\">vultr</a></p>\n</blockquote>\n<h2 id=\"安装shadowsocks-libev\"><a href=\"#安装shadowsocks-libev\" class=\"headerlink\" title=\"安装shadowsocks-libev\"></a>安装shadowsocks-libev</h2><p>shadowsocks的服务端也分python版本、go版本以及C语言写的shadowsocks-libev，因为libev版更新快，而且C语言编写的运行效率更高些，所以采用libev版。</p>\n<h3 id=\"安装预编译包\"><a href=\"#安装预编译包\" class=\"headerlink\" title=\"安装预编译包\"></a>安装预编译包</h3><p>在shadowsocks-libev的github项目上有release预编译版本，可以直接安装（以目前的3.1.3版本为例）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#下载预编译文件</span><br><span class=\"line\">wget https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.0.3/shadowsocks-libev-3.1.3.tar.gz</span><br><span class=\"line\">tar zxf shadowsocks-libev-3.0.3.tar.gz    #解压缩</span><br><span class=\"line\">cd shadowsocks    #进入项目文件夹</span><br><span class=\"line\">./configure    #配置安装</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译源码安装\"><a href=\"#编译源码安装\" class=\"headerlink\" title=\"编译源码安装\"></a>编译源码安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/shadowsocks/shadowsocks-libev.git #下载源码</span><br><span class=\"line\">cd shadowsocks-libev/    #进入项目目录</span><br><span class=\"line\">git submodule update --init    #下载git子模块</span><br><span class=\"line\">./autogen.sh    #生成配置文件</span><br><span class=\"line\">./configure    #配置编译环境</span><br><span class=\"line\">make     #编译</span><br><span class=\"line\">make install    #安装</span><br></pre></td></tr></table></figure>\n<p>这样就装好了，shadowsocks-libev中常用的命令有<br><strong>ss-server</strong>、<strong>ss-local</strong>、<strong>ss-redir</strong>、<strong>ss-tunnel</strong>等，<br>服务端只用<strong>ss-server</strong>。关于使用方法，可以man shadowsocks-libev或者man ss-server来查看，下面只会提到必要用法。</p>\n<h2 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h2><p>一般为了方便，会将shadowsocks设置的参数写成配置文件，配置文件为json格式，服务端可以使用的key如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">key</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">server</td>\n<td style=\"text-align:center\">服务器IP</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">server_port</td>\n<td style=\"text-align:center\">服务端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">password</td>\n<td style=\"text-align:center\">密码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method</td>\n<td style=\"text-align:center\">加密算法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:center\">超时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mode</td>\n<td style=\"text-align:center\">代理协议</td>\n</tr>\n</tbody>\n</table>\n<p>服务器IP如果设为0.0.0.0则绑定所有IP；代理协议指的是代理TCP还是UDP，<br>至于加密算法，3.0以上版本的shadowsocks目前支持18种算法，但推荐使用以下支持AEAD加密的：</p>\n<ul>\n<li>chacha20-ietf-poly1305</li>\n<li>aes-256-gcm</li>\n<li>aes-192-gcm</li>\n<li>aes-128-gcm</li>\n</ul>\n<p>至于原因可以参考这篇文章这里以我常用的配置文件为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch config.json    #新建文件</span><br><span class=\"line\">vim config.json    #编辑文件</span><br></pre></td></tr></table></figure>\n<p>config.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;0.0.0.0&quot;,    //服务器IP，0.0.0.0代表绑定服务器的所有IP</span><br><span class=\"line\">    &quot;server_port&quot;:8088,    //服务端口</span><br><span class=\"line\">    &quot;password&quot;:&quot;password&quot;,    //密码</span><br><span class=\"line\">    &quot;timeout&quot;:&quot;5&quot;,    //超时重连</span><br><span class=\"line\">    &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;,    //加密方式</span><br><span class=\"line\">    &quot;mode&quot;:&quot;tcp_and_udp&quot;    //代理TCP和UDP</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件为json格式，//后为注释，方便说明加的，实际配置文件里不能写注释（看那个红色就知道不能加）。</p>\n<p>这里用的是在移动设备上性能相对效好的chacha20-ietf-poly1305。</p>\n<p>因为只有shadowsocks-libev更新了AEAD加密，所以为了兼容可以改为chacha20等非AEAD加密算法。</p>\n<h2 id=\"运行shadowsocks-libev\"><a href=\"#运行shadowsocks-libev\" class=\"headerlink\" title=\"运行shadowsocks-libev\"></a>运行shadowsocks-libev</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-server -c config.json</span><br></pre></td></tr></table></figure>\n<p>可以看到服务在前台运行，-c后面接配置文件。若要后台运行，可以加上-f参数，后面接一个pid文件名，运行后会生成这个pid文件，里面保存着这个后台ss-server进程的pid。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-server -c config.json -f proxy.pid</span><br></pre></td></tr></table></figure>\n<p>如果想开多个端口，可以使用多个配置文件+多个pid文件的方式来管理。这样服务端就完成了。</p>\n<blockquote>\n<p>文章摘自<a href=\"https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/\" target=\"_blank\" rel=\"noopener\">shino.space</a></p>\n</blockquote>\n"},{"title":"专注游戏的原因","date":"2016-06-08T10:55:56.000Z","_content":"\n\n在人专注于游戏的机制中，动机是重要的因素。那么，应该如何维持这种动机？这个领域目前有哪些先行研究？这些研究有该如何应用到游戏中？\n\n——《游戏性是什么》第9章\n\n\n## 游戏是符号化的现实世界\n\n至此，已经从“身体”、“视角”、“世界”、“触觉”4个角度分析了认识如何认知“作为符号集合体的游戏”，优势如何进行游戏的。\n\n可以说，这些与“游戏和认知之间的关系”密不可分。\n\n因为人正是在对各种因素进行认知的基础上，才能够理解游戏、娱乐游戏的。\n\n从之前的研究可以看到，“人与现实世界的关联方式”与“玩家与游戏内世界的关联方式”没有本质区别。\n\n也就是说，我们可以认为游戏是符号化现实世界。\n\n在理解了这一点之后，从本章开始将研究“游戏的基本构成要素”的相关问题。\n\n## 刺激和反应\n\n人在持续某种行为时，在作为行为结果的“报酬”以及行为本身之中，都会存在某种“动机”。\n\n在工业革命之后，工厂劳动者增加了，但劳动积极性的下降和厌倦情绪的滋生等新的社会问题也随之出现，在这样的背景下，就出现了各种关于动机的研究。\n\n其中，有个著名的古典研究，就是由“**巴甫洛夫的狗**”所代表的、从心理学中的行动主义方面所做的研究。\n\n在这个试验中，人在给狗吃饵料的时候会晃动铃铛。此后，狗只要一听到铃铛声，就会开始流口水。\n\n心理学领域一次研究为基础，探求出了人行动方面的相关机制，即人的行为被附加一些有利条件，积极性和持续性就会高涨，若给予惩罚，行动意愿就会降低。\n\n因此就出现了这样的构想：如果能够灵活运用“糖和鞭子”，就有可能实现动机的维持与管理。\n\n根据报酬和惩罚来控制行动等，都是证明这种构想的例证。这也可以说是“刺激和反应”机制的反复应用。\n\n像老虎机等游戏机，以及赌博等都是“刺激和反应”机制的灵活运用。卡牌游戏中的扭蛋机制也是这个意思。\n\n不过扭蛋并不属于实质性的报酬，从扭蛋中可能获得的稀有游戏物品才是报酬，在这一点上还是存在差异的。\n\n然而，还是有意资额明知违反规则，确认会使用现金交易稀有物品的玩家。\n\n基于“刺激和反应”机制所产生的快感，是在用户无意识间产生作用的，若长时间反复可能会产生依赖性，届时再中断这种机制，可能会产生一些不适应和副作用。沉迷游戏而导致睡眠不足、疲劳等症状的“游戏依存症”，也可以置于此种机制背景下来考察。\n\n## 目标和评价\n\n人都有“只要努力就能得到什么”的期待感。\n\n实际上，当人获得与自身努力相符合的品附加和报酬时，人的行为就能够继续持续下去。\n\n也就是说，当目标和评价之间的平衡处于比较恰当的状态时，动机会很高。想必很多人的日常感受也是如此。\n\n很多游戏中也是如此，不断地重复问题的设定和解决。这些问题既不会太简单也不会太难。如果游戏能够在难度上保持适度的平衡性，就可以维持住玩家的动机。这种思考方式，与之后要说的“心流理论”是相联系的。\n\n## 麦克利兰的成就动机理论\n\n随着时代的发展，动机的心理学的研究也走向了更深的层次。美国心理学家**戴维·麦克利兰（David McClelland）**的研究就是其中之一。麦克利兰首先将人类的需求进行了分类 。\n\n- 成就需求：向特定目标努力，获得成功的需求。\n\n- 权力需求：影响及控制他人的需求。\n\n- 亲和需求：建立良好的人际关系的需求。\n\n- 回避需求：回避失败和困难的需求。\n\n紧接着他揭示了这些需求对人的动机产生的影响，会根据个体及个体文化背景的差异而不同。\n社交网络的“点赞”功能，就是满足亲和需求结构的典型例子。在**MMORPG（大型多人在线角色扮演游戏）**这种具有社会性的游戏中，权力需求会在玩家动机方面产生一定影响。\n这是由于游戏角色的等级越高，装备越好，就越能在游戏内产生更高的社会影响力。\n\n## 马洛斯的需求层析理论\n\n**亚伯拉罕·马洛斯（Abraham Maslow）**假定了“人类是想着自我实现的目标不断成长的生物”，所以他将人类的需求从低到高分为5个阶段，即\n\n> “自我实现需求”\n> \n> “自尊需求”\n> \n> “归属和爱的需求”\n> \n> “安全需求”\n> \n> “生理需求”\n\n这种模型的特征，就是一个人一旦满足了下层需求，对满足上层需求的渴望就会增加。如果目前层次的需求没有满足，那么其上层的需求就毫无意义。例如，对一个快饿死的人讲自尊和自我实现就没有任何意义。\n\n这个理论模型，多被用来说明MMORPG内玩家的行动。刚开始接触游戏的玩家，由于尚不能在游戏内做出恰当的行动，所以经常不经意间就挂了。因此玩家最初的目的就是生存下来（**生理需求**），接着才会有安稳地进行游戏的需求（**安全需求**）。\n\n当玩家在某种程度上习惯了游戏之后，就该开始结交朋友、加入公会（**归属和爱的需求**）。\n***\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-297f2a5b18e2b458.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/cat.jpg)\n***\n\n此后，积累了足够多经验的玩家之中，就会出现一个公会的领导者（**自尊需求**）。同时，一些玩家还会制作并发布新的道具或地图（**自我实现需求**）。\n\n因此，将这些要素有意识地融入游戏中，就能够进一步地延长游戏的寿命。另外，也正由于很多游戏都能比现实社会更容易满足人类的这些需求，人才会专注，设置沉迷于游戏。实际上，很多的MMORPG的设计中都包括了比现实社会更加容易成长、成功和获得成就的机制。\n\n另外，不少游戏中玩家可以在游戏内自己制作道具，或者将制作出的道具分享给大家。这样的功能也能够满足玩家的自我实现需求。\n\n## 心流理论\n\n至此提及的研究，艘说明了人沉迷于游戏的原因的一方面。但对于人“持续”地玩游戏的说明还很不足。因此，近些年来将“持续性”作为焦点的研究引起大家的关注。这就是**米哈里·契克森米哈（Mihaly Csikszentmihalyi）**的**心流理论**。\n\n“心流”是指一种让人感觉到全身心投入的专注状态，“心流”并不仅限于游戏，还可以是电影、慢跑、登山、学习、工作等。（难易度）和行为所需要的必要能力（技能）。随后，研究发现当能够两者之间较好地维持平衡时，人就能够体会到“心流”。另外还发现，当玩家技能偏低，游戏难度偏高时，玩家就会感到不安和担心；（自己能行吗？会不会失败？）而技能偏高，游戏难度偏低时，玩家就会感到厌倦和其他不安情绪（更想做一些其他的事情，一直做这种事情真的好吗？）\n\n契克森米哈随后又指出了心流体验的3个必要条件。\n\n- 存在明确的目标\n\n- 对挑战难度的认知与对自身技能理解间的平衡\n\n- 能得到某种即时性反馈\n\n由此可见，心流理论中含有被众多游戏开发者提及的“游戏平衡性”中的诸多要素。\n\n游戏的特征之一，就是玩家可以能动性地参与。反过来，为了让人持续玩下去，游戏就必须持续引导人发挥能动性。但是，人的本性都是追求快乐，而回避麻烦。这正是所有的游戏设计师每天都要面对的窘境。究竟应该如何做，才能够完美地使游戏保持平衡？心流理论，就为回答这个问题提供了启示。\n\n## 电影脚本中的心流理论\n\n心流理论并不是从无到有产生的，而是整合现实世界固有的事物和现象，进而体系化、理论化。正因为如此，有许多的游戏设计者并不了解心流理论，只是用符合心流理论的自己的独特感觉去制作游戏。同样的现象并不仅限于游戏，也可以在电影脚本中见到。例如《第一滴血2》，电影情节略。\n\n兰博面临的问题难度在逐渐增大。这其实是导演为了引导观众容易将自己的感情带入到兰博身上的一种手法。虽然当人们重新回顾的时候，会觉得剧情展开有些荒谬，不过即使这样，当主人公在棉铃持续不断的艰难险阻时，观众还是会不由自主地将自身情感代入到主人公身上。\n\n## 游戏中的心流理论（PS：【原书说得确实有点详细、~~啰嗦~~，以下删改】）\n\n每一部游戏都是从简单到困难，先是玩家（小白）虐电脑（菜鸟），到后来为打小怪，然后打BOSS。接着，拿装备、升级、打难度较大的小怪、再升级、打大BOSS。只是击败boss时的战斗思想和方式都各不相同罢了。\n\n如此，游戏的模式设计为，随剧情的发展，\n\n> 难易度和技能两方面都在逐渐增长。\n\n## 小结\n\n- 目前动机研究中，已经存在诸多先行课题。\n\n- 心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。\n\n\n> 摘自《游戏性是什么》第9章（专注于游戏的原因）喜欢这本书，\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。","source":"_posts/文集/游戏性是什么/游戏性是什么-专注游戏的原因.md","raw":"---\ntitle: 专注游戏的原因\ndate: 2016-06-08 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n\n在人专注于游戏的机制中，动机是重要的因素。那么，应该如何维持这种动机？这个领域目前有哪些先行研究？这些研究有该如何应用到游戏中？\n\n——《游戏性是什么》第9章\n\n\n## 游戏是符号化的现实世界\n\n至此，已经从“身体”、“视角”、“世界”、“触觉”4个角度分析了认识如何认知“作为符号集合体的游戏”，优势如何进行游戏的。\n\n可以说，这些与“游戏和认知之间的关系”密不可分。\n\n因为人正是在对各种因素进行认知的基础上，才能够理解游戏、娱乐游戏的。\n\n从之前的研究可以看到，“人与现实世界的关联方式”与“玩家与游戏内世界的关联方式”没有本质区别。\n\n也就是说，我们可以认为游戏是符号化现实世界。\n\n在理解了这一点之后，从本章开始将研究“游戏的基本构成要素”的相关问题。\n\n## 刺激和反应\n\n人在持续某种行为时，在作为行为结果的“报酬”以及行为本身之中，都会存在某种“动机”。\n\n在工业革命之后，工厂劳动者增加了，但劳动积极性的下降和厌倦情绪的滋生等新的社会问题也随之出现，在这样的背景下，就出现了各种关于动机的研究。\n\n其中，有个著名的古典研究，就是由“**巴甫洛夫的狗**”所代表的、从心理学中的行动主义方面所做的研究。\n\n在这个试验中，人在给狗吃饵料的时候会晃动铃铛。此后，狗只要一听到铃铛声，就会开始流口水。\n\n心理学领域一次研究为基础，探求出了人行动方面的相关机制，即人的行为被附加一些有利条件，积极性和持续性就会高涨，若给予惩罚，行动意愿就会降低。\n\n因此就出现了这样的构想：如果能够灵活运用“糖和鞭子”，就有可能实现动机的维持与管理。\n\n根据报酬和惩罚来控制行动等，都是证明这种构想的例证。这也可以说是“刺激和反应”机制的反复应用。\n\n像老虎机等游戏机，以及赌博等都是“刺激和反应”机制的灵活运用。卡牌游戏中的扭蛋机制也是这个意思。\n\n不过扭蛋并不属于实质性的报酬，从扭蛋中可能获得的稀有游戏物品才是报酬，在这一点上还是存在差异的。\n\n然而，还是有意资额明知违反规则，确认会使用现金交易稀有物品的玩家。\n\n基于“刺激和反应”机制所产生的快感，是在用户无意识间产生作用的，若长时间反复可能会产生依赖性，届时再中断这种机制，可能会产生一些不适应和副作用。沉迷游戏而导致睡眠不足、疲劳等症状的“游戏依存症”，也可以置于此种机制背景下来考察。\n\n## 目标和评价\n\n人都有“只要努力就能得到什么”的期待感。\n\n实际上，当人获得与自身努力相符合的品附加和报酬时，人的行为就能够继续持续下去。\n\n也就是说，当目标和评价之间的平衡处于比较恰当的状态时，动机会很高。想必很多人的日常感受也是如此。\n\n很多游戏中也是如此，不断地重复问题的设定和解决。这些问题既不会太简单也不会太难。如果游戏能够在难度上保持适度的平衡性，就可以维持住玩家的动机。这种思考方式，与之后要说的“心流理论”是相联系的。\n\n## 麦克利兰的成就动机理论\n\n随着时代的发展，动机的心理学的研究也走向了更深的层次。美国心理学家**戴维·麦克利兰（David McClelland）**的研究就是其中之一。麦克利兰首先将人类的需求进行了分类 。\n\n- 成就需求：向特定目标努力，获得成功的需求。\n\n- 权力需求：影响及控制他人的需求。\n\n- 亲和需求：建立良好的人际关系的需求。\n\n- 回避需求：回避失败和困难的需求。\n\n紧接着他揭示了这些需求对人的动机产生的影响，会根据个体及个体文化背景的差异而不同。\n社交网络的“点赞”功能，就是满足亲和需求结构的典型例子。在**MMORPG（大型多人在线角色扮演游戏）**这种具有社会性的游戏中，权力需求会在玩家动机方面产生一定影响。\n这是由于游戏角色的等级越高，装备越好，就越能在游戏内产生更高的社会影响力。\n\n## 马洛斯的需求层析理论\n\n**亚伯拉罕·马洛斯（Abraham Maslow）**假定了“人类是想着自我实现的目标不断成长的生物”，所以他将人类的需求从低到高分为5个阶段，即\n\n> “自我实现需求”\n> \n> “自尊需求”\n> \n> “归属和爱的需求”\n> \n> “安全需求”\n> \n> “生理需求”\n\n这种模型的特征，就是一个人一旦满足了下层需求，对满足上层需求的渴望就会增加。如果目前层次的需求没有满足，那么其上层的需求就毫无意义。例如，对一个快饿死的人讲自尊和自我实现就没有任何意义。\n\n这个理论模型，多被用来说明MMORPG内玩家的行动。刚开始接触游戏的玩家，由于尚不能在游戏内做出恰当的行动，所以经常不经意间就挂了。因此玩家最初的目的就是生存下来（**生理需求**），接着才会有安稳地进行游戏的需求（**安全需求**）。\n\n当玩家在某种程度上习惯了游戏之后，就该开始结交朋友、加入公会（**归属和爱的需求**）。\n***\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-297f2a5b18e2b458.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/cat.jpg)\n***\n\n此后，积累了足够多经验的玩家之中，就会出现一个公会的领导者（**自尊需求**）。同时，一些玩家还会制作并发布新的道具或地图（**自我实现需求**）。\n\n因此，将这些要素有意识地融入游戏中，就能够进一步地延长游戏的寿命。另外，也正由于很多游戏都能比现实社会更容易满足人类的这些需求，人才会专注，设置沉迷于游戏。实际上，很多的MMORPG的设计中都包括了比现实社会更加容易成长、成功和获得成就的机制。\n\n另外，不少游戏中玩家可以在游戏内自己制作道具，或者将制作出的道具分享给大家。这样的功能也能够满足玩家的自我实现需求。\n\n## 心流理论\n\n至此提及的研究，艘说明了人沉迷于游戏的原因的一方面。但对于人“持续”地玩游戏的说明还很不足。因此，近些年来将“持续性”作为焦点的研究引起大家的关注。这就是**米哈里·契克森米哈（Mihaly Csikszentmihalyi）**的**心流理论**。\n\n“心流”是指一种让人感觉到全身心投入的专注状态，“心流”并不仅限于游戏，还可以是电影、慢跑、登山、学习、工作等。（难易度）和行为所需要的必要能力（技能）。随后，研究发现当能够两者之间较好地维持平衡时，人就能够体会到“心流”。另外还发现，当玩家技能偏低，游戏难度偏高时，玩家就会感到不安和担心；（自己能行吗？会不会失败？）而技能偏高，游戏难度偏低时，玩家就会感到厌倦和其他不安情绪（更想做一些其他的事情，一直做这种事情真的好吗？）\n\n契克森米哈随后又指出了心流体验的3个必要条件。\n\n- 存在明确的目标\n\n- 对挑战难度的认知与对自身技能理解间的平衡\n\n- 能得到某种即时性反馈\n\n由此可见，心流理论中含有被众多游戏开发者提及的“游戏平衡性”中的诸多要素。\n\n游戏的特征之一，就是玩家可以能动性地参与。反过来，为了让人持续玩下去，游戏就必须持续引导人发挥能动性。但是，人的本性都是追求快乐，而回避麻烦。这正是所有的游戏设计师每天都要面对的窘境。究竟应该如何做，才能够完美地使游戏保持平衡？心流理论，就为回答这个问题提供了启示。\n\n## 电影脚本中的心流理论\n\n心流理论并不是从无到有产生的，而是整合现实世界固有的事物和现象，进而体系化、理论化。正因为如此，有许多的游戏设计者并不了解心流理论，只是用符合心流理论的自己的独特感觉去制作游戏。同样的现象并不仅限于游戏，也可以在电影脚本中见到。例如《第一滴血2》，电影情节略。\n\n兰博面临的问题难度在逐渐增大。这其实是导演为了引导观众容易将自己的感情带入到兰博身上的一种手法。虽然当人们重新回顾的时候，会觉得剧情展开有些荒谬，不过即使这样，当主人公在棉铃持续不断的艰难险阻时，观众还是会不由自主地将自身情感代入到主人公身上。\n\n## 游戏中的心流理论（PS：【原书说得确实有点详细、~~啰嗦~~，以下删改】）\n\n每一部游戏都是从简单到困难，先是玩家（小白）虐电脑（菜鸟），到后来为打小怪，然后打BOSS。接着，拿装备、升级、打难度较大的小怪、再升级、打大BOSS。只是击败boss时的战斗思想和方式都各不相同罢了。\n\n如此，游戏的模式设计为，随剧情的发展，\n\n> 难易度和技能两方面都在逐渐增长。\n\n## 小结\n\n- 目前动机研究中，已经存在诸多先行课题。\n\n- 心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。\n\n\n> 摘自《游戏性是什么》第9章（专注于游戏的原因）喜欢这本书，\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。","slug":"文集/游戏性是什么/游戏性是什么-专注游戏的原因","published":1,"updated":"2018-08-04T06:32:45.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdo005xm4cms2zdp30b","content":"<p>在人专注于游戏的机制中，动机是重要的因素。那么，应该如何维持这种动机？这个领域目前有哪些先行研究？这些研究有该如何应用到游戏中？</p>\n<p>——《游戏性是什么》第9章</p>\n<h2 id=\"游戏是符号化的现实世界\"><a href=\"#游戏是符号化的现实世界\" class=\"headerlink\" title=\"游戏是符号化的现实世界\"></a>游戏是符号化的现实世界</h2><p>至此，已经从“身体”、“视角”、“世界”、“触觉”4个角度分析了认识如何认知“作为符号集合体的游戏”，优势如何进行游戏的。</p>\n<p>可以说，这些与“游戏和认知之间的关系”密不可分。</p>\n<p>因为人正是在对各种因素进行认知的基础上，才能够理解游戏、娱乐游戏的。</p>\n<p>从之前的研究可以看到，“人与现实世界的关联方式”与“玩家与游戏内世界的关联方式”没有本质区别。</p>\n<p>也就是说，我们可以认为游戏是符号化现实世界。</p>\n<p>在理解了这一点之后，从本章开始将研究“游戏的基本构成要素”的相关问题。</p>\n<h2 id=\"刺激和反应\"><a href=\"#刺激和反应\" class=\"headerlink\" title=\"刺激和反应\"></a>刺激和反应</h2><p>人在持续某种行为时，在作为行为结果的“报酬”以及行为本身之中，都会存在某种“动机”。</p>\n<p>在工业革命之后，工厂劳动者增加了，但劳动积极性的下降和厌倦情绪的滋生等新的社会问题也随之出现，在这样的背景下，就出现了各种关于动机的研究。</p>\n<p>其中，有个著名的古典研究，就是由“<strong>巴甫洛夫的狗</strong>”所代表的、从心理学中的行动主义方面所做的研究。</p>\n<p>在这个试验中，人在给狗吃饵料的时候会晃动铃铛。此后，狗只要一听到铃铛声，就会开始流口水。</p>\n<p>心理学领域一次研究为基础，探求出了人行动方面的相关机制，即人的行为被附加一些有利条件，积极性和持续性就会高涨，若给予惩罚，行动意愿就会降低。</p>\n<p>因此就出现了这样的构想：如果能够灵活运用“糖和鞭子”，就有可能实现动机的维持与管理。</p>\n<p>根据报酬和惩罚来控制行动等，都是证明这种构想的例证。这也可以说是“刺激和反应”机制的反复应用。</p>\n<p>像老虎机等游戏机，以及赌博等都是“刺激和反应”机制的灵活运用。卡牌游戏中的扭蛋机制也是这个意思。</p>\n<p>不过扭蛋并不属于实质性的报酬，从扭蛋中可能获得的稀有游戏物品才是报酬，在这一点上还是存在差异的。</p>\n<p>然而，还是有意资额明知违反规则，确认会使用现金交易稀有物品的玩家。</p>\n<p>基于“刺激和反应”机制所产生的快感，是在用户无意识间产生作用的，若长时间反复可能会产生依赖性，届时再中断这种机制，可能会产生一些不适应和副作用。沉迷游戏而导致睡眠不足、疲劳等症状的“游戏依存症”，也可以置于此种机制背景下来考察。</p>\n<h2 id=\"目标和评价\"><a href=\"#目标和评价\" class=\"headerlink\" title=\"目标和评价\"></a>目标和评价</h2><p>人都有“只要努力就能得到什么”的期待感。</p>\n<p>实际上，当人获得与自身努力相符合的品附加和报酬时，人的行为就能够继续持续下去。</p>\n<p>也就是说，当目标和评价之间的平衡处于比较恰当的状态时，动机会很高。想必很多人的日常感受也是如此。</p>\n<p>很多游戏中也是如此，不断地重复问题的设定和解决。这些问题既不会太简单也不会太难。如果游戏能够在难度上保持适度的平衡性，就可以维持住玩家的动机。这种思考方式，与之后要说的“心流理论”是相联系的。</p>\n<h2 id=\"麦克利兰的成就动机理论\"><a href=\"#麦克利兰的成就动机理论\" class=\"headerlink\" title=\"麦克利兰的成就动机理论\"></a>麦克利兰的成就动机理论</h2><p>随着时代的发展，动机的心理学的研究也走向了更深的层次。美国心理学家<strong>戴维·麦克利兰（David McClelland）</strong>的研究就是其中之一。麦克利兰首先将人类的需求进行了分类 。</p>\n<ul>\n<li><p>成就需求：向特定目标努力，获得成功的需求。</p>\n</li>\n<li><p>权力需求：影响及控制他人的需求。</p>\n</li>\n<li><p>亲和需求：建立良好的人际关系的需求。</p>\n</li>\n<li><p>回避需求：回避失败和困难的需求。</p>\n</li>\n</ul>\n<p>紧接着他揭示了这些需求对人的动机产生的影响，会根据个体及个体文化背景的差异而不同。<br>社交网络的“点赞”功能，就是满足亲和需求结构的典型例子。在<strong>MMORPG（大型多人在线角色扮演游戏）</strong>这种具有社会性的游戏中，权力需求会在玩家动机方面产生一定影响。<br>这是由于游戏角色的等级越高，装备越好，就越能在游戏内产生更高的社会影响力。</p>\n<h2 id=\"马洛斯的需求层析理论\"><a href=\"#马洛斯的需求层析理论\" class=\"headerlink\" title=\"马洛斯的需求层析理论\"></a>马洛斯的需求层析理论</h2><p><strong>亚伯拉罕·马洛斯（Abraham Maslow）</strong>假定了“人类是想着自我实现的目标不断成长的生物”，所以他将人类的需求从低到高分为5个阶段，即</p>\n<blockquote>\n<p>“自我实现需求”</p>\n<p>“自尊需求”</p>\n<p>“归属和爱的需求”</p>\n<p>“安全需求”</p>\n<p>“生理需求”</p>\n</blockquote>\n<p>这种模型的特征，就是一个人一旦满足了下层需求，对满足上层需求的渴望就会增加。如果目前层次的需求没有满足，那么其上层的需求就毫无意义。例如，对一个快饿死的人讲自尊和自我实现就没有任何意义。</p>\n<p>这个理论模型，多被用来说明MMORPG内玩家的行动。刚开始接触游戏的玩家，由于尚不能在游戏内做出恰当的行动，所以经常不经意间就挂了。因此玩家最初的目的就是生存下来（<strong>生理需求</strong>），接着才会有安稳地进行游戏的需求（<strong>安全需求</strong>）。</p>\n<p>当玩家在某种程度上习惯了游戏之后，就该开始结交朋友、加入公会（<strong>归属和爱的需求</strong>）。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/cat.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-297f2a5b18e2b458.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<hr>\n<p>此后，积累了足够多经验的玩家之中，就会出现一个公会的领导者（<strong>自尊需求</strong>）。同时，一些玩家还会制作并发布新的道具或地图（<strong>自我实现需求</strong>）。</p>\n<p>因此，将这些要素有意识地融入游戏中，就能够进一步地延长游戏的寿命。另外，也正由于很多游戏都能比现实社会更容易满足人类的这些需求，人才会专注，设置沉迷于游戏。实际上，很多的MMORPG的设计中都包括了比现实社会更加容易成长、成功和获得成就的机制。</p>\n<p>另外，不少游戏中玩家可以在游戏内自己制作道具，或者将制作出的道具分享给大家。这样的功能也能够满足玩家的自我实现需求。</p>\n<h2 id=\"心流理论\"><a href=\"#心流理论\" class=\"headerlink\" title=\"心流理论\"></a>心流理论</h2><p>至此提及的研究，艘说明了人沉迷于游戏的原因的一方面。但对于人“持续”地玩游戏的说明还很不足。因此，近些年来将“持续性”作为焦点的研究引起大家的关注。这就是<strong>米哈里·契克森米哈（Mihaly Csikszentmihalyi）</strong>的<strong>心流理论</strong>。</p>\n<p>“心流”是指一种让人感觉到全身心投入的专注状态，“心流”并不仅限于游戏，还可以是电影、慢跑、登山、学习、工作等。（难易度）和行为所需要的必要能力（技能）。随后，研究发现当能够两者之间较好地维持平衡时，人就能够体会到“心流”。另外还发现，当玩家技能偏低，游戏难度偏高时，玩家就会感到不安和担心；（自己能行吗？会不会失败？）而技能偏高，游戏难度偏低时，玩家就会感到厌倦和其他不安情绪（更想做一些其他的事情，一直做这种事情真的好吗？）</p>\n<p>契克森米哈随后又指出了心流体验的3个必要条件。</p>\n<ul>\n<li><p>存在明确的目标</p>\n</li>\n<li><p>对挑战难度的认知与对自身技能理解间的平衡</p>\n</li>\n<li><p>能得到某种即时性反馈</p>\n</li>\n</ul>\n<p>由此可见，心流理论中含有被众多游戏开发者提及的“游戏平衡性”中的诸多要素。</p>\n<p>游戏的特征之一，就是玩家可以能动性地参与。反过来，为了让人持续玩下去，游戏就必须持续引导人发挥能动性。但是，人的本性都是追求快乐，而回避麻烦。这正是所有的游戏设计师每天都要面对的窘境。究竟应该如何做，才能够完美地使游戏保持平衡？心流理论，就为回答这个问题提供了启示。</p>\n<h2 id=\"电影脚本中的心流理论\"><a href=\"#电影脚本中的心流理论\" class=\"headerlink\" title=\"电影脚本中的心流理论\"></a>电影脚本中的心流理论</h2><p>心流理论并不是从无到有产生的，而是整合现实世界固有的事物和现象，进而体系化、理论化。正因为如此，有许多的游戏设计者并不了解心流理论，只是用符合心流理论的自己的独特感觉去制作游戏。同样的现象并不仅限于游戏，也可以在电影脚本中见到。例如《第一滴血2》，电影情节略。</p>\n<p>兰博面临的问题难度在逐渐增大。这其实是导演为了引导观众容易将自己的感情带入到兰博身上的一种手法。虽然当人们重新回顾的时候，会觉得剧情展开有些荒谬，不过即使这样，当主人公在棉铃持续不断的艰难险阻时，观众还是会不由自主地将自身情感代入到主人公身上。</p>\n<h2 id=\"游戏中的心流理论（PS：【原书说得确实有点详细、啰嗦，以下删改】）\"><a href=\"#游戏中的心流理论（PS：【原书说得确实有点详细、啰嗦，以下删改】）\" class=\"headerlink\" title=\"游戏中的心流理论（PS：【原书说得确实有点详细、啰嗦，以下删改】）\"></a>游戏中的心流理论（PS：【原书说得确实有点详细、<del>啰嗦</del>，以下删改】）</h2><p>每一部游戏都是从简单到困难，先是玩家（小白）虐电脑（菜鸟），到后来为打小怪，然后打BOSS。接着，拿装备、升级、打难度较大的小怪、再升级、打大BOSS。只是击败boss时的战斗思想和方式都各不相同罢了。</p>\n<p>如此，游戏的模式设计为，随剧情的发展，</p>\n<blockquote>\n<p>难易度和技能两方面都在逐渐增长。</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>目前动机研究中，已经存在诸多先行课题。</p>\n</li>\n<li><p>心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第9章（专注于游戏的原因）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在人专注于游戏的机制中，动机是重要的因素。那么，应该如何维持这种动机？这个领域目前有哪些先行研究？这些研究有该如何应用到游戏中？</p>\n<p>——《游戏性是什么》第9章</p>\n<h2 id=\"游戏是符号化的现实世界\"><a href=\"#游戏是符号化的现实世界\" class=\"headerlink\" title=\"游戏是符号化的现实世界\"></a>游戏是符号化的现实世界</h2><p>至此，已经从“身体”、“视角”、“世界”、“触觉”4个角度分析了认识如何认知“作为符号集合体的游戏”，优势如何进行游戏的。</p>\n<p>可以说，这些与“游戏和认知之间的关系”密不可分。</p>\n<p>因为人正是在对各种因素进行认知的基础上，才能够理解游戏、娱乐游戏的。</p>\n<p>从之前的研究可以看到，“人与现实世界的关联方式”与“玩家与游戏内世界的关联方式”没有本质区别。</p>\n<p>也就是说，我们可以认为游戏是符号化现实世界。</p>\n<p>在理解了这一点之后，从本章开始将研究“游戏的基本构成要素”的相关问题。</p>\n<h2 id=\"刺激和反应\"><a href=\"#刺激和反应\" class=\"headerlink\" title=\"刺激和反应\"></a>刺激和反应</h2><p>人在持续某种行为时，在作为行为结果的“报酬”以及行为本身之中，都会存在某种“动机”。</p>\n<p>在工业革命之后，工厂劳动者增加了，但劳动积极性的下降和厌倦情绪的滋生等新的社会问题也随之出现，在这样的背景下，就出现了各种关于动机的研究。</p>\n<p>其中，有个著名的古典研究，就是由“<strong>巴甫洛夫的狗</strong>”所代表的、从心理学中的行动主义方面所做的研究。</p>\n<p>在这个试验中，人在给狗吃饵料的时候会晃动铃铛。此后，狗只要一听到铃铛声，就会开始流口水。</p>\n<p>心理学领域一次研究为基础，探求出了人行动方面的相关机制，即人的行为被附加一些有利条件，积极性和持续性就会高涨，若给予惩罚，行动意愿就会降低。</p>\n<p>因此就出现了这样的构想：如果能够灵活运用“糖和鞭子”，就有可能实现动机的维持与管理。</p>\n<p>根据报酬和惩罚来控制行动等，都是证明这种构想的例证。这也可以说是“刺激和反应”机制的反复应用。</p>\n<p>像老虎机等游戏机，以及赌博等都是“刺激和反应”机制的灵活运用。卡牌游戏中的扭蛋机制也是这个意思。</p>\n<p>不过扭蛋并不属于实质性的报酬，从扭蛋中可能获得的稀有游戏物品才是报酬，在这一点上还是存在差异的。</p>\n<p>然而，还是有意资额明知违反规则，确认会使用现金交易稀有物品的玩家。</p>\n<p>基于“刺激和反应”机制所产生的快感，是在用户无意识间产生作用的，若长时间反复可能会产生依赖性，届时再中断这种机制，可能会产生一些不适应和副作用。沉迷游戏而导致睡眠不足、疲劳等症状的“游戏依存症”，也可以置于此种机制背景下来考察。</p>\n<h2 id=\"目标和评价\"><a href=\"#目标和评价\" class=\"headerlink\" title=\"目标和评价\"></a>目标和评价</h2><p>人都有“只要努力就能得到什么”的期待感。</p>\n<p>实际上，当人获得与自身努力相符合的品附加和报酬时，人的行为就能够继续持续下去。</p>\n<p>也就是说，当目标和评价之间的平衡处于比较恰当的状态时，动机会很高。想必很多人的日常感受也是如此。</p>\n<p>很多游戏中也是如此，不断地重复问题的设定和解决。这些问题既不会太简单也不会太难。如果游戏能够在难度上保持适度的平衡性，就可以维持住玩家的动机。这种思考方式，与之后要说的“心流理论”是相联系的。</p>\n<h2 id=\"麦克利兰的成就动机理论\"><a href=\"#麦克利兰的成就动机理论\" class=\"headerlink\" title=\"麦克利兰的成就动机理论\"></a>麦克利兰的成就动机理论</h2><p>随着时代的发展，动机的心理学的研究也走向了更深的层次。美国心理学家<strong>戴维·麦克利兰（David McClelland）</strong>的研究就是其中之一。麦克利兰首先将人类的需求进行了分类 。</p>\n<ul>\n<li><p>成就需求：向特定目标努力，获得成功的需求。</p>\n</li>\n<li><p>权力需求：影响及控制他人的需求。</p>\n</li>\n<li><p>亲和需求：建立良好的人际关系的需求。</p>\n</li>\n<li><p>回避需求：回避失败和困难的需求。</p>\n</li>\n</ul>\n<p>紧接着他揭示了这些需求对人的动机产生的影响，会根据个体及个体文化背景的差异而不同。<br>社交网络的“点赞”功能，就是满足亲和需求结构的典型例子。在<strong>MMORPG（大型多人在线角色扮演游戏）</strong>这种具有社会性的游戏中，权力需求会在玩家动机方面产生一定影响。<br>这是由于游戏角色的等级越高，装备越好，就越能在游戏内产生更高的社会影响力。</p>\n<h2 id=\"马洛斯的需求层析理论\"><a href=\"#马洛斯的需求层析理论\" class=\"headerlink\" title=\"马洛斯的需求层析理论\"></a>马洛斯的需求层析理论</h2><p><strong>亚伯拉罕·马洛斯（Abraham Maslow）</strong>假定了“人类是想着自我实现的目标不断成长的生物”，所以他将人类的需求从低到高分为5个阶段，即</p>\n<blockquote>\n<p>“自我实现需求”</p>\n<p>“自尊需求”</p>\n<p>“归属和爱的需求”</p>\n<p>“安全需求”</p>\n<p>“生理需求”</p>\n</blockquote>\n<p>这种模型的特征，就是一个人一旦满足了下层需求，对满足上层需求的渴望就会增加。如果目前层次的需求没有满足，那么其上层的需求就毫无意义。例如，对一个快饿死的人讲自尊和自我实现就没有任何意义。</p>\n<p>这个理论模型，多被用来说明MMORPG内玩家的行动。刚开始接触游戏的玩家，由于尚不能在游戏内做出恰当的行动，所以经常不经意间就挂了。因此玩家最初的目的就是生存下来（<strong>生理需求</strong>），接着才会有安稳地进行游戏的需求（<strong>安全需求</strong>）。</p>\n<p>当玩家在某种程度上习惯了游戏之后，就该开始结交朋友、加入公会（<strong>归属和爱的需求</strong>）。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/cat.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-297f2a5b18e2b458.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<hr>\n<p>此后，积累了足够多经验的玩家之中，就会出现一个公会的领导者（<strong>自尊需求</strong>）。同时，一些玩家还会制作并发布新的道具或地图（<strong>自我实现需求</strong>）。</p>\n<p>因此，将这些要素有意识地融入游戏中，就能够进一步地延长游戏的寿命。另外，也正由于很多游戏都能比现实社会更容易满足人类的这些需求，人才会专注，设置沉迷于游戏。实际上，很多的MMORPG的设计中都包括了比现实社会更加容易成长、成功和获得成就的机制。</p>\n<p>另外，不少游戏中玩家可以在游戏内自己制作道具，或者将制作出的道具分享给大家。这样的功能也能够满足玩家的自我实现需求。</p>\n<h2 id=\"心流理论\"><a href=\"#心流理论\" class=\"headerlink\" title=\"心流理论\"></a>心流理论</h2><p>至此提及的研究，艘说明了人沉迷于游戏的原因的一方面。但对于人“持续”地玩游戏的说明还很不足。因此，近些年来将“持续性”作为焦点的研究引起大家的关注。这就是<strong>米哈里·契克森米哈（Mihaly Csikszentmihalyi）</strong>的<strong>心流理论</strong>。</p>\n<p>“心流”是指一种让人感觉到全身心投入的专注状态，“心流”并不仅限于游戏，还可以是电影、慢跑、登山、学习、工作等。（难易度）和行为所需要的必要能力（技能）。随后，研究发现当能够两者之间较好地维持平衡时，人就能够体会到“心流”。另外还发现，当玩家技能偏低，游戏难度偏高时，玩家就会感到不安和担心；（自己能行吗？会不会失败？）而技能偏高，游戏难度偏低时，玩家就会感到厌倦和其他不安情绪（更想做一些其他的事情，一直做这种事情真的好吗？）</p>\n<p>契克森米哈随后又指出了心流体验的3个必要条件。</p>\n<ul>\n<li><p>存在明确的目标</p>\n</li>\n<li><p>对挑战难度的认知与对自身技能理解间的平衡</p>\n</li>\n<li><p>能得到某种即时性反馈</p>\n</li>\n</ul>\n<p>由此可见，心流理论中含有被众多游戏开发者提及的“游戏平衡性”中的诸多要素。</p>\n<p>游戏的特征之一，就是玩家可以能动性地参与。反过来，为了让人持续玩下去，游戏就必须持续引导人发挥能动性。但是，人的本性都是追求快乐，而回避麻烦。这正是所有的游戏设计师每天都要面对的窘境。究竟应该如何做，才能够完美地使游戏保持平衡？心流理论，就为回答这个问题提供了启示。</p>\n<h2 id=\"电影脚本中的心流理论\"><a href=\"#电影脚本中的心流理论\" class=\"headerlink\" title=\"电影脚本中的心流理论\"></a>电影脚本中的心流理论</h2><p>心流理论并不是从无到有产生的，而是整合现实世界固有的事物和现象，进而体系化、理论化。正因为如此，有许多的游戏设计者并不了解心流理论，只是用符合心流理论的自己的独特感觉去制作游戏。同样的现象并不仅限于游戏，也可以在电影脚本中见到。例如《第一滴血2》，电影情节略。</p>\n<p>兰博面临的问题难度在逐渐增大。这其实是导演为了引导观众容易将自己的感情带入到兰博身上的一种手法。虽然当人们重新回顾的时候，会觉得剧情展开有些荒谬，不过即使这样，当主人公在棉铃持续不断的艰难险阻时，观众还是会不由自主地将自身情感代入到主人公身上。</p>\n<h2 id=\"游戏中的心流理论（PS：【原书说得确实有点详细、啰嗦，以下删改】）\"><a href=\"#游戏中的心流理论（PS：【原书说得确实有点详细、啰嗦，以下删改】）\" class=\"headerlink\" title=\"游戏中的心流理论（PS：【原书说得确实有点详细、啰嗦，以下删改】）\"></a>游戏中的心流理论（PS：【原书说得确实有点详细、<del>啰嗦</del>，以下删改】）</h2><p>每一部游戏都是从简单到困难，先是玩家（小白）虐电脑（菜鸟），到后来为打小怪，然后打BOSS。接着，拿装备、升级、打难度较大的小怪、再升级、打大BOSS。只是击败boss时的战斗思想和方式都各不相同罢了。</p>\n<p>如此，游戏的模式设计为，随剧情的发展，</p>\n<blockquote>\n<p>难易度和技能两方面都在逐渐增长。</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>目前动机研究中，已经存在诸多先行课题。</p>\n</li>\n<li><p>心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第9章（专注于游戏的原因）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n"},{"title":"游戏和世界","date":"2016-06-06T10:55:56.000Z","_content":"\n游戏画面会随着游戏的进展实时变化。这时，玩家从游戏画面中能读取到怎样的信息呢？而这与人类在日常生活中认知世界的方式有何异同？\n\n——《游戏性是什么》第6章\n\n## 身体和世界之间的关系\n\n本章将探讨人类身体与人类所处的世界之间的关系。\n\n## 可被认知的世界是身体成立的必要条件\n\n从 **Hand Regard **、婴儿吮吸手指、翻身的时候，形成对自己身体的认知。\n\n在“吊篮猫和自由移动的猫”的实验中，了解到我们的视觉和身体之间有着紧密的关系。视网膜中的视觉信息和身体获得的体感信息。只有在大脑中综合处理后，才能够让我们正确认识视觉信息的意义。\n\n而我们的身体，存在与包围着我们的环境中，即存在于和世界的关联中。通过 **Hand Regard **认知身体，无非是认知包围着我们身体的整个世界。\n\n## 人类、狗和苍蝇的世界认知\n\n德国的生物学家、哲学家乌克威尔（Jakob Johann Baron von Uexkull）的研究领域正是“身体和世界”之间的关系。乌克维尔认为，生物所处的世界分为作用空间（与生物相关的空间）和非作用空间（无生物不相关，或生物无意识到其关联的空间）。他还分别论述了人类、狗和苍蝇的身体和作用空间的关系。\n\n例如一间客厅，对人类来说，椅子河水沙发都是用来坐的东西，桌子是用来摆放餐具等物品的空间，书架则是摆放书籍的收纳空间。\n\n不过这些东西对狗来说就另当别论了。它们可能会认为椅子和沙发既可以坐着又可以睡觉的场所，而桌子和书架等物品，即使进入了它们的视网膜，它们也不会认为这些是和自己相关的空间。对苍蝇来说，它们则只能识别出天花板上的灯以及桌子上摆放的餐具。如果餐具里没有食物，它们甚至可能只把餐具当成是障碍物。\n\n因此，不仅是人类，大多数的生命都是基于自己身体能如何作用于世界这一点来认知世界的。对于人和狗来说，二者使用桌子的能力不同。因此，二者对于桌子的意义（即作用空间的意义）的认识方式也不同。\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-0d007d4ac861c4fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/cropped-1399678306525994.jpg)\n\n## 游戏中作用空间和非作用空间的关系\n\n将“身体与作用空间的关系”中的对象替换为游戏角色和游戏空间，来重新思考这个问题。与现实世界相比，游戏内的作用空间（游戏角色可以行动的空间领域）更加有限。另外，游戏中存在大量的按钮和开关。\n\n而且在游戏中，作用空间和非作用空间通常也不一定是固定不变的。\n\n在《超级马里奥》中，“砖块地面”为一种可以站立其上，也可以从下方跳跃将其破坏的作用空间。游戏中的敌方角色也是一种作用空间，敌方角色虽然危险，但是玩家可以用踩踏等方式打倒敌方角色并获得分数奖励。\n\n另一方面，游戏背景中的图像，由于玩家无法直接使其移动，所以被认知为一种非作用空间。\n\n另外，分数和剩余生命等也属于作用空间。\n\n这些都会根据玩家的操作而变化，根据数值的不同，或增加剩余生命，或游戏结束。\n\n因此，这些内容被认为是身体和世界之间的一种中介物。\n\n另外游戏中隐藏砖块等非作用空间，会在游戏中因玩家的发现而转变成作用空间。\n\n## 《俄罗斯方块》中的扩展身体到作用空间的转化\n\n《俄罗斯方块》中处于下落过程的方块可以视为玩家在游戏中的扩展身体。\n\n在这个方块彻底落下，不能在移动的瞬间，方块就变成不断累加的“地基”，这时方块作为扩展身体的功能也就消失了。\n\n随后这个“地基”又变成了可以承接接下来要落下的方块的作用空间。\n\n因此，有时候最着游戏的进行，扩展身体会转化为作用空间。\n\n虽然都是一些富有戏剧性的变化，但玩家在那个变化的瞬间都能够进行恰当的理解。\n\n## 规划游戏、身体和环境间的关系\n\n整理下“身体”、“视觉”、“世界”的关系。\n\n人类的大脑通过 **Hand Regard **等方式进行后天的身体学习。为了顺利学习，身体所处的世界不可或缺。\n\n除了现实世界的身体学习，人还可以精神体扩展到道具，甚至是虚拟世界中，进行后天的关联学习。\n\n之前举了“**逆转眼镜**”的例子，其实对于那些能力不好的人来说，眼镜和隐形眼镜也可以称得上是他们身体的一部分。\n\n对于工匠、钢琴家、足球选手来说，工具、钢琴、足球也可以称为是它们被扩展的身体。\n\n我们身处的世界又能分为作用空间和非作用空间，以及作用空间对我们自身的意义。\n\n***\n\n[![20151103-21](http://upload-images.jianshu.io/upload_images/1171873-5195c5aa54b3ab80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/02/20151103-21.jpg)\n\n\n\n即使在游戏世界里，我们也能够观察到上述关系。\n\n游戏中的玩家角色，就是玩家通过图像、音乐和手柄震动等反馈，在大脑中获得的新的关联学习，即所谓的扩展身体。\n\n不过，所谓的扩展身体的操作范围和现实人类自己的身体比起来，操作上受到极大的限制。\n\n玩家通过多次反复进行游戏不断进步，以完成操作被限制的身体的关联学习。\n\n另外，玩家在理解游戏内作用空间的意义的同时，通过限制身体理解作用空间因时因地变化的意义，可以对游戏世界产生更加深刻的认知。\n\n这个认知，在游戏过程中会不断更新变化。\n\n这种变化，则是根据游戏设计的引导而发生的。因此，可以说游戏设计的一个重要职责就是“规划身体和环境间的关系”。\n\n另外，游戏中的虚拟身体和世界，与实际中身体及现实世界并非毫不相干。\n\n无论对哪一边的身体或世界来说，人都是通过同样的机制来认知的。\n\n这一点对游戏设计者来说也是十分重要的。\n\n创作游戏，并非“创作出一个和现实世界完全不一样的新世界”。创作者需要理解现实世界人类身体的特征，理解世界与作用空间的特性及其相互关系，并在这些理解的基础上，设计出玩家易于理解的抽象化的身体和世界。\n\n> ## 小结：\n\n- 我们身处的世界可以分为作用空间和非作用空间。\n\n- 根据身体功能的不同，作用空间意义也不同。\n\n- 玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。\n\n- 游戏中身体和环境间的关系由游戏设计者规划设计。\n\n\n> 摘自《游戏性是什么》第6章（游戏和世界），作删改喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。","source":"_posts/文集/游戏性是什么/游戏性是什么-游戏和世界.md","raw":"---\ntitle: 游戏和世界\ndate: 2016-06-06 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n游戏画面会随着游戏的进展实时变化。这时，玩家从游戏画面中能读取到怎样的信息呢？而这与人类在日常生活中认知世界的方式有何异同？\n\n——《游戏性是什么》第6章\n\n## 身体和世界之间的关系\n\n本章将探讨人类身体与人类所处的世界之间的关系。\n\n## 可被认知的世界是身体成立的必要条件\n\n从 **Hand Regard **、婴儿吮吸手指、翻身的时候，形成对自己身体的认知。\n\n在“吊篮猫和自由移动的猫”的实验中，了解到我们的视觉和身体之间有着紧密的关系。视网膜中的视觉信息和身体获得的体感信息。只有在大脑中综合处理后，才能够让我们正确认识视觉信息的意义。\n\n而我们的身体，存在与包围着我们的环境中，即存在于和世界的关联中。通过 **Hand Regard **认知身体，无非是认知包围着我们身体的整个世界。\n\n## 人类、狗和苍蝇的世界认知\n\n德国的生物学家、哲学家乌克威尔（Jakob Johann Baron von Uexkull）的研究领域正是“身体和世界”之间的关系。乌克维尔认为，生物所处的世界分为作用空间（与生物相关的空间）和非作用空间（无生物不相关，或生物无意识到其关联的空间）。他还分别论述了人类、狗和苍蝇的身体和作用空间的关系。\n\n例如一间客厅，对人类来说，椅子河水沙发都是用来坐的东西，桌子是用来摆放餐具等物品的空间，书架则是摆放书籍的收纳空间。\n\n不过这些东西对狗来说就另当别论了。它们可能会认为椅子和沙发既可以坐着又可以睡觉的场所，而桌子和书架等物品，即使进入了它们的视网膜，它们也不会认为这些是和自己相关的空间。对苍蝇来说，它们则只能识别出天花板上的灯以及桌子上摆放的餐具。如果餐具里没有食物，它们甚至可能只把餐具当成是障碍物。\n\n因此，不仅是人类，大多数的生命都是基于自己身体能如何作用于世界这一点来认知世界的。对于人和狗来说，二者使用桌子的能力不同。因此，二者对于桌子的意义（即作用空间的意义）的认识方式也不同。\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-0d007d4ac861c4fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/cropped-1399678306525994.jpg)\n\n## 游戏中作用空间和非作用空间的关系\n\n将“身体与作用空间的关系”中的对象替换为游戏角色和游戏空间，来重新思考这个问题。与现实世界相比，游戏内的作用空间（游戏角色可以行动的空间领域）更加有限。另外，游戏中存在大量的按钮和开关。\n\n而且在游戏中，作用空间和非作用空间通常也不一定是固定不变的。\n\n在《超级马里奥》中，“砖块地面”为一种可以站立其上，也可以从下方跳跃将其破坏的作用空间。游戏中的敌方角色也是一种作用空间，敌方角色虽然危险，但是玩家可以用踩踏等方式打倒敌方角色并获得分数奖励。\n\n另一方面，游戏背景中的图像，由于玩家无法直接使其移动，所以被认知为一种非作用空间。\n\n另外，分数和剩余生命等也属于作用空间。\n\n这些都会根据玩家的操作而变化，根据数值的不同，或增加剩余生命，或游戏结束。\n\n因此，这些内容被认为是身体和世界之间的一种中介物。\n\n另外游戏中隐藏砖块等非作用空间，会在游戏中因玩家的发现而转变成作用空间。\n\n## 《俄罗斯方块》中的扩展身体到作用空间的转化\n\n《俄罗斯方块》中处于下落过程的方块可以视为玩家在游戏中的扩展身体。\n\n在这个方块彻底落下，不能在移动的瞬间，方块就变成不断累加的“地基”，这时方块作为扩展身体的功能也就消失了。\n\n随后这个“地基”又变成了可以承接接下来要落下的方块的作用空间。\n\n因此，有时候最着游戏的进行，扩展身体会转化为作用空间。\n\n虽然都是一些富有戏剧性的变化，但玩家在那个变化的瞬间都能够进行恰当的理解。\n\n## 规划游戏、身体和环境间的关系\n\n整理下“身体”、“视觉”、“世界”的关系。\n\n人类的大脑通过 **Hand Regard **等方式进行后天的身体学习。为了顺利学习，身体所处的世界不可或缺。\n\n除了现实世界的身体学习，人还可以精神体扩展到道具，甚至是虚拟世界中，进行后天的关联学习。\n\n之前举了“**逆转眼镜**”的例子，其实对于那些能力不好的人来说，眼镜和隐形眼镜也可以称得上是他们身体的一部分。\n\n对于工匠、钢琴家、足球选手来说，工具、钢琴、足球也可以称为是它们被扩展的身体。\n\n我们身处的世界又能分为作用空间和非作用空间，以及作用空间对我们自身的意义。\n\n***\n\n[![20151103-21](http://upload-images.jianshu.io/upload_images/1171873-5195c5aa54b3ab80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/02/20151103-21.jpg)\n\n\n\n即使在游戏世界里，我们也能够观察到上述关系。\n\n游戏中的玩家角色，就是玩家通过图像、音乐和手柄震动等反馈，在大脑中获得的新的关联学习，即所谓的扩展身体。\n\n不过，所谓的扩展身体的操作范围和现实人类自己的身体比起来，操作上受到极大的限制。\n\n玩家通过多次反复进行游戏不断进步，以完成操作被限制的身体的关联学习。\n\n另外，玩家在理解游戏内作用空间的意义的同时，通过限制身体理解作用空间因时因地变化的意义，可以对游戏世界产生更加深刻的认知。\n\n这个认知，在游戏过程中会不断更新变化。\n\n这种变化，则是根据游戏设计的引导而发生的。因此，可以说游戏设计的一个重要职责就是“规划身体和环境间的关系”。\n\n另外，游戏中的虚拟身体和世界，与实际中身体及现实世界并非毫不相干。\n\n无论对哪一边的身体或世界来说，人都是通过同样的机制来认知的。\n\n这一点对游戏设计者来说也是十分重要的。\n\n创作游戏，并非“创作出一个和现实世界完全不一样的新世界”。创作者需要理解现实世界人类身体的特征，理解世界与作用空间的特性及其相互关系，并在这些理解的基础上，设计出玩家易于理解的抽象化的身体和世界。\n\n> ## 小结：\n\n- 我们身处的世界可以分为作用空间和非作用空间。\n\n- 根据身体功能的不同，作用空间意义也不同。\n\n- 玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。\n\n- 游戏中身体和环境间的关系由游戏设计者规划设计。\n\n\n> 摘自《游戏性是什么》第6章（游戏和世界），作删改喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。","slug":"文集/游戏性是什么/游戏性是什么-游戏和世界","published":1,"updated":"2018-08-04T06:32:45.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdq0061m4cm9x3r4d0s","content":"<p>游戏画面会随着游戏的进展实时变化。这时，玩家从游戏画面中能读取到怎样的信息呢？而这与人类在日常生活中认知世界的方式有何异同？</p>\n<p>——《游戏性是什么》第6章</p>\n<h2 id=\"身体和世界之间的关系\"><a href=\"#身体和世界之间的关系\" class=\"headerlink\" title=\"身体和世界之间的关系\"></a>身体和世界之间的关系</h2><p>本章将探讨人类身体与人类所处的世界之间的关系。</p>\n<h2 id=\"可被认知的世界是身体成立的必要条件\"><a href=\"#可被认知的世界是身体成立的必要条件\" class=\"headerlink\" title=\"可被认知的世界是身体成立的必要条件\"></a>可被认知的世界是身体成立的必要条件</h2><p>从 <strong>Hand Regard </strong>、婴儿吮吸手指、翻身的时候，形成对自己身体的认知。</p>\n<p>在“吊篮猫和自由移动的猫”的实验中，了解到我们的视觉和身体之间有着紧密的关系。视网膜中的视觉信息和身体获得的体感信息。只有在大脑中综合处理后，才能够让我们正确认识视觉信息的意义。</p>\n<p>而我们的身体，存在与包围着我们的环境中，即存在于和世界的关联中。通过 <strong>Hand Regard </strong>认知身体，无非是认知包围着我们身体的整个世界。</p>\n<h2 id=\"人类、狗和苍蝇的世界认知\"><a href=\"#人类、狗和苍蝇的世界认知\" class=\"headerlink\" title=\"人类、狗和苍蝇的世界认知\"></a>人类、狗和苍蝇的世界认知</h2><p>德国的生物学家、哲学家乌克威尔（Jakob Johann Baron von Uexkull）的研究领域正是“身体和世界”之间的关系。乌克维尔认为，生物所处的世界分为作用空间（与生物相关的空间）和非作用空间（无生物不相关，或生物无意识到其关联的空间）。他还分别论述了人类、狗和苍蝇的身体和作用空间的关系。</p>\n<p>例如一间客厅，对人类来说，椅子河水沙发都是用来坐的东西，桌子是用来摆放餐具等物品的空间，书架则是摆放书籍的收纳空间。</p>\n<p>不过这些东西对狗来说就另当别论了。它们可能会认为椅子和沙发既可以坐着又可以睡觉的场所，而桌子和书架等物品，即使进入了它们的视网膜，它们也不会认为这些是和自己相关的空间。对苍蝇来说，它们则只能识别出天花板上的灯以及桌子上摆放的餐具。如果餐具里没有食物，它们甚至可能只把餐具当成是障碍物。</p>\n<p>因此，不仅是人类，大多数的生命都是基于自己身体能如何作用于世界这一点来认知世界的。对于人和狗来说，二者使用桌子的能力不同。因此，二者对于桌子的意义（即作用空间的意义）的认识方式也不同。</p>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/cropped-1399678306525994.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0d007d4ac861c4fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<h2 id=\"游戏中作用空间和非作用空间的关系\"><a href=\"#游戏中作用空间和非作用空间的关系\" class=\"headerlink\" title=\"游戏中作用空间和非作用空间的关系\"></a>游戏中作用空间和非作用空间的关系</h2><p>将“身体与作用空间的关系”中的对象替换为游戏角色和游戏空间，来重新思考这个问题。与现实世界相比，游戏内的作用空间（游戏角色可以行动的空间领域）更加有限。另外，游戏中存在大量的按钮和开关。</p>\n<p>而且在游戏中，作用空间和非作用空间通常也不一定是固定不变的。</p>\n<p>在《超级马里奥》中，“砖块地面”为一种可以站立其上，也可以从下方跳跃将其破坏的作用空间。游戏中的敌方角色也是一种作用空间，敌方角色虽然危险，但是玩家可以用踩踏等方式打倒敌方角色并获得分数奖励。</p>\n<p>另一方面，游戏背景中的图像，由于玩家无法直接使其移动，所以被认知为一种非作用空间。</p>\n<p>另外，分数和剩余生命等也属于作用空间。</p>\n<p>这些都会根据玩家的操作而变化，根据数值的不同，或增加剩余生命，或游戏结束。</p>\n<p>因此，这些内容被认为是身体和世界之间的一种中介物。</p>\n<p>另外游戏中隐藏砖块等非作用空间，会在游戏中因玩家的发现而转变成作用空间。</p>\n<h2 id=\"《俄罗斯方块》中的扩展身体到作用空间的转化\"><a href=\"#《俄罗斯方块》中的扩展身体到作用空间的转化\" class=\"headerlink\" title=\"《俄罗斯方块》中的扩展身体到作用空间的转化\"></a>《俄罗斯方块》中的扩展身体到作用空间的转化</h2><p>《俄罗斯方块》中处于下落过程的方块可以视为玩家在游戏中的扩展身体。</p>\n<p>在这个方块彻底落下，不能在移动的瞬间，方块就变成不断累加的“地基”，这时方块作为扩展身体的功能也就消失了。</p>\n<p>随后这个“地基”又变成了可以承接接下来要落下的方块的作用空间。</p>\n<p>因此，有时候最着游戏的进行，扩展身体会转化为作用空间。</p>\n<p>虽然都是一些富有戏剧性的变化，但玩家在那个变化的瞬间都能够进行恰当的理解。</p>\n<h2 id=\"规划游戏、身体和环境间的关系\"><a href=\"#规划游戏、身体和环境间的关系\" class=\"headerlink\" title=\"规划游戏、身体和环境间的关系\"></a>规划游戏、身体和环境间的关系</h2><p>整理下“身体”、“视觉”、“世界”的关系。</p>\n<p>人类的大脑通过 <strong>Hand Regard </strong>等方式进行后天的身体学习。为了顺利学习，身体所处的世界不可或缺。</p>\n<p>除了现实世界的身体学习，人还可以精神体扩展到道具，甚至是虚拟世界中，进行后天的关联学习。</p>\n<p>之前举了“<strong>逆转眼镜</strong>”的例子，其实对于那些能力不好的人来说，眼镜和隐形眼镜也可以称得上是他们身体的一部分。</p>\n<p>对于工匠、钢琴家、足球选手来说，工具、钢琴、足球也可以称为是它们被扩展的身体。</p>\n<p>我们身处的世界又能分为作用空间和非作用空间，以及作用空间对我们自身的意义。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/02/20151103-21.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5195c5aa54b3ab80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20151103-21\"></a></p>\n<p>即使在游戏世界里，我们也能够观察到上述关系。</p>\n<p>游戏中的玩家角色，就是玩家通过图像、音乐和手柄震动等反馈，在大脑中获得的新的关联学习，即所谓的扩展身体。</p>\n<p>不过，所谓的扩展身体的操作范围和现实人类自己的身体比起来，操作上受到极大的限制。</p>\n<p>玩家通过多次反复进行游戏不断进步，以完成操作被限制的身体的关联学习。</p>\n<p>另外，玩家在理解游戏内作用空间的意义的同时，通过限制身体理解作用空间因时因地变化的意义，可以对游戏世界产生更加深刻的认知。</p>\n<p>这个认知，在游戏过程中会不断更新变化。</p>\n<p>这种变化，则是根据游戏设计的引导而发生的。因此，可以说游戏设计的一个重要职责就是“规划身体和环境间的关系”。</p>\n<p>另外，游戏中的虚拟身体和世界，与实际中身体及现实世界并非毫不相干。</p>\n<p>无论对哪一边的身体或世界来说，人都是通过同样的机制来认知的。</p>\n<p>这一点对游戏设计者来说也是十分重要的。</p>\n<p>创作游戏，并非“创作出一个和现实世界完全不一样的新世界”。创作者需要理解现实世界人类身体的特征，理解世界与作用空间的特性及其相互关系，并在这些理解的基础上，设计出玩家易于理解的抽象化的身体和世界。</p>\n<blockquote>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2></blockquote>\n<ul>\n<li><p>我们身处的世界可以分为作用空间和非作用空间。</p>\n</li>\n<li><p>根据身体功能的不同，作用空间意义也不同。</p>\n</li>\n<li><p>玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。</p>\n</li>\n<li><p>游戏中身体和环境间的关系由游戏设计者规划设计。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第6章（游戏和世界），作删改喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>游戏画面会随着游戏的进展实时变化。这时，玩家从游戏画面中能读取到怎样的信息呢？而这与人类在日常生活中认知世界的方式有何异同？</p>\n<p>——《游戏性是什么》第6章</p>\n<h2 id=\"身体和世界之间的关系\"><a href=\"#身体和世界之间的关系\" class=\"headerlink\" title=\"身体和世界之间的关系\"></a>身体和世界之间的关系</h2><p>本章将探讨人类身体与人类所处的世界之间的关系。</p>\n<h2 id=\"可被认知的世界是身体成立的必要条件\"><a href=\"#可被认知的世界是身体成立的必要条件\" class=\"headerlink\" title=\"可被认知的世界是身体成立的必要条件\"></a>可被认知的世界是身体成立的必要条件</h2><p>从 <strong>Hand Regard </strong>、婴儿吮吸手指、翻身的时候，形成对自己身体的认知。</p>\n<p>在“吊篮猫和自由移动的猫”的实验中，了解到我们的视觉和身体之间有着紧密的关系。视网膜中的视觉信息和身体获得的体感信息。只有在大脑中综合处理后，才能够让我们正确认识视觉信息的意义。</p>\n<p>而我们的身体，存在与包围着我们的环境中，即存在于和世界的关联中。通过 <strong>Hand Regard </strong>认知身体，无非是认知包围着我们身体的整个世界。</p>\n<h2 id=\"人类、狗和苍蝇的世界认知\"><a href=\"#人类、狗和苍蝇的世界认知\" class=\"headerlink\" title=\"人类、狗和苍蝇的世界认知\"></a>人类、狗和苍蝇的世界认知</h2><p>德国的生物学家、哲学家乌克威尔（Jakob Johann Baron von Uexkull）的研究领域正是“身体和世界”之间的关系。乌克维尔认为，生物所处的世界分为作用空间（与生物相关的空间）和非作用空间（无生物不相关，或生物无意识到其关联的空间）。他还分别论述了人类、狗和苍蝇的身体和作用空间的关系。</p>\n<p>例如一间客厅，对人类来说，椅子河水沙发都是用来坐的东西，桌子是用来摆放餐具等物品的空间，书架则是摆放书籍的收纳空间。</p>\n<p>不过这些东西对狗来说就另当别论了。它们可能会认为椅子和沙发既可以坐着又可以睡觉的场所，而桌子和书架等物品，即使进入了它们的视网膜，它们也不会认为这些是和自己相关的空间。对苍蝇来说，它们则只能识别出天花板上的灯以及桌子上摆放的餐具。如果餐具里没有食物，它们甚至可能只把餐具当成是障碍物。</p>\n<p>因此，不仅是人类，大多数的生命都是基于自己身体能如何作用于世界这一点来认知世界的。对于人和狗来说，二者使用桌子的能力不同。因此，二者对于桌子的意义（即作用空间的意义）的认识方式也不同。</p>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/cropped-1399678306525994.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0d007d4ac861c4fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<h2 id=\"游戏中作用空间和非作用空间的关系\"><a href=\"#游戏中作用空间和非作用空间的关系\" class=\"headerlink\" title=\"游戏中作用空间和非作用空间的关系\"></a>游戏中作用空间和非作用空间的关系</h2><p>将“身体与作用空间的关系”中的对象替换为游戏角色和游戏空间，来重新思考这个问题。与现实世界相比，游戏内的作用空间（游戏角色可以行动的空间领域）更加有限。另外，游戏中存在大量的按钮和开关。</p>\n<p>而且在游戏中，作用空间和非作用空间通常也不一定是固定不变的。</p>\n<p>在《超级马里奥》中，“砖块地面”为一种可以站立其上，也可以从下方跳跃将其破坏的作用空间。游戏中的敌方角色也是一种作用空间，敌方角色虽然危险，但是玩家可以用踩踏等方式打倒敌方角色并获得分数奖励。</p>\n<p>另一方面，游戏背景中的图像，由于玩家无法直接使其移动，所以被认知为一种非作用空间。</p>\n<p>另外，分数和剩余生命等也属于作用空间。</p>\n<p>这些都会根据玩家的操作而变化，根据数值的不同，或增加剩余生命，或游戏结束。</p>\n<p>因此，这些内容被认为是身体和世界之间的一种中介物。</p>\n<p>另外游戏中隐藏砖块等非作用空间，会在游戏中因玩家的发现而转变成作用空间。</p>\n<h2 id=\"《俄罗斯方块》中的扩展身体到作用空间的转化\"><a href=\"#《俄罗斯方块》中的扩展身体到作用空间的转化\" class=\"headerlink\" title=\"《俄罗斯方块》中的扩展身体到作用空间的转化\"></a>《俄罗斯方块》中的扩展身体到作用空间的转化</h2><p>《俄罗斯方块》中处于下落过程的方块可以视为玩家在游戏中的扩展身体。</p>\n<p>在这个方块彻底落下，不能在移动的瞬间，方块就变成不断累加的“地基”，这时方块作为扩展身体的功能也就消失了。</p>\n<p>随后这个“地基”又变成了可以承接接下来要落下的方块的作用空间。</p>\n<p>因此，有时候最着游戏的进行，扩展身体会转化为作用空间。</p>\n<p>虽然都是一些富有戏剧性的变化，但玩家在那个变化的瞬间都能够进行恰当的理解。</p>\n<h2 id=\"规划游戏、身体和环境间的关系\"><a href=\"#规划游戏、身体和环境间的关系\" class=\"headerlink\" title=\"规划游戏、身体和环境间的关系\"></a>规划游戏、身体和环境间的关系</h2><p>整理下“身体”、“视觉”、“世界”的关系。</p>\n<p>人类的大脑通过 <strong>Hand Regard </strong>等方式进行后天的身体学习。为了顺利学习，身体所处的世界不可或缺。</p>\n<p>除了现实世界的身体学习，人还可以精神体扩展到道具，甚至是虚拟世界中，进行后天的关联学习。</p>\n<p>之前举了“<strong>逆转眼镜</strong>”的例子，其实对于那些能力不好的人来说，眼镜和隐形眼镜也可以称得上是他们身体的一部分。</p>\n<p>对于工匠、钢琴家、足球选手来说，工具、钢琴、足球也可以称为是它们被扩展的身体。</p>\n<p>我们身处的世界又能分为作用空间和非作用空间，以及作用空间对我们自身的意义。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/02/20151103-21.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5195c5aa54b3ab80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20151103-21\"></a></p>\n<p>即使在游戏世界里，我们也能够观察到上述关系。</p>\n<p>游戏中的玩家角色，就是玩家通过图像、音乐和手柄震动等反馈，在大脑中获得的新的关联学习，即所谓的扩展身体。</p>\n<p>不过，所谓的扩展身体的操作范围和现实人类自己的身体比起来，操作上受到极大的限制。</p>\n<p>玩家通过多次反复进行游戏不断进步，以完成操作被限制的身体的关联学习。</p>\n<p>另外，玩家在理解游戏内作用空间的意义的同时，通过限制身体理解作用空间因时因地变化的意义，可以对游戏世界产生更加深刻的认知。</p>\n<p>这个认知，在游戏过程中会不断更新变化。</p>\n<p>这种变化，则是根据游戏设计的引导而发生的。因此，可以说游戏设计的一个重要职责就是“规划身体和环境间的关系”。</p>\n<p>另外，游戏中的虚拟身体和世界，与实际中身体及现实世界并非毫不相干。</p>\n<p>无论对哪一边的身体或世界来说，人都是通过同样的机制来认知的。</p>\n<p>这一点对游戏设计者来说也是十分重要的。</p>\n<p>创作游戏，并非“创作出一个和现实世界完全不一样的新世界”。创作者需要理解现实世界人类身体的特征，理解世界与作用空间的特性及其相互关系，并在这些理解的基础上，设计出玩家易于理解的抽象化的身体和世界。</p>\n<blockquote>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2></blockquote>\n<ul>\n<li><p>我们身处的世界可以分为作用空间和非作用空间。</p>\n</li>\n<li><p>根据身体功能的不同，作用空间意义也不同。</p>\n</li>\n<li><p>玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。</p>\n</li>\n<li><p>游戏中身体和环境间的关系由游戏设计者规划设计。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第6章（游戏和世界），作删改喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n"},{"title":"叙事和Narreme","date":"2016-06-12T10:55:56.000Z","_content":"\n——《游戏性是什么》第12章\n\n## 游戏中的叙事分析\n\n游戏中的叙事研究是如何展开的？\n早在20世纪70年代中期，游戏中就有了故事性要素，时至今日，游戏中的故事性要素更是取得了飞跃的发展，同是还向多方面进一步拓展。\n\n在此背景下，诸多研究者开始致力于这个课题的研究，如：\n丹麦游戏研究者杰斯帕·居尔，曾对叙事定义与游戏做了对照分析。他指出，游戏的叙事性，\n> 会随叙事定义的不同、对象游戏的不同而变化。\n\n而且他还指出，在分析游戏中的叙事时，还需比较故事中的时间与现实世界中的时间，并且也要考察玩游戏的时间。\n\n从Ludo与效率预估中，时间分析也是一个重要的因素。因此，研究游戏的叙事和基本要素时，要重视时间这个要素。\n\n另外，Tom Bissell 认为，在存在叙事要素的游戏中，都使用了两种类型的故事手法。根据Bissell的观点，一种是Framed（框架型叙事），即用过场动画和影像叙事，不允许玩家介入。\n\n另一种是“未脚本化的、由玩家决定的……的部分”。Bissell将其成为Ludo叙事（ludonarrative）。\n\n这里所使用的“ludo”只是单纯的前缀词，表示“游戏的”之意，与之前的Ludo不同。\n\n## Narreme\n\n一个像Ludo一样的基础概念——Narreme，即“构筑故事性的基础构成要素”，这一概念是1969年由尤金·多尔夫曼提出的。\n\n1974年，亨利·怀特曼进一步发展了此概念。\n\n怀特曼从叙事的角度，对广告中宣传语进行了分析研究。\n\n宣传语中会使用“不完整的语句” 之类的形式，名词和形容词、动词的使用并不鲜见。那么，宣传语是否也是叙事？\n\n如果不是，叙事和非叙事的界限又是什么？怀特曼用Narreme框架对此进行了分析，用叙事构成要素的形式做了研究。\n\nNarreme的研究现在被计算机科学研究者阿洛克·邦卡迪和罗赫略·E.卡多纳·里维拉进一步拓展。\n\n他们指出，**叙事就是由Narreme连锁构成的。**\n\n## 基本构成要素\n\n**“拥有表面性结构，能发挥所有故事性功能的最小单位”，即“故事中发挥功能的最小单位”**\n\n罗兰·巴特曾经论述道，叙事的最小单位是**功能体**。\n\n功能体分为两类，一类是作为叙事中的必要要素，起到连接作用的功能体。\n\n另一类是起补充作用、填故事空间的功能体。\n\n在影像理论中，Christian Merz 等人提出，叙事的基本结构就是通过连续拍摄得到的影像片段，即镜头。\n\n不过，David Bordwell 则对此观点提出了异议、因为影像表现中存在这样的叙事：如果在一个镜头中有多个人登场并各自进行自身的表演，需要用一些更加细致的镜头组合来表现不同人物的台词和表演。\n\n叙事就成为了镜头的核心导向。也就是说，构成叙事的基本要素不仅限于镜头等同一个单位，还应该会随着状况发生变化。\n\n在现在的影像理论中研究趋势中，David Bordwell 的主张成为了主流。\n\n那么，Narreme 在影像体验中究竟是什么？\n\n承继前述 David Bordwell 和怀德曼 的观点，可以对其做出如下解释。\n\n>Narreme  是由登场人物、表情、事情、物品、台词、视觉效果、音响效果等影像要素以及这些要素的复合形式构成而成。\n>\n>能够使故事得到客观阐释的最低限度要素\n\n这个定义的根基中包括 David Bordwell 的一个观点，即影像体验也是一样的，是通过玩家进行阐释的。\n\n不过还要加上一个条件，那就是在游戏中，玩家是作为主体介入游戏的。因此，游戏中的叙事，是玩家理解当前的剧情，再找到推进剧情的方式的形式，即玩家来推动游戏的叙事。\n\n反过来说，只要这些故事阐释的不充分，**原则上**叙事在时间和空间上都无法进一步推进。\n\n也就是说，对游戏中“叙述的基本构成要素”，可以做出如下定义。\n\n>向玩家阐释游戏角色、物体、空间设计、符号以及这些要素复合构成的故事性时间与空间，使得玩家能够向着下一个故事性的时间与空间推进的最低限度的要素。\n\n*另外，刚才行文中加入了“原则上”这个表述。这是因为有些游戏设计师可能在游戏设计中以 Ludo 的形式加入了“什么也不选择/无法选择”的选择项。*\n\n换句话说，就是在叙事过程中，\n\n>加入了可以实现交互性介入，但又对玩家的输入 “无反馈” 的设计。\n\n这可以说是游戏设计师在整合 Ludo 和叙事的基础上，加入了自己的想法和理念。\n\n## 《吃豆人》的 Narreme \n\n至此，分别阐述了游戏的基本构成要素 Ludo 和叙事的基本构成要素 Narreme  。来分析 Narreme  在游戏中的作用。\n\n尝试以 Ludo 为基准重新分析 《Pacman》 ，《Pacman》 中最基本的Ludo，是吃掉场景中亮点和回避敌方角色的结合。\n\n《Pacman》中，以这个Ludo 为基础的同时，当角色吃掉较大的能量亮点时，就可以逆转与敌方的攻守形式，变成一种无视敌方角色，尽可能多地吃掉亮点的状态。这就是《Pacman》独特的效率预估模型。\n\n当玩家操作吃豆人时，“想象成了一个生物角色”，才可以将亮点理解为“**食物**（豆）”进行游戏。所以他们才会自然地产生“大亮点代表更多食物，所以能提升能量”的关联想象。\n***\n1. 这个是生物\n\n2. 所以会吃食物 \n\n3. 吃到较大的食物，就可以提升能量\n***\n自然地产生这种关联想象，证实玩家可以融入《Pacman》世界的重要原因之一。另外，这也成为了让过去非街机游戏玩家的女性群体接触游戏的原动力。\n\n虽然《Pacman》的角色和动作的关联并不是叙事，单玩家却可以根据角色和动作想象出“故事”。也就是说，无论是“角色”的外形还是“吃豆”的动作，可以说都让玩家容易理解 Ludo 意义的 Narreme。\n\n## 在动作游戏的Narreme\n\n书中举例《战国BASARA》、《北斗无双》两个游戏。不过我没玩过，简单说说就好了。\n\n这类游戏中，通常通过角色的动作可以看出该动作的攻击程度，角色的扮相看出装备的强弱。\n\n>动作，eg：《街头霸王4》。扮相，eg：《红色警戒》中的坦克和士兵。\n\n正因二者有着这样的区别，对玩家攻击的认识也产生了如下的差异。\n\n - 高频率轻量攻击、低频率重量攻击\n\n这种差异是由于每个游戏的世界观不同而形成的，不过玩家却能通过游戏角色的外观、装备马上认识到这种差异。也就是说：\n\n>角色的外观和装备是构成游戏整体叙事的 Narreme 之一。\n\n## 小结：\n - 故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。\n \n - 叙事是由故事和叙述构成的，讲述行为也成了分析的对象。\n \n - 将构成游戏叙事的基本要素成为 Narreme。\n \n - Ludo 和 Narreme 互相影响，共同构成游戏。\n\n\n这一章真的很枯燥，看了好多遍才慢慢理解叙事和游戏性的关系。看不下去的话就别为难自己\n\n\n> 摘自《游戏性是什么》第12章（叙事和Narreme）喜欢这本书，\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n","source":"_posts/文集/游戏性是什么/游戏性是什么-叙事和Narreme.md","raw":"---\ntitle: 叙事和Narreme\ndate: 2016-06-12 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n——《游戏性是什么》第12章\n\n## 游戏中的叙事分析\n\n游戏中的叙事研究是如何展开的？\n早在20世纪70年代中期，游戏中就有了故事性要素，时至今日，游戏中的故事性要素更是取得了飞跃的发展，同是还向多方面进一步拓展。\n\n在此背景下，诸多研究者开始致力于这个课题的研究，如：\n丹麦游戏研究者杰斯帕·居尔，曾对叙事定义与游戏做了对照分析。他指出，游戏的叙事性，\n> 会随叙事定义的不同、对象游戏的不同而变化。\n\n而且他还指出，在分析游戏中的叙事时，还需比较故事中的时间与现实世界中的时间，并且也要考察玩游戏的时间。\n\n从Ludo与效率预估中，时间分析也是一个重要的因素。因此，研究游戏的叙事和基本要素时，要重视时间这个要素。\n\n另外，Tom Bissell 认为，在存在叙事要素的游戏中，都使用了两种类型的故事手法。根据Bissell的观点，一种是Framed（框架型叙事），即用过场动画和影像叙事，不允许玩家介入。\n\n另一种是“未脚本化的、由玩家决定的……的部分”。Bissell将其成为Ludo叙事（ludonarrative）。\n\n这里所使用的“ludo”只是单纯的前缀词，表示“游戏的”之意，与之前的Ludo不同。\n\n## Narreme\n\n一个像Ludo一样的基础概念——Narreme，即“构筑故事性的基础构成要素”，这一概念是1969年由尤金·多尔夫曼提出的。\n\n1974年，亨利·怀特曼进一步发展了此概念。\n\n怀特曼从叙事的角度，对广告中宣传语进行了分析研究。\n\n宣传语中会使用“不完整的语句” 之类的形式，名词和形容词、动词的使用并不鲜见。那么，宣传语是否也是叙事？\n\n如果不是，叙事和非叙事的界限又是什么？怀特曼用Narreme框架对此进行了分析，用叙事构成要素的形式做了研究。\n\nNarreme的研究现在被计算机科学研究者阿洛克·邦卡迪和罗赫略·E.卡多纳·里维拉进一步拓展。\n\n他们指出，**叙事就是由Narreme连锁构成的。**\n\n## 基本构成要素\n\n**“拥有表面性结构，能发挥所有故事性功能的最小单位”，即“故事中发挥功能的最小单位”**\n\n罗兰·巴特曾经论述道，叙事的最小单位是**功能体**。\n\n功能体分为两类，一类是作为叙事中的必要要素，起到连接作用的功能体。\n\n另一类是起补充作用、填故事空间的功能体。\n\n在影像理论中，Christian Merz 等人提出，叙事的基本结构就是通过连续拍摄得到的影像片段，即镜头。\n\n不过，David Bordwell 则对此观点提出了异议、因为影像表现中存在这样的叙事：如果在一个镜头中有多个人登场并各自进行自身的表演，需要用一些更加细致的镜头组合来表现不同人物的台词和表演。\n\n叙事就成为了镜头的核心导向。也就是说，构成叙事的基本要素不仅限于镜头等同一个单位，还应该会随着状况发生变化。\n\n在现在的影像理论中研究趋势中，David Bordwell 的主张成为了主流。\n\n那么，Narreme 在影像体验中究竟是什么？\n\n承继前述 David Bordwell 和怀德曼 的观点，可以对其做出如下解释。\n\n>Narreme  是由登场人物、表情、事情、物品、台词、视觉效果、音响效果等影像要素以及这些要素的复合形式构成而成。\n>\n>能够使故事得到客观阐释的最低限度要素\n\n这个定义的根基中包括 David Bordwell 的一个观点，即影像体验也是一样的，是通过玩家进行阐释的。\n\n不过还要加上一个条件，那就是在游戏中，玩家是作为主体介入游戏的。因此，游戏中的叙事，是玩家理解当前的剧情，再找到推进剧情的方式的形式，即玩家来推动游戏的叙事。\n\n反过来说，只要这些故事阐释的不充分，**原则上**叙事在时间和空间上都无法进一步推进。\n\n也就是说，对游戏中“叙述的基本构成要素”，可以做出如下定义。\n\n>向玩家阐释游戏角色、物体、空间设计、符号以及这些要素复合构成的故事性时间与空间，使得玩家能够向着下一个故事性的时间与空间推进的最低限度的要素。\n\n*另外，刚才行文中加入了“原则上”这个表述。这是因为有些游戏设计师可能在游戏设计中以 Ludo 的形式加入了“什么也不选择/无法选择”的选择项。*\n\n换句话说，就是在叙事过程中，\n\n>加入了可以实现交互性介入，但又对玩家的输入 “无反馈” 的设计。\n\n这可以说是游戏设计师在整合 Ludo 和叙事的基础上，加入了自己的想法和理念。\n\n## 《吃豆人》的 Narreme \n\n至此，分别阐述了游戏的基本构成要素 Ludo 和叙事的基本构成要素 Narreme  。来分析 Narreme  在游戏中的作用。\n\n尝试以 Ludo 为基准重新分析 《Pacman》 ，《Pacman》 中最基本的Ludo，是吃掉场景中亮点和回避敌方角色的结合。\n\n《Pacman》中，以这个Ludo 为基础的同时，当角色吃掉较大的能量亮点时，就可以逆转与敌方的攻守形式，变成一种无视敌方角色，尽可能多地吃掉亮点的状态。这就是《Pacman》独特的效率预估模型。\n\n当玩家操作吃豆人时，“想象成了一个生物角色”，才可以将亮点理解为“**食物**（豆）”进行游戏。所以他们才会自然地产生“大亮点代表更多食物，所以能提升能量”的关联想象。\n***\n1. 这个是生物\n\n2. 所以会吃食物 \n\n3. 吃到较大的食物，就可以提升能量\n***\n自然地产生这种关联想象，证实玩家可以融入《Pacman》世界的重要原因之一。另外，这也成为了让过去非街机游戏玩家的女性群体接触游戏的原动力。\n\n虽然《Pacman》的角色和动作的关联并不是叙事，单玩家却可以根据角色和动作想象出“故事”。也就是说，无论是“角色”的外形还是“吃豆”的动作，可以说都让玩家容易理解 Ludo 意义的 Narreme。\n\n## 在动作游戏的Narreme\n\n书中举例《战国BASARA》、《北斗无双》两个游戏。不过我没玩过，简单说说就好了。\n\n这类游戏中，通常通过角色的动作可以看出该动作的攻击程度，角色的扮相看出装备的强弱。\n\n>动作，eg：《街头霸王4》。扮相，eg：《红色警戒》中的坦克和士兵。\n\n正因二者有着这样的区别，对玩家攻击的认识也产生了如下的差异。\n\n - 高频率轻量攻击、低频率重量攻击\n\n这种差异是由于每个游戏的世界观不同而形成的，不过玩家却能通过游戏角色的外观、装备马上认识到这种差异。也就是说：\n\n>角色的外观和装备是构成游戏整体叙事的 Narreme 之一。\n\n## 小结：\n - 故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。\n \n - 叙事是由故事和叙述构成的，讲述行为也成了分析的对象。\n \n - 将构成游戏叙事的基本要素成为 Narreme。\n \n - Ludo 和 Narreme 互相影响，共同构成游戏。\n\n\n这一章真的很枯燥，看了好多遍才慢慢理解叙事和游戏性的关系。看不下去的话就别为难自己\n\n\n> 摘自《游戏性是什么》第12章（叙事和Narreme）喜欢这本书，\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n","slug":"文集/游戏性是什么/游戏性是什么-叙事和Narreme","published":1,"updated":"2018-08-04T06:32:45.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcds0064m4cmlzygujzl","content":"<p>——《游戏性是什么》第12章</p>\n<h2 id=\"游戏中的叙事分析\"><a href=\"#游戏中的叙事分析\" class=\"headerlink\" title=\"游戏中的叙事分析\"></a>游戏中的叙事分析</h2><p>游戏中的叙事研究是如何展开的？<br>早在20世纪70年代中期，游戏中就有了故事性要素，时至今日，游戏中的故事性要素更是取得了飞跃的发展，同是还向多方面进一步拓展。</p>\n<p>在此背景下，诸多研究者开始致力于这个课题的研究，如：<br>丹麦游戏研究者杰斯帕·居尔，曾对叙事定义与游戏做了对照分析。他指出，游戏的叙事性，</p>\n<blockquote>\n<p>会随叙事定义的不同、对象游戏的不同而变化。</p>\n</blockquote>\n<p>而且他还指出，在分析游戏中的叙事时，还需比较故事中的时间与现实世界中的时间，并且也要考察玩游戏的时间。</p>\n<p>从Ludo与效率预估中，时间分析也是一个重要的因素。因此，研究游戏的叙事和基本要素时，要重视时间这个要素。</p>\n<p>另外，Tom Bissell 认为，在存在叙事要素的游戏中，都使用了两种类型的故事手法。根据Bissell的观点，一种是Framed（框架型叙事），即用过场动画和影像叙事，不允许玩家介入。</p>\n<p>另一种是“未脚本化的、由玩家决定的……的部分”。Bissell将其成为Ludo叙事（ludonarrative）。</p>\n<p>这里所使用的“ludo”只是单纯的前缀词，表示“游戏的”之意，与之前的Ludo不同。</p>\n<h2 id=\"Narreme\"><a href=\"#Narreme\" class=\"headerlink\" title=\"Narreme\"></a>Narreme</h2><p>一个像Ludo一样的基础概念——Narreme，即“构筑故事性的基础构成要素”，这一概念是1969年由尤金·多尔夫曼提出的。</p>\n<p>1974年，亨利·怀特曼进一步发展了此概念。</p>\n<p>怀特曼从叙事的角度，对广告中宣传语进行了分析研究。</p>\n<p>宣传语中会使用“不完整的语句” 之类的形式，名词和形容词、动词的使用并不鲜见。那么，宣传语是否也是叙事？</p>\n<p>如果不是，叙事和非叙事的界限又是什么？怀特曼用Narreme框架对此进行了分析，用叙事构成要素的形式做了研究。</p>\n<p>Narreme的研究现在被计算机科学研究者阿洛克·邦卡迪和罗赫略·E.卡多纳·里维拉进一步拓展。</p>\n<p>他们指出，<strong>叙事就是由Narreme连锁构成的。</strong></p>\n<h2 id=\"基本构成要素\"><a href=\"#基本构成要素\" class=\"headerlink\" title=\"基本构成要素\"></a>基本构成要素</h2><p><strong>“拥有表面性结构，能发挥所有故事性功能的最小单位”，即“故事中发挥功能的最小单位”</strong></p>\n<p>罗兰·巴特曾经论述道，叙事的最小单位是<strong>功能体</strong>。</p>\n<p>功能体分为两类，一类是作为叙事中的必要要素，起到连接作用的功能体。</p>\n<p>另一类是起补充作用、填故事空间的功能体。</p>\n<p>在影像理论中，Christian Merz 等人提出，叙事的基本结构就是通过连续拍摄得到的影像片段，即镜头。</p>\n<p>不过，David Bordwell 则对此观点提出了异议、因为影像表现中存在这样的叙事：如果在一个镜头中有多个人登场并各自进行自身的表演，需要用一些更加细致的镜头组合来表现不同人物的台词和表演。</p>\n<p>叙事就成为了镜头的核心导向。也就是说，构成叙事的基本要素不仅限于镜头等同一个单位，还应该会随着状况发生变化。</p>\n<p>在现在的影像理论中研究趋势中，David Bordwell 的主张成为了主流。</p>\n<p>那么，Narreme 在影像体验中究竟是什么？</p>\n<p>承继前述 David Bordwell 和怀德曼 的观点，可以对其做出如下解释。</p>\n<blockquote>\n<p>Narreme  是由登场人物、表情、事情、物品、台词、视觉效果、音响效果等影像要素以及这些要素的复合形式构成而成。</p>\n<p>能够使故事得到客观阐释的最低限度要素</p>\n</blockquote>\n<p>这个定义的根基中包括 David Bordwell 的一个观点，即影像体验也是一样的，是通过玩家进行阐释的。</p>\n<p>不过还要加上一个条件，那就是在游戏中，玩家是作为主体介入游戏的。因此，游戏中的叙事，是玩家理解当前的剧情，再找到推进剧情的方式的形式，即玩家来推动游戏的叙事。</p>\n<p>反过来说，只要这些故事阐释的不充分，<strong>原则上</strong>叙事在时间和空间上都无法进一步推进。</p>\n<p>也就是说，对游戏中“叙述的基本构成要素”，可以做出如下定义。</p>\n<blockquote>\n<p>向玩家阐释游戏角色、物体、空间设计、符号以及这些要素复合构成的故事性时间与空间，使得玩家能够向着下一个故事性的时间与空间推进的最低限度的要素。</p>\n</blockquote>\n<p><em>另外，刚才行文中加入了“原则上”这个表述。这是因为有些游戏设计师可能在游戏设计中以 Ludo 的形式加入了“什么也不选择/无法选择”的选择项。</em></p>\n<p>换句话说，就是在叙事过程中，</p>\n<blockquote>\n<p>加入了可以实现交互性介入，但又对玩家的输入 “无反馈” 的设计。</p>\n</blockquote>\n<p>这可以说是游戏设计师在整合 Ludo 和叙事的基础上，加入了自己的想法和理念。</p>\n<h2 id=\"《吃豆人》的-Narreme\"><a href=\"#《吃豆人》的-Narreme\" class=\"headerlink\" title=\"《吃豆人》的 Narreme\"></a>《吃豆人》的 Narreme</h2><p>至此，分别阐述了游戏的基本构成要素 Ludo 和叙事的基本构成要素 Narreme  。来分析 Narreme  在游戏中的作用。</p>\n<p>尝试以 Ludo 为基准重新分析 《Pacman》 ，《Pacman》 中最基本的Ludo，是吃掉场景中亮点和回避敌方角色的结合。</p>\n<p>《Pacman》中，以这个Ludo 为基础的同时，当角色吃掉较大的能量亮点时，就可以逆转与敌方的攻守形式，变成一种无视敌方角色，尽可能多地吃掉亮点的状态。这就是《Pacman》独特的效率预估模型。</p>\n<p>当玩家操作吃豆人时，“想象成了一个生物角色”，才可以将亮点理解为“<strong>食物</strong>（豆）”进行游戏。所以他们才会自然地产生“大亮点代表更多食物，所以能提升能量”的关联想象。</p>\n<hr>\n<ol>\n<li><p>这个是生物</p>\n</li>\n<li><p>所以会吃食物 </p>\n</li>\n<li><p>吃到较大的食物，就可以提升能量</p>\n</li>\n</ol>\n<hr>\n<p>自然地产生这种关联想象，证实玩家可以融入《Pacman》世界的重要原因之一。另外，这也成为了让过去非街机游戏玩家的女性群体接触游戏的原动力。</p>\n<p>虽然《Pacman》的角色和动作的关联并不是叙事，单玩家却可以根据角色和动作想象出“故事”。也就是说，无论是“角色”的外形还是“吃豆”的动作，可以说都让玩家容易理解 Ludo 意义的 Narreme。</p>\n<h2 id=\"在动作游戏的Narreme\"><a href=\"#在动作游戏的Narreme\" class=\"headerlink\" title=\"在动作游戏的Narreme\"></a>在动作游戏的Narreme</h2><p>书中举例《战国BASARA》、《北斗无双》两个游戏。不过我没玩过，简单说说就好了。</p>\n<p>这类游戏中，通常通过角色的动作可以看出该动作的攻击程度，角色的扮相看出装备的强弱。</p>\n<blockquote>\n<p>动作，eg：《街头霸王4》。扮相，eg：《红色警戒》中的坦克和士兵。</p>\n</blockquote>\n<p>正因二者有着这样的区别，对玩家攻击的认识也产生了如下的差异。</p>\n<ul>\n<li>高频率轻量攻击、低频率重量攻击</li>\n</ul>\n<p>这种差异是由于每个游戏的世界观不同而形成的，不过玩家却能通过游戏角色的外观、装备马上认识到这种差异。也就是说：</p>\n<blockquote>\n<p>角色的外观和装备是构成游戏整体叙事的 Narreme 之一。</p>\n</blockquote>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li><p>故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。</p>\n</li>\n<li><p>叙事是由故事和叙述构成的，讲述行为也成了分析的对象。</p>\n</li>\n<li><p>将构成游戏叙事的基本要素成为 Narreme。</p>\n</li>\n<li><p>Ludo 和 Narreme 互相影响，共同构成游戏。</p>\n</li>\n</ul>\n<p>这一章真的很枯燥，看了好多遍才慢慢理解叙事和游戏性的关系。看不下去的话就别为难自己</p>\n<blockquote>\n<p>摘自《游戏性是什么》第12章（叙事和Narreme）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>——《游戏性是什么》第12章</p>\n<h2 id=\"游戏中的叙事分析\"><a href=\"#游戏中的叙事分析\" class=\"headerlink\" title=\"游戏中的叙事分析\"></a>游戏中的叙事分析</h2><p>游戏中的叙事研究是如何展开的？<br>早在20世纪70年代中期，游戏中就有了故事性要素，时至今日，游戏中的故事性要素更是取得了飞跃的发展，同是还向多方面进一步拓展。</p>\n<p>在此背景下，诸多研究者开始致力于这个课题的研究，如：<br>丹麦游戏研究者杰斯帕·居尔，曾对叙事定义与游戏做了对照分析。他指出，游戏的叙事性，</p>\n<blockquote>\n<p>会随叙事定义的不同、对象游戏的不同而变化。</p>\n</blockquote>\n<p>而且他还指出，在分析游戏中的叙事时，还需比较故事中的时间与现实世界中的时间，并且也要考察玩游戏的时间。</p>\n<p>从Ludo与效率预估中，时间分析也是一个重要的因素。因此，研究游戏的叙事和基本要素时，要重视时间这个要素。</p>\n<p>另外，Tom Bissell 认为，在存在叙事要素的游戏中，都使用了两种类型的故事手法。根据Bissell的观点，一种是Framed（框架型叙事），即用过场动画和影像叙事，不允许玩家介入。</p>\n<p>另一种是“未脚本化的、由玩家决定的……的部分”。Bissell将其成为Ludo叙事（ludonarrative）。</p>\n<p>这里所使用的“ludo”只是单纯的前缀词，表示“游戏的”之意，与之前的Ludo不同。</p>\n<h2 id=\"Narreme\"><a href=\"#Narreme\" class=\"headerlink\" title=\"Narreme\"></a>Narreme</h2><p>一个像Ludo一样的基础概念——Narreme，即“构筑故事性的基础构成要素”，这一概念是1969年由尤金·多尔夫曼提出的。</p>\n<p>1974年，亨利·怀特曼进一步发展了此概念。</p>\n<p>怀特曼从叙事的角度，对广告中宣传语进行了分析研究。</p>\n<p>宣传语中会使用“不完整的语句” 之类的形式，名词和形容词、动词的使用并不鲜见。那么，宣传语是否也是叙事？</p>\n<p>如果不是，叙事和非叙事的界限又是什么？怀特曼用Narreme框架对此进行了分析，用叙事构成要素的形式做了研究。</p>\n<p>Narreme的研究现在被计算机科学研究者阿洛克·邦卡迪和罗赫略·E.卡多纳·里维拉进一步拓展。</p>\n<p>他们指出，<strong>叙事就是由Narreme连锁构成的。</strong></p>\n<h2 id=\"基本构成要素\"><a href=\"#基本构成要素\" class=\"headerlink\" title=\"基本构成要素\"></a>基本构成要素</h2><p><strong>“拥有表面性结构，能发挥所有故事性功能的最小单位”，即“故事中发挥功能的最小单位”</strong></p>\n<p>罗兰·巴特曾经论述道，叙事的最小单位是<strong>功能体</strong>。</p>\n<p>功能体分为两类，一类是作为叙事中的必要要素，起到连接作用的功能体。</p>\n<p>另一类是起补充作用、填故事空间的功能体。</p>\n<p>在影像理论中，Christian Merz 等人提出，叙事的基本结构就是通过连续拍摄得到的影像片段，即镜头。</p>\n<p>不过，David Bordwell 则对此观点提出了异议、因为影像表现中存在这样的叙事：如果在一个镜头中有多个人登场并各自进行自身的表演，需要用一些更加细致的镜头组合来表现不同人物的台词和表演。</p>\n<p>叙事就成为了镜头的核心导向。也就是说，构成叙事的基本要素不仅限于镜头等同一个单位，还应该会随着状况发生变化。</p>\n<p>在现在的影像理论中研究趋势中，David Bordwell 的主张成为了主流。</p>\n<p>那么，Narreme 在影像体验中究竟是什么？</p>\n<p>承继前述 David Bordwell 和怀德曼 的观点，可以对其做出如下解释。</p>\n<blockquote>\n<p>Narreme  是由登场人物、表情、事情、物品、台词、视觉效果、音响效果等影像要素以及这些要素的复合形式构成而成。</p>\n<p>能够使故事得到客观阐释的最低限度要素</p>\n</blockquote>\n<p>这个定义的根基中包括 David Bordwell 的一个观点，即影像体验也是一样的，是通过玩家进行阐释的。</p>\n<p>不过还要加上一个条件，那就是在游戏中，玩家是作为主体介入游戏的。因此，游戏中的叙事，是玩家理解当前的剧情，再找到推进剧情的方式的形式，即玩家来推动游戏的叙事。</p>\n<p>反过来说，只要这些故事阐释的不充分，<strong>原则上</strong>叙事在时间和空间上都无法进一步推进。</p>\n<p>也就是说，对游戏中“叙述的基本构成要素”，可以做出如下定义。</p>\n<blockquote>\n<p>向玩家阐释游戏角色、物体、空间设计、符号以及这些要素复合构成的故事性时间与空间，使得玩家能够向着下一个故事性的时间与空间推进的最低限度的要素。</p>\n</blockquote>\n<p><em>另外，刚才行文中加入了“原则上”这个表述。这是因为有些游戏设计师可能在游戏设计中以 Ludo 的形式加入了“什么也不选择/无法选择”的选择项。</em></p>\n<p>换句话说，就是在叙事过程中，</p>\n<blockquote>\n<p>加入了可以实现交互性介入，但又对玩家的输入 “无反馈” 的设计。</p>\n</blockquote>\n<p>这可以说是游戏设计师在整合 Ludo 和叙事的基础上，加入了自己的想法和理念。</p>\n<h2 id=\"《吃豆人》的-Narreme\"><a href=\"#《吃豆人》的-Narreme\" class=\"headerlink\" title=\"《吃豆人》的 Narreme\"></a>《吃豆人》的 Narreme</h2><p>至此，分别阐述了游戏的基本构成要素 Ludo 和叙事的基本构成要素 Narreme  。来分析 Narreme  在游戏中的作用。</p>\n<p>尝试以 Ludo 为基准重新分析 《Pacman》 ，《Pacman》 中最基本的Ludo，是吃掉场景中亮点和回避敌方角色的结合。</p>\n<p>《Pacman》中，以这个Ludo 为基础的同时，当角色吃掉较大的能量亮点时，就可以逆转与敌方的攻守形式，变成一种无视敌方角色，尽可能多地吃掉亮点的状态。这就是《Pacman》独特的效率预估模型。</p>\n<p>当玩家操作吃豆人时，“想象成了一个生物角色”，才可以将亮点理解为“<strong>食物</strong>（豆）”进行游戏。所以他们才会自然地产生“大亮点代表更多食物，所以能提升能量”的关联想象。</p>\n<hr>\n<ol>\n<li><p>这个是生物</p>\n</li>\n<li><p>所以会吃食物 </p>\n</li>\n<li><p>吃到较大的食物，就可以提升能量</p>\n</li>\n</ol>\n<hr>\n<p>自然地产生这种关联想象，证实玩家可以融入《Pacman》世界的重要原因之一。另外，这也成为了让过去非街机游戏玩家的女性群体接触游戏的原动力。</p>\n<p>虽然《Pacman》的角色和动作的关联并不是叙事，单玩家却可以根据角色和动作想象出“故事”。也就是说，无论是“角色”的外形还是“吃豆”的动作，可以说都让玩家容易理解 Ludo 意义的 Narreme。</p>\n<h2 id=\"在动作游戏的Narreme\"><a href=\"#在动作游戏的Narreme\" class=\"headerlink\" title=\"在动作游戏的Narreme\"></a>在动作游戏的Narreme</h2><p>书中举例《战国BASARA》、《北斗无双》两个游戏。不过我没玩过，简单说说就好了。</p>\n<p>这类游戏中，通常通过角色的动作可以看出该动作的攻击程度，角色的扮相看出装备的强弱。</p>\n<blockquote>\n<p>动作，eg：《街头霸王4》。扮相，eg：《红色警戒》中的坦克和士兵。</p>\n</blockquote>\n<p>正因二者有着这样的区别，对玩家攻击的认识也产生了如下的差异。</p>\n<ul>\n<li>高频率轻量攻击、低频率重量攻击</li>\n</ul>\n<p>这种差异是由于每个游戏的世界观不同而形成的，不过玩家却能通过游戏角色的外观、装备马上认识到这种差异。也就是说：</p>\n<blockquote>\n<p>角色的外观和装备是构成游戏整体叙事的 Narreme 之一。</p>\n</blockquote>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li><p>故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。</p>\n</li>\n<li><p>叙事是由故事和叙述构成的，讲述行为也成了分析的对象。</p>\n</li>\n<li><p>将构成游戏叙事的基本要素成为 Narreme。</p>\n</li>\n<li><p>Ludo 和 Narreme 互相影响，共同构成游戏。</p>\n</li>\n</ul>\n<p>这一章真的很枯燥，看了好多遍才慢慢理解叙事和游戏性的关系。看不下去的话就别为难自己</p>\n<blockquote>\n<p>摘自《游戏性是什么》第12章（叙事和Narreme）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n"},{"title":"游戏和视角","date":"2016-06-05T10:55:56.000Z","_content":"\n让我们来思考下3D游戏中很容易成为玩家压力的镜头问题。为了实现舒适的游戏环境，游戏开发者如何惨淡经营？而镜头的问题，又和玩家身体指尖存在怎样的关系？\n\n——《游戏性是什么》第5章\n\n## 视角和视觉\n\n上一章已经介绍了游戏角色是人身体的扩展部分。作为身体相关研究的第二章节，将通过游戏中必不可少的镜头问题，来研究视角的相关内容。\n\n正确区分视角和视点\n\n视角：玩家角色眼睛，镜头的位置\n\n - 视点：玩家角色或镜头所有的对象\n\n### 镜头的各种视角\n\n 回顾下上一章所提到的射击游戏的历史，在游戏刚诞生的一段时间内，被称为**固定场景**的镜头成为了主流。像 Breakout 和《太空侵略者》等，就是所谓的“单场景游戏”。这都是由于硬件的限制，无法实现场景的滚动。\n\n 随后不久，像《[铁板阵](http://baike.baidu.com/link?url=V7s3oLu3lJRVnAT_J3C2BWIfC0JnCXf8FF2ljMfc6Kju8vNdYfS3KreLLpBCtVXY858DqZftRC3LlgnQdY3-ia)》这种场景可以纵向滚动或者横向滚动的设计游戏出现了。这类游戏叫作平行场景游戏。在这类游戏中，镜头会从正上方或侧面一直追随角色的移动。\n\n 作为这种应用的例子，还存在一种位于角色斜上方的视角，叫作45度视角。\n\n 不过，当时基本没有什么人在意游戏的视角。这是由于玩家的操作和视角的移动毫无关系。\n\n### 《超级马里奥64》的视角\n\n在游戏视角方面，《超级马里奥64》是带来巨大改变的开山之作。在该作品中，玩家可以在3D世界中享受自由操作马里奥进行探索乐趣，这可以说是一部真正意义上的3D游戏，而且也是第一个将视角问题摆到开发者和玩家面前的游戏。\n\n让我们看一下游戏中的具体内容吧。作品中，玩家可以操作“马里奥”和“快乐云”两个角色。由于角色的分开使用，所以画面场景出现了各种切换。\n\n马里奥用3D摇杆操作，快乐云用C键操作（手柄右边的4个并列按钮）。也就是说玩家可以同时分别使用马里奥和快乐云两个视角\n\n进行游戏。而且在很多情况下，这两个视角的移动是正好相反的。\n\n例如当3D摇杆向右推时，马里奥就转向右方。然后镜头为了能照到马里奥的后脑勺，自动地移动到了左侧。这时的镜头移动，是为了能够让马里奥保持在画面中央。也就是说，由于镜头向左移动，电视画面中的视点才能向右侧滚动。\n\n 接下来，思考下操作镜头的情况。按住C键的右侧，快乐云就向右移动了。快乐云以马里奥为中心进行圆周运动，当镜头右移时视点则向左滚动。也就是说，同样的向右操作，视角向右移动，而视点就向左移动了。\n\n 就像这样，玩家可以同时操作马里奥和快乐云，就可以根据不同状况切换游戏视角。当玩家控制马里奥时，3D摇杆向右推，游戏画面便向右移动。反过来当控制快乐云时，玩家按右侧C键，画面就会向右移动。当然，也有不少玩家觉得这种操作相当混乱。\n\n### 《塞尔达传说：时之笛》中视角的修正方案\n\n继《超级马里奥64》之后又一部划时代作品——《塞尔达传说：时之笛》。\n\n该作品和《超级马里奥64》一样，也可以通过3D摇杆的操作改变主人公林克面向的方向。3D摇杆的操作和林克的朝向（画面的移动）是一致的。\n\n另一方面，作品中代替快乐云角色是妖精“那比”。当玩家想要注视一个特定场所时，就可以通过操作移动那比，林克的目光会随那比移动，画面就会转过去。也就是说，作品中\n\n>  通过操作视点（角色），就能让视角（镜头）发生移动。\n\n即，我们普遍认为那比担任着GUI中光标的角色。当操作那比时，玩家的视点就转移到那比身上。在作品的镜头视角系统中。镜头移动时玩家并没有意识到镜头的存在，仅仅看到玩家角色和身为视点的那比。除此之外，《塞尔达传说：时之笛》中的系统也有很多类似的改良。\n\n ## 角色、镜头、视点\n\n在玩家的视角问题上，我们可以从角色、镜头、视点这3个要素进行考察。\n\n在《超级马里奥64》中，通过操作镜头移动视点，让玩家产生了些许不协调感。而《塞达传说：时之笛》中玩家可以直接操作视点，就消除了这种不协调感。\n\n此外，在任天堂DS（NDS）平台上的《塞尔达传说：梦幻沙漏》中，所有操作都为触控笔操作。使用触控笔后，玩家不再通过按键操作林克，这就切换成操作视点的方式了。\n\n***\n\n [![](http://upload-images.jianshu.io/upload_images/1171873-a9541e80706b762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/16-1.jpg)\n\n ## 人可以自由变换视角的位置\n\n在第三人称的游戏中，镜头的位置经常被固定在游戏角色的斜后方（后视）。这种镜头多在强制滚动形式的游戏中使用，竞速游戏就是其中之一。让我们以街机体感游戏 **Rapid River **为例。\n\n玩家横跨在机体上，通过滑动船桨型的控制器对象对橡皮艇进行操作。画面上的游戏角色也会乘坐在橡皮艇上，滑动着船桨。\n这时，玩家的身体扩展到画面中游戏角色的身上，但实际上\n\n> 玩家确实是从架空的斜后方视角\n\n出发来观察整个画面的。这就好像是一种自己从自己后方进行观察丢份儿感觉。\n\n说起视角，像《超级马里奥64》这种自己可以操作视角的3D动作游戏，也能让人在进行游戏时毫无违和感。这是由于镜头与游戏角色总能面向同一个方向，视角和视点的朝向也没有太大偏离。\n\n因此，我们的大脑就能将视角从眼睛移动到别的地方去。\n\n ## 视角移动的实验\n\n让我们用自己身体做个试验，来确认视角的移动。\n\n首先，将指尖移到额头处，用一个**对自己来说比较自然的方向**，写下一个“了”字。\n\n这时，在外人眼中，字看起来像是反了的“了”。这是因为书写者会从自己眼睛的位置（视角）出发去书写一个他所能看到的“了”字。（当然，试验中也有人写出正确方向的文字，但大多数人还是写出了镜像文字来）。\n\n接下来，用指尖在自己后脑勺写出一个**对自己来说方向自然**的“了”字。这时，大多数人写出的字，对观察者来说朝向也是正确的。\n\n这个实验结果带来的启发：**将视角转移到自己身后方是一件很容易的事情**。也就是说，后视的视角移动是相对简单的。\n\n ## 大脑能够学习新的视角\n\n有些游戏中的镜头位置可以任意切换，《[GT赛车](http://baike.baidu.com/view/258671.htm)》等竞速游戏就是典型的例子。\n\n竞速游戏的玩家群体，有的喜欢驾驶员的视角（第一人称），有的则喜欢可以看到自己车辆的第三人称视角。因此这一作品中就设置了可以在第一人称视角和第三人称视角之间切换功能。\n\n实际对比游戏的两种视角，会发现而这之间在操作体感上还是存在细微差异的。不过不论是哪种视角，玩家只需短暂的试玩就可以习惯整个操作。虽然第一人称视角为真正开车时的视角，不过正如我们前边所说的，被放置后方的第三人称视角，对人来说更熟悉。\n\n第三人称视角，虽然并非游戏中担任玩家身体职务的角色（使难题在游戏中的扩展）的直接视角，但是我们的大脑却能学习到这个视角。这种现象就叫做“大脑的视角重新学习”。\n\n ## 逆转眼镜\n\n**“大脑的视角重新学习”**可以通过“逆转眼镜”实验来考察。逆转眼镜是一种特殊眼镜，可以使佩戴者视觉上的上下左右方向发生反转。实际上在右侧的物体，在逆转眼镜中为左侧。\n\n虽然这种眼镜一开始会给佩者的生活带来各种障碍，不过一周后，佩戴者就能习惯了。随后当佩戴者摘掉眼镜后，反而需要再用一段时间来适应正常的方位。\n\n佩戴逆转眼镜会给我们带来强烈的视角变化，但我们的大脑仍然能应对自如。\n\n ## 扩展身体和限制身体\n\n暂且放下“视角”的话题，先介绍下“扩展身体”和“限制身体”的相关内容。\n\n我们将游戏中玩家身体的扩展部分（游戏中玩家控制的角色）叫作**扩展身体**。当以玩家为中心时，我们使用“扩展身体”一词。\n\n反过来，当以游戏中玩家控制的角色为中心时，该角色为“玩家身体中一部分的表现”。因此，当以游戏角色为中心时，可以用“**限制身体**”一词来表现游戏中的角色。\n\n例如，《俄罗斯方块》中正在下落的方块就看作是扩展身体。这种说法是站在玩家的立场上。当站在方块的立场上，比如描述方块如何与其他游戏中的物体（比如墙壁等）等物体相互关联时，方块就是“玩家身体一部分的表现”，即限制身体。\n\n简而言之，从玩家的角度看，游戏角色是扩展身体，从游戏的角度看，游戏角色就是限制身体。区别仅在于我们是从哪个角度来看的，其实所指的对象都是一样的。\n\n ## 行走和WASD键的相似性\n\n现在，思考包括视角问题的身体感觉与用户界面之间的关系。首先，看一下以“战地”系列为代表的FPS（第一人称射击游戏）的相关操作。\n\nFPS游戏的移动操作大多类似，键盘上的W键为前进，S键为后退，A、D分别左、右移动（这种组合键叫作**WASD键**），鼠标的移动则控制视角的移动。\n\n虽然这种操作方法是FPS游戏中约定成俗的方式，不过，为什么用WASD键来控制角色行动，而用鼠标控制视角移动呢？\n\n首先我们先考虑下人类的行走动作。，通过观察可以发现，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是\n\n> 向特定方向移动重心。\n\n为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。\n\nWASD键控制下的行走又是怎样的呢？那就是“在特定时间向目标方向按下按键”。也就是说，WASD键控制模式和人的行走模式相通。因此WASD键方的操作方式容易被大家认可。\n\n ## 视点和鼠标的相似性\n\n鼠标是一种能够瞬间指定位置的设备。它和视点的移动拥有一样的特性。因此它比较适合用来完成“改变枪口朝向”等瞬间位置指定操作。\n\n在前一章所述的《塞尔达传说：梦幻沙漏》中，玩家使用触控笔指定目标地点，这种方式也和视点移动（鼠标移动）有一样的操作感。\n\n ## 和感觉相互匹配的操作\n\n看一例子——[**Oculus Rift**](http://baike.baidu.com/view/10368556.htm)。**Oculus Rift**为头戴显示器，是一种头戴式虚拟现实设备。其中内部配备了加速度传感器，能够匹配佩戴者头部运动，并在画面中呈现出来。当佩戴者低头时，游戏画面中的视角也随之向下运动。\n\n***\n\n[![Oculus Rift（图取自百度百科）](http://upload-images.jianshu.io/upload_images/1171873-1a465097c6d021fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/7e3e6709c93d70cf7fb6e7b7fbdcd100baa12b3f.jpg)\n\n***\n\n这个和人与生俱来所体验到的感觉完全一致的。\n\n因此可以说，Oculus Rift中视角移动的操作非常易于学习。在原型阶段时，Oculus Rift在游戏开发者之间就具有很高的人气了，可以预见今后还会有许多相应的软件被开发出来。\n\n在游戏开发中，\n\n> 设计易于玩家掌握的视角扩展身体\n\n是获得大多数玩家支持的重要条件。尽管大脑能够重新学习新的视角，但是我们不应该带给它过多的压力。我们有必要顾及游戏应和人类特性相匹配这一点。\n\n  ## 小结\n\n - 游戏的视角操作，需要重点考虑镜头、玩家角色和视觉三个要素。\n\n - 大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。\n\n - 在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。\n\n> 摘自《游戏性是什么》第5章（游戏和视角）喜欢这本书，\n>\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n\n","source":"_posts/文集/游戏性是什么/游戏性是什么-游戏和视觉.md","raw":"---\ntitle: 游戏和视角\ndate: 2016-06-05 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n让我们来思考下3D游戏中很容易成为玩家压力的镜头问题。为了实现舒适的游戏环境，游戏开发者如何惨淡经营？而镜头的问题，又和玩家身体指尖存在怎样的关系？\n\n——《游戏性是什么》第5章\n\n## 视角和视觉\n\n上一章已经介绍了游戏角色是人身体的扩展部分。作为身体相关研究的第二章节，将通过游戏中必不可少的镜头问题，来研究视角的相关内容。\n\n正确区分视角和视点\n\n视角：玩家角色眼睛，镜头的位置\n\n - 视点：玩家角色或镜头所有的对象\n\n### 镜头的各种视角\n\n 回顾下上一章所提到的射击游戏的历史，在游戏刚诞生的一段时间内，被称为**固定场景**的镜头成为了主流。像 Breakout 和《太空侵略者》等，就是所谓的“单场景游戏”。这都是由于硬件的限制，无法实现场景的滚动。\n\n 随后不久，像《[铁板阵](http://baike.baidu.com/link?url=V7s3oLu3lJRVnAT_J3C2BWIfC0JnCXf8FF2ljMfc6Kju8vNdYfS3KreLLpBCtVXY858DqZftRC3LlgnQdY3-ia)》这种场景可以纵向滚动或者横向滚动的设计游戏出现了。这类游戏叫作平行场景游戏。在这类游戏中，镜头会从正上方或侧面一直追随角色的移动。\n\n 作为这种应用的例子，还存在一种位于角色斜上方的视角，叫作45度视角。\n\n 不过，当时基本没有什么人在意游戏的视角。这是由于玩家的操作和视角的移动毫无关系。\n\n### 《超级马里奥64》的视角\n\n在游戏视角方面，《超级马里奥64》是带来巨大改变的开山之作。在该作品中，玩家可以在3D世界中享受自由操作马里奥进行探索乐趣，这可以说是一部真正意义上的3D游戏，而且也是第一个将视角问题摆到开发者和玩家面前的游戏。\n\n让我们看一下游戏中的具体内容吧。作品中，玩家可以操作“马里奥”和“快乐云”两个角色。由于角色的分开使用，所以画面场景出现了各种切换。\n\n马里奥用3D摇杆操作，快乐云用C键操作（手柄右边的4个并列按钮）。也就是说玩家可以同时分别使用马里奥和快乐云两个视角\n\n进行游戏。而且在很多情况下，这两个视角的移动是正好相反的。\n\n例如当3D摇杆向右推时，马里奥就转向右方。然后镜头为了能照到马里奥的后脑勺，自动地移动到了左侧。这时的镜头移动，是为了能够让马里奥保持在画面中央。也就是说，由于镜头向左移动，电视画面中的视点才能向右侧滚动。\n\n 接下来，思考下操作镜头的情况。按住C键的右侧，快乐云就向右移动了。快乐云以马里奥为中心进行圆周运动，当镜头右移时视点则向左滚动。也就是说，同样的向右操作，视角向右移动，而视点就向左移动了。\n\n 就像这样，玩家可以同时操作马里奥和快乐云，就可以根据不同状况切换游戏视角。当玩家控制马里奥时，3D摇杆向右推，游戏画面便向右移动。反过来当控制快乐云时，玩家按右侧C键，画面就会向右移动。当然，也有不少玩家觉得这种操作相当混乱。\n\n### 《塞尔达传说：时之笛》中视角的修正方案\n\n继《超级马里奥64》之后又一部划时代作品——《塞尔达传说：时之笛》。\n\n该作品和《超级马里奥64》一样，也可以通过3D摇杆的操作改变主人公林克面向的方向。3D摇杆的操作和林克的朝向（画面的移动）是一致的。\n\n另一方面，作品中代替快乐云角色是妖精“那比”。当玩家想要注视一个特定场所时，就可以通过操作移动那比，林克的目光会随那比移动，画面就会转过去。也就是说，作品中\n\n>  通过操作视点（角色），就能让视角（镜头）发生移动。\n\n即，我们普遍认为那比担任着GUI中光标的角色。当操作那比时，玩家的视点就转移到那比身上。在作品的镜头视角系统中。镜头移动时玩家并没有意识到镜头的存在，仅仅看到玩家角色和身为视点的那比。除此之外，《塞尔达传说：时之笛》中的系统也有很多类似的改良。\n\n ## 角色、镜头、视点\n\n在玩家的视角问题上，我们可以从角色、镜头、视点这3个要素进行考察。\n\n在《超级马里奥64》中，通过操作镜头移动视点，让玩家产生了些许不协调感。而《塞达传说：时之笛》中玩家可以直接操作视点，就消除了这种不协调感。\n\n此外，在任天堂DS（NDS）平台上的《塞尔达传说：梦幻沙漏》中，所有操作都为触控笔操作。使用触控笔后，玩家不再通过按键操作林克，这就切换成操作视点的方式了。\n\n***\n\n [![](http://upload-images.jianshu.io/upload_images/1171873-a9541e80706b762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/16-1.jpg)\n\n ## 人可以自由变换视角的位置\n\n在第三人称的游戏中，镜头的位置经常被固定在游戏角色的斜后方（后视）。这种镜头多在强制滚动形式的游戏中使用，竞速游戏就是其中之一。让我们以街机体感游戏 **Rapid River **为例。\n\n玩家横跨在机体上，通过滑动船桨型的控制器对象对橡皮艇进行操作。画面上的游戏角色也会乘坐在橡皮艇上，滑动着船桨。\n这时，玩家的身体扩展到画面中游戏角色的身上，但实际上\n\n> 玩家确实是从架空的斜后方视角\n\n出发来观察整个画面的。这就好像是一种自己从自己后方进行观察丢份儿感觉。\n\n说起视角，像《超级马里奥64》这种自己可以操作视角的3D动作游戏，也能让人在进行游戏时毫无违和感。这是由于镜头与游戏角色总能面向同一个方向，视角和视点的朝向也没有太大偏离。\n\n因此，我们的大脑就能将视角从眼睛移动到别的地方去。\n\n ## 视角移动的实验\n\n让我们用自己身体做个试验，来确认视角的移动。\n\n首先，将指尖移到额头处，用一个**对自己来说比较自然的方向**，写下一个“了”字。\n\n这时，在外人眼中，字看起来像是反了的“了”。这是因为书写者会从自己眼睛的位置（视角）出发去书写一个他所能看到的“了”字。（当然，试验中也有人写出正确方向的文字，但大多数人还是写出了镜像文字来）。\n\n接下来，用指尖在自己后脑勺写出一个**对自己来说方向自然**的“了”字。这时，大多数人写出的字，对观察者来说朝向也是正确的。\n\n这个实验结果带来的启发：**将视角转移到自己身后方是一件很容易的事情**。也就是说，后视的视角移动是相对简单的。\n\n ## 大脑能够学习新的视角\n\n有些游戏中的镜头位置可以任意切换，《[GT赛车](http://baike.baidu.com/view/258671.htm)》等竞速游戏就是典型的例子。\n\n竞速游戏的玩家群体，有的喜欢驾驶员的视角（第一人称），有的则喜欢可以看到自己车辆的第三人称视角。因此这一作品中就设置了可以在第一人称视角和第三人称视角之间切换功能。\n\n实际对比游戏的两种视角，会发现而这之间在操作体感上还是存在细微差异的。不过不论是哪种视角，玩家只需短暂的试玩就可以习惯整个操作。虽然第一人称视角为真正开车时的视角，不过正如我们前边所说的，被放置后方的第三人称视角，对人来说更熟悉。\n\n第三人称视角，虽然并非游戏中担任玩家身体职务的角色（使难题在游戏中的扩展）的直接视角，但是我们的大脑却能学习到这个视角。这种现象就叫做“大脑的视角重新学习”。\n\n ## 逆转眼镜\n\n**“大脑的视角重新学习”**可以通过“逆转眼镜”实验来考察。逆转眼镜是一种特殊眼镜，可以使佩戴者视觉上的上下左右方向发生反转。实际上在右侧的物体，在逆转眼镜中为左侧。\n\n虽然这种眼镜一开始会给佩者的生活带来各种障碍，不过一周后，佩戴者就能习惯了。随后当佩戴者摘掉眼镜后，反而需要再用一段时间来适应正常的方位。\n\n佩戴逆转眼镜会给我们带来强烈的视角变化，但我们的大脑仍然能应对自如。\n\n ## 扩展身体和限制身体\n\n暂且放下“视角”的话题，先介绍下“扩展身体”和“限制身体”的相关内容。\n\n我们将游戏中玩家身体的扩展部分（游戏中玩家控制的角色）叫作**扩展身体**。当以玩家为中心时，我们使用“扩展身体”一词。\n\n反过来，当以游戏中玩家控制的角色为中心时，该角色为“玩家身体中一部分的表现”。因此，当以游戏角色为中心时，可以用“**限制身体**”一词来表现游戏中的角色。\n\n例如，《俄罗斯方块》中正在下落的方块就看作是扩展身体。这种说法是站在玩家的立场上。当站在方块的立场上，比如描述方块如何与其他游戏中的物体（比如墙壁等）等物体相互关联时，方块就是“玩家身体一部分的表现”，即限制身体。\n\n简而言之，从玩家的角度看，游戏角色是扩展身体，从游戏的角度看，游戏角色就是限制身体。区别仅在于我们是从哪个角度来看的，其实所指的对象都是一样的。\n\n ## 行走和WASD键的相似性\n\n现在，思考包括视角问题的身体感觉与用户界面之间的关系。首先，看一下以“战地”系列为代表的FPS（第一人称射击游戏）的相关操作。\n\nFPS游戏的移动操作大多类似，键盘上的W键为前进，S键为后退，A、D分别左、右移动（这种组合键叫作**WASD键**），鼠标的移动则控制视角的移动。\n\n虽然这种操作方法是FPS游戏中约定成俗的方式，不过，为什么用WASD键来控制角色行动，而用鼠标控制视角移动呢？\n\n首先我们先考虑下人类的行走动作。，通过观察可以发现，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是\n\n> 向特定方向移动重心。\n\n为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。\n\nWASD键控制下的行走又是怎样的呢？那就是“在特定时间向目标方向按下按键”。也就是说，WASD键控制模式和人的行走模式相通。因此WASD键方的操作方式容易被大家认可。\n\n ## 视点和鼠标的相似性\n\n鼠标是一种能够瞬间指定位置的设备。它和视点的移动拥有一样的特性。因此它比较适合用来完成“改变枪口朝向”等瞬间位置指定操作。\n\n在前一章所述的《塞尔达传说：梦幻沙漏》中，玩家使用触控笔指定目标地点，这种方式也和视点移动（鼠标移动）有一样的操作感。\n\n ## 和感觉相互匹配的操作\n\n看一例子——[**Oculus Rift**](http://baike.baidu.com/view/10368556.htm)。**Oculus Rift**为头戴显示器，是一种头戴式虚拟现实设备。其中内部配备了加速度传感器，能够匹配佩戴者头部运动，并在画面中呈现出来。当佩戴者低头时，游戏画面中的视角也随之向下运动。\n\n***\n\n[![Oculus Rift（图取自百度百科）](http://upload-images.jianshu.io/upload_images/1171873-1a465097c6d021fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/7e3e6709c93d70cf7fb6e7b7fbdcd100baa12b3f.jpg)\n\n***\n\n这个和人与生俱来所体验到的感觉完全一致的。\n\n因此可以说，Oculus Rift中视角移动的操作非常易于学习。在原型阶段时，Oculus Rift在游戏开发者之间就具有很高的人气了，可以预见今后还会有许多相应的软件被开发出来。\n\n在游戏开发中，\n\n> 设计易于玩家掌握的视角扩展身体\n\n是获得大多数玩家支持的重要条件。尽管大脑能够重新学习新的视角，但是我们不应该带给它过多的压力。我们有必要顾及游戏应和人类特性相匹配这一点。\n\n  ## 小结\n\n - 游戏的视角操作，需要重点考虑镜头、玩家角色和视觉三个要素。\n\n - 大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。\n\n - 在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。\n\n> 摘自《游戏性是什么》第5章（游戏和视角）喜欢这本书，\n>\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n\n","slug":"文集/游戏性是什么/游戏性是什么-游戏和视觉","published":1,"updated":"2018-08-04T06:32:45.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdu0068m4cmuca53nup","content":"<p>让我们来思考下3D游戏中很容易成为玩家压力的镜头问题。为了实现舒适的游戏环境，游戏开发者如何惨淡经营？而镜头的问题，又和玩家身体指尖存在怎样的关系？</p>\n<p>——《游戏性是什么》第5章</p>\n<h2 id=\"视角和视觉\"><a href=\"#视角和视觉\" class=\"headerlink\" title=\"视角和视觉\"></a>视角和视觉</h2><p>上一章已经介绍了游戏角色是人身体的扩展部分。作为身体相关研究的第二章节，将通过游戏中必不可少的镜头问题，来研究视角的相关内容。</p>\n<p>正确区分视角和视点</p>\n<p>视角：玩家角色眼睛，镜头的位置</p>\n<ul>\n<li>视点：玩家角色或镜头所有的对象</li>\n</ul>\n<h3 id=\"镜头的各种视角\"><a href=\"#镜头的各种视角\" class=\"headerlink\" title=\"镜头的各种视角\"></a>镜头的各种视角</h3><p> 回顾下上一章所提到的射击游戏的历史，在游戏刚诞生的一段时间内，被称为<strong>固定场景</strong>的镜头成为了主流。像 Breakout 和《太空侵略者》等，就是所谓的“单场景游戏”。这都是由于硬件的限制，无法实现场景的滚动。</p>\n<p> 随后不久，像《<a href=\"http://baike.baidu.com/link?url=V7s3oLu3lJRVnAT_J3C2BWIfC0JnCXf8FF2ljMfc6Kju8vNdYfS3KreLLpBCtVXY858DqZftRC3LlgnQdY3-ia\" target=\"_blank\" rel=\"noopener\">铁板阵</a>》这种场景可以纵向滚动或者横向滚动的设计游戏出现了。这类游戏叫作平行场景游戏。在这类游戏中，镜头会从正上方或侧面一直追随角色的移动。</p>\n<p> 作为这种应用的例子，还存在一种位于角色斜上方的视角，叫作45度视角。</p>\n<p> 不过，当时基本没有什么人在意游戏的视角。这是由于玩家的操作和视角的移动毫无关系。</p>\n<h3 id=\"《超级马里奥64》的视角\"><a href=\"#《超级马里奥64》的视角\" class=\"headerlink\" title=\"《超级马里奥64》的视角\"></a>《超级马里奥64》的视角</h3><p>在游戏视角方面，《超级马里奥64》是带来巨大改变的开山之作。在该作品中，玩家可以在3D世界中享受自由操作马里奥进行探索乐趣，这可以说是一部真正意义上的3D游戏，而且也是第一个将视角问题摆到开发者和玩家面前的游戏。</p>\n<p>让我们看一下游戏中的具体内容吧。作品中，玩家可以操作“马里奥”和“快乐云”两个角色。由于角色的分开使用，所以画面场景出现了各种切换。</p>\n<p>马里奥用3D摇杆操作，快乐云用C键操作（手柄右边的4个并列按钮）。也就是说玩家可以同时分别使用马里奥和快乐云两个视角</p>\n<p>进行游戏。而且在很多情况下，这两个视角的移动是正好相反的。</p>\n<p>例如当3D摇杆向右推时，马里奥就转向右方。然后镜头为了能照到马里奥的后脑勺，自动地移动到了左侧。这时的镜头移动，是为了能够让马里奥保持在画面中央。也就是说，由于镜头向左移动，电视画面中的视点才能向右侧滚动。</p>\n<p> 接下来，思考下操作镜头的情况。按住C键的右侧，快乐云就向右移动了。快乐云以马里奥为中心进行圆周运动，当镜头右移时视点则向左滚动。也就是说，同样的向右操作，视角向右移动，而视点就向左移动了。</p>\n<p> 就像这样，玩家可以同时操作马里奥和快乐云，就可以根据不同状况切换游戏视角。当玩家控制马里奥时，3D摇杆向右推，游戏画面便向右移动。反过来当控制快乐云时，玩家按右侧C键，画面就会向右移动。当然，也有不少玩家觉得这种操作相当混乱。</p>\n<h3 id=\"《塞尔达传说：时之笛》中视角的修正方案\"><a href=\"#《塞尔达传说：时之笛》中视角的修正方案\" class=\"headerlink\" title=\"《塞尔达传说：时之笛》中视角的修正方案\"></a>《塞尔达传说：时之笛》中视角的修正方案</h3><p>继《超级马里奥64》之后又一部划时代作品——《塞尔达传说：时之笛》。</p>\n<p>该作品和《超级马里奥64》一样，也可以通过3D摇杆的操作改变主人公林克面向的方向。3D摇杆的操作和林克的朝向（画面的移动）是一致的。</p>\n<p>另一方面，作品中代替快乐云角色是妖精“那比”。当玩家想要注视一个特定场所时，就可以通过操作移动那比，林克的目光会随那比移动，画面就会转过去。也就是说，作品中</p>\n<blockquote>\n<p> 通过操作视点（角色），就能让视角（镜头）发生移动。</p>\n</blockquote>\n<p>即，我们普遍认为那比担任着GUI中光标的角色。当操作那比时，玩家的视点就转移到那比身上。在作品的镜头视角系统中。镜头移动时玩家并没有意识到镜头的存在，仅仅看到玩家角色和身为视点的那比。除此之外，《塞尔达传说：时之笛》中的系统也有很多类似的改良。</p>\n<h2 id=\"角色、镜头、视点\"><a href=\"#角色、镜头、视点\" class=\"headerlink\" title=\"角色、镜头、视点\"></a>角色、镜头、视点</h2><p>在玩家的视角问题上，我们可以从角色、镜头、视点这3个要素进行考察。</p>\n<p>在《超级马里奥64》中，通过操作镜头移动视点，让玩家产生了些许不协调感。而《塞达传说：时之笛》中玩家可以直接操作视点，就消除了这种不协调感。</p>\n<p>此外，在任天堂DS（NDS）平台上的《塞尔达传说：梦幻沙漏》中，所有操作都为触控笔操作。使用触控笔后，玩家不再通过按键操作林克，这就切换成操作视点的方式了。</p>\n<hr>\n<p> <a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/16-1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a9541e80706b762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<h2 id=\"人可以自由变换视角的位置\"><a href=\"#人可以自由变换视角的位置\" class=\"headerlink\" title=\"人可以自由变换视角的位置\"></a>人可以自由变换视角的位置</h2><p>在第三人称的游戏中，镜头的位置经常被固定在游戏角色的斜后方（后视）。这种镜头多在强制滚动形式的游戏中使用，竞速游戏就是其中之一。让我们以街机体感游戏 <strong>Rapid River </strong>为例。</p>\n<p>玩家横跨在机体上，通过滑动船桨型的控制器对象对橡皮艇进行操作。画面上的游戏角色也会乘坐在橡皮艇上，滑动着船桨。<br>这时，玩家的身体扩展到画面中游戏角色的身上，但实际上</p>\n<blockquote>\n<p>玩家确实是从架空的斜后方视角</p>\n</blockquote>\n<p>出发来观察整个画面的。这就好像是一种自己从自己后方进行观察丢份儿感觉。</p>\n<p>说起视角，像《超级马里奥64》这种自己可以操作视角的3D动作游戏，也能让人在进行游戏时毫无违和感。这是由于镜头与游戏角色总能面向同一个方向，视角和视点的朝向也没有太大偏离。</p>\n<p>因此，我们的大脑就能将视角从眼睛移动到别的地方去。</p>\n<h2 id=\"视角移动的实验\"><a href=\"#视角移动的实验\" class=\"headerlink\" title=\"视角移动的实验\"></a>视角移动的实验</h2><p>让我们用自己身体做个试验，来确认视角的移动。</p>\n<p>首先，将指尖移到额头处，用一个<strong>对自己来说比较自然的方向</strong>，写下一个“了”字。</p>\n<p>这时，在外人眼中，字看起来像是反了的“了”。这是因为书写者会从自己眼睛的位置（视角）出发去书写一个他所能看到的“了”字。（当然，试验中也有人写出正确方向的文字，但大多数人还是写出了镜像文字来）。</p>\n<p>接下来，用指尖在自己后脑勺写出一个<strong>对自己来说方向自然</strong>的“了”字。这时，大多数人写出的字，对观察者来说朝向也是正确的。</p>\n<p>这个实验结果带来的启发：<strong>将视角转移到自己身后方是一件很容易的事情</strong>。也就是说，后视的视角移动是相对简单的。</p>\n<h2 id=\"大脑能够学习新的视角\"><a href=\"#大脑能够学习新的视角\" class=\"headerlink\" title=\"大脑能够学习新的视角\"></a>大脑能够学习新的视角</h2><p>有些游戏中的镜头位置可以任意切换，《<a href=\"http://baike.baidu.com/view/258671.htm\" target=\"_blank\" rel=\"noopener\">GT赛车</a>》等竞速游戏就是典型的例子。</p>\n<p>竞速游戏的玩家群体，有的喜欢驾驶员的视角（第一人称），有的则喜欢可以看到自己车辆的第三人称视角。因此这一作品中就设置了可以在第一人称视角和第三人称视角之间切换功能。</p>\n<p>实际对比游戏的两种视角，会发现而这之间在操作体感上还是存在细微差异的。不过不论是哪种视角，玩家只需短暂的试玩就可以习惯整个操作。虽然第一人称视角为真正开车时的视角，不过正如我们前边所说的，被放置后方的第三人称视角，对人来说更熟悉。</p>\n<p>第三人称视角，虽然并非游戏中担任玩家身体职务的角色（使难题在游戏中的扩展）的直接视角，但是我们的大脑却能学习到这个视角。这种现象就叫做“大脑的视角重新学习”。</p>\n<h2 id=\"逆转眼镜\"><a href=\"#逆转眼镜\" class=\"headerlink\" title=\"逆转眼镜\"></a>逆转眼镜</h2><p><strong>“大脑的视角重新学习”</strong>可以通过“逆转眼镜”实验来考察。逆转眼镜是一种特殊眼镜，可以使佩戴者视觉上的上下左右方向发生反转。实际上在右侧的物体，在逆转眼镜中为左侧。</p>\n<p>虽然这种眼镜一开始会给佩者的生活带来各种障碍，不过一周后，佩戴者就能习惯了。随后当佩戴者摘掉眼镜后，反而需要再用一段时间来适应正常的方位。</p>\n<p>佩戴逆转眼镜会给我们带来强烈的视角变化，但我们的大脑仍然能应对自如。</p>\n<h2 id=\"扩展身体和限制身体\"><a href=\"#扩展身体和限制身体\" class=\"headerlink\" title=\"扩展身体和限制身体\"></a>扩展身体和限制身体</h2><p>暂且放下“视角”的话题，先介绍下“扩展身体”和“限制身体”的相关内容。</p>\n<p>我们将游戏中玩家身体的扩展部分（游戏中玩家控制的角色）叫作<strong>扩展身体</strong>。当以玩家为中心时，我们使用“扩展身体”一词。</p>\n<p>反过来，当以游戏中玩家控制的角色为中心时，该角色为“玩家身体中一部分的表现”。因此，当以游戏角色为中心时，可以用“<strong>限制身体</strong>”一词来表现游戏中的角色。</p>\n<p>例如，《俄罗斯方块》中正在下落的方块就看作是扩展身体。这种说法是站在玩家的立场上。当站在方块的立场上，比如描述方块如何与其他游戏中的物体（比如墙壁等）等物体相互关联时，方块就是“玩家身体一部分的表现”，即限制身体。</p>\n<p>简而言之，从玩家的角度看，游戏角色是扩展身体，从游戏的角度看，游戏角色就是限制身体。区别仅在于我们是从哪个角度来看的，其实所指的对象都是一样的。</p>\n<h2 id=\"行走和WASD键的相似性\"><a href=\"#行走和WASD键的相似性\" class=\"headerlink\" title=\"行走和WASD键的相似性\"></a>行走和WASD键的相似性</h2><p>现在，思考包括视角问题的身体感觉与用户界面之间的关系。首先，看一下以“战地”系列为代表的FPS（第一人称射击游戏）的相关操作。</p>\n<p>FPS游戏的移动操作大多类似，键盘上的W键为前进，S键为后退，A、D分别左、右移动（这种组合键叫作<strong>WASD键</strong>），鼠标的移动则控制视角的移动。</p>\n<p>虽然这种操作方法是FPS游戏中约定成俗的方式，不过，为什么用WASD键来控制角色行动，而用鼠标控制视角移动呢？</p>\n<p>首先我们先考虑下人类的行走动作。，通过观察可以发现，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是</p>\n<blockquote>\n<p>向特定方向移动重心。</p>\n</blockquote>\n<p>为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。</p>\n<p>WASD键控制下的行走又是怎样的呢？那就是“在特定时间向目标方向按下按键”。也就是说，WASD键控制模式和人的行走模式相通。因此WASD键方的操作方式容易被大家认可。</p>\n<h2 id=\"视点和鼠标的相似性\"><a href=\"#视点和鼠标的相似性\" class=\"headerlink\" title=\"视点和鼠标的相似性\"></a>视点和鼠标的相似性</h2><p>鼠标是一种能够瞬间指定位置的设备。它和视点的移动拥有一样的特性。因此它比较适合用来完成“改变枪口朝向”等瞬间位置指定操作。</p>\n<p>在前一章所述的《塞尔达传说：梦幻沙漏》中，玩家使用触控笔指定目标地点，这种方式也和视点移动（鼠标移动）有一样的操作感。</p>\n<h2 id=\"和感觉相互匹配的操作\"><a href=\"#和感觉相互匹配的操作\" class=\"headerlink\" title=\"和感觉相互匹配的操作\"></a>和感觉相互匹配的操作</h2><p>看一例子——<a href=\"http://baike.baidu.com/view/10368556.htm\" target=\"_blank\" rel=\"noopener\"><strong>Oculus Rift</strong></a>。<strong>Oculus Rift</strong>为头戴显示器，是一种头戴式虚拟现实设备。其中内部配备了加速度传感器，能够匹配佩戴者头部运动，并在画面中呈现出来。当佩戴者低头时，游戏画面中的视角也随之向下运动。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/7e3e6709c93d70cf7fb6e7b7fbdcd100baa12b3f.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1a465097c6d021fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Oculus Rift（图取自百度百科）\"></a></p>\n<hr>\n<p>这个和人与生俱来所体验到的感觉完全一致的。</p>\n<p>因此可以说，Oculus Rift中视角移动的操作非常易于学习。在原型阶段时，Oculus Rift在游戏开发者之间就具有很高的人气了，可以预见今后还会有许多相应的软件被开发出来。</p>\n<p>在游戏开发中，</p>\n<blockquote>\n<p>设计易于玩家掌握的视角扩展身体</p>\n</blockquote>\n<p>是获得大多数玩家支持的重要条件。尽管大脑能够重新学习新的视角，但是我们不应该带给它过多的压力。我们有必要顾及游戏应和人类特性相匹配这一点。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>游戏的视角操作，需要重点考虑镜头、玩家角色和视觉三个要素。</p>\n</li>\n<li><p>大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。</p>\n</li>\n<li><p>在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第5章（游戏和视角）喜欢这本书，</p>\n<p>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>让我们来思考下3D游戏中很容易成为玩家压力的镜头问题。为了实现舒适的游戏环境，游戏开发者如何惨淡经营？而镜头的问题，又和玩家身体指尖存在怎样的关系？</p>\n<p>——《游戏性是什么》第5章</p>\n<h2 id=\"视角和视觉\"><a href=\"#视角和视觉\" class=\"headerlink\" title=\"视角和视觉\"></a>视角和视觉</h2><p>上一章已经介绍了游戏角色是人身体的扩展部分。作为身体相关研究的第二章节，将通过游戏中必不可少的镜头问题，来研究视角的相关内容。</p>\n<p>正确区分视角和视点</p>\n<p>视角：玩家角色眼睛，镜头的位置</p>\n<ul>\n<li>视点：玩家角色或镜头所有的对象</li>\n</ul>\n<h3 id=\"镜头的各种视角\"><a href=\"#镜头的各种视角\" class=\"headerlink\" title=\"镜头的各种视角\"></a>镜头的各种视角</h3><p> 回顾下上一章所提到的射击游戏的历史，在游戏刚诞生的一段时间内，被称为<strong>固定场景</strong>的镜头成为了主流。像 Breakout 和《太空侵略者》等，就是所谓的“单场景游戏”。这都是由于硬件的限制，无法实现场景的滚动。</p>\n<p> 随后不久，像《<a href=\"http://baike.baidu.com/link?url=V7s3oLu3lJRVnAT_J3C2BWIfC0JnCXf8FF2ljMfc6Kju8vNdYfS3KreLLpBCtVXY858DqZftRC3LlgnQdY3-ia\" target=\"_blank\" rel=\"noopener\">铁板阵</a>》这种场景可以纵向滚动或者横向滚动的设计游戏出现了。这类游戏叫作平行场景游戏。在这类游戏中，镜头会从正上方或侧面一直追随角色的移动。</p>\n<p> 作为这种应用的例子，还存在一种位于角色斜上方的视角，叫作45度视角。</p>\n<p> 不过，当时基本没有什么人在意游戏的视角。这是由于玩家的操作和视角的移动毫无关系。</p>\n<h3 id=\"《超级马里奥64》的视角\"><a href=\"#《超级马里奥64》的视角\" class=\"headerlink\" title=\"《超级马里奥64》的视角\"></a>《超级马里奥64》的视角</h3><p>在游戏视角方面，《超级马里奥64》是带来巨大改变的开山之作。在该作品中，玩家可以在3D世界中享受自由操作马里奥进行探索乐趣，这可以说是一部真正意义上的3D游戏，而且也是第一个将视角问题摆到开发者和玩家面前的游戏。</p>\n<p>让我们看一下游戏中的具体内容吧。作品中，玩家可以操作“马里奥”和“快乐云”两个角色。由于角色的分开使用，所以画面场景出现了各种切换。</p>\n<p>马里奥用3D摇杆操作，快乐云用C键操作（手柄右边的4个并列按钮）。也就是说玩家可以同时分别使用马里奥和快乐云两个视角</p>\n<p>进行游戏。而且在很多情况下，这两个视角的移动是正好相反的。</p>\n<p>例如当3D摇杆向右推时，马里奥就转向右方。然后镜头为了能照到马里奥的后脑勺，自动地移动到了左侧。这时的镜头移动，是为了能够让马里奥保持在画面中央。也就是说，由于镜头向左移动，电视画面中的视点才能向右侧滚动。</p>\n<p> 接下来，思考下操作镜头的情况。按住C键的右侧，快乐云就向右移动了。快乐云以马里奥为中心进行圆周运动，当镜头右移时视点则向左滚动。也就是说，同样的向右操作，视角向右移动，而视点就向左移动了。</p>\n<p> 就像这样，玩家可以同时操作马里奥和快乐云，就可以根据不同状况切换游戏视角。当玩家控制马里奥时，3D摇杆向右推，游戏画面便向右移动。反过来当控制快乐云时，玩家按右侧C键，画面就会向右移动。当然，也有不少玩家觉得这种操作相当混乱。</p>\n<h3 id=\"《塞尔达传说：时之笛》中视角的修正方案\"><a href=\"#《塞尔达传说：时之笛》中视角的修正方案\" class=\"headerlink\" title=\"《塞尔达传说：时之笛》中视角的修正方案\"></a>《塞尔达传说：时之笛》中视角的修正方案</h3><p>继《超级马里奥64》之后又一部划时代作品——《塞尔达传说：时之笛》。</p>\n<p>该作品和《超级马里奥64》一样，也可以通过3D摇杆的操作改变主人公林克面向的方向。3D摇杆的操作和林克的朝向（画面的移动）是一致的。</p>\n<p>另一方面，作品中代替快乐云角色是妖精“那比”。当玩家想要注视一个特定场所时，就可以通过操作移动那比，林克的目光会随那比移动，画面就会转过去。也就是说，作品中</p>\n<blockquote>\n<p> 通过操作视点（角色），就能让视角（镜头）发生移动。</p>\n</blockquote>\n<p>即，我们普遍认为那比担任着GUI中光标的角色。当操作那比时，玩家的视点就转移到那比身上。在作品的镜头视角系统中。镜头移动时玩家并没有意识到镜头的存在，仅仅看到玩家角色和身为视点的那比。除此之外，《塞尔达传说：时之笛》中的系统也有很多类似的改良。</p>\n<h2 id=\"角色、镜头、视点\"><a href=\"#角色、镜头、视点\" class=\"headerlink\" title=\"角色、镜头、视点\"></a>角色、镜头、视点</h2><p>在玩家的视角问题上，我们可以从角色、镜头、视点这3个要素进行考察。</p>\n<p>在《超级马里奥64》中，通过操作镜头移动视点，让玩家产生了些许不协调感。而《塞达传说：时之笛》中玩家可以直接操作视点，就消除了这种不协调感。</p>\n<p>此外，在任天堂DS（NDS）平台上的《塞尔达传说：梦幻沙漏》中，所有操作都为触控笔操作。使用触控笔后，玩家不再通过按键操作林克，这就切换成操作视点的方式了。</p>\n<hr>\n<p> <a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/16-1.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a9541e80706b762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<h2 id=\"人可以自由变换视角的位置\"><a href=\"#人可以自由变换视角的位置\" class=\"headerlink\" title=\"人可以自由变换视角的位置\"></a>人可以自由变换视角的位置</h2><p>在第三人称的游戏中，镜头的位置经常被固定在游戏角色的斜后方（后视）。这种镜头多在强制滚动形式的游戏中使用，竞速游戏就是其中之一。让我们以街机体感游戏 <strong>Rapid River </strong>为例。</p>\n<p>玩家横跨在机体上，通过滑动船桨型的控制器对象对橡皮艇进行操作。画面上的游戏角色也会乘坐在橡皮艇上，滑动着船桨。<br>这时，玩家的身体扩展到画面中游戏角色的身上，但实际上</p>\n<blockquote>\n<p>玩家确实是从架空的斜后方视角</p>\n</blockquote>\n<p>出发来观察整个画面的。这就好像是一种自己从自己后方进行观察丢份儿感觉。</p>\n<p>说起视角，像《超级马里奥64》这种自己可以操作视角的3D动作游戏，也能让人在进行游戏时毫无违和感。这是由于镜头与游戏角色总能面向同一个方向，视角和视点的朝向也没有太大偏离。</p>\n<p>因此，我们的大脑就能将视角从眼睛移动到别的地方去。</p>\n<h2 id=\"视角移动的实验\"><a href=\"#视角移动的实验\" class=\"headerlink\" title=\"视角移动的实验\"></a>视角移动的实验</h2><p>让我们用自己身体做个试验，来确认视角的移动。</p>\n<p>首先，将指尖移到额头处，用一个<strong>对自己来说比较自然的方向</strong>，写下一个“了”字。</p>\n<p>这时，在外人眼中，字看起来像是反了的“了”。这是因为书写者会从自己眼睛的位置（视角）出发去书写一个他所能看到的“了”字。（当然，试验中也有人写出正确方向的文字，但大多数人还是写出了镜像文字来）。</p>\n<p>接下来，用指尖在自己后脑勺写出一个<strong>对自己来说方向自然</strong>的“了”字。这时，大多数人写出的字，对观察者来说朝向也是正确的。</p>\n<p>这个实验结果带来的启发：<strong>将视角转移到自己身后方是一件很容易的事情</strong>。也就是说，后视的视角移动是相对简单的。</p>\n<h2 id=\"大脑能够学习新的视角\"><a href=\"#大脑能够学习新的视角\" class=\"headerlink\" title=\"大脑能够学习新的视角\"></a>大脑能够学习新的视角</h2><p>有些游戏中的镜头位置可以任意切换，《<a href=\"http://baike.baidu.com/view/258671.htm\" target=\"_blank\" rel=\"noopener\">GT赛车</a>》等竞速游戏就是典型的例子。</p>\n<p>竞速游戏的玩家群体，有的喜欢驾驶员的视角（第一人称），有的则喜欢可以看到自己车辆的第三人称视角。因此这一作品中就设置了可以在第一人称视角和第三人称视角之间切换功能。</p>\n<p>实际对比游戏的两种视角，会发现而这之间在操作体感上还是存在细微差异的。不过不论是哪种视角，玩家只需短暂的试玩就可以习惯整个操作。虽然第一人称视角为真正开车时的视角，不过正如我们前边所说的，被放置后方的第三人称视角，对人来说更熟悉。</p>\n<p>第三人称视角，虽然并非游戏中担任玩家身体职务的角色（使难题在游戏中的扩展）的直接视角，但是我们的大脑却能学习到这个视角。这种现象就叫做“大脑的视角重新学习”。</p>\n<h2 id=\"逆转眼镜\"><a href=\"#逆转眼镜\" class=\"headerlink\" title=\"逆转眼镜\"></a>逆转眼镜</h2><p><strong>“大脑的视角重新学习”</strong>可以通过“逆转眼镜”实验来考察。逆转眼镜是一种特殊眼镜，可以使佩戴者视觉上的上下左右方向发生反转。实际上在右侧的物体，在逆转眼镜中为左侧。</p>\n<p>虽然这种眼镜一开始会给佩者的生活带来各种障碍，不过一周后，佩戴者就能习惯了。随后当佩戴者摘掉眼镜后，反而需要再用一段时间来适应正常的方位。</p>\n<p>佩戴逆转眼镜会给我们带来强烈的视角变化，但我们的大脑仍然能应对自如。</p>\n<h2 id=\"扩展身体和限制身体\"><a href=\"#扩展身体和限制身体\" class=\"headerlink\" title=\"扩展身体和限制身体\"></a>扩展身体和限制身体</h2><p>暂且放下“视角”的话题，先介绍下“扩展身体”和“限制身体”的相关内容。</p>\n<p>我们将游戏中玩家身体的扩展部分（游戏中玩家控制的角色）叫作<strong>扩展身体</strong>。当以玩家为中心时，我们使用“扩展身体”一词。</p>\n<p>反过来，当以游戏中玩家控制的角色为中心时，该角色为“玩家身体中一部分的表现”。因此，当以游戏角色为中心时，可以用“<strong>限制身体</strong>”一词来表现游戏中的角色。</p>\n<p>例如，《俄罗斯方块》中正在下落的方块就看作是扩展身体。这种说法是站在玩家的立场上。当站在方块的立场上，比如描述方块如何与其他游戏中的物体（比如墙壁等）等物体相互关联时，方块就是“玩家身体一部分的表现”，即限制身体。</p>\n<p>简而言之，从玩家的角度看，游戏角色是扩展身体，从游戏的角度看，游戏角色就是限制身体。区别仅在于我们是从哪个角度来看的，其实所指的对象都是一样的。</p>\n<h2 id=\"行走和WASD键的相似性\"><a href=\"#行走和WASD键的相似性\" class=\"headerlink\" title=\"行走和WASD键的相似性\"></a>行走和WASD键的相似性</h2><p>现在，思考包括视角问题的身体感觉与用户界面之间的关系。首先，看一下以“战地”系列为代表的FPS（第一人称射击游戏）的相关操作。</p>\n<p>FPS游戏的移动操作大多类似，键盘上的W键为前进，S键为后退，A、D分别左、右移动（这种组合键叫作<strong>WASD键</strong>），鼠标的移动则控制视角的移动。</p>\n<p>虽然这种操作方法是FPS游戏中约定成俗的方式，不过，为什么用WASD键来控制角色行动，而用鼠标控制视角移动呢？</p>\n<p>首先我们先考虑下人类的行走动作。，通过观察可以发现，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是</p>\n<blockquote>\n<p>向特定方向移动重心。</p>\n</blockquote>\n<p>为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。</p>\n<p>WASD键控制下的行走又是怎样的呢？那就是“在特定时间向目标方向按下按键”。也就是说，WASD键控制模式和人的行走模式相通。因此WASD键方的操作方式容易被大家认可。</p>\n<h2 id=\"视点和鼠标的相似性\"><a href=\"#视点和鼠标的相似性\" class=\"headerlink\" title=\"视点和鼠标的相似性\"></a>视点和鼠标的相似性</h2><p>鼠标是一种能够瞬间指定位置的设备。它和视点的移动拥有一样的特性。因此它比较适合用来完成“改变枪口朝向”等瞬间位置指定操作。</p>\n<p>在前一章所述的《塞尔达传说：梦幻沙漏》中，玩家使用触控笔指定目标地点，这种方式也和视点移动（鼠标移动）有一样的操作感。</p>\n<h2 id=\"和感觉相互匹配的操作\"><a href=\"#和感觉相互匹配的操作\" class=\"headerlink\" title=\"和感觉相互匹配的操作\"></a>和感觉相互匹配的操作</h2><p>看一例子——<a href=\"http://baike.baidu.com/view/10368556.htm\" target=\"_blank\" rel=\"noopener\"><strong>Oculus Rift</strong></a>。<strong>Oculus Rift</strong>为头戴显示器，是一种头戴式虚拟现实设备。其中内部配备了加速度传感器，能够匹配佩戴者头部运动，并在画面中呈现出来。当佩戴者低头时，游戏画面中的视角也随之向下运动。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/7e3e6709c93d70cf7fb6e7b7fbdcd100baa12b3f.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1a465097c6d021fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Oculus Rift（图取自百度百科）\"></a></p>\n<hr>\n<p>这个和人与生俱来所体验到的感觉完全一致的。</p>\n<p>因此可以说，Oculus Rift中视角移动的操作非常易于学习。在原型阶段时，Oculus Rift在游戏开发者之间就具有很高的人气了，可以预见今后还会有许多相应的软件被开发出来。</p>\n<p>在游戏开发中，</p>\n<blockquote>\n<p>设计易于玩家掌握的视角扩展身体</p>\n</blockquote>\n<p>是获得大多数玩家支持的重要条件。尽管大脑能够重新学习新的视角，但是我们不应该带给它过多的压力。我们有必要顾及游戏应和人类特性相匹配这一点。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>游戏的视角操作，需要重点考虑镜头、玩家角色和视觉三个要素。</p>\n</li>\n<li><p>大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。</p>\n</li>\n<li><p>在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第5章（游戏和视角）喜欢这本书，</p>\n<p>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n"},{"title":"游戏和触觉","date":"2016-06-07T10:55:56.000Z","_content":"\n\n游戏有一个特征，就是玩家通过游戏手柄来操作。那么，这种操作有着怎样的意义？为了设计出简明易懂的操作方式，究竟应该考虑到哪些问题？\n\n——《游戏性是什么》第7章\n\n\n## 继“身体”、“视角”、“世界”后的最后要素——“触觉”\n\n作为探求游戏和身体之间关系的最后一章，将从“触觉”的角度出发来研究这种关系。\n\n之所以选取“触觉”这个角度，是因为在游戏中，玩家是通过操作手柄，能动地参与到游戏世界中。\n\n随着技术的进步，游戏也变得越来越复杂。\n\n如何设计出最适合玩家的手柄操作方式，就成为了一个重要问题。\n\n这个问题不仅存在于游戏中，还存在与媒体、扩张现实等互动媒介的领域，在此将以游戏为中心对象来分析。\n\n## 游戏是“触觉媒体”\n\n以 [**Wii Fit **](http://baike.baidu.com/link?url=vVRSqHrwK6raDXVrqcn0oRttelLQUdhCk34-k4M6LAvKVpp7dKF-CPD3BJmRCGNPtZK5d4j3pMU5ETzz6VlE4K)为例。该作品中，玩家根据游戏中的提示指令作出恰当的动作，已达成目标。和通常情况下使用游戏手柄操作的游戏不同，玩家是站在专用的Wii平衡板上操作的。也就是说，玩家通过脚这一全新的身体部位来参与游戏。\n\n不了解Wii Fit 的旁观者，在不看游戏画面、只观察玩家的情况下，会怎么想？\n\n恐怕他们只会觉得玩家站在一个奇怪的板子上，不停地伸胳膊抬腿。即使向他们解释说“这个人在玩游戏”，他们恐怕也无法理解。不过让他们结合影像和声音观察玩家的话，就能理解玩家根据游戏作出动作这件事了。（不理解Wii Fit 的可以想想游戏厅里的“跳舞毯”）\n\n由此可知，以游戏为代表的交互型产品，很难和视觉、听觉、触觉脱离关系。从这个结论出发，媒体研究人——中岛诚一指出，交互媒体是“以视觉、听觉、触觉这3个维度传递信息的媒体”，即**触觉媒体**，触觉媒体可以看作是包括听觉、视觉、视听觉在内的媒体。\n***\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-ae12f3a0578261b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/1419434035.jpg)\n***\n\n回溯媒体史可知，媒体的普及源于报纸、书、杂志等**视觉媒体**。随后，收音机、电话、唱片等**听觉媒体**出现，最后进入了电视、电影、视频等**视听觉媒体**的全盛时代。而且之后还有着向游戏’媒体艺术等**触觉媒体**发展的趋势。\n\n## 触觉媒体的三要素\n\n中岛认为，触觉媒体包括以下3个要素。\n\n- 反应：大脑和大脑以外信息的循环速度。\n- 连接结构：不仅指数据间的结构，还包括与其他项目间的互联性。\n- GUI：视觉上的界面。\n\n**反应**，指的是软件的操作性，以及该操作所产生的反应。也就是能否迅速通过显示器、扬声器等输出设备，将从输入设备导入玩家的操作回馈出来。\n\n**连接构造**，指实现多样信息互连 的设计。能否迅速传递必要信息，并与大量相关信息建立互联，是评估连接构造优劣问题的重要标准。\n\n**GUI设计**，是对于人机交互媒体来说最重要的一个项目。（GUI？不解释了）\n\n## 游戏中的触觉媒体三要素\n\n触觉媒体三要素，对游戏来说也同样适用。\n\n反应迟钝会导致玩家无法尽兴。特别是在动作和格斗游戏中，反应迟钝是致命的问题。\n\n连接构造对网络游戏来说则特别重要。这是由于如果不能够对构成游戏的各种符号群流畅互联的话。\n\n玩家就无法在复杂的游戏世界中自由探索。\n\nGUI设计，是可以左右玩家能否直观地理解游戏符号意义的重要要素。\n\n如果没有适当的GUI设计，游戏就无法向玩家展示符号间的连接构造了。\n\n## 功能可供性是什么\n\n在触觉媒体的设计中，功能可供性与上述三要素同等重要。“功能可供性”，是从表示“提供”之意的“Afford”一词中再造出来的词。功能可供性由美国心理学詹姆斯·J.吉布森提出，表示人与自然间相互依存关系的相关概念。它被定义为“在学习过程中，人通过视觉来认知对象的性质和关系”。\n\n例如在椅子普及的某地区，当人们看到一排椅子、板凳、沙发等形状类似于椅子的家具，即使不用重新学习，他们也可以知道这些东西是用来坐的。即某种特定形状可以提供“坐下”的行为暗示。而且，即使是岩石等天然形成的物体，如果形式跟椅子类似的话，他们也可能会有“坐下”的认知。\n\n功能可供性，就是通过学习认知和解释某种形状，提供出这种形状所暗示“行为”的“价值”和“意义”。\n\n## 游戏中功能可供性\n\n美国认知心理学唐纳德·A，诺曼从设计者的角度，重新阐释了功能可供性的概念。他认为，优秀的设计，应该以符号明确展示对象的可供性。\n\n日本媒体制作人兼研究者***（我打不出来），在游戏中指出这一点。举两个作为游戏中功能可供性的案例。\n\n> - 在《超级马里奥兄弟》中，从一开始马里奥就面朝右侧，即使没有具体的只是，马里奥也暗示了玩家“应该向右前进”。\n> - 在《勇者斗恶龙》中，“保存”功能被冠以了“复活咒语”的名称，而且密码的位数需要用“徘句”中的“五、七、五、七、三”来设定。\n\n从如上列举的例子中可以发现，那些得到玩家支持的游戏在功能可供性方面的设计往往是非常优秀的。\n\n竞速游戏和射击游戏，比起一般的游戏手柄，适用专用手柄玩起来更有身临其境的感觉。之所以会有这种效果，也就是游戏中匹配的专用界面可以直接提供“驾驶”和“射击”等行为的缘故。\n\n游戏设计者，在手柄操作设计以及游戏世界两方面上，都必须构造易于玩家认知的功能可供性。\n\n## 输入界面的可供性\n\n第一人称视角下展开激烈动作的 **[FPS](http://baike.baidu.com/link?url=6f3RAG74yRbrWJU5LGA7SFdmSMtno6oqreGLsVTElzhQIE48umE5ts8X8rCSkBzQ2QqIA9LXpBdyPA-PZsQHcYYCYd20QJVkY_xb9hl9KZ2CP7X3NZegUwbzJpDNRPW9) **游戏，有着一段PC游戏身份发展史。\n\n最早的作品《[德军总部3D](http://baike.baidu.com/link?url=NFonxFfYLnRjrfh7NBOTp6HRzMpoBnlHTDruA0SCXvucCQPQ281iBVOtXQn6xFWeHF1dKWyPAwPUIH_bR0HXRq)》只能用键盘操作。\n\n由于游戏没有纵向视角的变动。所以空间被设计得非常狭窄，若想变动横向视角的话，用左右方向键就可以了。\n\n转动视角时，画面中央下部的玩家角色头部的眼镜，会配合视角的变化左右移动。\n\n此后，当鼠标成为了电脑的标配。\n\nFPS游戏就确立了用**WASD**键控制行走，用鼠标控制准星的操作模式。\n\n按住特定方向键的行为引发“向特定方向移动”的行为，同时操作鼠标来回移动的行为也引发了“眼睛环视四周”的行为。\n\n## 人性化的游戏操作\n\n在“触觉媒体”的应用上，最重要的是，设计要符合人的天性，比如大脑和身体之间的关系机制等性质。手握游戏手柄，头戴显示器等都会给玩家造成一定的符合，这就需要设计出能够抵消这种符合感的自然的界面。\n\n比如移动的案件操作，能否考虑设计一种无需持续按住按键，只需在转向时按一下按键的模式？实际上《[吃豆人](https://zh.wikipedia.org/wiki/%E5%90%83%E8%B1%86%E4%BA%BA)》等早期的街机游戏就采用过这种操作模式。\n\n***\n\n[![Google_Pac-Man_banner](http://upload-images.jianshu.io/upload_images/1171873-1cc10c203ef87d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/Google_Pac-Man_banner.png)\n\n***\n\n不过这并不是现在的主流，“持续按住特定方向键，控制角色向该方向移动”的操作方式，是多数游戏所采用的。\n\n## 小结：\n\n- 游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。\n\n- 玩家在进行游戏的同时，会加深对整个世界的认知。\n\n- 输入设备的操作设计，应注重可供性。\n\n\n> 摘自《游戏性是什么》第7章（游戏和触觉），部分删略，\n喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n","source":"_posts/文集/游戏性是什么/游戏性是什么-游戏和触觉.md","raw":"---\ntitle: 游戏和触觉\ndate: 2016-06-07 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n\n游戏有一个特征，就是玩家通过游戏手柄来操作。那么，这种操作有着怎样的意义？为了设计出简明易懂的操作方式，究竟应该考虑到哪些问题？\n\n——《游戏性是什么》第7章\n\n\n## 继“身体”、“视角”、“世界”后的最后要素——“触觉”\n\n作为探求游戏和身体之间关系的最后一章，将从“触觉”的角度出发来研究这种关系。\n\n之所以选取“触觉”这个角度，是因为在游戏中，玩家是通过操作手柄，能动地参与到游戏世界中。\n\n随着技术的进步，游戏也变得越来越复杂。\n\n如何设计出最适合玩家的手柄操作方式，就成为了一个重要问题。\n\n这个问题不仅存在于游戏中，还存在与媒体、扩张现实等互动媒介的领域，在此将以游戏为中心对象来分析。\n\n## 游戏是“触觉媒体”\n\n以 [**Wii Fit **](http://baike.baidu.com/link?url=vVRSqHrwK6raDXVrqcn0oRttelLQUdhCk34-k4M6LAvKVpp7dKF-CPD3BJmRCGNPtZK5d4j3pMU5ETzz6VlE4K)为例。该作品中，玩家根据游戏中的提示指令作出恰当的动作，已达成目标。和通常情况下使用游戏手柄操作的游戏不同，玩家是站在专用的Wii平衡板上操作的。也就是说，玩家通过脚这一全新的身体部位来参与游戏。\n\n不了解Wii Fit 的旁观者，在不看游戏画面、只观察玩家的情况下，会怎么想？\n\n恐怕他们只会觉得玩家站在一个奇怪的板子上，不停地伸胳膊抬腿。即使向他们解释说“这个人在玩游戏”，他们恐怕也无法理解。不过让他们结合影像和声音观察玩家的话，就能理解玩家根据游戏作出动作这件事了。（不理解Wii Fit 的可以想想游戏厅里的“跳舞毯”）\n\n由此可知，以游戏为代表的交互型产品，很难和视觉、听觉、触觉脱离关系。从这个结论出发，媒体研究人——中岛诚一指出，交互媒体是“以视觉、听觉、触觉这3个维度传递信息的媒体”，即**触觉媒体**，触觉媒体可以看作是包括听觉、视觉、视听觉在内的媒体。\n***\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-ae12f3a0578261b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/1419434035.jpg)\n***\n\n回溯媒体史可知，媒体的普及源于报纸、书、杂志等**视觉媒体**。随后，收音机、电话、唱片等**听觉媒体**出现，最后进入了电视、电影、视频等**视听觉媒体**的全盛时代。而且之后还有着向游戏’媒体艺术等**触觉媒体**发展的趋势。\n\n## 触觉媒体的三要素\n\n中岛认为，触觉媒体包括以下3个要素。\n\n- 反应：大脑和大脑以外信息的循环速度。\n- 连接结构：不仅指数据间的结构，还包括与其他项目间的互联性。\n- GUI：视觉上的界面。\n\n**反应**，指的是软件的操作性，以及该操作所产生的反应。也就是能否迅速通过显示器、扬声器等输出设备，将从输入设备导入玩家的操作回馈出来。\n\n**连接构造**，指实现多样信息互连 的设计。能否迅速传递必要信息，并与大量相关信息建立互联，是评估连接构造优劣问题的重要标准。\n\n**GUI设计**，是对于人机交互媒体来说最重要的一个项目。（GUI？不解释了）\n\n## 游戏中的触觉媒体三要素\n\n触觉媒体三要素，对游戏来说也同样适用。\n\n反应迟钝会导致玩家无法尽兴。特别是在动作和格斗游戏中，反应迟钝是致命的问题。\n\n连接构造对网络游戏来说则特别重要。这是由于如果不能够对构成游戏的各种符号群流畅互联的话。\n\n玩家就无法在复杂的游戏世界中自由探索。\n\nGUI设计，是可以左右玩家能否直观地理解游戏符号意义的重要要素。\n\n如果没有适当的GUI设计，游戏就无法向玩家展示符号间的连接构造了。\n\n## 功能可供性是什么\n\n在触觉媒体的设计中，功能可供性与上述三要素同等重要。“功能可供性”，是从表示“提供”之意的“Afford”一词中再造出来的词。功能可供性由美国心理学詹姆斯·J.吉布森提出，表示人与自然间相互依存关系的相关概念。它被定义为“在学习过程中，人通过视觉来认知对象的性质和关系”。\n\n例如在椅子普及的某地区，当人们看到一排椅子、板凳、沙发等形状类似于椅子的家具，即使不用重新学习，他们也可以知道这些东西是用来坐的。即某种特定形状可以提供“坐下”的行为暗示。而且，即使是岩石等天然形成的物体，如果形式跟椅子类似的话，他们也可能会有“坐下”的认知。\n\n功能可供性，就是通过学习认知和解释某种形状，提供出这种形状所暗示“行为”的“价值”和“意义”。\n\n## 游戏中功能可供性\n\n美国认知心理学唐纳德·A，诺曼从设计者的角度，重新阐释了功能可供性的概念。他认为，优秀的设计，应该以符号明确展示对象的可供性。\n\n日本媒体制作人兼研究者***（我打不出来），在游戏中指出这一点。举两个作为游戏中功能可供性的案例。\n\n> - 在《超级马里奥兄弟》中，从一开始马里奥就面朝右侧，即使没有具体的只是，马里奥也暗示了玩家“应该向右前进”。\n> - 在《勇者斗恶龙》中，“保存”功能被冠以了“复活咒语”的名称，而且密码的位数需要用“徘句”中的“五、七、五、七、三”来设定。\n\n从如上列举的例子中可以发现，那些得到玩家支持的游戏在功能可供性方面的设计往往是非常优秀的。\n\n竞速游戏和射击游戏，比起一般的游戏手柄，适用专用手柄玩起来更有身临其境的感觉。之所以会有这种效果，也就是游戏中匹配的专用界面可以直接提供“驾驶”和“射击”等行为的缘故。\n\n游戏设计者，在手柄操作设计以及游戏世界两方面上，都必须构造易于玩家认知的功能可供性。\n\n## 输入界面的可供性\n\n第一人称视角下展开激烈动作的 **[FPS](http://baike.baidu.com/link?url=6f3RAG74yRbrWJU5LGA7SFdmSMtno6oqreGLsVTElzhQIE48umE5ts8X8rCSkBzQ2QqIA9LXpBdyPA-PZsQHcYYCYd20QJVkY_xb9hl9KZ2CP7X3NZegUwbzJpDNRPW9) **游戏，有着一段PC游戏身份发展史。\n\n最早的作品《[德军总部3D](http://baike.baidu.com/link?url=NFonxFfYLnRjrfh7NBOTp6HRzMpoBnlHTDruA0SCXvucCQPQ281iBVOtXQn6xFWeHF1dKWyPAwPUIH_bR0HXRq)》只能用键盘操作。\n\n由于游戏没有纵向视角的变动。所以空间被设计得非常狭窄，若想变动横向视角的话，用左右方向键就可以了。\n\n转动视角时，画面中央下部的玩家角色头部的眼镜，会配合视角的变化左右移动。\n\n此后，当鼠标成为了电脑的标配。\n\nFPS游戏就确立了用**WASD**键控制行走，用鼠标控制准星的操作模式。\n\n按住特定方向键的行为引发“向特定方向移动”的行为，同时操作鼠标来回移动的行为也引发了“眼睛环视四周”的行为。\n\n## 人性化的游戏操作\n\n在“触觉媒体”的应用上，最重要的是，设计要符合人的天性，比如大脑和身体之间的关系机制等性质。手握游戏手柄，头戴显示器等都会给玩家造成一定的符合，这就需要设计出能够抵消这种符合感的自然的界面。\n\n比如移动的案件操作，能否考虑设计一种无需持续按住按键，只需在转向时按一下按键的模式？实际上《[吃豆人](https://zh.wikipedia.org/wiki/%E5%90%83%E8%B1%86%E4%BA%BA)》等早期的街机游戏就采用过这种操作模式。\n\n***\n\n[![Google_Pac-Man_banner](http://upload-images.jianshu.io/upload_images/1171873-1cc10c203ef87d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/Google_Pac-Man_banner.png)\n\n***\n\n不过这并不是现在的主流，“持续按住特定方向键，控制角色向该方向移动”的操作方式，是多数游戏所采用的。\n\n## 小结：\n\n- 游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。\n\n- 玩家在进行游戏的同时，会加深对整个世界的认知。\n\n- 输入设备的操作设计，应注重可供性。\n\n\n> 摘自《游戏性是什么》第7章（游戏和触觉），部分删略，\n喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n","slug":"文集/游戏性是什么/游戏性是什么-游戏和触觉","published":1,"updated":"2018-08-04T06:32:45.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdw006am4cm0poskg0i","content":"<p>游戏有一个特征，就是玩家通过游戏手柄来操作。那么，这种操作有着怎样的意义？为了设计出简明易懂的操作方式，究竟应该考虑到哪些问题？</p>\n<p>——《游戏性是什么》第7章</p>\n<h2 id=\"继“身体”、“视角”、“世界”后的最后要素——“触觉”\"><a href=\"#继“身体”、“视角”、“世界”后的最后要素——“触觉”\" class=\"headerlink\" title=\"继“身体”、“视角”、“世界”后的最后要素——“触觉”\"></a>继“身体”、“视角”、“世界”后的最后要素——“触觉”</h2><p>作为探求游戏和身体之间关系的最后一章，将从“触觉”的角度出发来研究这种关系。</p>\n<p>之所以选取“触觉”这个角度，是因为在游戏中，玩家是通过操作手柄，能动地参与到游戏世界中。</p>\n<p>随着技术的进步，游戏也变得越来越复杂。</p>\n<p>如何设计出最适合玩家的手柄操作方式，就成为了一个重要问题。</p>\n<p>这个问题不仅存在于游戏中，还存在与媒体、扩张现实等互动媒介的领域，在此将以游戏为中心对象来分析。</p>\n<h2 id=\"游戏是“触觉媒体”\"><a href=\"#游戏是“触觉媒体”\" class=\"headerlink\" title=\"游戏是“触觉媒体”\"></a>游戏是“触觉媒体”</h2><p>以 <a href=\"http://baike.baidu.com/link?url=vVRSqHrwK6raDXVrqcn0oRttelLQUdhCk34-k4M6LAvKVpp7dKF-CPD3BJmRCGNPtZK5d4j3pMU5ETzz6VlE4K\" target=\"_blank\" rel=\"noopener\"><strong>Wii Fit </strong></a>为例。该作品中，玩家根据游戏中的提示指令作出恰当的动作，已达成目标。和通常情况下使用游戏手柄操作的游戏不同，玩家是站在专用的Wii平衡板上操作的。也就是说，玩家通过脚这一全新的身体部位来参与游戏。</p>\n<p>不了解Wii Fit 的旁观者，在不看游戏画面、只观察玩家的情况下，会怎么想？</p>\n<p>恐怕他们只会觉得玩家站在一个奇怪的板子上，不停地伸胳膊抬腿。即使向他们解释说“这个人在玩游戏”，他们恐怕也无法理解。不过让他们结合影像和声音观察玩家的话，就能理解玩家根据游戏作出动作这件事了。（不理解Wii Fit 的可以想想游戏厅里的“跳舞毯”）</p>\n<p>由此可知，以游戏为代表的交互型产品，很难和视觉、听觉、触觉脱离关系。从这个结论出发，媒体研究人——中岛诚一指出，交互媒体是“以视觉、听觉、触觉这3个维度传递信息的媒体”，即<strong>触觉媒体</strong>，触觉媒体可以看作是包括听觉、视觉、视听觉在内的媒体。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/1419434035.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-ae12f3a0578261b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<hr>\n<p>回溯媒体史可知，媒体的普及源于报纸、书、杂志等<strong>视觉媒体</strong>。随后，收音机、电话、唱片等<strong>听觉媒体</strong>出现，最后进入了电视、电影、视频等<strong>视听觉媒体</strong>的全盛时代。而且之后还有着向游戏’媒体艺术等<strong>触觉媒体</strong>发展的趋势。</p>\n<h2 id=\"触觉媒体的三要素\"><a href=\"#触觉媒体的三要素\" class=\"headerlink\" title=\"触觉媒体的三要素\"></a>触觉媒体的三要素</h2><p>中岛认为，触觉媒体包括以下3个要素。</p>\n<ul>\n<li>反应：大脑和大脑以外信息的循环速度。</li>\n<li>连接结构：不仅指数据间的结构，还包括与其他项目间的互联性。</li>\n<li>GUI：视觉上的界面。</li>\n</ul>\n<p><strong>反应</strong>，指的是软件的操作性，以及该操作所产生的反应。也就是能否迅速通过显示器、扬声器等输出设备，将从输入设备导入玩家的操作回馈出来。</p>\n<p><strong>连接构造</strong>，指实现多样信息互连 的设计。能否迅速传递必要信息，并与大量相关信息建立互联，是评估连接构造优劣问题的重要标准。</p>\n<p><strong>GUI设计</strong>，是对于人机交互媒体来说最重要的一个项目。（GUI？不解释了）</p>\n<h2 id=\"游戏中的触觉媒体三要素\"><a href=\"#游戏中的触觉媒体三要素\" class=\"headerlink\" title=\"游戏中的触觉媒体三要素\"></a>游戏中的触觉媒体三要素</h2><p>触觉媒体三要素，对游戏来说也同样适用。</p>\n<p>反应迟钝会导致玩家无法尽兴。特别是在动作和格斗游戏中，反应迟钝是致命的问题。</p>\n<p>连接构造对网络游戏来说则特别重要。这是由于如果不能够对构成游戏的各种符号群流畅互联的话。</p>\n<p>玩家就无法在复杂的游戏世界中自由探索。</p>\n<p>GUI设计，是可以左右玩家能否直观地理解游戏符号意义的重要要素。</p>\n<p>如果没有适当的GUI设计，游戏就无法向玩家展示符号间的连接构造了。</p>\n<h2 id=\"功能可供性是什么\"><a href=\"#功能可供性是什么\" class=\"headerlink\" title=\"功能可供性是什么\"></a>功能可供性是什么</h2><p>在触觉媒体的设计中，功能可供性与上述三要素同等重要。“功能可供性”，是从表示“提供”之意的“Afford”一词中再造出来的词。功能可供性由美国心理学詹姆斯·J.吉布森提出，表示人与自然间相互依存关系的相关概念。它被定义为“在学习过程中，人通过视觉来认知对象的性质和关系”。</p>\n<p>例如在椅子普及的某地区，当人们看到一排椅子、板凳、沙发等形状类似于椅子的家具，即使不用重新学习，他们也可以知道这些东西是用来坐的。即某种特定形状可以提供“坐下”的行为暗示。而且，即使是岩石等天然形成的物体，如果形式跟椅子类似的话，他们也可能会有“坐下”的认知。</p>\n<p>功能可供性，就是通过学习认知和解释某种形状，提供出这种形状所暗示“行为”的“价值”和“意义”。</p>\n<h2 id=\"游戏中功能可供性\"><a href=\"#游戏中功能可供性\" class=\"headerlink\" title=\"游戏中功能可供性\"></a>游戏中功能可供性</h2><p>美国认知心理学唐纳德·A，诺曼从设计者的角度，重新阐释了功能可供性的概念。他认为，优秀的设计，应该以符号明确展示对象的可供性。</p>\n<p>日本媒体制作人兼研究者***（我打不出来），在游戏中指出这一点。举两个作为游戏中功能可供性的案例。</p>\n<blockquote>\n<ul>\n<li>在《超级马里奥兄弟》中，从一开始马里奥就面朝右侧，即使没有具体的只是，马里奥也暗示了玩家“应该向右前进”。</li>\n<li>在《勇者斗恶龙》中，“保存”功能被冠以了“复活咒语”的名称，而且密码的位数需要用“徘句”中的“五、七、五、七、三”来设定。</li>\n</ul>\n</blockquote>\n<p>从如上列举的例子中可以发现，那些得到玩家支持的游戏在功能可供性方面的设计往往是非常优秀的。</p>\n<p>竞速游戏和射击游戏，比起一般的游戏手柄，适用专用手柄玩起来更有身临其境的感觉。之所以会有这种效果，也就是游戏中匹配的专用界面可以直接提供“驾驶”和“射击”等行为的缘故。</p>\n<p>游戏设计者，在手柄操作设计以及游戏世界两方面上，都必须构造易于玩家认知的功能可供性。</p>\n<h2 id=\"输入界面的可供性\"><a href=\"#输入界面的可供性\" class=\"headerlink\" title=\"输入界面的可供性\"></a>输入界面的可供性</h2><p>第一人称视角下展开激烈动作的 <strong><a href=\"http://baike.baidu.com/link?url=6f3RAG74yRbrWJU5LGA7SFdmSMtno6oqreGLsVTElzhQIE48umE5ts8X8rCSkBzQ2QqIA9LXpBdyPA-PZsQHcYYCYd20QJVkY_xb9hl9KZ2CP7X3NZegUwbzJpDNRPW9\" target=\"_blank\" rel=\"noopener\">FPS</a> </strong>游戏，有着一段PC游戏身份发展史。</p>\n<p>最早的作品《<a href=\"http://baike.baidu.com/link?url=NFonxFfYLnRjrfh7NBOTp6HRzMpoBnlHTDruA0SCXvucCQPQ281iBVOtXQn6xFWeHF1dKWyPAwPUIH_bR0HXRq\" target=\"_blank\" rel=\"noopener\">德军总部3D</a>》只能用键盘操作。</p>\n<p>由于游戏没有纵向视角的变动。所以空间被设计得非常狭窄，若想变动横向视角的话，用左右方向键就可以了。</p>\n<p>转动视角时，画面中央下部的玩家角色头部的眼镜，会配合视角的变化左右移动。</p>\n<p>此后，当鼠标成为了电脑的标配。</p>\n<p>FPS游戏就确立了用<strong>WASD</strong>键控制行走，用鼠标控制准星的操作模式。</p>\n<p>按住特定方向键的行为引发“向特定方向移动”的行为，同时操作鼠标来回移动的行为也引发了“眼睛环视四周”的行为。</p>\n<h2 id=\"人性化的游戏操作\"><a href=\"#人性化的游戏操作\" class=\"headerlink\" title=\"人性化的游戏操作\"></a>人性化的游戏操作</h2><p>在“触觉媒体”的应用上，最重要的是，设计要符合人的天性，比如大脑和身体之间的关系机制等性质。手握游戏手柄，头戴显示器等都会给玩家造成一定的符合，这就需要设计出能够抵消这种符合感的自然的界面。</p>\n<p>比如移动的案件操作，能否考虑设计一种无需持续按住按键，只需在转向时按一下按键的模式？实际上《<a href=\"https://zh.wikipedia.org/wiki/%E5%90%83%E8%B1%86%E4%BA%BA\" target=\"_blank\" rel=\"noopener\">吃豆人</a>》等早期的街机游戏就采用过这种操作模式。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/Google_Pac-Man_banner.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1cc10c203ef87d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Google_Pac-Man_banner\"></a></p>\n<hr>\n<p>不过这并不是现在的主流，“持续按住特定方向键，控制角色向该方向移动”的操作方式，是多数游戏所采用的。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li><p>游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。</p>\n</li>\n<li><p>玩家在进行游戏的同时，会加深对整个世界的认知。</p>\n</li>\n<li><p>输入设备的操作设计，应注重可供性。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第7章（游戏和触觉），部分删略，<br>喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>游戏有一个特征，就是玩家通过游戏手柄来操作。那么，这种操作有着怎样的意义？为了设计出简明易懂的操作方式，究竟应该考虑到哪些问题？</p>\n<p>——《游戏性是什么》第7章</p>\n<h2 id=\"继“身体”、“视角”、“世界”后的最后要素——“触觉”\"><a href=\"#继“身体”、“视角”、“世界”后的最后要素——“触觉”\" class=\"headerlink\" title=\"继“身体”、“视角”、“世界”后的最后要素——“触觉”\"></a>继“身体”、“视角”、“世界”后的最后要素——“触觉”</h2><p>作为探求游戏和身体之间关系的最后一章，将从“触觉”的角度出发来研究这种关系。</p>\n<p>之所以选取“触觉”这个角度，是因为在游戏中，玩家是通过操作手柄，能动地参与到游戏世界中。</p>\n<p>随着技术的进步，游戏也变得越来越复杂。</p>\n<p>如何设计出最适合玩家的手柄操作方式，就成为了一个重要问题。</p>\n<p>这个问题不仅存在于游戏中，还存在与媒体、扩张现实等互动媒介的领域，在此将以游戏为中心对象来分析。</p>\n<h2 id=\"游戏是“触觉媒体”\"><a href=\"#游戏是“触觉媒体”\" class=\"headerlink\" title=\"游戏是“触觉媒体”\"></a>游戏是“触觉媒体”</h2><p>以 <a href=\"http://baike.baidu.com/link?url=vVRSqHrwK6raDXVrqcn0oRttelLQUdhCk34-k4M6LAvKVpp7dKF-CPD3BJmRCGNPtZK5d4j3pMU5ETzz6VlE4K\" target=\"_blank\" rel=\"noopener\"><strong>Wii Fit </strong></a>为例。该作品中，玩家根据游戏中的提示指令作出恰当的动作，已达成目标。和通常情况下使用游戏手柄操作的游戏不同，玩家是站在专用的Wii平衡板上操作的。也就是说，玩家通过脚这一全新的身体部位来参与游戏。</p>\n<p>不了解Wii Fit 的旁观者，在不看游戏画面、只观察玩家的情况下，会怎么想？</p>\n<p>恐怕他们只会觉得玩家站在一个奇怪的板子上，不停地伸胳膊抬腿。即使向他们解释说“这个人在玩游戏”，他们恐怕也无法理解。不过让他们结合影像和声音观察玩家的话，就能理解玩家根据游戏作出动作这件事了。（不理解Wii Fit 的可以想想游戏厅里的“跳舞毯”）</p>\n<p>由此可知，以游戏为代表的交互型产品，很难和视觉、听觉、触觉脱离关系。从这个结论出发，媒体研究人——中岛诚一指出，交互媒体是“以视觉、听觉、触觉这3个维度传递信息的媒体”，即<strong>触觉媒体</strong>，触觉媒体可以看作是包括听觉、视觉、视听觉在内的媒体。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/1419434035.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-ae12f3a0578261b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<hr>\n<p>回溯媒体史可知，媒体的普及源于报纸、书、杂志等<strong>视觉媒体</strong>。随后，收音机、电话、唱片等<strong>听觉媒体</strong>出现，最后进入了电视、电影、视频等<strong>视听觉媒体</strong>的全盛时代。而且之后还有着向游戏’媒体艺术等<strong>触觉媒体</strong>发展的趋势。</p>\n<h2 id=\"触觉媒体的三要素\"><a href=\"#触觉媒体的三要素\" class=\"headerlink\" title=\"触觉媒体的三要素\"></a>触觉媒体的三要素</h2><p>中岛认为，触觉媒体包括以下3个要素。</p>\n<ul>\n<li>反应：大脑和大脑以外信息的循环速度。</li>\n<li>连接结构：不仅指数据间的结构，还包括与其他项目间的互联性。</li>\n<li>GUI：视觉上的界面。</li>\n</ul>\n<p><strong>反应</strong>，指的是软件的操作性，以及该操作所产生的反应。也就是能否迅速通过显示器、扬声器等输出设备，将从输入设备导入玩家的操作回馈出来。</p>\n<p><strong>连接构造</strong>，指实现多样信息互连 的设计。能否迅速传递必要信息，并与大量相关信息建立互联，是评估连接构造优劣问题的重要标准。</p>\n<p><strong>GUI设计</strong>，是对于人机交互媒体来说最重要的一个项目。（GUI？不解释了）</p>\n<h2 id=\"游戏中的触觉媒体三要素\"><a href=\"#游戏中的触觉媒体三要素\" class=\"headerlink\" title=\"游戏中的触觉媒体三要素\"></a>游戏中的触觉媒体三要素</h2><p>触觉媒体三要素，对游戏来说也同样适用。</p>\n<p>反应迟钝会导致玩家无法尽兴。特别是在动作和格斗游戏中，反应迟钝是致命的问题。</p>\n<p>连接构造对网络游戏来说则特别重要。这是由于如果不能够对构成游戏的各种符号群流畅互联的话。</p>\n<p>玩家就无法在复杂的游戏世界中自由探索。</p>\n<p>GUI设计，是可以左右玩家能否直观地理解游戏符号意义的重要要素。</p>\n<p>如果没有适当的GUI设计，游戏就无法向玩家展示符号间的连接构造了。</p>\n<h2 id=\"功能可供性是什么\"><a href=\"#功能可供性是什么\" class=\"headerlink\" title=\"功能可供性是什么\"></a>功能可供性是什么</h2><p>在触觉媒体的设计中，功能可供性与上述三要素同等重要。“功能可供性”，是从表示“提供”之意的“Afford”一词中再造出来的词。功能可供性由美国心理学詹姆斯·J.吉布森提出，表示人与自然间相互依存关系的相关概念。它被定义为“在学习过程中，人通过视觉来认知对象的性质和关系”。</p>\n<p>例如在椅子普及的某地区，当人们看到一排椅子、板凳、沙发等形状类似于椅子的家具，即使不用重新学习，他们也可以知道这些东西是用来坐的。即某种特定形状可以提供“坐下”的行为暗示。而且，即使是岩石等天然形成的物体，如果形式跟椅子类似的话，他们也可能会有“坐下”的认知。</p>\n<p>功能可供性，就是通过学习认知和解释某种形状，提供出这种形状所暗示“行为”的“价值”和“意义”。</p>\n<h2 id=\"游戏中功能可供性\"><a href=\"#游戏中功能可供性\" class=\"headerlink\" title=\"游戏中功能可供性\"></a>游戏中功能可供性</h2><p>美国认知心理学唐纳德·A，诺曼从设计者的角度，重新阐释了功能可供性的概念。他认为，优秀的设计，应该以符号明确展示对象的可供性。</p>\n<p>日本媒体制作人兼研究者***（我打不出来），在游戏中指出这一点。举两个作为游戏中功能可供性的案例。</p>\n<blockquote>\n<ul>\n<li>在《超级马里奥兄弟》中，从一开始马里奥就面朝右侧，即使没有具体的只是，马里奥也暗示了玩家“应该向右前进”。</li>\n<li>在《勇者斗恶龙》中，“保存”功能被冠以了“复活咒语”的名称，而且密码的位数需要用“徘句”中的“五、七、五、七、三”来设定。</li>\n</ul>\n</blockquote>\n<p>从如上列举的例子中可以发现，那些得到玩家支持的游戏在功能可供性方面的设计往往是非常优秀的。</p>\n<p>竞速游戏和射击游戏，比起一般的游戏手柄，适用专用手柄玩起来更有身临其境的感觉。之所以会有这种效果，也就是游戏中匹配的专用界面可以直接提供“驾驶”和“射击”等行为的缘故。</p>\n<p>游戏设计者，在手柄操作设计以及游戏世界两方面上，都必须构造易于玩家认知的功能可供性。</p>\n<h2 id=\"输入界面的可供性\"><a href=\"#输入界面的可供性\" class=\"headerlink\" title=\"输入界面的可供性\"></a>输入界面的可供性</h2><p>第一人称视角下展开激烈动作的 <strong><a href=\"http://baike.baidu.com/link?url=6f3RAG74yRbrWJU5LGA7SFdmSMtno6oqreGLsVTElzhQIE48umE5ts8X8rCSkBzQ2QqIA9LXpBdyPA-PZsQHcYYCYd20QJVkY_xb9hl9KZ2CP7X3NZegUwbzJpDNRPW9\" target=\"_blank\" rel=\"noopener\">FPS</a> </strong>游戏，有着一段PC游戏身份发展史。</p>\n<p>最早的作品《<a href=\"http://baike.baidu.com/link?url=NFonxFfYLnRjrfh7NBOTp6HRzMpoBnlHTDruA0SCXvucCQPQ281iBVOtXQn6xFWeHF1dKWyPAwPUIH_bR0HXRq\" target=\"_blank\" rel=\"noopener\">德军总部3D</a>》只能用键盘操作。</p>\n<p>由于游戏没有纵向视角的变动。所以空间被设计得非常狭窄，若想变动横向视角的话，用左右方向键就可以了。</p>\n<p>转动视角时，画面中央下部的玩家角色头部的眼镜，会配合视角的变化左右移动。</p>\n<p>此后，当鼠标成为了电脑的标配。</p>\n<p>FPS游戏就确立了用<strong>WASD</strong>键控制行走，用鼠标控制准星的操作模式。</p>\n<p>按住特定方向键的行为引发“向特定方向移动”的行为，同时操作鼠标来回移动的行为也引发了“眼睛环视四周”的行为。</p>\n<h2 id=\"人性化的游戏操作\"><a href=\"#人性化的游戏操作\" class=\"headerlink\" title=\"人性化的游戏操作\"></a>人性化的游戏操作</h2><p>在“触觉媒体”的应用上，最重要的是，设计要符合人的天性，比如大脑和身体之间的关系机制等性质。手握游戏手柄，头戴显示器等都会给玩家造成一定的符合，这就需要设计出能够抵消这种符合感的自然的界面。</p>\n<p>比如移动的案件操作，能否考虑设计一种无需持续按住按键，只需在转向时按一下按键的模式？实际上《<a href=\"https://zh.wikipedia.org/wiki/%E5%90%83%E8%B1%86%E4%BA%BA\" target=\"_blank\" rel=\"noopener\">吃豆人</a>》等早期的街机游戏就采用过这种操作模式。</p>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/Google_Pac-Man_banner.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-1cc10c203ef87d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Google_Pac-Man_banner\"></a></p>\n<hr>\n<p>不过这并不是现在的主流，“持续按住特定方向键，控制角色向该方向移动”的操作方式，是多数游戏所采用的。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li><p>游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。</p>\n</li>\n<li><p>玩家在进行游戏的同时，会加深对整个世界的认知。</p>\n</li>\n<li><p>输入设备的操作设计，应注重可供性。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第7章（游戏和触觉），部分删略，<br>喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n"},{"title":"游戏的设计机制","date":"2016-06-04T10:55:56.000Z","_content":"\n游戏趣味性的本质——“游戏性”的问题。\n“游戏性”问题研究中，最重要的是之前提到的效率预估。在此，将“引导玩家进行效率预估的游戏设计机制”定义为“Ludo”，以便于对游戏性的相关内容进行研究。\n\n——《游戏性是什么》第11章\n\n#### 游戏性与Ludo\n\n“效率预估”是玩家根据自身技能，在“高风险短时间”和“低风险长时间”中做出最恰当选择的一种判断行为。\n\n引导玩家进行效率预估的游戏设计机制，可以使更多的玩家在游戏中找到恰当的难易度平衡，从而持续玩家的动机。\n\n反之，从玩家的角度来看，只有进行效率预估，才能在游戏中进入“心流”的专注状态，才会想继续玩下去。\n\n从上述内容中可以看到“游戏性”定义的模糊轮廓：\n\n> **游戏性，是为了引导玩家进行效率预估的一种设计机制。**\n\n结合之前关于身体性的相关研究，可以做出如下阐释：\n\n> **游戏性，是为了引导玩家进行效率预估的一种设计机制，以便于玩家通过实际的身体 / 限制身体认知目标世界，达成自己所设定的目标。**\n\n将这种设计机制成为“Ludo”，这个名称源于拉丁语，“Ludus”，本意为“游戏，玩笑”。\n\n很多游戏都是有多个Ludo组成的。多个Ludo相互结合构造出的平衡，会影响到每一个Ludo的平衡以及游戏的整体的平衡。个体Ludo的平衡可以使用跷跷板来表示，多个Ludo间的相互作用和平衡，可以想象，蕴含多级连杆力学平衡的育儿玩具“挂铃”。\n这种“挂铃”是复合Ludo的示意图，称为Ludo结构图。\n\n#### Ludo结构的画法\n\n![Ludo.jpg--画图真是不是我强项](http://upload-images.jianshu.io/upload_images/1171873-a4aa6bb7d7161757.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n游戏设计师需要将想要玩家发现的效率预估名称以标题的形式写在Ludo的最上部分。在曲线最下方写上玩家执行该Ludo所需要的时间。\n接下来Ludo结构图，大部分游戏是由多个Ludo构成的。将这种结构用示意图来表示就是Ludo结构图。\n\n![Ludo结构图.jpg--凑合这看吧](http://upload-images.jianshu.io/upload_images/1171873-043d1515ceb05f25.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这种包含关系的复杂结构中，最外侧的Ludo叫做“母Ludo”，内侧的Ludo叫做“子Ludo”。最外侧的“母Ludo”是达成目标所需时间最大的部分。\n\n#### Ludo的有效性\n\n简述Ludo的意义，Ludo是游戏设计师在思考游戏“难易度平衡模型”时的“设计图”。正因如此，它在游戏制作中会发挥其有效性。***电影，动漫的脚本与最终作品往往有些差异，Ludo和最终游戏的呈现（画面构成和场景构成）也不一定是一致的。***\n\n当分析游戏作品时，将按照如下顺序进行：\n\n1. 分析者玩目标游戏\n2. 列举并分析自己从中所获得的效率预估\n3. 用Ludo的形式记述效率预估的引导形式\n\n而游戏设计则依照：\n\n1. 以Ludo的形式记述引导玩家的效率预估\n2. 在Ludo的基础上，开发制作游戏\n3. 玩家去玩目标游戏\n\n游戏设计相当于“撰写脚本、依据脚本制作电影”，游戏分析则相当于“观看电影，依照电影分析脚本”。两者的顺序正好相反。\n\n#### 超级马里奥的跳跃\n\neg：超级玛丽当中最基本的动作：跳\n\n![SuperMarioLudo.jpg--一回生二回熟，这张画得比较快](http://upload-images.jianshu.io/upload_images/1171873-10319ee9fe5ed4af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里值得注意，Ludo引导的“效率预估”应由玩家自主发现。游戏设计师不能将目标和解决方案直接设计出来。但“Ludo”中要规划出具体方案，供玩家在效率预估是选择。\n\n#### 引导效率预估的机制设计——Ludo\n\n![公主二重唱--我儿时玩的打架游戏--为了截图专门下载来玩](http://upload-images.jianshu.io/upload_images/1171873-dbc6ca5ba372a566.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n像这样的画面，对老玩家而言一个再简单不过的局面，但对没有游戏经验的人，会首先进行可行性尝试。不过，光是看到“来回移动”就应该能够引发效率预估了，大多数人应该是如下：\n\n- 如果在间隙缩小时跳跃，应该能顺利通过（风险低）。但是必须等到恰当的时机。\n- 在间隙扩大时跳跃可能会失败（风险高），不过却能迅速行动（时间成本低）。\n\n当然，仅这样，还不能引发效率预估，还需要另外的条件，即难易度对于玩家技能而言，已经上升到“危机”层次，这样才能引导玩家进行效率预估。当玩家被迫在风险和时间成本之间做出权衡时，就不得不做出一个对自己最恰当的决定。\n\n不过当遵从自我决定的行为结果为“成功”时，就能够得到满足感、爽快感等直接关系到游戏趣味性的感觉。\n\n#### Ludo唤起其他Ludo\n\n就是一个Ludo引导另外一个Ludo。游戏设计师通过灵活运用Ludo的性质设计出作用空间，就可以引导玩家进行效率预估。\n\n#### 设计师料想之外的效率预估\n\n游戏中具体设计的限制身体作用空间，会引导玩家进行效率预估。将这一过程称为Ludo。大多数玩家都在游戏设计师设定好的Ludo中找到问题的解决方案，推进游戏的进展。不过，当Ludo的引导不是特别恰当时，有时也会出现玩家技能的习得进展不按照游戏设计师预定的效率预估进行，引发了设计之外的效率预估。\n\n例如，玩家为了验证“怎么才能最快死亡”的效率预估等就是这个情况。\n\n这对于游戏设计师来说，是意料之外的游戏方式。不过，这也可以说是游戏本来就具备的游戏本质吧。\n\nLudo并不仅是引导玩家进行效率预估的机制。很多游戏中，玩家在自己尝试效率预估时，会发现一些独立的（游戏设计师料想之外的）效率预估机制。\n\n因此，游戏中具有这样的一种可能性，即：\n\n> **玩家发现游戏设计师料想之外的效率预估机制**\n\n#### 引导效率预估的Ludo中诞生出新游戏\n\nLudo和效率预估之间有着密不可分的关系。换句话说，游戏就是\n\n**一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。**\n\n制作这种环境的行为就是游戏设计。\n\n随着分析的深入，得出游戏设计的核心重点，即：\n\n> **在限制身体和作用空间的何处，设置“引导玩家进行效率预估的机制==Ludo”**\n\n关于游戏之外的内容，如果能够在这一点上下功夫设计的话，和能够成为具有“游戏性”的作品。虽然不知道是否可以将这样的内容称为“游戏”，但这些具有“游戏性”设计的内容却是能像游戏一样，给人带来持久的乐趣。\n\n> #### 小结：\n\n- 游戏性，是为了引导玩家进行效率预估的一种设计机制。\n- 引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。\n- Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。\n- Ludo同样可以应用在游戏之外的内容中。\n\n------\n\n**游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。**加上游戏是**符号化的现实世界**。在初步了解专注游戏的原因和游戏性后，开始理解人接触游戏直到沉迷于游戏这个过程。\n\n![](http://upload-images.jianshu.io/upload_images/1171873-5ea07a77408ae2de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 摘自《游戏性是什么》第11章（游戏设计的机制）喜欢这本书，\n>\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。","source":"_posts/文集/游戏性是什么/游戏性是什么-游戏的设计.md","raw":"---\ntitle: 游戏的设计机制\ndate: 2016-06-04 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n游戏趣味性的本质——“游戏性”的问题。\n“游戏性”问题研究中，最重要的是之前提到的效率预估。在此，将“引导玩家进行效率预估的游戏设计机制”定义为“Ludo”，以便于对游戏性的相关内容进行研究。\n\n——《游戏性是什么》第11章\n\n#### 游戏性与Ludo\n\n“效率预估”是玩家根据自身技能，在“高风险短时间”和“低风险长时间”中做出最恰当选择的一种判断行为。\n\n引导玩家进行效率预估的游戏设计机制，可以使更多的玩家在游戏中找到恰当的难易度平衡，从而持续玩家的动机。\n\n反之，从玩家的角度来看，只有进行效率预估，才能在游戏中进入“心流”的专注状态，才会想继续玩下去。\n\n从上述内容中可以看到“游戏性”定义的模糊轮廓：\n\n> **游戏性，是为了引导玩家进行效率预估的一种设计机制。**\n\n结合之前关于身体性的相关研究，可以做出如下阐释：\n\n> **游戏性，是为了引导玩家进行效率预估的一种设计机制，以便于玩家通过实际的身体 / 限制身体认知目标世界，达成自己所设定的目标。**\n\n将这种设计机制成为“Ludo”，这个名称源于拉丁语，“Ludus”，本意为“游戏，玩笑”。\n\n很多游戏都是有多个Ludo组成的。多个Ludo相互结合构造出的平衡，会影响到每一个Ludo的平衡以及游戏的整体的平衡。个体Ludo的平衡可以使用跷跷板来表示，多个Ludo间的相互作用和平衡，可以想象，蕴含多级连杆力学平衡的育儿玩具“挂铃”。\n这种“挂铃”是复合Ludo的示意图，称为Ludo结构图。\n\n#### Ludo结构的画法\n\n![Ludo.jpg--画图真是不是我强项](http://upload-images.jianshu.io/upload_images/1171873-a4aa6bb7d7161757.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n游戏设计师需要将想要玩家发现的效率预估名称以标题的形式写在Ludo的最上部分。在曲线最下方写上玩家执行该Ludo所需要的时间。\n接下来Ludo结构图，大部分游戏是由多个Ludo构成的。将这种结构用示意图来表示就是Ludo结构图。\n\n![Ludo结构图.jpg--凑合这看吧](http://upload-images.jianshu.io/upload_images/1171873-043d1515ceb05f25.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这种包含关系的复杂结构中，最外侧的Ludo叫做“母Ludo”，内侧的Ludo叫做“子Ludo”。最外侧的“母Ludo”是达成目标所需时间最大的部分。\n\n#### Ludo的有效性\n\n简述Ludo的意义，Ludo是游戏设计师在思考游戏“难易度平衡模型”时的“设计图”。正因如此，它在游戏制作中会发挥其有效性。***电影，动漫的脚本与最终作品往往有些差异，Ludo和最终游戏的呈现（画面构成和场景构成）也不一定是一致的。***\n\n当分析游戏作品时，将按照如下顺序进行：\n\n1. 分析者玩目标游戏\n2. 列举并分析自己从中所获得的效率预估\n3. 用Ludo的形式记述效率预估的引导形式\n\n而游戏设计则依照：\n\n1. 以Ludo的形式记述引导玩家的效率预估\n2. 在Ludo的基础上，开发制作游戏\n3. 玩家去玩目标游戏\n\n游戏设计相当于“撰写脚本、依据脚本制作电影”，游戏分析则相当于“观看电影，依照电影分析脚本”。两者的顺序正好相反。\n\n#### 超级马里奥的跳跃\n\neg：超级玛丽当中最基本的动作：跳\n\n![SuperMarioLudo.jpg--一回生二回熟，这张画得比较快](http://upload-images.jianshu.io/upload_images/1171873-10319ee9fe5ed4af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里值得注意，Ludo引导的“效率预估”应由玩家自主发现。游戏设计师不能将目标和解决方案直接设计出来。但“Ludo”中要规划出具体方案，供玩家在效率预估是选择。\n\n#### 引导效率预估的机制设计——Ludo\n\n![公主二重唱--我儿时玩的打架游戏--为了截图专门下载来玩](http://upload-images.jianshu.io/upload_images/1171873-dbc6ca5ba372a566.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n像这样的画面，对老玩家而言一个再简单不过的局面，但对没有游戏经验的人，会首先进行可行性尝试。不过，光是看到“来回移动”就应该能够引发效率预估了，大多数人应该是如下：\n\n- 如果在间隙缩小时跳跃，应该能顺利通过（风险低）。但是必须等到恰当的时机。\n- 在间隙扩大时跳跃可能会失败（风险高），不过却能迅速行动（时间成本低）。\n\n当然，仅这样，还不能引发效率预估，还需要另外的条件，即难易度对于玩家技能而言，已经上升到“危机”层次，这样才能引导玩家进行效率预估。当玩家被迫在风险和时间成本之间做出权衡时，就不得不做出一个对自己最恰当的决定。\n\n不过当遵从自我决定的行为结果为“成功”时，就能够得到满足感、爽快感等直接关系到游戏趣味性的感觉。\n\n#### Ludo唤起其他Ludo\n\n就是一个Ludo引导另外一个Ludo。游戏设计师通过灵活运用Ludo的性质设计出作用空间，就可以引导玩家进行效率预估。\n\n#### 设计师料想之外的效率预估\n\n游戏中具体设计的限制身体作用空间，会引导玩家进行效率预估。将这一过程称为Ludo。大多数玩家都在游戏设计师设定好的Ludo中找到问题的解决方案，推进游戏的进展。不过，当Ludo的引导不是特别恰当时，有时也会出现玩家技能的习得进展不按照游戏设计师预定的效率预估进行，引发了设计之外的效率预估。\n\n例如，玩家为了验证“怎么才能最快死亡”的效率预估等就是这个情况。\n\n这对于游戏设计师来说，是意料之外的游戏方式。不过，这也可以说是游戏本来就具备的游戏本质吧。\n\nLudo并不仅是引导玩家进行效率预估的机制。很多游戏中，玩家在自己尝试效率预估时，会发现一些独立的（游戏设计师料想之外的）效率预估机制。\n\n因此，游戏中具有这样的一种可能性，即：\n\n> **玩家发现游戏设计师料想之外的效率预估机制**\n\n#### 引导效率预估的Ludo中诞生出新游戏\n\nLudo和效率预估之间有着密不可分的关系。换句话说，游戏就是\n\n**一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。**\n\n制作这种环境的行为就是游戏设计。\n\n随着分析的深入，得出游戏设计的核心重点，即：\n\n> **在限制身体和作用空间的何处，设置“引导玩家进行效率预估的机制==Ludo”**\n\n关于游戏之外的内容，如果能够在这一点上下功夫设计的话，和能够成为具有“游戏性”的作品。虽然不知道是否可以将这样的内容称为“游戏”，但这些具有“游戏性”设计的内容却是能像游戏一样，给人带来持久的乐趣。\n\n> #### 小结：\n\n- 游戏性，是为了引导玩家进行效率预估的一种设计机制。\n- 引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。\n- Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。\n- Ludo同样可以应用在游戏之外的内容中。\n\n------\n\n**游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。**加上游戏是**符号化的现实世界**。在初步了解专注游戏的原因和游戏性后，开始理解人接触游戏直到沉迷于游戏这个过程。\n\n![](http://upload-images.jianshu.io/upload_images/1171873-5ea07a77408ae2de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 摘自《游戏性是什么》第11章（游戏设计的机制）喜欢这本书，\n>\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。","slug":"文集/游戏性是什么/游戏性是什么-游戏的设计","published":1,"updated":"2018-08-04T06:32:45.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkcdz006em4cmj5pyqnw3","content":"<p>游戏趣味性的本质——“游戏性”的问题。<br>“游戏性”问题研究中，最重要的是之前提到的效率预估。在此，将“引导玩家进行效率预估的游戏设计机制”定义为“Ludo”，以便于对游戏性的相关内容进行研究。</p>\n<p>——《游戏性是什么》第11章</p>\n<h4 id=\"游戏性与Ludo\"><a href=\"#游戏性与Ludo\" class=\"headerlink\" title=\"游戏性与Ludo\"></a>游戏性与Ludo</h4><p>“效率预估”是玩家根据自身技能，在“高风险短时间”和“低风险长时间”中做出最恰当选择的一种判断行为。</p>\n<p>引导玩家进行效率预估的游戏设计机制，可以使更多的玩家在游戏中找到恰当的难易度平衡，从而持续玩家的动机。</p>\n<p>反之，从玩家的角度来看，只有进行效率预估，才能在游戏中进入“心流”的专注状态，才会想继续玩下去。</p>\n<p>从上述内容中可以看到“游戏性”定义的模糊轮廓：</p>\n<blockquote>\n<p><strong>游戏性，是为了引导玩家进行效率预估的一种设计机制。</strong></p>\n</blockquote>\n<p>结合之前关于身体性的相关研究，可以做出如下阐释：</p>\n<blockquote>\n<p><strong>游戏性，是为了引导玩家进行效率预估的一种设计机制，以便于玩家通过实际的身体 / 限制身体认知目标世界，达成自己所设定的目标。</strong></p>\n</blockquote>\n<p>将这种设计机制成为“Ludo”，这个名称源于拉丁语，“Ludus”，本意为“游戏，玩笑”。</p>\n<p>很多游戏都是有多个Ludo组成的。多个Ludo相互结合构造出的平衡，会影响到每一个Ludo的平衡以及游戏的整体的平衡。个体Ludo的平衡可以使用跷跷板来表示，多个Ludo间的相互作用和平衡，可以想象，蕴含多级连杆力学平衡的育儿玩具“挂铃”。<br>这种“挂铃”是复合Ludo的示意图，称为Ludo结构图。</p>\n<h4 id=\"Ludo结构的画法\"><a href=\"#Ludo结构的画法\" class=\"headerlink\" title=\"Ludo结构的画法\"></a>Ludo结构的画法</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a4aa6bb7d7161757.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Ludo.jpg--画图真是不是我强项\"></p>\n<p>游戏设计师需要将想要玩家发现的效率预估名称以标题的形式写在Ludo的最上部分。在曲线最下方写上玩家执行该Ludo所需要的时间。<br>接下来Ludo结构图，大部分游戏是由多个Ludo构成的。将这种结构用示意图来表示就是Ludo结构图。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-043d1515ceb05f25.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Ludo结构图.jpg--凑合这看吧\"></p>\n<p>这种包含关系的复杂结构中，最外侧的Ludo叫做“母Ludo”，内侧的Ludo叫做“子Ludo”。最外侧的“母Ludo”是达成目标所需时间最大的部分。</p>\n<h4 id=\"Ludo的有效性\"><a href=\"#Ludo的有效性\" class=\"headerlink\" title=\"Ludo的有效性\"></a>Ludo的有效性</h4><p>简述Ludo的意义，Ludo是游戏设计师在思考游戏“难易度平衡模型”时的“设计图”。正因如此，它在游戏制作中会发挥其有效性。<strong><em>电影，动漫的脚本与最终作品往往有些差异，Ludo和最终游戏的呈现（画面构成和场景构成）也不一定是一致的。</em></strong></p>\n<p>当分析游戏作品时，将按照如下顺序进行：</p>\n<ol>\n<li>分析者玩目标游戏</li>\n<li>列举并分析自己从中所获得的效率预估</li>\n<li>用Ludo的形式记述效率预估的引导形式</li>\n</ol>\n<p>而游戏设计则依照：</p>\n<ol>\n<li>以Ludo的形式记述引导玩家的效率预估</li>\n<li>在Ludo的基础上，开发制作游戏</li>\n<li>玩家去玩目标游戏</li>\n</ol>\n<p>游戏设计相当于“撰写脚本、依据脚本制作电影”，游戏分析则相当于“观看电影，依照电影分析脚本”。两者的顺序正好相反。</p>\n<h4 id=\"超级马里奥的跳跃\"><a href=\"#超级马里奥的跳跃\" class=\"headerlink\" title=\"超级马里奥的跳跃\"></a>超级马里奥的跳跃</h4><p>eg：超级玛丽当中最基本的动作：跳</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-10319ee9fe5ed4af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"SuperMarioLudo.jpg--一回生二回熟，这张画得比较快\"></p>\n<p>这里值得注意，Ludo引导的“效率预估”应由玩家自主发现。游戏设计师不能将目标和解决方案直接设计出来。但“Ludo”中要规划出具体方案，供玩家在效率预估是选择。</p>\n<h4 id=\"引导效率预估的机制设计——Ludo\"><a href=\"#引导效率预估的机制设计——Ludo\" class=\"headerlink\" title=\"引导效率预估的机制设计——Ludo\"></a>引导效率预估的机制设计——Ludo</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-dbc6ca5ba372a566.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"公主二重唱--我儿时玩的打架游戏--为了截图专门下载来玩\"></p>\n<p>像这样的画面，对老玩家而言一个再简单不过的局面，但对没有游戏经验的人，会首先进行可行性尝试。不过，光是看到“来回移动”就应该能够引发效率预估了，大多数人应该是如下：</p>\n<ul>\n<li>如果在间隙缩小时跳跃，应该能顺利通过（风险低）。但是必须等到恰当的时机。</li>\n<li>在间隙扩大时跳跃可能会失败（风险高），不过却能迅速行动（时间成本低）。</li>\n</ul>\n<p>当然，仅这样，还不能引发效率预估，还需要另外的条件，即难易度对于玩家技能而言，已经上升到“危机”层次，这样才能引导玩家进行效率预估。当玩家被迫在风险和时间成本之间做出权衡时，就不得不做出一个对自己最恰当的决定。</p>\n<p>不过当遵从自我决定的行为结果为“成功”时，就能够得到满足感、爽快感等直接关系到游戏趣味性的感觉。</p>\n<h4 id=\"Ludo唤起其他Ludo\"><a href=\"#Ludo唤起其他Ludo\" class=\"headerlink\" title=\"Ludo唤起其他Ludo\"></a>Ludo唤起其他Ludo</h4><p>就是一个Ludo引导另外一个Ludo。游戏设计师通过灵活运用Ludo的性质设计出作用空间，就可以引导玩家进行效率预估。</p>\n<h4 id=\"设计师料想之外的效率预估\"><a href=\"#设计师料想之外的效率预估\" class=\"headerlink\" title=\"设计师料想之外的效率预估\"></a>设计师料想之外的效率预估</h4><p>游戏中具体设计的限制身体作用空间，会引导玩家进行效率预估。将这一过程称为Ludo。大多数玩家都在游戏设计师设定好的Ludo中找到问题的解决方案，推进游戏的进展。不过，当Ludo的引导不是特别恰当时，有时也会出现玩家技能的习得进展不按照游戏设计师预定的效率预估进行，引发了设计之外的效率预估。</p>\n<p>例如，玩家为了验证“怎么才能最快死亡”的效率预估等就是这个情况。</p>\n<p>这对于游戏设计师来说，是意料之外的游戏方式。不过，这也可以说是游戏本来就具备的游戏本质吧。</p>\n<p>Ludo并不仅是引导玩家进行效率预估的机制。很多游戏中，玩家在自己尝试效率预估时，会发现一些独立的（游戏设计师料想之外的）效率预估机制。</p>\n<p>因此，游戏中具有这样的一种可能性，即：</p>\n<blockquote>\n<p><strong>玩家发现游戏设计师料想之外的效率预估机制</strong></p>\n</blockquote>\n<h4 id=\"引导效率预估的Ludo中诞生出新游戏\"><a href=\"#引导效率预估的Ludo中诞生出新游戏\" class=\"headerlink\" title=\"引导效率预估的Ludo中诞生出新游戏\"></a>引导效率预估的Ludo中诞生出新游戏</h4><p>Ludo和效率预估之间有着密不可分的关系。换句话说，游戏就是</p>\n<p><strong>一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。</strong></p>\n<p>制作这种环境的行为就是游戏设计。</p>\n<p>随着分析的深入，得出游戏设计的核心重点，即：</p>\n<blockquote>\n<p><strong>在限制身体和作用空间的何处，设置“引导玩家进行效率预估的机制==Ludo”</strong></p>\n</blockquote>\n<p>关于游戏之外的内容，如果能够在这一点上下功夫设计的话，和能够成为具有“游戏性”的作品。虽然不知道是否可以将这样的内容称为“游戏”，但这些具有“游戏性”设计的内容却是能像游戏一样，给人带来持久的乐趣。</p>\n<blockquote>\n<h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4></blockquote>\n<ul>\n<li>游戏性，是为了引导玩家进行效率预估的一种设计机制。</li>\n<li>引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。</li>\n<li>Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。</li>\n<li>Ludo同样可以应用在游戏之外的内容中。</li>\n</ul>\n<hr>\n<p><strong>游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。</strong>加上游戏是<strong>符号化的现实世界</strong>。在初步了解专注游戏的原因和游戏性后，开始理解人接触游戏直到沉迷于游戏这个过程。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5ea07a77408ae2de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>摘自《游戏性是什么》第11章（游戏设计的机制）喜欢这本书，</p>\n<p>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>游戏趣味性的本质——“游戏性”的问题。<br>“游戏性”问题研究中，最重要的是之前提到的效率预估。在此，将“引导玩家进行效率预估的游戏设计机制”定义为“Ludo”，以便于对游戏性的相关内容进行研究。</p>\n<p>——《游戏性是什么》第11章</p>\n<h4 id=\"游戏性与Ludo\"><a href=\"#游戏性与Ludo\" class=\"headerlink\" title=\"游戏性与Ludo\"></a>游戏性与Ludo</h4><p>“效率预估”是玩家根据自身技能，在“高风险短时间”和“低风险长时间”中做出最恰当选择的一种判断行为。</p>\n<p>引导玩家进行效率预估的游戏设计机制，可以使更多的玩家在游戏中找到恰当的难易度平衡，从而持续玩家的动机。</p>\n<p>反之，从玩家的角度来看，只有进行效率预估，才能在游戏中进入“心流”的专注状态，才会想继续玩下去。</p>\n<p>从上述内容中可以看到“游戏性”定义的模糊轮廓：</p>\n<blockquote>\n<p><strong>游戏性，是为了引导玩家进行效率预估的一种设计机制。</strong></p>\n</blockquote>\n<p>结合之前关于身体性的相关研究，可以做出如下阐释：</p>\n<blockquote>\n<p><strong>游戏性，是为了引导玩家进行效率预估的一种设计机制，以便于玩家通过实际的身体 / 限制身体认知目标世界，达成自己所设定的目标。</strong></p>\n</blockquote>\n<p>将这种设计机制成为“Ludo”，这个名称源于拉丁语，“Ludus”，本意为“游戏，玩笑”。</p>\n<p>很多游戏都是有多个Ludo组成的。多个Ludo相互结合构造出的平衡，会影响到每一个Ludo的平衡以及游戏的整体的平衡。个体Ludo的平衡可以使用跷跷板来表示，多个Ludo间的相互作用和平衡，可以想象，蕴含多级连杆力学平衡的育儿玩具“挂铃”。<br>这种“挂铃”是复合Ludo的示意图，称为Ludo结构图。</p>\n<h4 id=\"Ludo结构的画法\"><a href=\"#Ludo结构的画法\" class=\"headerlink\" title=\"Ludo结构的画法\"></a>Ludo结构的画法</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a4aa6bb7d7161757.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Ludo.jpg--画图真是不是我强项\"></p>\n<p>游戏设计师需要将想要玩家发现的效率预估名称以标题的形式写在Ludo的最上部分。在曲线最下方写上玩家执行该Ludo所需要的时间。<br>接下来Ludo结构图，大部分游戏是由多个Ludo构成的。将这种结构用示意图来表示就是Ludo结构图。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-043d1515ceb05f25.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Ludo结构图.jpg--凑合这看吧\"></p>\n<p>这种包含关系的复杂结构中，最外侧的Ludo叫做“母Ludo”，内侧的Ludo叫做“子Ludo”。最外侧的“母Ludo”是达成目标所需时间最大的部分。</p>\n<h4 id=\"Ludo的有效性\"><a href=\"#Ludo的有效性\" class=\"headerlink\" title=\"Ludo的有效性\"></a>Ludo的有效性</h4><p>简述Ludo的意义，Ludo是游戏设计师在思考游戏“难易度平衡模型”时的“设计图”。正因如此，它在游戏制作中会发挥其有效性。<strong><em>电影，动漫的脚本与最终作品往往有些差异，Ludo和最终游戏的呈现（画面构成和场景构成）也不一定是一致的。</em></strong></p>\n<p>当分析游戏作品时，将按照如下顺序进行：</p>\n<ol>\n<li>分析者玩目标游戏</li>\n<li>列举并分析自己从中所获得的效率预估</li>\n<li>用Ludo的形式记述效率预估的引导形式</li>\n</ol>\n<p>而游戏设计则依照：</p>\n<ol>\n<li>以Ludo的形式记述引导玩家的效率预估</li>\n<li>在Ludo的基础上，开发制作游戏</li>\n<li>玩家去玩目标游戏</li>\n</ol>\n<p>游戏设计相当于“撰写脚本、依据脚本制作电影”，游戏分析则相当于“观看电影，依照电影分析脚本”。两者的顺序正好相反。</p>\n<h4 id=\"超级马里奥的跳跃\"><a href=\"#超级马里奥的跳跃\" class=\"headerlink\" title=\"超级马里奥的跳跃\"></a>超级马里奥的跳跃</h4><p>eg：超级玛丽当中最基本的动作：跳</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-10319ee9fe5ed4af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"SuperMarioLudo.jpg--一回生二回熟，这张画得比较快\"></p>\n<p>这里值得注意，Ludo引导的“效率预估”应由玩家自主发现。游戏设计师不能将目标和解决方案直接设计出来。但“Ludo”中要规划出具体方案，供玩家在效率预估是选择。</p>\n<h4 id=\"引导效率预估的机制设计——Ludo\"><a href=\"#引导效率预估的机制设计——Ludo\" class=\"headerlink\" title=\"引导效率预估的机制设计——Ludo\"></a>引导效率预估的机制设计——Ludo</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-dbc6ca5ba372a566.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"公主二重唱--我儿时玩的打架游戏--为了截图专门下载来玩\"></p>\n<p>像这样的画面，对老玩家而言一个再简单不过的局面，但对没有游戏经验的人，会首先进行可行性尝试。不过，光是看到“来回移动”就应该能够引发效率预估了，大多数人应该是如下：</p>\n<ul>\n<li>如果在间隙缩小时跳跃，应该能顺利通过（风险低）。但是必须等到恰当的时机。</li>\n<li>在间隙扩大时跳跃可能会失败（风险高），不过却能迅速行动（时间成本低）。</li>\n</ul>\n<p>当然，仅这样，还不能引发效率预估，还需要另外的条件，即难易度对于玩家技能而言，已经上升到“危机”层次，这样才能引导玩家进行效率预估。当玩家被迫在风险和时间成本之间做出权衡时，就不得不做出一个对自己最恰当的决定。</p>\n<p>不过当遵从自我决定的行为结果为“成功”时，就能够得到满足感、爽快感等直接关系到游戏趣味性的感觉。</p>\n<h4 id=\"Ludo唤起其他Ludo\"><a href=\"#Ludo唤起其他Ludo\" class=\"headerlink\" title=\"Ludo唤起其他Ludo\"></a>Ludo唤起其他Ludo</h4><p>就是一个Ludo引导另外一个Ludo。游戏设计师通过灵活运用Ludo的性质设计出作用空间，就可以引导玩家进行效率预估。</p>\n<h4 id=\"设计师料想之外的效率预估\"><a href=\"#设计师料想之外的效率预估\" class=\"headerlink\" title=\"设计师料想之外的效率预估\"></a>设计师料想之外的效率预估</h4><p>游戏中具体设计的限制身体作用空间，会引导玩家进行效率预估。将这一过程称为Ludo。大多数玩家都在游戏设计师设定好的Ludo中找到问题的解决方案，推进游戏的进展。不过，当Ludo的引导不是特别恰当时，有时也会出现玩家技能的习得进展不按照游戏设计师预定的效率预估进行，引发了设计之外的效率预估。</p>\n<p>例如，玩家为了验证“怎么才能最快死亡”的效率预估等就是这个情况。</p>\n<p>这对于游戏设计师来说，是意料之外的游戏方式。不过，这也可以说是游戏本来就具备的游戏本质吧。</p>\n<p>Ludo并不仅是引导玩家进行效率预估的机制。很多游戏中，玩家在自己尝试效率预估时，会发现一些独立的（游戏设计师料想之外的）效率预估机制。</p>\n<p>因此，游戏中具有这样的一种可能性，即：</p>\n<blockquote>\n<p><strong>玩家发现游戏设计师料想之外的效率预估机制</strong></p>\n</blockquote>\n<h4 id=\"引导效率预估的Ludo中诞生出新游戏\"><a href=\"#引导效率预估的Ludo中诞生出新游戏\" class=\"headerlink\" title=\"引导效率预估的Ludo中诞生出新游戏\"></a>引导效率预估的Ludo中诞生出新游戏</h4><p>Ludo和效率预估之间有着密不可分的关系。换句话说，游戏就是</p>\n<p><strong>一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。</strong></p>\n<p>制作这种环境的行为就是游戏设计。</p>\n<p>随着分析的深入，得出游戏设计的核心重点，即：</p>\n<blockquote>\n<p><strong>在限制身体和作用空间的何处，设置“引导玩家进行效率预估的机制==Ludo”</strong></p>\n</blockquote>\n<p>关于游戏之外的内容，如果能够在这一点上下功夫设计的话，和能够成为具有“游戏性”的作品。虽然不知道是否可以将这样的内容称为“游戏”，但这些具有“游戏性”设计的内容却是能像游戏一样，给人带来持久的乐趣。</p>\n<blockquote>\n<h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4></blockquote>\n<ul>\n<li>游戏性，是为了引导玩家进行效率预估的一种设计机制。</li>\n<li>引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。</li>\n<li>Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。</li>\n<li>Ludo同样可以应用在游戏之外的内容中。</li>\n</ul>\n<hr>\n<p><strong>游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。</strong>加上游戏是<strong>符号化的现实世界</strong>。在初步了解专注游戏的原因和游戏性后，开始理解人接触游戏直到沉迷于游戏这个过程。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-5ea07a77408ae2de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<blockquote>\n<p>摘自《游戏性是什么》第11章（游戏设计的机制）喜欢这本书，</p>\n<p>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n"},{"title":"游戏和身体","date":"2016-06-04T10:55:56.000Z","_content":"\n游戏中玩家操作的角色，对于玩家来说是一个什么样的存在？我们人类是怎么看待游戏内的世界和操作对象的？\n\n——《游戏性是什么》第4章\n\n## 玩家角色和玩家自身\n\n着眼于“身体”，同时探讨玩家与游戏角色之间的关系。\n\n游戏角色是玩家在游戏世界内所拥有的“身体”，它和我们在现实世界中所拥有的“身体”有什么相同之处，又有什么不同之处？？\n\n## 玩家操作的究竟是触控笔，还是游戏角色？\n\n在这里，以任天堂DS平台上的冒险游戏《[塞尔大传说：幻影沙漏](http://baike.baidu.com/link?url=g3Ww7NjrJS1xqwEW00PEj5vdAHkd5sMvlOojrDwFiUZRlDQrSuPBZE8qmqhkz0s_F1DAT25rRgNhI4qcKFf8da)》为例进行说明。\n\n这款游戏的特点就是几乎所有操作是使用触控笔完成的。\n\n在这款游戏中，玩家用触控笔点击地面，主角林克就会向着点击处移动。\n\n那么问题来了，这个时候玩家所操作的究竟是触控笔还是林克？\n\n下边这种观点比较妥当：\n\n> **玩家操作触控笔，间接操作林克。**\n\n也就是，玩家用身体操作设备，使画面上的数据图形移动。\n\n这种解释方式不仅限于游戏，电脑上的鼠标操作也符合这个道理。\n\n## 身体的感觉是通过学习掌控的\n\n首先，我们是如何认识自己的身体。\n\n说到身体，一般人会认为身体就是从头到脚。\n\n我们从各种各样的研究结果中可得知，这种感觉是我们在成长过程中，通过大脑后天学习获得的，并不是人与生俱来的本能。\n\n考虑到这种学习机制时，最重要的是身体和大脑之间的3中信号，将这3中信号整合起来，大脑就能够识别身体的情况了。\n\n- 动作信号， 由大脑发出，经神经系统传达至身体各处，目的是只是身体的运动。\n\n- 体感信号， 基本上是指触觉。\n\n  如果说动作信号是由大脑通过神经系统对外输出的信号的话，那么与之相对的则是对内输入的信息。\n\n  也就是说，体感信号是通过神经系统返回大脑的信号。\n\n- 特殊感觉信号，指视觉、听觉、味觉等。\n\n  体感是身体全方位所能接收到的感觉，而与之相对的，特殊感觉信号则是眼睛、耳朵、舌头等个别器官所能接收到的感觉。\n\n  特殊感觉信号和体感信号一样，都是输入信号。\n\n## Hand Regard\n\n具体看一下这3种信号的传递。\n\n婴儿经常会注视、触摸自己的手，吮吸自己的手指。\n\n此时，这3种信号是按照下方这样的次序传递的。\n\n- 大脑发出“吮吸手指”的动作信号。\n\n- 手指的触感等体感信号反馈到大脑。\n\n- 眼睛看到手指动作时的视觉信号，口中含这手指的味觉信号等特殊感觉信号反馈到大脑。\n\n- 动作信号、体感信号、特殊感觉信号三者在大脑中整合，婴儿形成了对身体的认识。\n\n这种婴儿身体学习称为“手掌凝视（**Hand Regard**）”。\n\n人成年后，对自己身体的认识已经形成了，\n\n所以我们很难在体验到手掌凝视了，但是这种身体学习形式并不只限于婴儿身上发生。\n\n幻肢痛就可以证明此理。\n\n## 幻肢痛和镜盒治疗\n\n因事故等原因而丧失四肢的患者，\n\n会屡次产生四肢仿佛还在的错觉，而他们也能感觉到这些虚假肢体上的痛觉，这种痛觉叫做[**幻肢痛**](http://baike.baidu.com/link?url=5H_oerEfZ2wceBoSqM1EPqrvthRziWi8DT5SJ3wcy9Vo5zdx16SudIMFcsxTvq8s)。\n\n为了帮助一位因事故失去双手，进而经受了10年幻肢痛困扰的患者祛除病痛，神经外科医生拉玛钱德朗通过研究，使用**镜盒治疗**治愈了这位患者的幻肢痛。\n\n**[镜盒治疗](http://baike.baidu.com/link?url=tyB4TBiKqT7nm42_9b3DKphpnexNl95j3D6JXo7cs3FbZ_sZ-MHz79DTTHuzKqEFBm8bcULvyp3XgAbgB457iq)**是一个构造极其简单的盒子。\n\n镜盒治疗，就是在盒子正中间用一块镜子隔开，然后将两只手分别插进两边的孔洞内。\n\n[![百度百科词条——镜盒治疗1](http://upload-images.jianshu.io/upload_images/1171873-0deb372128e799d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/eaf81a4c510fd9f999926074252dd42a2834a421.png)\n让我们以失去左手的患者为例。\n\n他将实际存在的右手和自己假想中存在的左手，都伸进到盒子中。将两边分隔开的镜子会映出右手的影子。\n\n随后，患者就会觉得镜中的右手的虚像，仿佛是自己的左手。也就是说，让此时患者可以感到自己的双手都伸进到盒子里。\n\n紧接着，让患者做出双手握拳、松开的动作。\n\n也就是对实际上存在的左手同样发出这种动作信号，所以他对左手的特殊感觉信号（这种情况下指视觉）就会反馈回了大脑。\n\n不过虚假左手的体感信号（触觉）并没有反馈回去。\n[![百度百科词条——镜盒治疗2](http://upload-images.jianshu.io/upload_images/1171873-a89282a3cce2f348.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/8435e5dde71190effc72a7c2ce1b9d16fdfa6025.jpg)\n\n***\n\n在镜盒治疗持续进行的过程中，幻肢痛逐步缓解，最终消失。\n\n这其实是将3种信号反复重新匹配，使得患者的大脑对左手这一身体部位的认知进行了再学习的结果。\n\n镜盒治疗的设备非常简单。\n\n实际上笔者（渡边修司）也做一下，进行了数十分钟的尝试。\n\n但经过几天之后，笔者的手产生了麻痹感。\n\n这正是因为笔者两只手都是实际存在的。但大脑却进行了某只手缺失的身体认识再学习的缘故。\n\n> 渡边修司 | Shuji Watanabe\n>  日本立命馆大学教授，日本立命馆游戏研究中心运营委员，日本数字游戏学会研究委员，1997年，以《最终幻想7国际版》（原史克威尔公司）进军游戏业后，在多家游戏公司任职游戏策划、制作人等职务。\n\n游戏中的身体感觉\n\n整理一下镜盒治疗的中3个信号的流程\n\n- 大脑发出“将双手放入镜盒中，只让单侧的手进行动作”的动作信号。\n\n- 手的动作成为一种体感反馈给大脑。\n\n- 镜子中映出的影像成为一种特殊感觉反馈给大脑。\n\n- 动作信号、体感、特殊感觉在大脑内得到统一，并产生了新的感觉关联（身体健全者会有命名一只手没有动，却能感到两只手都在动的不协调感，而幻肢痛患者则感觉到他缺失那一只手）。\n\n***\n身体感觉就是以这种形式重新学习关联。\n\n让我们将这种模型应用到触控笔操作的游戏中来看。\n\n实际上，玩家在玩游戏时，往往都在进行身体感觉的再次关联学习。\n\n\n- 大脑发出“让触摸笔触碰特定地方”的动作信号。\n\n- 手的动作成为一种体感反馈给大脑。\n\n- 画面上角色的动作成为一种特殊体感反馈给大脑。\n\n- 动作信号、体感、特殊感觉在玩家的大脑中得到统一。\n\n***\n\n老玩家对于这种再次关联学习不会感到什么困难。\n\n通过这种关联学习，玩家会将游戏中的角色当成自己身体的一部分，这样便可以自由自在地操作角色了。\n\n这正是将游戏中的角色作为“自己身体的扩展部分”来进行再次关联学习。\n\n## 身体和世界之间的相互作用\n\n关于身体感觉的关联学习，也有将重点放在视觉层面上的实验。\n\n“吊篮猫和自由移动猫”就是这种实验。这个实验能够让大家理解大脑是如何形成“看”这种行为。\n\n在这个实验中，有两只从出生就一直被饲养在漆黑的环境之中，刚刚学会走路的小猫。\n\n这两只小猫被一个像天秤一样的装置互相连在一起，一侧的小猫乘坐在吊篮里，另一侧的小猫可以自由自在地移动。\n\n也就是说，这个装置中，坐在吊篮里的小猫会随这自由移动的小猫的行动而移动。\n\n保持这种状态，将小猫放在内部描绘着条纹花样的圆筒中，暂时让它们习惯一下。\n\n接着，将两只小猫从装置中取出，放在桌子上面。我们会发现，自由移动的猫不会踏出桌子外侧一步，而坐在吊篮理的猫咪并不能察觉到危险，所以它从桌子上掉下去。\n\n这两只猫咪出现了不同的“主动的运动”和“被动的运动”。\n\n虽然它们“看”的行为都是一样的，但是由于坐在吊篮中的猫没有机会学习到视觉的变化和运动之间的关联性，所以它不能察觉到从视觉信息的变化中所产生的危险。\n\n因此，即使大脑可以主动让身体进行运动，但如果它不能将身体运动和世界之间的相互作用联系起来的话，就无法正确理解视觉信息。\n\n这种“**身体和世界之间的相互作用**”并不仅仅是现实世界才能有的现象。\n\n如之前所说的，大脑甚至能够将虚拟世界的数据，作为身体的扩展不分进行关联学习。\n\n“最近沉迷于竞速游戏，身体经常毫不自觉地左右晃动”“当我被敌人击中的时，会喊出‘好痛！’”这些现象都是典型的例子。\n***\n这就是大脑对于身体进行再次关联学习后产生的现象。\n\n## 游戏中的身体学习\n\n——“身体扩展关联学习”的相关内容\n\n这里要举的例子是**《[超级马里奥64](http://baike.baidu.com/link?url=2t_3mVswt2mZ0WGsLpSIWTZ9YDLd8dLmR0MT9VK9Mr1UYJxatjh2sOzEmMpOAM6KyJOxHaYvEEyhd3xE4eW12Rlg82tT_iOkjOmvtIlKcz85ZysJCcSNROCZ4NG9BlxaL3PCffum5H2B9YyOEB1jX7gSLWF6syy_vMEOttZoyLrIoxaTEjnllMpbsnbRpxc9-Hl2fHdONHNCtLywrS3--q)》**\n\n> 超级马里奥64\n> \n> 发行时间：1996年\n> \n> 游戏平台：任天堂（简称64）\n> \n> 这是niendo64的首发游戏，游戏手柄增设了3D摇杆。\n> 从这部作品开始，“马里奥”就变成了第三人称3D动作游戏。也成为了给之后的3D游戏带来巨大影响的里程碑游戏。\n\n在作品真正的游戏开始之前准备一个学习关卡。\n\n在这个关卡不会有敌人袭击，玩家可以自由地操作游戏角色进行练习。\n此时，在跑动、跳跃、爬树等动作的时候，玩家就可以把手柄的操作和马里奥的动作在大脑里关联起来。这个过程就是大脑对游戏中身体的扩展部分进行再次关联学习。在经过多次是失败后，玩家就可以成为完美操作马里奥游戏的大师了。\n\n这时，大脑和身体的关联学习就可以说是完成了。\n\n**《[战地3](http://baike.baidu.com/link?url=HAXhgM_EnT2vZRS-zqhnD4y9t_xaIjYPNwGE7CPmgLyOpJaI7WowtyfT2pqbzm8GOLIAsrWBXle2dNoDYbSRJa)》**\n\n同样的身体关联学习过程，也存在于“战地3”这样的第一人称游戏中。与《超级马里奥64》有所不同的是，第一人称视角下不存在玩家能够通过视觉观察到的“自己的投影对象”。但玩家可以通过画面中的胳膊、枪械以及手柄操作等动作信号和体感的反馈，切实感受到游戏世界中（被扩展的）身体的存在。随后玩家通过游戏，就可以进行身体的关联学习。\n\n**《俄罗斯方块》**\n\n也有一些游戏，并不存在明确的游戏角色，比如《俄罗斯方块》。当中，玩家能够操作的是下落的方块，即玩家将方块当成自己身体的扩展。紧接着，随着方块不断堆积，当方块落到相应位置无法操作时，玩家又失去了将这个方块当成自己身体扩展部分的认知，转而将这种认知切换到接下来要落下的方块上去。\n\n这种类型的游戏通过让玩家反复进行身体关联学习的过程，就不会在身体扩展部分的切换中感到不自然。\n\n## 小结：\n\n- 人类通过 **Hand Regard **对身体感觉进行后天学习。\n\n- 身体感觉可以通过再次关联学习进行修正和扩展。\n\n- 游戏的操作对象，就是人类通过再次关联学习扩展的身体。\n\n- 游戏内的扩展身体会随着状况不同而发生各种各样的变化。\n\n\n> 摘自《游戏性是什么》第4章（游戏和身体）喜欢这本书，\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。","source":"_posts/文集/游戏性是什么/游戏性是什么-游戏和身体.md","raw":"---\ntitle: 游戏和身体\ndate: 2016-06-04 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n游戏中玩家操作的角色，对于玩家来说是一个什么样的存在？我们人类是怎么看待游戏内的世界和操作对象的？\n\n——《游戏性是什么》第4章\n\n## 玩家角色和玩家自身\n\n着眼于“身体”，同时探讨玩家与游戏角色之间的关系。\n\n游戏角色是玩家在游戏世界内所拥有的“身体”，它和我们在现实世界中所拥有的“身体”有什么相同之处，又有什么不同之处？？\n\n## 玩家操作的究竟是触控笔，还是游戏角色？\n\n在这里，以任天堂DS平台上的冒险游戏《[塞尔大传说：幻影沙漏](http://baike.baidu.com/link?url=g3Ww7NjrJS1xqwEW00PEj5vdAHkd5sMvlOojrDwFiUZRlDQrSuPBZE8qmqhkz0s_F1DAT25rRgNhI4qcKFf8da)》为例进行说明。\n\n这款游戏的特点就是几乎所有操作是使用触控笔完成的。\n\n在这款游戏中，玩家用触控笔点击地面，主角林克就会向着点击处移动。\n\n那么问题来了，这个时候玩家所操作的究竟是触控笔还是林克？\n\n下边这种观点比较妥当：\n\n> **玩家操作触控笔，间接操作林克。**\n\n也就是，玩家用身体操作设备，使画面上的数据图形移动。\n\n这种解释方式不仅限于游戏，电脑上的鼠标操作也符合这个道理。\n\n## 身体的感觉是通过学习掌控的\n\n首先，我们是如何认识自己的身体。\n\n说到身体，一般人会认为身体就是从头到脚。\n\n我们从各种各样的研究结果中可得知，这种感觉是我们在成长过程中，通过大脑后天学习获得的，并不是人与生俱来的本能。\n\n考虑到这种学习机制时，最重要的是身体和大脑之间的3中信号，将这3中信号整合起来，大脑就能够识别身体的情况了。\n\n- 动作信号， 由大脑发出，经神经系统传达至身体各处，目的是只是身体的运动。\n\n- 体感信号， 基本上是指触觉。\n\n  如果说动作信号是由大脑通过神经系统对外输出的信号的话，那么与之相对的则是对内输入的信息。\n\n  也就是说，体感信号是通过神经系统返回大脑的信号。\n\n- 特殊感觉信号，指视觉、听觉、味觉等。\n\n  体感是身体全方位所能接收到的感觉，而与之相对的，特殊感觉信号则是眼睛、耳朵、舌头等个别器官所能接收到的感觉。\n\n  特殊感觉信号和体感信号一样，都是输入信号。\n\n## Hand Regard\n\n具体看一下这3种信号的传递。\n\n婴儿经常会注视、触摸自己的手，吮吸自己的手指。\n\n此时，这3种信号是按照下方这样的次序传递的。\n\n- 大脑发出“吮吸手指”的动作信号。\n\n- 手指的触感等体感信号反馈到大脑。\n\n- 眼睛看到手指动作时的视觉信号，口中含这手指的味觉信号等特殊感觉信号反馈到大脑。\n\n- 动作信号、体感信号、特殊感觉信号三者在大脑中整合，婴儿形成了对身体的认识。\n\n这种婴儿身体学习称为“手掌凝视（**Hand Regard**）”。\n\n人成年后，对自己身体的认识已经形成了，\n\n所以我们很难在体验到手掌凝视了，但是这种身体学习形式并不只限于婴儿身上发生。\n\n幻肢痛就可以证明此理。\n\n## 幻肢痛和镜盒治疗\n\n因事故等原因而丧失四肢的患者，\n\n会屡次产生四肢仿佛还在的错觉，而他们也能感觉到这些虚假肢体上的痛觉，这种痛觉叫做[**幻肢痛**](http://baike.baidu.com/link?url=5H_oerEfZ2wceBoSqM1EPqrvthRziWi8DT5SJ3wcy9Vo5zdx16SudIMFcsxTvq8s)。\n\n为了帮助一位因事故失去双手，进而经受了10年幻肢痛困扰的患者祛除病痛，神经外科医生拉玛钱德朗通过研究，使用**镜盒治疗**治愈了这位患者的幻肢痛。\n\n**[镜盒治疗](http://baike.baidu.com/link?url=tyB4TBiKqT7nm42_9b3DKphpnexNl95j3D6JXo7cs3FbZ_sZ-MHz79DTTHuzKqEFBm8bcULvyp3XgAbgB457iq)**是一个构造极其简单的盒子。\n\n镜盒治疗，就是在盒子正中间用一块镜子隔开，然后将两只手分别插进两边的孔洞内。\n\n[![百度百科词条——镜盒治疗1](http://upload-images.jianshu.io/upload_images/1171873-0deb372128e799d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/eaf81a4c510fd9f999926074252dd42a2834a421.png)\n让我们以失去左手的患者为例。\n\n他将实际存在的右手和自己假想中存在的左手，都伸进到盒子中。将两边分隔开的镜子会映出右手的影子。\n\n随后，患者就会觉得镜中的右手的虚像，仿佛是自己的左手。也就是说，让此时患者可以感到自己的双手都伸进到盒子里。\n\n紧接着，让患者做出双手握拳、松开的动作。\n\n也就是对实际上存在的左手同样发出这种动作信号，所以他对左手的特殊感觉信号（这种情况下指视觉）就会反馈回了大脑。\n\n不过虚假左手的体感信号（触觉）并没有反馈回去。\n[![百度百科词条——镜盒治疗2](http://upload-images.jianshu.io/upload_images/1171873-a89282a3cce2f348.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/8435e5dde71190effc72a7c2ce1b9d16fdfa6025.jpg)\n\n***\n\n在镜盒治疗持续进行的过程中，幻肢痛逐步缓解，最终消失。\n\n这其实是将3种信号反复重新匹配，使得患者的大脑对左手这一身体部位的认知进行了再学习的结果。\n\n镜盒治疗的设备非常简单。\n\n实际上笔者（渡边修司）也做一下，进行了数十分钟的尝试。\n\n但经过几天之后，笔者的手产生了麻痹感。\n\n这正是因为笔者两只手都是实际存在的。但大脑却进行了某只手缺失的身体认识再学习的缘故。\n\n> 渡边修司 | Shuji Watanabe\n>  日本立命馆大学教授，日本立命馆游戏研究中心运营委员，日本数字游戏学会研究委员，1997年，以《最终幻想7国际版》（原史克威尔公司）进军游戏业后，在多家游戏公司任职游戏策划、制作人等职务。\n\n游戏中的身体感觉\n\n整理一下镜盒治疗的中3个信号的流程\n\n- 大脑发出“将双手放入镜盒中，只让单侧的手进行动作”的动作信号。\n\n- 手的动作成为一种体感反馈给大脑。\n\n- 镜子中映出的影像成为一种特殊感觉反馈给大脑。\n\n- 动作信号、体感、特殊感觉在大脑内得到统一，并产生了新的感觉关联（身体健全者会有命名一只手没有动，却能感到两只手都在动的不协调感，而幻肢痛患者则感觉到他缺失那一只手）。\n\n***\n身体感觉就是以这种形式重新学习关联。\n\n让我们将这种模型应用到触控笔操作的游戏中来看。\n\n实际上，玩家在玩游戏时，往往都在进行身体感觉的再次关联学习。\n\n\n- 大脑发出“让触摸笔触碰特定地方”的动作信号。\n\n- 手的动作成为一种体感反馈给大脑。\n\n- 画面上角色的动作成为一种特殊体感反馈给大脑。\n\n- 动作信号、体感、特殊感觉在玩家的大脑中得到统一。\n\n***\n\n老玩家对于这种再次关联学习不会感到什么困难。\n\n通过这种关联学习，玩家会将游戏中的角色当成自己身体的一部分，这样便可以自由自在地操作角色了。\n\n这正是将游戏中的角色作为“自己身体的扩展部分”来进行再次关联学习。\n\n## 身体和世界之间的相互作用\n\n关于身体感觉的关联学习，也有将重点放在视觉层面上的实验。\n\n“吊篮猫和自由移动猫”就是这种实验。这个实验能够让大家理解大脑是如何形成“看”这种行为。\n\n在这个实验中，有两只从出生就一直被饲养在漆黑的环境之中，刚刚学会走路的小猫。\n\n这两只小猫被一个像天秤一样的装置互相连在一起，一侧的小猫乘坐在吊篮里，另一侧的小猫可以自由自在地移动。\n\n也就是说，这个装置中，坐在吊篮里的小猫会随这自由移动的小猫的行动而移动。\n\n保持这种状态，将小猫放在内部描绘着条纹花样的圆筒中，暂时让它们习惯一下。\n\n接着，将两只小猫从装置中取出，放在桌子上面。我们会发现，自由移动的猫不会踏出桌子外侧一步，而坐在吊篮理的猫咪并不能察觉到危险，所以它从桌子上掉下去。\n\n这两只猫咪出现了不同的“主动的运动”和“被动的运动”。\n\n虽然它们“看”的行为都是一样的，但是由于坐在吊篮中的猫没有机会学习到视觉的变化和运动之间的关联性，所以它不能察觉到从视觉信息的变化中所产生的危险。\n\n因此，即使大脑可以主动让身体进行运动，但如果它不能将身体运动和世界之间的相互作用联系起来的话，就无法正确理解视觉信息。\n\n这种“**身体和世界之间的相互作用**”并不仅仅是现实世界才能有的现象。\n\n如之前所说的，大脑甚至能够将虚拟世界的数据，作为身体的扩展不分进行关联学习。\n\n“最近沉迷于竞速游戏，身体经常毫不自觉地左右晃动”“当我被敌人击中的时，会喊出‘好痛！’”这些现象都是典型的例子。\n***\n这就是大脑对于身体进行再次关联学习后产生的现象。\n\n## 游戏中的身体学习\n\n——“身体扩展关联学习”的相关内容\n\n这里要举的例子是**《[超级马里奥64](http://baike.baidu.com/link?url=2t_3mVswt2mZ0WGsLpSIWTZ9YDLd8dLmR0MT9VK9Mr1UYJxatjh2sOzEmMpOAM6KyJOxHaYvEEyhd3xE4eW12Rlg82tT_iOkjOmvtIlKcz85ZysJCcSNROCZ4NG9BlxaL3PCffum5H2B9YyOEB1jX7gSLWF6syy_vMEOttZoyLrIoxaTEjnllMpbsnbRpxc9-Hl2fHdONHNCtLywrS3--q)》**\n\n> 超级马里奥64\n> \n> 发行时间：1996年\n> \n> 游戏平台：任天堂（简称64）\n> \n> 这是niendo64的首发游戏，游戏手柄增设了3D摇杆。\n> 从这部作品开始，“马里奥”就变成了第三人称3D动作游戏。也成为了给之后的3D游戏带来巨大影响的里程碑游戏。\n\n在作品真正的游戏开始之前准备一个学习关卡。\n\n在这个关卡不会有敌人袭击，玩家可以自由地操作游戏角色进行练习。\n此时，在跑动、跳跃、爬树等动作的时候，玩家就可以把手柄的操作和马里奥的动作在大脑里关联起来。这个过程就是大脑对游戏中身体的扩展部分进行再次关联学习。在经过多次是失败后，玩家就可以成为完美操作马里奥游戏的大师了。\n\n这时，大脑和身体的关联学习就可以说是完成了。\n\n**《[战地3](http://baike.baidu.com/link?url=HAXhgM_EnT2vZRS-zqhnD4y9t_xaIjYPNwGE7CPmgLyOpJaI7WowtyfT2pqbzm8GOLIAsrWBXle2dNoDYbSRJa)》**\n\n同样的身体关联学习过程，也存在于“战地3”这样的第一人称游戏中。与《超级马里奥64》有所不同的是，第一人称视角下不存在玩家能够通过视觉观察到的“自己的投影对象”。但玩家可以通过画面中的胳膊、枪械以及手柄操作等动作信号和体感的反馈，切实感受到游戏世界中（被扩展的）身体的存在。随后玩家通过游戏，就可以进行身体的关联学习。\n\n**《俄罗斯方块》**\n\n也有一些游戏，并不存在明确的游戏角色，比如《俄罗斯方块》。当中，玩家能够操作的是下落的方块，即玩家将方块当成自己身体的扩展。紧接着，随着方块不断堆积，当方块落到相应位置无法操作时，玩家又失去了将这个方块当成自己身体扩展部分的认知，转而将这种认知切换到接下来要落下的方块上去。\n\n这种类型的游戏通过让玩家反复进行身体关联学习的过程，就不会在身体扩展部分的切换中感到不自然。\n\n## 小结：\n\n- 人类通过 **Hand Regard **对身体感觉进行后天学习。\n\n- 身体感觉可以通过再次关联学习进行修正和扩展。\n\n- 游戏的操作对象，就是人类通过再次关联学习扩展的身体。\n\n- 游戏内的扩展身体会随着状况不同而发生各种各样的变化。\n\n\n> 摘自《游戏性是什么》第4章（游戏和身体）喜欢这本书，\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。","slug":"文集/游戏性是什么/游戏性是什么-游戏和身体","published":1,"updated":"2018-08-04T06:32:45.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkce1006gm4cmlcatkken","content":"<p>游戏中玩家操作的角色，对于玩家来说是一个什么样的存在？我们人类是怎么看待游戏内的世界和操作对象的？</p>\n<p>——《游戏性是什么》第4章</p>\n<h2 id=\"玩家角色和玩家自身\"><a href=\"#玩家角色和玩家自身\" class=\"headerlink\" title=\"玩家角色和玩家自身\"></a>玩家角色和玩家自身</h2><p>着眼于“身体”，同时探讨玩家与游戏角色之间的关系。</p>\n<p>游戏角色是玩家在游戏世界内所拥有的“身体”，它和我们在现实世界中所拥有的“身体”有什么相同之处，又有什么不同之处？？</p>\n<h2 id=\"玩家操作的究竟是触控笔，还是游戏角色？\"><a href=\"#玩家操作的究竟是触控笔，还是游戏角色？\" class=\"headerlink\" title=\"玩家操作的究竟是触控笔，还是游戏角色？\"></a>玩家操作的究竟是触控笔，还是游戏角色？</h2><p>在这里，以任天堂DS平台上的冒险游戏《<a href=\"http://baike.baidu.com/link?url=g3Ww7NjrJS1xqwEW00PEj5vdAHkd5sMvlOojrDwFiUZRlDQrSuPBZE8qmqhkz0s_F1DAT25rRgNhI4qcKFf8da\" target=\"_blank\" rel=\"noopener\">塞尔大传说：幻影沙漏</a>》为例进行说明。</p>\n<p>这款游戏的特点就是几乎所有操作是使用触控笔完成的。</p>\n<p>在这款游戏中，玩家用触控笔点击地面，主角林克就会向着点击处移动。</p>\n<p>那么问题来了，这个时候玩家所操作的究竟是触控笔还是林克？</p>\n<p>下边这种观点比较妥当：</p>\n<blockquote>\n<p><strong>玩家操作触控笔，间接操作林克。</strong></p>\n</blockquote>\n<p>也就是，玩家用身体操作设备，使画面上的数据图形移动。</p>\n<p>这种解释方式不仅限于游戏，电脑上的鼠标操作也符合这个道理。</p>\n<h2 id=\"身体的感觉是通过学习掌控的\"><a href=\"#身体的感觉是通过学习掌控的\" class=\"headerlink\" title=\"身体的感觉是通过学习掌控的\"></a>身体的感觉是通过学习掌控的</h2><p>首先，我们是如何认识自己的身体。</p>\n<p>说到身体，一般人会认为身体就是从头到脚。</p>\n<p>我们从各种各样的研究结果中可得知，这种感觉是我们在成长过程中，通过大脑后天学习获得的，并不是人与生俱来的本能。</p>\n<p>考虑到这种学习机制时，最重要的是身体和大脑之间的3中信号，将这3中信号整合起来，大脑就能够识别身体的情况了。</p>\n<ul>\n<li><p>动作信号， 由大脑发出，经神经系统传达至身体各处，目的是只是身体的运动。</p>\n</li>\n<li><p>体感信号， 基本上是指触觉。</p>\n<p>如果说动作信号是由大脑通过神经系统对外输出的信号的话，那么与之相对的则是对内输入的信息。</p>\n<p>也就是说，体感信号是通过神经系统返回大脑的信号。</p>\n</li>\n<li><p>特殊感觉信号，指视觉、听觉、味觉等。</p>\n<p>体感是身体全方位所能接收到的感觉，而与之相对的，特殊感觉信号则是眼睛、耳朵、舌头等个别器官所能接收到的感觉。</p>\n<p>特殊感觉信号和体感信号一样，都是输入信号。</p>\n</li>\n</ul>\n<h2 id=\"Hand-Regard\"><a href=\"#Hand-Regard\" class=\"headerlink\" title=\"Hand Regard\"></a>Hand Regard</h2><p>具体看一下这3种信号的传递。</p>\n<p>婴儿经常会注视、触摸自己的手，吮吸自己的手指。</p>\n<p>此时，这3种信号是按照下方这样的次序传递的。</p>\n<ul>\n<li><p>大脑发出“吮吸手指”的动作信号。</p>\n</li>\n<li><p>手指的触感等体感信号反馈到大脑。</p>\n</li>\n<li><p>眼睛看到手指动作时的视觉信号，口中含这手指的味觉信号等特殊感觉信号反馈到大脑。</p>\n</li>\n<li><p>动作信号、体感信号、特殊感觉信号三者在大脑中整合，婴儿形成了对身体的认识。</p>\n</li>\n</ul>\n<p>这种婴儿身体学习称为“手掌凝视（<strong>Hand Regard</strong>）”。</p>\n<p>人成年后，对自己身体的认识已经形成了，</p>\n<p>所以我们很难在体验到手掌凝视了，但是这种身体学习形式并不只限于婴儿身上发生。</p>\n<p>幻肢痛就可以证明此理。</p>\n<h2 id=\"幻肢痛和镜盒治疗\"><a href=\"#幻肢痛和镜盒治疗\" class=\"headerlink\" title=\"幻肢痛和镜盒治疗\"></a>幻肢痛和镜盒治疗</h2><p>因事故等原因而丧失四肢的患者，</p>\n<p>会屡次产生四肢仿佛还在的错觉，而他们也能感觉到这些虚假肢体上的痛觉，这种痛觉叫做<a href=\"http://baike.baidu.com/link?url=5H_oerEfZ2wceBoSqM1EPqrvthRziWi8DT5SJ3wcy9Vo5zdx16SudIMFcsxTvq8s\" target=\"_blank\" rel=\"noopener\"><strong>幻肢痛</strong></a>。</p>\n<p>为了帮助一位因事故失去双手，进而经受了10年幻肢痛困扰的患者祛除病痛，神经外科医生拉玛钱德朗通过研究，使用<strong>镜盒治疗</strong>治愈了这位患者的幻肢痛。</p>\n<p><strong><a href=\"http://baike.baidu.com/link?url=tyB4TBiKqT7nm42_9b3DKphpnexNl95j3D6JXo7cs3FbZ_sZ-MHz79DTTHuzKqEFBm8bcULvyp3XgAbgB457iq\" target=\"_blank\" rel=\"noopener\">镜盒治疗</a></strong>是一个构造极其简单的盒子。</p>\n<p>镜盒治疗，就是在盒子正中间用一块镜子隔开，然后将两只手分别插进两边的孔洞内。</p>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/eaf81a4c510fd9f999926074252dd42a2834a421.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0deb372128e799d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"百度百科词条——镜盒治疗1\"></a><br>让我们以失去左手的患者为例。</p>\n<p>他将实际存在的右手和自己假想中存在的左手，都伸进到盒子中。将两边分隔开的镜子会映出右手的影子。</p>\n<p>随后，患者就会觉得镜中的右手的虚像，仿佛是自己的左手。也就是说，让此时患者可以感到自己的双手都伸进到盒子里。</p>\n<p>紧接着，让患者做出双手握拳、松开的动作。</p>\n<p>也就是对实际上存在的左手同样发出这种动作信号，所以他对左手的特殊感觉信号（这种情况下指视觉）就会反馈回了大脑。</p>\n<p>不过虚假左手的体感信号（触觉）并没有反馈回去。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/8435e5dde71190effc72a7c2ce1b9d16fdfa6025.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a89282a3cce2f348.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"百度百科词条——镜盒治疗2\"></a></p>\n<hr>\n<p>在镜盒治疗持续进行的过程中，幻肢痛逐步缓解，最终消失。</p>\n<p>这其实是将3种信号反复重新匹配，使得患者的大脑对左手这一身体部位的认知进行了再学习的结果。</p>\n<p>镜盒治疗的设备非常简单。</p>\n<p>实际上笔者（渡边修司）也做一下，进行了数十分钟的尝试。</p>\n<p>但经过几天之后，笔者的手产生了麻痹感。</p>\n<p>这正是因为笔者两只手都是实际存在的。但大脑却进行了某只手缺失的身体认识再学习的缘故。</p>\n<blockquote>\n<p>渡边修司 | Shuji Watanabe<br> 日本立命馆大学教授，日本立命馆游戏研究中心运营委员，日本数字游戏学会研究委员，1997年，以《最终幻想7国际版》（原史克威尔公司）进军游戏业后，在多家游戏公司任职游戏策划、制作人等职务。</p>\n</blockquote>\n<p>游戏中的身体感觉</p>\n<p>整理一下镜盒治疗的中3个信号的流程</p>\n<ul>\n<li><p>大脑发出“将双手放入镜盒中，只让单侧的手进行动作”的动作信号。</p>\n</li>\n<li><p>手的动作成为一种体感反馈给大脑。</p>\n</li>\n<li><p>镜子中映出的影像成为一种特殊感觉反馈给大脑。</p>\n</li>\n<li><p>动作信号、体感、特殊感觉在大脑内得到统一，并产生了新的感觉关联（身体健全者会有命名一只手没有动，却能感到两只手都在动的不协调感，而幻肢痛患者则感觉到他缺失那一只手）。</p>\n</li>\n</ul>\n<hr>\n<p>身体感觉就是以这种形式重新学习关联。</p>\n<p>让我们将这种模型应用到触控笔操作的游戏中来看。</p>\n<p>实际上，玩家在玩游戏时，往往都在进行身体感觉的再次关联学习。</p>\n<ul>\n<li><p>大脑发出“让触摸笔触碰特定地方”的动作信号。</p>\n</li>\n<li><p>手的动作成为一种体感反馈给大脑。</p>\n</li>\n<li><p>画面上角色的动作成为一种特殊体感反馈给大脑。</p>\n</li>\n<li><p>动作信号、体感、特殊感觉在玩家的大脑中得到统一。</p>\n</li>\n</ul>\n<hr>\n<p>老玩家对于这种再次关联学习不会感到什么困难。</p>\n<p>通过这种关联学习，玩家会将游戏中的角色当成自己身体的一部分，这样便可以自由自在地操作角色了。</p>\n<p>这正是将游戏中的角色作为“自己身体的扩展部分”来进行再次关联学习。</p>\n<h2 id=\"身体和世界之间的相互作用\"><a href=\"#身体和世界之间的相互作用\" class=\"headerlink\" title=\"身体和世界之间的相互作用\"></a>身体和世界之间的相互作用</h2><p>关于身体感觉的关联学习，也有将重点放在视觉层面上的实验。</p>\n<p>“吊篮猫和自由移动猫”就是这种实验。这个实验能够让大家理解大脑是如何形成“看”这种行为。</p>\n<p>在这个实验中，有两只从出生就一直被饲养在漆黑的环境之中，刚刚学会走路的小猫。</p>\n<p>这两只小猫被一个像天秤一样的装置互相连在一起，一侧的小猫乘坐在吊篮里，另一侧的小猫可以自由自在地移动。</p>\n<p>也就是说，这个装置中，坐在吊篮里的小猫会随这自由移动的小猫的行动而移动。</p>\n<p>保持这种状态，将小猫放在内部描绘着条纹花样的圆筒中，暂时让它们习惯一下。</p>\n<p>接着，将两只小猫从装置中取出，放在桌子上面。我们会发现，自由移动的猫不会踏出桌子外侧一步，而坐在吊篮理的猫咪并不能察觉到危险，所以它从桌子上掉下去。</p>\n<p>这两只猫咪出现了不同的“主动的运动”和“被动的运动”。</p>\n<p>虽然它们“看”的行为都是一样的，但是由于坐在吊篮中的猫没有机会学习到视觉的变化和运动之间的关联性，所以它不能察觉到从视觉信息的变化中所产生的危险。</p>\n<p>因此，即使大脑可以主动让身体进行运动，但如果它不能将身体运动和世界之间的相互作用联系起来的话，就无法正确理解视觉信息。</p>\n<p>这种“<strong>身体和世界之间的相互作用</strong>”并不仅仅是现实世界才能有的现象。</p>\n<p>如之前所说的，大脑甚至能够将虚拟世界的数据，作为身体的扩展不分进行关联学习。</p>\n<p>“最近沉迷于竞速游戏，身体经常毫不自觉地左右晃动”“当我被敌人击中的时，会喊出‘好痛！’”这些现象都是典型的例子。</p>\n<hr>\n<p>这就是大脑对于身体进行再次关联学习后产生的现象。</p>\n<h2 id=\"游戏中的身体学习\"><a href=\"#游戏中的身体学习\" class=\"headerlink\" title=\"游戏中的身体学习\"></a>游戏中的身体学习</h2><p>——“身体扩展关联学习”的相关内容</p>\n<p>这里要举的例子是<strong>《<a href=\"http://baike.baidu.com/link?url=2t_3mVswt2mZ0WGsLpSIWTZ9YDLd8dLmR0MT9VK9Mr1UYJxatjh2sOzEmMpOAM6KyJOxHaYvEEyhd3xE4eW12Rlg82tT_iOkjOmvtIlKcz85ZysJCcSNROCZ4NG9BlxaL3PCffum5H2B9YyOEB1jX7gSLWF6syy_vMEOttZoyLrIoxaTEjnllMpbsnbRpxc9-Hl2fHdONHNCtLywrS3--q\" target=\"_blank\" rel=\"noopener\">超级马里奥64</a>》</strong></p>\n<blockquote>\n<p>超级马里奥64</p>\n<p>发行时间：1996年</p>\n<p>游戏平台：任天堂（简称64）</p>\n<p>这是niendo64的首发游戏，游戏手柄增设了3D摇杆。<br>从这部作品开始，“马里奥”就变成了第三人称3D动作游戏。也成为了给之后的3D游戏带来巨大影响的里程碑游戏。</p>\n</blockquote>\n<p>在作品真正的游戏开始之前准备一个学习关卡。</p>\n<p>在这个关卡不会有敌人袭击，玩家可以自由地操作游戏角色进行练习。<br>此时，在跑动、跳跃、爬树等动作的时候，玩家就可以把手柄的操作和马里奥的动作在大脑里关联起来。这个过程就是大脑对游戏中身体的扩展部分进行再次关联学习。在经过多次是失败后，玩家就可以成为完美操作马里奥游戏的大师了。</p>\n<p>这时，大脑和身体的关联学习就可以说是完成了。</p>\n<p><strong>《<a href=\"http://baike.baidu.com/link?url=HAXhgM_EnT2vZRS-zqhnD4y9t_xaIjYPNwGE7CPmgLyOpJaI7WowtyfT2pqbzm8GOLIAsrWBXle2dNoDYbSRJa\" target=\"_blank\" rel=\"noopener\">战地3</a>》</strong></p>\n<p>同样的身体关联学习过程，也存在于“战地3”这样的第一人称游戏中。与《超级马里奥64》有所不同的是，第一人称视角下不存在玩家能够通过视觉观察到的“自己的投影对象”。但玩家可以通过画面中的胳膊、枪械以及手柄操作等动作信号和体感的反馈，切实感受到游戏世界中（被扩展的）身体的存在。随后玩家通过游戏，就可以进行身体的关联学习。</p>\n<p><strong>《俄罗斯方块》</strong></p>\n<p>也有一些游戏，并不存在明确的游戏角色，比如《俄罗斯方块》。当中，玩家能够操作的是下落的方块，即玩家将方块当成自己身体的扩展。紧接着，随着方块不断堆积，当方块落到相应位置无法操作时，玩家又失去了将这个方块当成自己身体扩展部分的认知，转而将这种认知切换到接下来要落下的方块上去。</p>\n<p>这种类型的游戏通过让玩家反复进行身体关联学习的过程，就不会在身体扩展部分的切换中感到不自然。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li><p>人类通过 <strong>Hand Regard </strong>对身体感觉进行后天学习。</p>\n</li>\n<li><p>身体感觉可以通过再次关联学习进行修正和扩展。</p>\n</li>\n<li><p>游戏的操作对象，就是人类通过再次关联学习扩展的身体。</p>\n</li>\n<li><p>游戏内的扩展身体会随着状况不同而发生各种各样的变化。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第4章（游戏和身体）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>游戏中玩家操作的角色，对于玩家来说是一个什么样的存在？我们人类是怎么看待游戏内的世界和操作对象的？</p>\n<p>——《游戏性是什么》第4章</p>\n<h2 id=\"玩家角色和玩家自身\"><a href=\"#玩家角色和玩家自身\" class=\"headerlink\" title=\"玩家角色和玩家自身\"></a>玩家角色和玩家自身</h2><p>着眼于“身体”，同时探讨玩家与游戏角色之间的关系。</p>\n<p>游戏角色是玩家在游戏世界内所拥有的“身体”，它和我们在现实世界中所拥有的“身体”有什么相同之处，又有什么不同之处？？</p>\n<h2 id=\"玩家操作的究竟是触控笔，还是游戏角色？\"><a href=\"#玩家操作的究竟是触控笔，还是游戏角色？\" class=\"headerlink\" title=\"玩家操作的究竟是触控笔，还是游戏角色？\"></a>玩家操作的究竟是触控笔，还是游戏角色？</h2><p>在这里，以任天堂DS平台上的冒险游戏《<a href=\"http://baike.baidu.com/link?url=g3Ww7NjrJS1xqwEW00PEj5vdAHkd5sMvlOojrDwFiUZRlDQrSuPBZE8qmqhkz0s_F1DAT25rRgNhI4qcKFf8da\" target=\"_blank\" rel=\"noopener\">塞尔大传说：幻影沙漏</a>》为例进行说明。</p>\n<p>这款游戏的特点就是几乎所有操作是使用触控笔完成的。</p>\n<p>在这款游戏中，玩家用触控笔点击地面，主角林克就会向着点击处移动。</p>\n<p>那么问题来了，这个时候玩家所操作的究竟是触控笔还是林克？</p>\n<p>下边这种观点比较妥当：</p>\n<blockquote>\n<p><strong>玩家操作触控笔，间接操作林克。</strong></p>\n</blockquote>\n<p>也就是，玩家用身体操作设备，使画面上的数据图形移动。</p>\n<p>这种解释方式不仅限于游戏，电脑上的鼠标操作也符合这个道理。</p>\n<h2 id=\"身体的感觉是通过学习掌控的\"><a href=\"#身体的感觉是通过学习掌控的\" class=\"headerlink\" title=\"身体的感觉是通过学习掌控的\"></a>身体的感觉是通过学习掌控的</h2><p>首先，我们是如何认识自己的身体。</p>\n<p>说到身体，一般人会认为身体就是从头到脚。</p>\n<p>我们从各种各样的研究结果中可得知，这种感觉是我们在成长过程中，通过大脑后天学习获得的，并不是人与生俱来的本能。</p>\n<p>考虑到这种学习机制时，最重要的是身体和大脑之间的3中信号，将这3中信号整合起来，大脑就能够识别身体的情况了。</p>\n<ul>\n<li><p>动作信号， 由大脑发出，经神经系统传达至身体各处，目的是只是身体的运动。</p>\n</li>\n<li><p>体感信号， 基本上是指触觉。</p>\n<p>如果说动作信号是由大脑通过神经系统对外输出的信号的话，那么与之相对的则是对内输入的信息。</p>\n<p>也就是说，体感信号是通过神经系统返回大脑的信号。</p>\n</li>\n<li><p>特殊感觉信号，指视觉、听觉、味觉等。</p>\n<p>体感是身体全方位所能接收到的感觉，而与之相对的，特殊感觉信号则是眼睛、耳朵、舌头等个别器官所能接收到的感觉。</p>\n<p>特殊感觉信号和体感信号一样，都是输入信号。</p>\n</li>\n</ul>\n<h2 id=\"Hand-Regard\"><a href=\"#Hand-Regard\" class=\"headerlink\" title=\"Hand Regard\"></a>Hand Regard</h2><p>具体看一下这3种信号的传递。</p>\n<p>婴儿经常会注视、触摸自己的手，吮吸自己的手指。</p>\n<p>此时，这3种信号是按照下方这样的次序传递的。</p>\n<ul>\n<li><p>大脑发出“吮吸手指”的动作信号。</p>\n</li>\n<li><p>手指的触感等体感信号反馈到大脑。</p>\n</li>\n<li><p>眼睛看到手指动作时的视觉信号，口中含这手指的味觉信号等特殊感觉信号反馈到大脑。</p>\n</li>\n<li><p>动作信号、体感信号、特殊感觉信号三者在大脑中整合，婴儿形成了对身体的认识。</p>\n</li>\n</ul>\n<p>这种婴儿身体学习称为“手掌凝视（<strong>Hand Regard</strong>）”。</p>\n<p>人成年后，对自己身体的认识已经形成了，</p>\n<p>所以我们很难在体验到手掌凝视了，但是这种身体学习形式并不只限于婴儿身上发生。</p>\n<p>幻肢痛就可以证明此理。</p>\n<h2 id=\"幻肢痛和镜盒治疗\"><a href=\"#幻肢痛和镜盒治疗\" class=\"headerlink\" title=\"幻肢痛和镜盒治疗\"></a>幻肢痛和镜盒治疗</h2><p>因事故等原因而丧失四肢的患者，</p>\n<p>会屡次产生四肢仿佛还在的错觉，而他们也能感觉到这些虚假肢体上的痛觉，这种痛觉叫做<a href=\"http://baike.baidu.com/link?url=5H_oerEfZ2wceBoSqM1EPqrvthRziWi8DT5SJ3wcy9Vo5zdx16SudIMFcsxTvq8s\" target=\"_blank\" rel=\"noopener\"><strong>幻肢痛</strong></a>。</p>\n<p>为了帮助一位因事故失去双手，进而经受了10年幻肢痛困扰的患者祛除病痛，神经外科医生拉玛钱德朗通过研究，使用<strong>镜盒治疗</strong>治愈了这位患者的幻肢痛。</p>\n<p><strong><a href=\"http://baike.baidu.com/link?url=tyB4TBiKqT7nm42_9b3DKphpnexNl95j3D6JXo7cs3FbZ_sZ-MHz79DTTHuzKqEFBm8bcULvyp3XgAbgB457iq\" target=\"_blank\" rel=\"noopener\">镜盒治疗</a></strong>是一个构造极其简单的盒子。</p>\n<p>镜盒治疗，就是在盒子正中间用一块镜子隔开，然后将两只手分别插进两边的孔洞内。</p>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/eaf81a4c510fd9f999926074252dd42a2834a421.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-0deb372128e799d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"百度百科词条——镜盒治疗1\"></a><br>让我们以失去左手的患者为例。</p>\n<p>他将实际存在的右手和自己假想中存在的左手，都伸进到盒子中。将两边分隔开的镜子会映出右手的影子。</p>\n<p>随后，患者就会觉得镜中的右手的虚像，仿佛是自己的左手。也就是说，让此时患者可以感到自己的双手都伸进到盒子里。</p>\n<p>紧接着，让患者做出双手握拳、松开的动作。</p>\n<p>也就是对实际上存在的左手同样发出这种动作信号，所以他对左手的特殊感觉信号（这种情况下指视觉）就会反馈回了大脑。</p>\n<p>不过虚假左手的体感信号（触觉）并没有反馈回去。<br><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/8435e5dde71190effc72a7c2ce1b9d16fdfa6025.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-a89282a3cce2f348.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"百度百科词条——镜盒治疗2\"></a></p>\n<hr>\n<p>在镜盒治疗持续进行的过程中，幻肢痛逐步缓解，最终消失。</p>\n<p>这其实是将3种信号反复重新匹配，使得患者的大脑对左手这一身体部位的认知进行了再学习的结果。</p>\n<p>镜盒治疗的设备非常简单。</p>\n<p>实际上笔者（渡边修司）也做一下，进行了数十分钟的尝试。</p>\n<p>但经过几天之后，笔者的手产生了麻痹感。</p>\n<p>这正是因为笔者两只手都是实际存在的。但大脑却进行了某只手缺失的身体认识再学习的缘故。</p>\n<blockquote>\n<p>渡边修司 | Shuji Watanabe<br> 日本立命馆大学教授，日本立命馆游戏研究中心运营委员，日本数字游戏学会研究委员，1997年，以《最终幻想7国际版》（原史克威尔公司）进军游戏业后，在多家游戏公司任职游戏策划、制作人等职务。</p>\n</blockquote>\n<p>游戏中的身体感觉</p>\n<p>整理一下镜盒治疗的中3个信号的流程</p>\n<ul>\n<li><p>大脑发出“将双手放入镜盒中，只让单侧的手进行动作”的动作信号。</p>\n</li>\n<li><p>手的动作成为一种体感反馈给大脑。</p>\n</li>\n<li><p>镜子中映出的影像成为一种特殊感觉反馈给大脑。</p>\n</li>\n<li><p>动作信号、体感、特殊感觉在大脑内得到统一，并产生了新的感觉关联（身体健全者会有命名一只手没有动，却能感到两只手都在动的不协调感，而幻肢痛患者则感觉到他缺失那一只手）。</p>\n</li>\n</ul>\n<hr>\n<p>身体感觉就是以这种形式重新学习关联。</p>\n<p>让我们将这种模型应用到触控笔操作的游戏中来看。</p>\n<p>实际上，玩家在玩游戏时，往往都在进行身体感觉的再次关联学习。</p>\n<ul>\n<li><p>大脑发出“让触摸笔触碰特定地方”的动作信号。</p>\n</li>\n<li><p>手的动作成为一种体感反馈给大脑。</p>\n</li>\n<li><p>画面上角色的动作成为一种特殊体感反馈给大脑。</p>\n</li>\n<li><p>动作信号、体感、特殊感觉在玩家的大脑中得到统一。</p>\n</li>\n</ul>\n<hr>\n<p>老玩家对于这种再次关联学习不会感到什么困难。</p>\n<p>通过这种关联学习，玩家会将游戏中的角色当成自己身体的一部分，这样便可以自由自在地操作角色了。</p>\n<p>这正是将游戏中的角色作为“自己身体的扩展部分”来进行再次关联学习。</p>\n<h2 id=\"身体和世界之间的相互作用\"><a href=\"#身体和世界之间的相互作用\" class=\"headerlink\" title=\"身体和世界之间的相互作用\"></a>身体和世界之间的相互作用</h2><p>关于身体感觉的关联学习，也有将重点放在视觉层面上的实验。</p>\n<p>“吊篮猫和自由移动猫”就是这种实验。这个实验能够让大家理解大脑是如何形成“看”这种行为。</p>\n<p>在这个实验中，有两只从出生就一直被饲养在漆黑的环境之中，刚刚学会走路的小猫。</p>\n<p>这两只小猫被一个像天秤一样的装置互相连在一起，一侧的小猫乘坐在吊篮里，另一侧的小猫可以自由自在地移动。</p>\n<p>也就是说，这个装置中，坐在吊篮里的小猫会随这自由移动的小猫的行动而移动。</p>\n<p>保持这种状态，将小猫放在内部描绘着条纹花样的圆筒中，暂时让它们习惯一下。</p>\n<p>接着，将两只小猫从装置中取出，放在桌子上面。我们会发现，自由移动的猫不会踏出桌子外侧一步，而坐在吊篮理的猫咪并不能察觉到危险，所以它从桌子上掉下去。</p>\n<p>这两只猫咪出现了不同的“主动的运动”和“被动的运动”。</p>\n<p>虽然它们“看”的行为都是一样的，但是由于坐在吊篮中的猫没有机会学习到视觉的变化和运动之间的关联性，所以它不能察觉到从视觉信息的变化中所产生的危险。</p>\n<p>因此，即使大脑可以主动让身体进行运动，但如果它不能将身体运动和世界之间的相互作用联系起来的话，就无法正确理解视觉信息。</p>\n<p>这种“<strong>身体和世界之间的相互作用</strong>”并不仅仅是现实世界才能有的现象。</p>\n<p>如之前所说的，大脑甚至能够将虚拟世界的数据，作为身体的扩展不分进行关联学习。</p>\n<p>“最近沉迷于竞速游戏，身体经常毫不自觉地左右晃动”“当我被敌人击中的时，会喊出‘好痛！’”这些现象都是典型的例子。</p>\n<hr>\n<p>这就是大脑对于身体进行再次关联学习后产生的现象。</p>\n<h2 id=\"游戏中的身体学习\"><a href=\"#游戏中的身体学习\" class=\"headerlink\" title=\"游戏中的身体学习\"></a>游戏中的身体学习</h2><p>——“身体扩展关联学习”的相关内容</p>\n<p>这里要举的例子是<strong>《<a href=\"http://baike.baidu.com/link?url=2t_3mVswt2mZ0WGsLpSIWTZ9YDLd8dLmR0MT9VK9Mr1UYJxatjh2sOzEmMpOAM6KyJOxHaYvEEyhd3xE4eW12Rlg82tT_iOkjOmvtIlKcz85ZysJCcSNROCZ4NG9BlxaL3PCffum5H2B9YyOEB1jX7gSLWF6syy_vMEOttZoyLrIoxaTEjnllMpbsnbRpxc9-Hl2fHdONHNCtLywrS3--q\" target=\"_blank\" rel=\"noopener\">超级马里奥64</a>》</strong></p>\n<blockquote>\n<p>超级马里奥64</p>\n<p>发行时间：1996年</p>\n<p>游戏平台：任天堂（简称64）</p>\n<p>这是niendo64的首发游戏，游戏手柄增设了3D摇杆。<br>从这部作品开始，“马里奥”就变成了第三人称3D动作游戏。也成为了给之后的3D游戏带来巨大影响的里程碑游戏。</p>\n</blockquote>\n<p>在作品真正的游戏开始之前准备一个学习关卡。</p>\n<p>在这个关卡不会有敌人袭击，玩家可以自由地操作游戏角色进行练习。<br>此时，在跑动、跳跃、爬树等动作的时候，玩家就可以把手柄的操作和马里奥的动作在大脑里关联起来。这个过程就是大脑对游戏中身体的扩展部分进行再次关联学习。在经过多次是失败后，玩家就可以成为完美操作马里奥游戏的大师了。</p>\n<p>这时，大脑和身体的关联学习就可以说是完成了。</p>\n<p><strong>《<a href=\"http://baike.baidu.com/link?url=HAXhgM_EnT2vZRS-zqhnD4y9t_xaIjYPNwGE7CPmgLyOpJaI7WowtyfT2pqbzm8GOLIAsrWBXle2dNoDYbSRJa\" target=\"_blank\" rel=\"noopener\">战地3</a>》</strong></p>\n<p>同样的身体关联学习过程，也存在于“战地3”这样的第一人称游戏中。与《超级马里奥64》有所不同的是，第一人称视角下不存在玩家能够通过视觉观察到的“自己的投影对象”。但玩家可以通过画面中的胳膊、枪械以及手柄操作等动作信号和体感的反馈，切实感受到游戏世界中（被扩展的）身体的存在。随后玩家通过游戏，就可以进行身体的关联学习。</p>\n<p><strong>《俄罗斯方块》</strong></p>\n<p>也有一些游戏，并不存在明确的游戏角色，比如《俄罗斯方块》。当中，玩家能够操作的是下落的方块，即玩家将方块当成自己身体的扩展。紧接着，随着方块不断堆积，当方块落到相应位置无法操作时，玩家又失去了将这个方块当成自己身体扩展部分的认知，转而将这种认知切换到接下来要落下的方块上去。</p>\n<p>这种类型的游戏通过让玩家反复进行身体关联学习的过程，就不会在身体扩展部分的切换中感到不自然。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li><p>人类通过 <strong>Hand Regard </strong>对身体感觉进行后天学习。</p>\n</li>\n<li><p>身体感觉可以通过再次关联学习进行修正和扩展。</p>\n</li>\n<li><p>游戏的操作对象，就是人类通过再次关联学习扩展的身体。</p>\n</li>\n<li><p>游戏内的扩展身体会随着状况不同而发生各种各样的变化。</p>\n</li>\n</ul>\n<blockquote>\n<p>摘自《游戏性是什么》第4章（游戏和身体）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n"},{"title":"结构","date":"2016-06-11T10:55:56.000Z","_content":"\n本章将回归到现实社会视角之中。现实社会的各种概念，对商业游戏开发有着怎样的影响？\n\n回答这个问题的关键点，就是“结构”。\n\n——《游戏性是什么》第13章\n\n\n## 什么是结构\n**结构**一词，原本是建筑学中的专业术语，意为“构造”。\n\n之后，这一词也在计算机科学和电子工程等领域中使用，意为“设计思想”。\n\n相信不少人都听说过“CPU和PC的结构”这种说法吧。\n\n现在这个词的意义又进一步扩展了，已经广泛应用于媒体论、经营学、哲学、法学等各领域。\n\n在这其中，以社会学观点引起大家注目的，是美国学者劳伦斯·莱斯格关于互联网时代版权研究的《代码》。\n\n莱斯格论述道，人的活动在无意间会收到很多因素的规制，如法律、习惯、市场和结构。\n\n他在对社会上所存在的多样的结构样态进行解说的同时，指出其本质是为了让利用者遵守某种规范而设计阶段开始就被设计出来的一种系统。\n\n另外，日本思想家东浩纪认为，结构就是**环境管理型权力**。\n\n人在成长的过程中学习法律和社会习惯等，学习社会中行使权力的方式，以及社会所要求的举动、行为等。另一方面，在社会中特定的意图下，还存在着以一种无形的形态融入环境中、无意识间规制了人行为的“结构”。\n\n举个例子，让我们来看下NHK征收视费的相关内容。\n\n日本《放送法》第64条规定：“拥有能够收看协会节目的收视设备的人，必须与协会签订关于接收节目的相关合同。\n\n不过，配置有不以收看节目为目的的收视设备、无线电广播（指传送语音以及其他无线电内容、但并不用于电视节目），或禁用于多工调频的收视设备的群体，则不受此限制。”\n\n所以，如果是拥有电视但接收节目信号的目的并非收看节目，以及没有电视的情况下，以自己的意志不支付收视费的选择就能够合法化了。\n\n不过，在出租公寓签订了优先电视等集体合同的情况下，有时管理公司会将集体合同中的租凭费追加到租金中。\n\n在这种情况下，无论你是否拥有电视机，都不可回避支付收视费。这就是一个环境管理型权力的不错案例。\n\n除此之外，还有像使用录音录像机器、DVD等私人录制设备录制的补偿金等，也都可以作为这种类型的例子。因为不管是不是对电视节目等进行录像和录音，消费者都必须支付这个费用。\n\n## 经营学中的结构\n近年来，在经营学中也出现了一个叫作**商业结构**的概念.\n\n>**商业结构是为了让商务活动中的必要要素和抽象概念等结构得以体系化呈现的架构**\n\n在《商业·结构》这本书中，藤本隆宏、青岛矢一、武石彰将其定义为“商业过程中各种活动要素之间相互依存或者相互关联的固有方式”。\n\n举个例子，如果游戏市场盗版猖獗，实体游戏业务发展就会艰难。而网络游戏则成为产业，取得巨大成功。\n\n这就是因为网游采用了客户服务型的游戏结构，并遵从了以预付卡进行收费结算的商业习惯。这一连串的结构应该就是商业结构了。\n\n## 信息社会论中的结构\n\n在信息社会论中也应用了结构的概念。日本社会学家滨野智史在《结构的生态系统》一书中指出，结构是：\n>**“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。**\n\n在这本书中，将关于结构的研究，推广到一个更加普及适化的层面。\n\n举个例子，让我们比较一下快餐店和高级餐厅中的椅子。快餐店的椅子很小，而且很多都是塑料制成的。\n\n而高级餐厅的椅子就很大，可以提供舒适的体验。快餐店的这种坚硬的、小号的椅子，有助于提升快餐店的餐位周转率。\n\n接着举例。丰田汽车研发除了一项服务，就是可以自动从驾驶员呼出的气体中检测酒精含量，如果检测出了一定浓度的酒精含量，就无法发动车子。\n\n假设这种服务，不仅限于丰田车，而是所有车都能装上，那么酒驾在理论上是不可能存在的了。\n\n而且，当这项记述应用100年后，大家可能都会忘记应用这项技术的原因（完全消灭酒驾行为）了吧。根据滨野的观点，这也是结构。\n\n## 游戏中的结构\n至此，以对游戏进行符号学上的结构性分析为开端，继而研究了Ludo和故事性（Narreme）的相关内容。通过这些研究发现，游戏中存在由Ludo和Narreme相互补充所构成的结构。这可以说是从着眼于游戏自身构造而得到的结论。\n\n另外，影响游戏的外部因素也很多。第一，游戏的运行环境，如以游戏机为首的硬件设备。屡次将游戏硬件设备称为游戏平台，这其实是指游戏软件的内容和形式是由游戏平台结构（设计思想、标准）而定的意思。游戏是无法超越游戏机的技术规格的，这一点显而易见。\n\n另外，游戏硬件设备是根据制造厂商的商业战略制作的。\n\n也就是说，游戏无论是在技术上还是在商业上，都与各种平台紧密相关。而且，这点也给游戏设计自身带来了巨大的影响。\n\n## PONG的商业结构\n\n结构给游戏设计带来了哪些影响？回到游戏历史中来考察这一点。\n\n数字游戏的产业化是从街机游戏开始的。不过，师姐最初的商业数字游戏[Computer Space](https://en.wikipedia.org/wiki/Computer_Space)却并没能取得商业上的成功。最早获得巨大成功的是在总结了Computer Space 的经验教训之后所制作的[PONG](https://zh.wikipedia.org/wiki/%E4%B9%93)[（快速明白PONG）](http://www.ponggame.org/)\n\n区分出Computer Space和PONG的高下的，正是：\n>是否有意识地将商业结构结合到游戏设计之中\n\nComputer Space是[space war!](https://en.wikipedia.org/wiki/Spacewar!)（[快速了解space war!](http://www.masswerk.at/spacewar/)）的街机移植版。space war! 的硬件平台是小型计算机PDP-1，开发者也好，玩家也好，都是学生和研究者。\n\nspace war!相当于今天的免费软件，发布后出现了大量的复制和改良版本，之后它还作为PDP-1的demoSoft被捆绑发行。也就是说space war!中并不存杂直接商业结构。\n\nComputer Space的开发制作欠缺深层次的商业结构分析，仅是比较忠实于原版的移植，但硬件平台已经变成街机。\n\n其购买主力人群是酒馆老板，以期待能够赶超当时已经聚集大量人气的弹珠球。\n\n不过，在研究室中具有人气的游戏，转移到娱乐场所时，却并没有聚集到多少人气。\n\n再加上研究室和酒馆的定位不同，内容复杂的游戏并不适合客人投币来玩。\n\n之后，该作品在开发续作时，开发者思考了游戏究竟应该具有什么样的内容，才能让客人乐在其中，也就是说，思考了商业结构。其思考结果得出如下几个要素：\n- 以赚钱为目的\n\n- 玩家是酒馆的客人\n\n- 和朋友们一起找乐子\n\n- game over时可以投币继续\n\n- 单手就能玩的简单操作\n\n综合上述要素开发出的游戏是PONG，一部大为热卖的作品。\n\nPONG的开发背景中，存在街机的商业结构，即厂商将游戏机卖给娱乐场所盈利，娱乐场所靠客人玩游戏投币盈利。\n\n顺便说一下，布什内尔在开发PONG的时候成立了雅达利公司。而且这部作品的热卖使他成为了美国梦的代表者。\n\n在这之后，雅达利公司改正了space war!中的缺点，发售了[Asteroid](https://en.wikipedia.org/wiki/Asteroids_(video_game)) （[快速了解Asteroid](http://www.freeasteroids.org/)）。\n\n据记录，Asteroid也获得了成功，还带来了闲暇时间社会人士大量出入娱乐场所进行游戏的社会现象。\n\n## 游戏设计的激进化\n由PONG中分析得出的街机游戏商业结构和游戏设计间的关系，成为了之后游戏的良好范。《打砖块》《太空侵略者》《吃豆人》等，全都是在这个商业结构的基础上设计的。\n\n街机游戏的开发中，最重要的一点是“确保购买使用游戏机的店铺的利益”。\n\n只有运营商得到了恰当的利益，游戏厂商才能的到新游戏作品的订单。\n\n正因如此，游戏开发设计的相关人员有必要对店铺中玩家的行动和嗜好进行深层次的观察。\n\n同时，关于投1枚游戏币可玩的最长时间，也就是游戏制作时有必要考虑的问题。因此在街机游戏的商业结构中，有着\n\n>游戏厂商：运营商：玩家\n\n这种B2B2C模式的特征。\n\n当时的街机游戏开发可以总结为“制作出让玩家愉快地进行游戏，引导玩家多次投币的装置”。\n\n不过，这里也存在一种悖论，即需要承担“玩家熟练度上升，用1枚游戏币即可长时间玩游戏”的风险。\n\n不过这种商业结构，逐渐给游戏设计带来了激进化问题。\n\n对于运营商来说，如果玩家投1枚游戏币就能长时间玩耍，利益就无法增长。因此，游戏厂商就面临运营商提高游戏难度的压力。\n\n不过仅仅提高游戏难度，又会让玩家敬而远之。因此到了80年代中期，游戏的设计方向转变为：\n\n>如何以吸引玩家的高难度挑战，来增加单位时间内游戏币的投入量（income）。\n\n这个时期的代表作，可以以《魔界村》为例。利用点绘方式描绘出的美丽图像，以及十分具有震撼力的音效，都会引起大家的瞩目。\n\n而且在游戏开始时会让玩家预览整个场景的结构，向玩家传达后续关卡的信息，设计者在唤起玩家挑战欲望这一点上下足了功夫。\n\n## 平板电脑时代的结构\n与商业结构相结合的游戏设计手法现在依然在应用。面向平板电脑的F2P（免费游戏）游戏《部落冲突》（这个就自行搜索了），就是一个很好的例子。\n\n这个游戏的开发者，以战略要素为作品的基础，又推出了“table first stategy”（平板设备最优先战略），可以说在不断留意着平板电脑可用性的同时进行游戏开发。\n\n特别是屏幕滚动功能、帧速率、手势控制、按键配置、点击时间的“舒适度”等，都是公司全员上下一起研究的，如果实在无法让玩家获得舒适感，就需要继续调整.\n\n## 技术的进步与结构\n在构成游戏的Ludo外部还存在各种各样的结构，都给游戏设计带来了很大的影响。在结构中，既有游戏平台（硬件）结构，也有更加外围的商业结构。\n\n而且，还有一种能够给所有的这些都带来普遍影响的结构，就是以半导体和通信为代表的技术。\n\n技术的进步催生了信的硬件（游戏平台结构）、新的商业模式（商业结构）和新的游戏（Ludo的结构）。\n\n如果回溯从街机游戏到家用游戏机，以至于到社交游戏的变迁历程，就能明确感受到技术进步给游戏带来的影响\n\n## 小结：\n- 虽然结构原本是建筑学中的专业术语，不过它逐渐在社会的各种领域中都得到了使用。\n\n- Computer Space失败了，而PONG却获得成功，出现这种差异的原因在于是否将商业结构结合到游戏开发中。\n\n- 游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。\n\n- 游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。\n\n***\n至此，从“游戏”和“游戏性”两词“定义”的模糊性着手。为了独立研究“游戏性”的准确概念。以“人类是如何认识游戏的，又是如何进行游戏的”为线索，从“身体”“视觉”“世界”“触觉”四个角度进行探究。\n\n前半部分从多个角度分析人对游戏的认识机制，也是为了方便理解人接触游戏直到沉迷于游戏这个过程。\n\n后半部分，灵活运用了现在在各研究领域中都得到应用的一般性动机理论，分析了人沉迷游戏的过程。同时从游戏设计师的角度出发，研究了这种机制在游戏设计中的应用，其结构就是以游戏平衡性的形式呈现出来的。\n\n在这些内容上，对游戏性的本质进行思考，终于接近了“Ludo”这个概念。（引导玩家进行效率预估的设计机制，以便于玩家通过实际身体/限制身体认知目标世界，以达成自己所设定的目标）。\n\n极端概括来说，Ludo是游戏独特的“构造”，给这个构造赋予意识就是“Narreme”。Narreme是叙事的基本构成要素，即能让人感知到某种故事的符号。Narreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。\n\n影响游戏体验的外部因素是**结构**。\n\n探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过Hand Regard等方式来学习以及成长。\n\n之后，交互行为的经验，就会以故事的片段，即Narreme的形式铭刻在我们的记忆中。通过关联Narreme的片段，我们来理解“人生”这个故事，这些记忆也会成为一种指导，作为继续生存下去的基础。如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。\n\n\n\n> 摘自《游戏性是什么》第13章（结构）喜欢这本书，\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n\n","source":"_posts/文集/游戏性是什么/游戏性是什么-结构.md","raw":"---\ntitle: 结构\ndate: 2016-06-11 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n本章将回归到现实社会视角之中。现实社会的各种概念，对商业游戏开发有着怎样的影响？\n\n回答这个问题的关键点，就是“结构”。\n\n——《游戏性是什么》第13章\n\n\n## 什么是结构\n**结构**一词，原本是建筑学中的专业术语，意为“构造”。\n\n之后，这一词也在计算机科学和电子工程等领域中使用，意为“设计思想”。\n\n相信不少人都听说过“CPU和PC的结构”这种说法吧。\n\n现在这个词的意义又进一步扩展了，已经广泛应用于媒体论、经营学、哲学、法学等各领域。\n\n在这其中，以社会学观点引起大家注目的，是美国学者劳伦斯·莱斯格关于互联网时代版权研究的《代码》。\n\n莱斯格论述道，人的活动在无意间会收到很多因素的规制，如法律、习惯、市场和结构。\n\n他在对社会上所存在的多样的结构样态进行解说的同时，指出其本质是为了让利用者遵守某种规范而设计阶段开始就被设计出来的一种系统。\n\n另外，日本思想家东浩纪认为，结构就是**环境管理型权力**。\n\n人在成长的过程中学习法律和社会习惯等，学习社会中行使权力的方式，以及社会所要求的举动、行为等。另一方面，在社会中特定的意图下，还存在着以一种无形的形态融入环境中、无意识间规制了人行为的“结构”。\n\n举个例子，让我们来看下NHK征收视费的相关内容。\n\n日本《放送法》第64条规定：“拥有能够收看协会节目的收视设备的人，必须与协会签订关于接收节目的相关合同。\n\n不过，配置有不以收看节目为目的的收视设备、无线电广播（指传送语音以及其他无线电内容、但并不用于电视节目），或禁用于多工调频的收视设备的群体，则不受此限制。”\n\n所以，如果是拥有电视但接收节目信号的目的并非收看节目，以及没有电视的情况下，以自己的意志不支付收视费的选择就能够合法化了。\n\n不过，在出租公寓签订了优先电视等集体合同的情况下，有时管理公司会将集体合同中的租凭费追加到租金中。\n\n在这种情况下，无论你是否拥有电视机，都不可回避支付收视费。这就是一个环境管理型权力的不错案例。\n\n除此之外，还有像使用录音录像机器、DVD等私人录制设备录制的补偿金等，也都可以作为这种类型的例子。因为不管是不是对电视节目等进行录像和录音，消费者都必须支付这个费用。\n\n## 经营学中的结构\n近年来，在经营学中也出现了一个叫作**商业结构**的概念.\n\n>**商业结构是为了让商务活动中的必要要素和抽象概念等结构得以体系化呈现的架构**\n\n在《商业·结构》这本书中，藤本隆宏、青岛矢一、武石彰将其定义为“商业过程中各种活动要素之间相互依存或者相互关联的固有方式”。\n\n举个例子，如果游戏市场盗版猖獗，实体游戏业务发展就会艰难。而网络游戏则成为产业，取得巨大成功。\n\n这就是因为网游采用了客户服务型的游戏结构，并遵从了以预付卡进行收费结算的商业习惯。这一连串的结构应该就是商业结构了。\n\n## 信息社会论中的结构\n\n在信息社会论中也应用了结构的概念。日本社会学家滨野智史在《结构的生态系统》一书中指出，结构是：\n>**“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。**\n\n在这本书中，将关于结构的研究，推广到一个更加普及适化的层面。\n\n举个例子，让我们比较一下快餐店和高级餐厅中的椅子。快餐店的椅子很小，而且很多都是塑料制成的。\n\n而高级餐厅的椅子就很大，可以提供舒适的体验。快餐店的这种坚硬的、小号的椅子，有助于提升快餐店的餐位周转率。\n\n接着举例。丰田汽车研发除了一项服务，就是可以自动从驾驶员呼出的气体中检测酒精含量，如果检测出了一定浓度的酒精含量，就无法发动车子。\n\n假设这种服务，不仅限于丰田车，而是所有车都能装上，那么酒驾在理论上是不可能存在的了。\n\n而且，当这项记述应用100年后，大家可能都会忘记应用这项技术的原因（完全消灭酒驾行为）了吧。根据滨野的观点，这也是结构。\n\n## 游戏中的结构\n至此，以对游戏进行符号学上的结构性分析为开端，继而研究了Ludo和故事性（Narreme）的相关内容。通过这些研究发现，游戏中存在由Ludo和Narreme相互补充所构成的结构。这可以说是从着眼于游戏自身构造而得到的结论。\n\n另外，影响游戏的外部因素也很多。第一，游戏的运行环境，如以游戏机为首的硬件设备。屡次将游戏硬件设备称为游戏平台，这其实是指游戏软件的内容和形式是由游戏平台结构（设计思想、标准）而定的意思。游戏是无法超越游戏机的技术规格的，这一点显而易见。\n\n另外，游戏硬件设备是根据制造厂商的商业战略制作的。\n\n也就是说，游戏无论是在技术上还是在商业上，都与各种平台紧密相关。而且，这点也给游戏设计自身带来了巨大的影响。\n\n## PONG的商业结构\n\n结构给游戏设计带来了哪些影响？回到游戏历史中来考察这一点。\n\n数字游戏的产业化是从街机游戏开始的。不过，师姐最初的商业数字游戏[Computer Space](https://en.wikipedia.org/wiki/Computer_Space)却并没能取得商业上的成功。最早获得巨大成功的是在总结了Computer Space 的经验教训之后所制作的[PONG](https://zh.wikipedia.org/wiki/%E4%B9%93)[（快速明白PONG）](http://www.ponggame.org/)\n\n区分出Computer Space和PONG的高下的，正是：\n>是否有意识地将商业结构结合到游戏设计之中\n\nComputer Space是[space war!](https://en.wikipedia.org/wiki/Spacewar!)（[快速了解space war!](http://www.masswerk.at/spacewar/)）的街机移植版。space war! 的硬件平台是小型计算机PDP-1，开发者也好，玩家也好，都是学生和研究者。\n\nspace war!相当于今天的免费软件，发布后出现了大量的复制和改良版本，之后它还作为PDP-1的demoSoft被捆绑发行。也就是说space war!中并不存杂直接商业结构。\n\nComputer Space的开发制作欠缺深层次的商业结构分析，仅是比较忠实于原版的移植，但硬件平台已经变成街机。\n\n其购买主力人群是酒馆老板，以期待能够赶超当时已经聚集大量人气的弹珠球。\n\n不过，在研究室中具有人气的游戏，转移到娱乐场所时，却并没有聚集到多少人气。\n\n再加上研究室和酒馆的定位不同，内容复杂的游戏并不适合客人投币来玩。\n\n之后，该作品在开发续作时，开发者思考了游戏究竟应该具有什么样的内容，才能让客人乐在其中，也就是说，思考了商业结构。其思考结果得出如下几个要素：\n- 以赚钱为目的\n\n- 玩家是酒馆的客人\n\n- 和朋友们一起找乐子\n\n- game over时可以投币继续\n\n- 单手就能玩的简单操作\n\n综合上述要素开发出的游戏是PONG，一部大为热卖的作品。\n\nPONG的开发背景中，存在街机的商业结构，即厂商将游戏机卖给娱乐场所盈利，娱乐场所靠客人玩游戏投币盈利。\n\n顺便说一下，布什内尔在开发PONG的时候成立了雅达利公司。而且这部作品的热卖使他成为了美国梦的代表者。\n\n在这之后，雅达利公司改正了space war!中的缺点，发售了[Asteroid](https://en.wikipedia.org/wiki/Asteroids_(video_game)) （[快速了解Asteroid](http://www.freeasteroids.org/)）。\n\n据记录，Asteroid也获得了成功，还带来了闲暇时间社会人士大量出入娱乐场所进行游戏的社会现象。\n\n## 游戏设计的激进化\n由PONG中分析得出的街机游戏商业结构和游戏设计间的关系，成为了之后游戏的良好范。《打砖块》《太空侵略者》《吃豆人》等，全都是在这个商业结构的基础上设计的。\n\n街机游戏的开发中，最重要的一点是“确保购买使用游戏机的店铺的利益”。\n\n只有运营商得到了恰当的利益，游戏厂商才能的到新游戏作品的订单。\n\n正因如此，游戏开发设计的相关人员有必要对店铺中玩家的行动和嗜好进行深层次的观察。\n\n同时，关于投1枚游戏币可玩的最长时间，也就是游戏制作时有必要考虑的问题。因此在街机游戏的商业结构中，有着\n\n>游戏厂商：运营商：玩家\n\n这种B2B2C模式的特征。\n\n当时的街机游戏开发可以总结为“制作出让玩家愉快地进行游戏，引导玩家多次投币的装置”。\n\n不过，这里也存在一种悖论，即需要承担“玩家熟练度上升，用1枚游戏币即可长时间玩游戏”的风险。\n\n不过这种商业结构，逐渐给游戏设计带来了激进化问题。\n\n对于运营商来说，如果玩家投1枚游戏币就能长时间玩耍，利益就无法增长。因此，游戏厂商就面临运营商提高游戏难度的压力。\n\n不过仅仅提高游戏难度，又会让玩家敬而远之。因此到了80年代中期，游戏的设计方向转变为：\n\n>如何以吸引玩家的高难度挑战，来增加单位时间内游戏币的投入量（income）。\n\n这个时期的代表作，可以以《魔界村》为例。利用点绘方式描绘出的美丽图像，以及十分具有震撼力的音效，都会引起大家的瞩目。\n\n而且在游戏开始时会让玩家预览整个场景的结构，向玩家传达后续关卡的信息，设计者在唤起玩家挑战欲望这一点上下足了功夫。\n\n## 平板电脑时代的结构\n与商业结构相结合的游戏设计手法现在依然在应用。面向平板电脑的F2P（免费游戏）游戏《部落冲突》（这个就自行搜索了），就是一个很好的例子。\n\n这个游戏的开发者，以战略要素为作品的基础，又推出了“table first stategy”（平板设备最优先战略），可以说在不断留意着平板电脑可用性的同时进行游戏开发。\n\n特别是屏幕滚动功能、帧速率、手势控制、按键配置、点击时间的“舒适度”等，都是公司全员上下一起研究的，如果实在无法让玩家获得舒适感，就需要继续调整.\n\n## 技术的进步与结构\n在构成游戏的Ludo外部还存在各种各样的结构，都给游戏设计带来了很大的影响。在结构中，既有游戏平台（硬件）结构，也有更加外围的商业结构。\n\n而且，还有一种能够给所有的这些都带来普遍影响的结构，就是以半导体和通信为代表的技术。\n\n技术的进步催生了信的硬件（游戏平台结构）、新的商业模式（商业结构）和新的游戏（Ludo的结构）。\n\n如果回溯从街机游戏到家用游戏机，以至于到社交游戏的变迁历程，就能明确感受到技术进步给游戏带来的影响\n\n## 小结：\n- 虽然结构原本是建筑学中的专业术语，不过它逐渐在社会的各种领域中都得到了使用。\n\n- Computer Space失败了，而PONG却获得成功，出现这种差异的原因在于是否将商业结构结合到游戏开发中。\n\n- 游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。\n\n- 游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。\n\n***\n至此，从“游戏”和“游戏性”两词“定义”的模糊性着手。为了独立研究“游戏性”的准确概念。以“人类是如何认识游戏的，又是如何进行游戏的”为线索，从“身体”“视觉”“世界”“触觉”四个角度进行探究。\n\n前半部分从多个角度分析人对游戏的认识机制，也是为了方便理解人接触游戏直到沉迷于游戏这个过程。\n\n后半部分，灵活运用了现在在各研究领域中都得到应用的一般性动机理论，分析了人沉迷游戏的过程。同时从游戏设计师的角度出发，研究了这种机制在游戏设计中的应用，其结构就是以游戏平衡性的形式呈现出来的。\n\n在这些内容上，对游戏性的本质进行思考，终于接近了“Ludo”这个概念。（引导玩家进行效率预估的设计机制，以便于玩家通过实际身体/限制身体认知目标世界，以达成自己所设定的目标）。\n\n极端概括来说，Ludo是游戏独特的“构造”，给这个构造赋予意识就是“Narreme”。Narreme是叙事的基本构成要素，即能让人感知到某种故事的符号。Narreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。\n\n影响游戏体验的外部因素是**结构**。\n\n探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过Hand Regard等方式来学习以及成长。\n\n之后，交互行为的经验，就会以故事的片段，即Narreme的形式铭刻在我们的记忆中。通过关联Narreme的片段，我们来理解“人生”这个故事，这些记忆也会成为一种指导，作为继续生存下去的基础。如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。\n\n\n\n> 摘自《游戏性是什么》第13章（结构）喜欢这本书，\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n\n","slug":"文集/游戏性是什么/游戏性是什么-结构","published":1,"updated":"2018-08-04T06:32:45.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkce3006km4cmfztreby5","content":"<p>本章将回归到现实社会视角之中。现实社会的各种概念，对商业游戏开发有着怎样的影响？</p>\n<p>回答这个问题的关键点，就是“结构”。</p>\n<p>——《游戏性是什么》第13章</p>\n<h2 id=\"什么是结构\"><a href=\"#什么是结构\" class=\"headerlink\" title=\"什么是结构\"></a>什么是结构</h2><p><strong>结构</strong>一词，原本是建筑学中的专业术语，意为“构造”。</p>\n<p>之后，这一词也在计算机科学和电子工程等领域中使用，意为“设计思想”。</p>\n<p>相信不少人都听说过“CPU和PC的结构”这种说法吧。</p>\n<p>现在这个词的意义又进一步扩展了，已经广泛应用于媒体论、经营学、哲学、法学等各领域。</p>\n<p>在这其中，以社会学观点引起大家注目的，是美国学者劳伦斯·莱斯格关于互联网时代版权研究的《代码》。</p>\n<p>莱斯格论述道，人的活动在无意间会收到很多因素的规制，如法律、习惯、市场和结构。</p>\n<p>他在对社会上所存在的多样的结构样态进行解说的同时，指出其本质是为了让利用者遵守某种规范而设计阶段开始就被设计出来的一种系统。</p>\n<p>另外，日本思想家东浩纪认为，结构就是<strong>环境管理型权力</strong>。</p>\n<p>人在成长的过程中学习法律和社会习惯等，学习社会中行使权力的方式，以及社会所要求的举动、行为等。另一方面，在社会中特定的意图下，还存在着以一种无形的形态融入环境中、无意识间规制了人行为的“结构”。</p>\n<p>举个例子，让我们来看下NHK征收视费的相关内容。</p>\n<p>日本《放送法》第64条规定：“拥有能够收看协会节目的收视设备的人，必须与协会签订关于接收节目的相关合同。</p>\n<p>不过，配置有不以收看节目为目的的收视设备、无线电广播（指传送语音以及其他无线电内容、但并不用于电视节目），或禁用于多工调频的收视设备的群体，则不受此限制。”</p>\n<p>所以，如果是拥有电视但接收节目信号的目的并非收看节目，以及没有电视的情况下，以自己的意志不支付收视费的选择就能够合法化了。</p>\n<p>不过，在出租公寓签订了优先电视等集体合同的情况下，有时管理公司会将集体合同中的租凭费追加到租金中。</p>\n<p>在这种情况下，无论你是否拥有电视机，都不可回避支付收视费。这就是一个环境管理型权力的不错案例。</p>\n<p>除此之外，还有像使用录音录像机器、DVD等私人录制设备录制的补偿金等，也都可以作为这种类型的例子。因为不管是不是对电视节目等进行录像和录音，消费者都必须支付这个费用。</p>\n<h2 id=\"经营学中的结构\"><a href=\"#经营学中的结构\" class=\"headerlink\" title=\"经营学中的结构\"></a>经营学中的结构</h2><p>近年来，在经营学中也出现了一个叫作<strong>商业结构</strong>的概念.</p>\n<blockquote>\n<p><strong>商业结构是为了让商务活动中的必要要素和抽象概念等结构得以体系化呈现的架构</strong></p>\n</blockquote>\n<p>在《商业·结构》这本书中，藤本隆宏、青岛矢一、武石彰将其定义为“商业过程中各种活动要素之间相互依存或者相互关联的固有方式”。</p>\n<p>举个例子，如果游戏市场盗版猖獗，实体游戏业务发展就会艰难。而网络游戏则成为产业，取得巨大成功。</p>\n<p>这就是因为网游采用了客户服务型的游戏结构，并遵从了以预付卡进行收费结算的商业习惯。这一连串的结构应该就是商业结构了。</p>\n<h2 id=\"信息社会论中的结构\"><a href=\"#信息社会论中的结构\" class=\"headerlink\" title=\"信息社会论中的结构\"></a>信息社会论中的结构</h2><p>在信息社会论中也应用了结构的概念。日本社会学家滨野智史在《结构的生态系统》一书中指出，结构是：</p>\n<blockquote>\n<p><strong>“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。</strong></p>\n</blockquote>\n<p>在这本书中，将关于结构的研究，推广到一个更加普及适化的层面。</p>\n<p>举个例子，让我们比较一下快餐店和高级餐厅中的椅子。快餐店的椅子很小，而且很多都是塑料制成的。</p>\n<p>而高级餐厅的椅子就很大，可以提供舒适的体验。快餐店的这种坚硬的、小号的椅子，有助于提升快餐店的餐位周转率。</p>\n<p>接着举例。丰田汽车研发除了一项服务，就是可以自动从驾驶员呼出的气体中检测酒精含量，如果检测出了一定浓度的酒精含量，就无法发动车子。</p>\n<p>假设这种服务，不仅限于丰田车，而是所有车都能装上，那么酒驾在理论上是不可能存在的了。</p>\n<p>而且，当这项记述应用100年后，大家可能都会忘记应用这项技术的原因（完全消灭酒驾行为）了吧。根据滨野的观点，这也是结构。</p>\n<h2 id=\"游戏中的结构\"><a href=\"#游戏中的结构\" class=\"headerlink\" title=\"游戏中的结构\"></a>游戏中的结构</h2><p>至此，以对游戏进行符号学上的结构性分析为开端，继而研究了Ludo和故事性（Narreme）的相关内容。通过这些研究发现，游戏中存在由Ludo和Narreme相互补充所构成的结构。这可以说是从着眼于游戏自身构造而得到的结论。</p>\n<p>另外，影响游戏的外部因素也很多。第一，游戏的运行环境，如以游戏机为首的硬件设备。屡次将游戏硬件设备称为游戏平台，这其实是指游戏软件的内容和形式是由游戏平台结构（设计思想、标准）而定的意思。游戏是无法超越游戏机的技术规格的，这一点显而易见。</p>\n<p>另外，游戏硬件设备是根据制造厂商的商业战略制作的。</p>\n<p>也就是说，游戏无论是在技术上还是在商业上，都与各种平台紧密相关。而且，这点也给游戏设计自身带来了巨大的影响。</p>\n<h2 id=\"PONG的商业结构\"><a href=\"#PONG的商业结构\" class=\"headerlink\" title=\"PONG的商业结构\"></a>PONG的商业结构</h2><p>结构给游戏设计带来了哪些影响？回到游戏历史中来考察这一点。</p>\n<p>数字游戏的产业化是从街机游戏开始的。不过，师姐最初的商业数字游戏<a href=\"https://en.wikipedia.org/wiki/Computer_Space\" target=\"_blank\" rel=\"noopener\">Computer Space</a>却并没能取得商业上的成功。最早获得巨大成功的是在总结了Computer Space 的经验教训之后所制作的<a href=\"https://zh.wikipedia.org/wiki/%E4%B9%93\" target=\"_blank\" rel=\"noopener\">PONG</a><a href=\"http://www.ponggame.org/\" target=\"_blank\" rel=\"noopener\">（快速明白PONG）</a></p>\n<p>区分出Computer Space和PONG的高下的，正是：</p>\n<blockquote>\n<p>是否有意识地将商业结构结合到游戏设计之中</p>\n</blockquote>\n<p>Computer Space是<a href=\"https://en.wikipedia.org/wiki/Spacewar!\" target=\"_blank\" rel=\"noopener\">space war!</a>（<a href=\"http://www.masswerk.at/spacewar/\" target=\"_blank\" rel=\"noopener\">快速了解space war!</a>）的街机移植版。space war! 的硬件平台是小型计算机PDP-1，开发者也好，玩家也好，都是学生和研究者。</p>\n<p>space war!相当于今天的免费软件，发布后出现了大量的复制和改良版本，之后它还作为PDP-1的demoSoft被捆绑发行。也就是说space war!中并不存杂直接商业结构。</p>\n<p>Computer Space的开发制作欠缺深层次的商业结构分析，仅是比较忠实于原版的移植，但硬件平台已经变成街机。</p>\n<p>其购买主力人群是酒馆老板，以期待能够赶超当时已经聚集大量人气的弹珠球。</p>\n<p>不过，在研究室中具有人气的游戏，转移到娱乐场所时，却并没有聚集到多少人气。</p>\n<p>再加上研究室和酒馆的定位不同，内容复杂的游戏并不适合客人投币来玩。</p>\n<p>之后，该作品在开发续作时，开发者思考了游戏究竟应该具有什么样的内容，才能让客人乐在其中，也就是说，思考了商业结构。其思考结果得出如下几个要素：</p>\n<ul>\n<li><p>以赚钱为目的</p>\n</li>\n<li><p>玩家是酒馆的客人</p>\n</li>\n<li><p>和朋友们一起找乐子</p>\n</li>\n<li><p>game over时可以投币继续</p>\n</li>\n<li><p>单手就能玩的简单操作</p>\n</li>\n</ul>\n<p>综合上述要素开发出的游戏是PONG，一部大为热卖的作品。</p>\n<p>PONG的开发背景中，存在街机的商业结构，即厂商将游戏机卖给娱乐场所盈利，娱乐场所靠客人玩游戏投币盈利。</p>\n<p>顺便说一下，布什内尔在开发PONG的时候成立了雅达利公司。而且这部作品的热卖使他成为了美国梦的代表者。</p>\n<p>在这之后，雅达利公司改正了space war!中的缺点，发售了<a href=\"https://en.wikipedia.org/wiki/Asteroids_(video_game\" target=\"_blank\" rel=\"noopener\">Asteroid</a>) （<a href=\"http://www.freeasteroids.org/\" target=\"_blank\" rel=\"noopener\">快速了解Asteroid</a>）。</p>\n<p>据记录，Asteroid也获得了成功，还带来了闲暇时间社会人士大量出入娱乐场所进行游戏的社会现象。</p>\n<h2 id=\"游戏设计的激进化\"><a href=\"#游戏设计的激进化\" class=\"headerlink\" title=\"游戏设计的激进化\"></a>游戏设计的激进化</h2><p>由PONG中分析得出的街机游戏商业结构和游戏设计间的关系，成为了之后游戏的良好范。《打砖块》《太空侵略者》《吃豆人》等，全都是在这个商业结构的基础上设计的。</p>\n<p>街机游戏的开发中，最重要的一点是“确保购买使用游戏机的店铺的利益”。</p>\n<p>只有运营商得到了恰当的利益，游戏厂商才能的到新游戏作品的订单。</p>\n<p>正因如此，游戏开发设计的相关人员有必要对店铺中玩家的行动和嗜好进行深层次的观察。</p>\n<p>同时，关于投1枚游戏币可玩的最长时间，也就是游戏制作时有必要考虑的问题。因此在街机游戏的商业结构中，有着</p>\n<blockquote>\n<p>游戏厂商：运营商：玩家</p>\n</blockquote>\n<p>这种B2B2C模式的特征。</p>\n<p>当时的街机游戏开发可以总结为“制作出让玩家愉快地进行游戏，引导玩家多次投币的装置”。</p>\n<p>不过，这里也存在一种悖论，即需要承担“玩家熟练度上升，用1枚游戏币即可长时间玩游戏”的风险。</p>\n<p>不过这种商业结构，逐渐给游戏设计带来了激进化问题。</p>\n<p>对于运营商来说，如果玩家投1枚游戏币就能长时间玩耍，利益就无法增长。因此，游戏厂商就面临运营商提高游戏难度的压力。</p>\n<p>不过仅仅提高游戏难度，又会让玩家敬而远之。因此到了80年代中期，游戏的设计方向转变为：</p>\n<blockquote>\n<p>如何以吸引玩家的高难度挑战，来增加单位时间内游戏币的投入量（income）。</p>\n</blockquote>\n<p>这个时期的代表作，可以以《魔界村》为例。利用点绘方式描绘出的美丽图像，以及十分具有震撼力的音效，都会引起大家的瞩目。</p>\n<p>而且在游戏开始时会让玩家预览整个场景的结构，向玩家传达后续关卡的信息，设计者在唤起玩家挑战欲望这一点上下足了功夫。</p>\n<h2 id=\"平板电脑时代的结构\"><a href=\"#平板电脑时代的结构\" class=\"headerlink\" title=\"平板电脑时代的结构\"></a>平板电脑时代的结构</h2><p>与商业结构相结合的游戏设计手法现在依然在应用。面向平板电脑的F2P（免费游戏）游戏《部落冲突》（这个就自行搜索了），就是一个很好的例子。</p>\n<p>这个游戏的开发者，以战略要素为作品的基础，又推出了“table first stategy”（平板设备最优先战略），可以说在不断留意着平板电脑可用性的同时进行游戏开发。</p>\n<p>特别是屏幕滚动功能、帧速率、手势控制、按键配置、点击时间的“舒适度”等，都是公司全员上下一起研究的，如果实在无法让玩家获得舒适感，就需要继续调整.</p>\n<h2 id=\"技术的进步与结构\"><a href=\"#技术的进步与结构\" class=\"headerlink\" title=\"技术的进步与结构\"></a>技术的进步与结构</h2><p>在构成游戏的Ludo外部还存在各种各样的结构，都给游戏设计带来了很大的影响。在结构中，既有游戏平台（硬件）结构，也有更加外围的商业结构。</p>\n<p>而且，还有一种能够给所有的这些都带来普遍影响的结构，就是以半导体和通信为代表的技术。</p>\n<p>技术的进步催生了信的硬件（游戏平台结构）、新的商业模式（商业结构）和新的游戏（Ludo的结构）。</p>\n<p>如果回溯从街机游戏到家用游戏机，以至于到社交游戏的变迁历程，就能明确感受到技术进步给游戏带来的影响</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li><p>虽然结构原本是建筑学中的专业术语，不过它逐渐在社会的各种领域中都得到了使用。</p>\n</li>\n<li><p>Computer Space失败了，而PONG却获得成功，出现这种差异的原因在于是否将商业结构结合到游戏开发中。</p>\n</li>\n<li><p>游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。</p>\n</li>\n<li><p>游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。</p>\n</li>\n</ul>\n<hr>\n<p>至此，从“游戏”和“游戏性”两词“定义”的模糊性着手。为了独立研究“游戏性”的准确概念。以“人类是如何认识游戏的，又是如何进行游戏的”为线索，从“身体”“视觉”“世界”“触觉”四个角度进行探究。</p>\n<p>前半部分从多个角度分析人对游戏的认识机制，也是为了方便理解人接触游戏直到沉迷于游戏这个过程。</p>\n<p>后半部分，灵活运用了现在在各研究领域中都得到应用的一般性动机理论，分析了人沉迷游戏的过程。同时从游戏设计师的角度出发，研究了这种机制在游戏设计中的应用，其结构就是以游戏平衡性的形式呈现出来的。</p>\n<p>在这些内容上，对游戏性的本质进行思考，终于接近了“Ludo”这个概念。（引导玩家进行效率预估的设计机制，以便于玩家通过实际身体/限制身体认知目标世界，以达成自己所设定的目标）。</p>\n<p>极端概括来说，Ludo是游戏独特的“构造”，给这个构造赋予意识就是“Narreme”。Narreme是叙事的基本构成要素，即能让人感知到某种故事的符号。Narreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。</p>\n<p>影响游戏体验的外部因素是<strong>结构</strong>。</p>\n<p>探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过Hand Regard等方式来学习以及成长。</p>\n<p>之后，交互行为的经验，就会以故事的片段，即Narreme的形式铭刻在我们的记忆中。通过关联Narreme的片段，我们来理解“人生”这个故事，这些记忆也会成为一种指导，作为继续生存下去的基础。如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。</p>\n<blockquote>\n<p>摘自《游戏性是什么》第13章（结构）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>本章将回归到现实社会视角之中。现实社会的各种概念，对商业游戏开发有着怎样的影响？</p>\n<p>回答这个问题的关键点，就是“结构”。</p>\n<p>——《游戏性是什么》第13章</p>\n<h2 id=\"什么是结构\"><a href=\"#什么是结构\" class=\"headerlink\" title=\"什么是结构\"></a>什么是结构</h2><p><strong>结构</strong>一词，原本是建筑学中的专业术语，意为“构造”。</p>\n<p>之后，这一词也在计算机科学和电子工程等领域中使用，意为“设计思想”。</p>\n<p>相信不少人都听说过“CPU和PC的结构”这种说法吧。</p>\n<p>现在这个词的意义又进一步扩展了，已经广泛应用于媒体论、经营学、哲学、法学等各领域。</p>\n<p>在这其中，以社会学观点引起大家注目的，是美国学者劳伦斯·莱斯格关于互联网时代版权研究的《代码》。</p>\n<p>莱斯格论述道，人的活动在无意间会收到很多因素的规制，如法律、习惯、市场和结构。</p>\n<p>他在对社会上所存在的多样的结构样态进行解说的同时，指出其本质是为了让利用者遵守某种规范而设计阶段开始就被设计出来的一种系统。</p>\n<p>另外，日本思想家东浩纪认为，结构就是<strong>环境管理型权力</strong>。</p>\n<p>人在成长的过程中学习法律和社会习惯等，学习社会中行使权力的方式，以及社会所要求的举动、行为等。另一方面，在社会中特定的意图下，还存在着以一种无形的形态融入环境中、无意识间规制了人行为的“结构”。</p>\n<p>举个例子，让我们来看下NHK征收视费的相关内容。</p>\n<p>日本《放送法》第64条规定：“拥有能够收看协会节目的收视设备的人，必须与协会签订关于接收节目的相关合同。</p>\n<p>不过，配置有不以收看节目为目的的收视设备、无线电广播（指传送语音以及其他无线电内容、但并不用于电视节目），或禁用于多工调频的收视设备的群体，则不受此限制。”</p>\n<p>所以，如果是拥有电视但接收节目信号的目的并非收看节目，以及没有电视的情况下，以自己的意志不支付收视费的选择就能够合法化了。</p>\n<p>不过，在出租公寓签订了优先电视等集体合同的情况下，有时管理公司会将集体合同中的租凭费追加到租金中。</p>\n<p>在这种情况下，无论你是否拥有电视机，都不可回避支付收视费。这就是一个环境管理型权力的不错案例。</p>\n<p>除此之外，还有像使用录音录像机器、DVD等私人录制设备录制的补偿金等，也都可以作为这种类型的例子。因为不管是不是对电视节目等进行录像和录音，消费者都必须支付这个费用。</p>\n<h2 id=\"经营学中的结构\"><a href=\"#经营学中的结构\" class=\"headerlink\" title=\"经营学中的结构\"></a>经营学中的结构</h2><p>近年来，在经营学中也出现了一个叫作<strong>商业结构</strong>的概念.</p>\n<blockquote>\n<p><strong>商业结构是为了让商务活动中的必要要素和抽象概念等结构得以体系化呈现的架构</strong></p>\n</blockquote>\n<p>在《商业·结构》这本书中，藤本隆宏、青岛矢一、武石彰将其定义为“商业过程中各种活动要素之间相互依存或者相互关联的固有方式”。</p>\n<p>举个例子，如果游戏市场盗版猖獗，实体游戏业务发展就会艰难。而网络游戏则成为产业，取得巨大成功。</p>\n<p>这就是因为网游采用了客户服务型的游戏结构，并遵从了以预付卡进行收费结算的商业习惯。这一连串的结构应该就是商业结构了。</p>\n<h2 id=\"信息社会论中的结构\"><a href=\"#信息社会论中的结构\" class=\"headerlink\" title=\"信息社会论中的结构\"></a>信息社会论中的结构</h2><p>在信息社会论中也应用了结构的概念。日本社会学家滨野智史在《结构的生态系统》一书中指出，结构是：</p>\n<blockquote>\n<p><strong>“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。</strong></p>\n</blockquote>\n<p>在这本书中，将关于结构的研究，推广到一个更加普及适化的层面。</p>\n<p>举个例子，让我们比较一下快餐店和高级餐厅中的椅子。快餐店的椅子很小，而且很多都是塑料制成的。</p>\n<p>而高级餐厅的椅子就很大，可以提供舒适的体验。快餐店的这种坚硬的、小号的椅子，有助于提升快餐店的餐位周转率。</p>\n<p>接着举例。丰田汽车研发除了一项服务，就是可以自动从驾驶员呼出的气体中检测酒精含量，如果检测出了一定浓度的酒精含量，就无法发动车子。</p>\n<p>假设这种服务，不仅限于丰田车，而是所有车都能装上，那么酒驾在理论上是不可能存在的了。</p>\n<p>而且，当这项记述应用100年后，大家可能都会忘记应用这项技术的原因（完全消灭酒驾行为）了吧。根据滨野的观点，这也是结构。</p>\n<h2 id=\"游戏中的结构\"><a href=\"#游戏中的结构\" class=\"headerlink\" title=\"游戏中的结构\"></a>游戏中的结构</h2><p>至此，以对游戏进行符号学上的结构性分析为开端，继而研究了Ludo和故事性（Narreme）的相关内容。通过这些研究发现，游戏中存在由Ludo和Narreme相互补充所构成的结构。这可以说是从着眼于游戏自身构造而得到的结论。</p>\n<p>另外，影响游戏的外部因素也很多。第一，游戏的运行环境，如以游戏机为首的硬件设备。屡次将游戏硬件设备称为游戏平台，这其实是指游戏软件的内容和形式是由游戏平台结构（设计思想、标准）而定的意思。游戏是无法超越游戏机的技术规格的，这一点显而易见。</p>\n<p>另外，游戏硬件设备是根据制造厂商的商业战略制作的。</p>\n<p>也就是说，游戏无论是在技术上还是在商业上，都与各种平台紧密相关。而且，这点也给游戏设计自身带来了巨大的影响。</p>\n<h2 id=\"PONG的商业结构\"><a href=\"#PONG的商业结构\" class=\"headerlink\" title=\"PONG的商业结构\"></a>PONG的商业结构</h2><p>结构给游戏设计带来了哪些影响？回到游戏历史中来考察这一点。</p>\n<p>数字游戏的产业化是从街机游戏开始的。不过，师姐最初的商业数字游戏<a href=\"https://en.wikipedia.org/wiki/Computer_Space\" target=\"_blank\" rel=\"noopener\">Computer Space</a>却并没能取得商业上的成功。最早获得巨大成功的是在总结了Computer Space 的经验教训之后所制作的<a href=\"https://zh.wikipedia.org/wiki/%E4%B9%93\" target=\"_blank\" rel=\"noopener\">PONG</a><a href=\"http://www.ponggame.org/\" target=\"_blank\" rel=\"noopener\">（快速明白PONG）</a></p>\n<p>区分出Computer Space和PONG的高下的，正是：</p>\n<blockquote>\n<p>是否有意识地将商业结构结合到游戏设计之中</p>\n</blockquote>\n<p>Computer Space是<a href=\"https://en.wikipedia.org/wiki/Spacewar!\" target=\"_blank\" rel=\"noopener\">space war!</a>（<a href=\"http://www.masswerk.at/spacewar/\" target=\"_blank\" rel=\"noopener\">快速了解space war!</a>）的街机移植版。space war! 的硬件平台是小型计算机PDP-1，开发者也好，玩家也好，都是学生和研究者。</p>\n<p>space war!相当于今天的免费软件，发布后出现了大量的复制和改良版本，之后它还作为PDP-1的demoSoft被捆绑发行。也就是说space war!中并不存杂直接商业结构。</p>\n<p>Computer Space的开发制作欠缺深层次的商业结构分析，仅是比较忠实于原版的移植，但硬件平台已经变成街机。</p>\n<p>其购买主力人群是酒馆老板，以期待能够赶超当时已经聚集大量人气的弹珠球。</p>\n<p>不过，在研究室中具有人气的游戏，转移到娱乐场所时，却并没有聚集到多少人气。</p>\n<p>再加上研究室和酒馆的定位不同，内容复杂的游戏并不适合客人投币来玩。</p>\n<p>之后，该作品在开发续作时，开发者思考了游戏究竟应该具有什么样的内容，才能让客人乐在其中，也就是说，思考了商业结构。其思考结果得出如下几个要素：</p>\n<ul>\n<li><p>以赚钱为目的</p>\n</li>\n<li><p>玩家是酒馆的客人</p>\n</li>\n<li><p>和朋友们一起找乐子</p>\n</li>\n<li><p>game over时可以投币继续</p>\n</li>\n<li><p>单手就能玩的简单操作</p>\n</li>\n</ul>\n<p>综合上述要素开发出的游戏是PONG，一部大为热卖的作品。</p>\n<p>PONG的开发背景中，存在街机的商业结构，即厂商将游戏机卖给娱乐场所盈利，娱乐场所靠客人玩游戏投币盈利。</p>\n<p>顺便说一下，布什内尔在开发PONG的时候成立了雅达利公司。而且这部作品的热卖使他成为了美国梦的代表者。</p>\n<p>在这之后，雅达利公司改正了space war!中的缺点，发售了<a href=\"https://en.wikipedia.org/wiki/Asteroids_(video_game\" target=\"_blank\" rel=\"noopener\">Asteroid</a>) （<a href=\"http://www.freeasteroids.org/\" target=\"_blank\" rel=\"noopener\">快速了解Asteroid</a>）。</p>\n<p>据记录，Asteroid也获得了成功，还带来了闲暇时间社会人士大量出入娱乐场所进行游戏的社会现象。</p>\n<h2 id=\"游戏设计的激进化\"><a href=\"#游戏设计的激进化\" class=\"headerlink\" title=\"游戏设计的激进化\"></a>游戏设计的激进化</h2><p>由PONG中分析得出的街机游戏商业结构和游戏设计间的关系，成为了之后游戏的良好范。《打砖块》《太空侵略者》《吃豆人》等，全都是在这个商业结构的基础上设计的。</p>\n<p>街机游戏的开发中，最重要的一点是“确保购买使用游戏机的店铺的利益”。</p>\n<p>只有运营商得到了恰当的利益，游戏厂商才能的到新游戏作品的订单。</p>\n<p>正因如此，游戏开发设计的相关人员有必要对店铺中玩家的行动和嗜好进行深层次的观察。</p>\n<p>同时，关于投1枚游戏币可玩的最长时间，也就是游戏制作时有必要考虑的问题。因此在街机游戏的商业结构中，有着</p>\n<blockquote>\n<p>游戏厂商：运营商：玩家</p>\n</blockquote>\n<p>这种B2B2C模式的特征。</p>\n<p>当时的街机游戏开发可以总结为“制作出让玩家愉快地进行游戏，引导玩家多次投币的装置”。</p>\n<p>不过，这里也存在一种悖论，即需要承担“玩家熟练度上升，用1枚游戏币即可长时间玩游戏”的风险。</p>\n<p>不过这种商业结构，逐渐给游戏设计带来了激进化问题。</p>\n<p>对于运营商来说，如果玩家投1枚游戏币就能长时间玩耍，利益就无法增长。因此，游戏厂商就面临运营商提高游戏难度的压力。</p>\n<p>不过仅仅提高游戏难度，又会让玩家敬而远之。因此到了80年代中期，游戏的设计方向转变为：</p>\n<blockquote>\n<p>如何以吸引玩家的高难度挑战，来增加单位时间内游戏币的投入量（income）。</p>\n</blockquote>\n<p>这个时期的代表作，可以以《魔界村》为例。利用点绘方式描绘出的美丽图像，以及十分具有震撼力的音效，都会引起大家的瞩目。</p>\n<p>而且在游戏开始时会让玩家预览整个场景的结构，向玩家传达后续关卡的信息，设计者在唤起玩家挑战欲望这一点上下足了功夫。</p>\n<h2 id=\"平板电脑时代的结构\"><a href=\"#平板电脑时代的结构\" class=\"headerlink\" title=\"平板电脑时代的结构\"></a>平板电脑时代的结构</h2><p>与商业结构相结合的游戏设计手法现在依然在应用。面向平板电脑的F2P（免费游戏）游戏《部落冲突》（这个就自行搜索了），就是一个很好的例子。</p>\n<p>这个游戏的开发者，以战略要素为作品的基础，又推出了“table first stategy”（平板设备最优先战略），可以说在不断留意着平板电脑可用性的同时进行游戏开发。</p>\n<p>特别是屏幕滚动功能、帧速率、手势控制、按键配置、点击时间的“舒适度”等，都是公司全员上下一起研究的，如果实在无法让玩家获得舒适感，就需要继续调整.</p>\n<h2 id=\"技术的进步与结构\"><a href=\"#技术的进步与结构\" class=\"headerlink\" title=\"技术的进步与结构\"></a>技术的进步与结构</h2><p>在构成游戏的Ludo外部还存在各种各样的结构，都给游戏设计带来了很大的影响。在结构中，既有游戏平台（硬件）结构，也有更加外围的商业结构。</p>\n<p>而且，还有一种能够给所有的这些都带来普遍影响的结构，就是以半导体和通信为代表的技术。</p>\n<p>技术的进步催生了信的硬件（游戏平台结构）、新的商业模式（商业结构）和新的游戏（Ludo的结构）。</p>\n<p>如果回溯从街机游戏到家用游戏机，以至于到社交游戏的变迁历程，就能明确感受到技术进步给游戏带来的影响</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li><p>虽然结构原本是建筑学中的专业术语，不过它逐渐在社会的各种领域中都得到了使用。</p>\n</li>\n<li><p>Computer Space失败了，而PONG却获得成功，出现这种差异的原因在于是否将商业结构结合到游戏开发中。</p>\n</li>\n<li><p>游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。</p>\n</li>\n<li><p>游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。</p>\n</li>\n</ul>\n<hr>\n<p>至此，从“游戏”和“游戏性”两词“定义”的模糊性着手。为了独立研究“游戏性”的准确概念。以“人类是如何认识游戏的，又是如何进行游戏的”为线索，从“身体”“视觉”“世界”“触觉”四个角度进行探究。</p>\n<p>前半部分从多个角度分析人对游戏的认识机制，也是为了方便理解人接触游戏直到沉迷于游戏这个过程。</p>\n<p>后半部分，灵活运用了现在在各研究领域中都得到应用的一般性动机理论，分析了人沉迷游戏的过程。同时从游戏设计师的角度出发，研究了这种机制在游戏设计中的应用，其结构就是以游戏平衡性的形式呈现出来的。</p>\n<p>在这些内容上，对游戏性的本质进行思考，终于接近了“Ludo”这个概念。（引导玩家进行效率预估的设计机制，以便于玩家通过实际身体/限制身体认知目标世界，以达成自己所设定的目标）。</p>\n<p>极端概括来说，Ludo是游戏独特的“构造”，给这个构造赋予意识就是“Narreme”。Narreme是叙事的基本构成要素，即能让人感知到某种故事的符号。Narreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。</p>\n<p>影响游戏体验的外部因素是<strong>结构</strong>。</p>\n<p>探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过Hand Regard等方式来学习以及成长。</p>\n<p>之后，交互行为的经验，就会以故事的片段，即Narreme的形式铭刻在我们的记忆中。通过关联Narreme的片段，我们来理解“人生”这个故事，这些记忆也会成为一种指导，作为继续生存下去的基础。如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。</p>\n<blockquote>\n<p>摘自《游戏性是什么》第13章（结构）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n"},{"title":"记录《游戏性是什么》","date":"2016-06-13T10:55:56.000Z","_content":"\n——内容摘选自《游戏性是什么》各章节\n\n## 游戏和身体\n\n* 人类通过 **Hand Regard **对身体感觉进行后天学习。\n* 身体感觉可以通过再次关联学习进行修正和扩展。\n* 游戏的操作对象，就是人类通过再次关联学习扩展的身体。\n\n## 游戏和视角\n\n通过观察，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是\n>向特定方向移动重心。\n\n为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。\n\n* 大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。\n* 在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。\n\n## 游戏和世界\n\n* 我们身处的世界可以分为作用空间和非作用空间。\n* 根据身体功能的不同，作用空间意义也不同。\n* 玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。\n\n## 游戏和触觉\n\n* 游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。\n* 玩家在进行游戏的同时，会加深对整个世界的认知。\n\n## 专注于游戏的原因\n\n* 游戏是符号化的现实世界\n* 麦克利兰的成就动机理论、马洛斯的需求层析理论融入游戏的设计机制\n* 目前动机研究中，已经存在诸多先行课题。\n* 心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。\n\n## 难易度平衡设计与效率预测\n\n* 效率预估型的平衡设计\n* 风险与时间成本的权衡\n* 效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。\n\n## 游戏设计的机制\n* 游戏性，是为了引导玩家进行效率预估的一种设计机制。\n* 引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。\n* Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。\n* Ludo同样可以应用在游戏之外的内容中。\n\n## 叙事和Narreme\n - 故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。\n - 叙事是由故事和叙述构成的，讲述行为也成了分析的对象。\n - 将构成游戏叙事的基本要素成为 Narreme。\n - Ludo 和 Narreme 互相影响，共同构成游戏。\n\n## 结构\n- 游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。\n- 游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。\n- 影响游戏体验的外部因素是**结构**。\n- 结构是“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。\n\n\n![](http://upload-images.jianshu.io/upload_images/1171873-2f1bdf7cec05bd52.gif?imageMogr2/auto-orient/strip)\n\n## 总结：游戏性是什么\n\n### 从一名对游戏体验本身感兴趣的玩家的角度看待\n\n不将现实世界和游戏世界做区分思考，而是**将游戏世界视为现实世界的延伸，并且从人类自身的性质出发来分析游戏的吸引力和游戏性。**\n\n糸川英夫曾在《世界玩具大图鉴》上发表过相关文章。其中他介绍了一个非常有名的实验，即“**蚂蚁用25%的时间工作，用75%的时间玩耍**”，他是这样说的：\n\n>蚂蚁的那些乍一看并没有什么意义的玩耍行为，实际上是在对未来的变化做准备，是在学习各种情况来临时的应对能力。\n>\n>蚂蚁们碰触蚁后的腹部，实际上是为了记住蚁后的气味，无论蚂蚁离开巢穴多远，它们都能够循着蚁后的味道归巢。\n>\n>环境的变化是我们所无法预料到的，而能否应对环境的变化，则是一个关系着我们生存的至关重要的问题。\n>\n>虽然蚂蚁75%的时间都偏离了运送食物的初衷，但这些玩耍时间也是使它们能够生存下去的必要部分。\n>\n>人类和蚂蚁可以说是一样的。\n>\n>那些一天24小时都用在工作上，没有时间玩耍和休闲的人，可能无法良好地应对环境的改变，而那些拥有充分时间玩耍的人，则能够灵活地应对改变，还能够开拓出具有创造性的生活方式。\n>\n>因此，与其说像蚂蚁一样工作，不如说像蚂蚁一样玩耍。\n>\n>——《玩耍权的回归》，糸川英夫，《世界玩具大图鉴：增刊太阳生活》，平凡社，1982年.\n\n如果如糸川先生所说，“玩耍”是为了提高适应未来能力的行为，那么我们所说的“游戏”可能还没达到“玩耍”的程度。因为在大多数人的理解之中，游戏和现实世界是完全分离开的。\n\n若从现实世界和游戏世界的交融点——人的身体和认知等方面出发，以多个角度研究游戏。“动机”是本书最终的关键词，**恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。**\n\n不必再认为“游戏只有着能让人沉迷其中的特殊魔力”了。游戏，不过是利用了现实世界中人本身专注于某事的机制。若能理解这一点，就会发现，或许是游戏让我们发现了这种“专注机制”。\n\n\n![](http://upload-images.jianshu.io/upload_images/1171873-28b73d9c8762a6ee.gif?imageMogr2/auto-orient/strip)\n\n### 从开发者的角度来看待\n\n首先，什么是游戏？\n*这里的“游戏”指电子游戏*\n\n**游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。**\n\n而开发这种环境的行为被称为： ** 游戏设计 **。\n\n若将游戏世界视为现实世界的扩展，那么\n>游戏是**符号化的现实世界**。\n>而在游戏中玩家控制的角色就是玩家在游戏世界中的身体扩展。\n\n而，**游戏性，是为了引导玩家进行效率预估的一种设计机制。**引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性）。\n\n效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。\n\n正好符合“**恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。**”\n\n这一动机理论的说法。心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。\n\n极端概括来说，*游戏性（Ludo）*是游戏独特的“构造”，给这个构造赋予意识就是*叙事性（Narreme）*。\n\nNarreme是叙事的基本构成要素，即能让人感知到某种故事的符号。\n\nNarreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。\n\n在初步了解专注游戏的原因后，进一步阐释了**人接触游戏直到沉迷于游戏的整个过程。**\n\n探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过[Hand Regard](http://www.jianshu.com/p/0053638192f0)等方式来学习以及成长。\n\n之后，交互行为的经验，就会以故事的片段，即以叙事的形式铭刻在我们的记忆中。通过关联叙事性的片段，我们来理解“人生”这个故事。这些记忆也会成为一种指导，作为继续生存下去的基础。\n\n如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。\n***\n可能有点枯燥，但这真能从开发者的角度来学习看待问题的方式。\n喜欢《游戏性是什么》这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n\n\n","source":"_posts/文集/游戏性是什么/游戏性是什么-记录《游戏性是什么》.md","raw":"---\ntitle: 记录《游戏性是什么》\ndate: 2016-06-13 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n——内容摘选自《游戏性是什么》各章节\n\n## 游戏和身体\n\n* 人类通过 **Hand Regard **对身体感觉进行后天学习。\n* 身体感觉可以通过再次关联学习进行修正和扩展。\n* 游戏的操作对象，就是人类通过再次关联学习扩展的身体。\n\n## 游戏和视角\n\n通过观察，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是\n>向特定方向移动重心。\n\n为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。\n\n* 大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。\n* 在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。\n\n## 游戏和世界\n\n* 我们身处的世界可以分为作用空间和非作用空间。\n* 根据身体功能的不同，作用空间意义也不同。\n* 玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。\n\n## 游戏和触觉\n\n* 游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。\n* 玩家在进行游戏的同时，会加深对整个世界的认知。\n\n## 专注于游戏的原因\n\n* 游戏是符号化的现实世界\n* 麦克利兰的成就动机理论、马洛斯的需求层析理论融入游戏的设计机制\n* 目前动机研究中，已经存在诸多先行课题。\n* 心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。\n\n## 难易度平衡设计与效率预测\n\n* 效率预估型的平衡设计\n* 风险与时间成本的权衡\n* 效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。\n\n## 游戏设计的机制\n* 游戏性，是为了引导玩家进行效率预估的一种设计机制。\n* 引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。\n* Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。\n* Ludo同样可以应用在游戏之外的内容中。\n\n## 叙事和Narreme\n - 故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。\n - 叙事是由故事和叙述构成的，讲述行为也成了分析的对象。\n - 将构成游戏叙事的基本要素成为 Narreme。\n - Ludo 和 Narreme 互相影响，共同构成游戏。\n\n## 结构\n- 游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。\n- 游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。\n- 影响游戏体验的外部因素是**结构**。\n- 结构是“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。\n\n\n![](http://upload-images.jianshu.io/upload_images/1171873-2f1bdf7cec05bd52.gif?imageMogr2/auto-orient/strip)\n\n## 总结：游戏性是什么\n\n### 从一名对游戏体验本身感兴趣的玩家的角度看待\n\n不将现实世界和游戏世界做区分思考，而是**将游戏世界视为现实世界的延伸，并且从人类自身的性质出发来分析游戏的吸引力和游戏性。**\n\n糸川英夫曾在《世界玩具大图鉴》上发表过相关文章。其中他介绍了一个非常有名的实验，即“**蚂蚁用25%的时间工作，用75%的时间玩耍**”，他是这样说的：\n\n>蚂蚁的那些乍一看并没有什么意义的玩耍行为，实际上是在对未来的变化做准备，是在学习各种情况来临时的应对能力。\n>\n>蚂蚁们碰触蚁后的腹部，实际上是为了记住蚁后的气味，无论蚂蚁离开巢穴多远，它们都能够循着蚁后的味道归巢。\n>\n>环境的变化是我们所无法预料到的，而能否应对环境的变化，则是一个关系着我们生存的至关重要的问题。\n>\n>虽然蚂蚁75%的时间都偏离了运送食物的初衷，但这些玩耍时间也是使它们能够生存下去的必要部分。\n>\n>人类和蚂蚁可以说是一样的。\n>\n>那些一天24小时都用在工作上，没有时间玩耍和休闲的人，可能无法良好地应对环境的改变，而那些拥有充分时间玩耍的人，则能够灵活地应对改变，还能够开拓出具有创造性的生活方式。\n>\n>因此，与其说像蚂蚁一样工作，不如说像蚂蚁一样玩耍。\n>\n>——《玩耍权的回归》，糸川英夫，《世界玩具大图鉴：增刊太阳生活》，平凡社，1982年.\n\n如果如糸川先生所说，“玩耍”是为了提高适应未来能力的行为，那么我们所说的“游戏”可能还没达到“玩耍”的程度。因为在大多数人的理解之中，游戏和现实世界是完全分离开的。\n\n若从现实世界和游戏世界的交融点——人的身体和认知等方面出发，以多个角度研究游戏。“动机”是本书最终的关键词，**恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。**\n\n不必再认为“游戏只有着能让人沉迷其中的特殊魔力”了。游戏，不过是利用了现实世界中人本身专注于某事的机制。若能理解这一点，就会发现，或许是游戏让我们发现了这种“专注机制”。\n\n\n![](http://upload-images.jianshu.io/upload_images/1171873-28b73d9c8762a6ee.gif?imageMogr2/auto-orient/strip)\n\n### 从开发者的角度来看待\n\n首先，什么是游戏？\n*这里的“游戏”指电子游戏*\n\n**游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。**\n\n而开发这种环境的行为被称为： ** 游戏设计 **。\n\n若将游戏世界视为现实世界的扩展，那么\n>游戏是**符号化的现实世界**。\n>而在游戏中玩家控制的角色就是玩家在游戏世界中的身体扩展。\n\n而，**游戏性，是为了引导玩家进行效率预估的一种设计机制。**引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性）。\n\n效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。\n\n正好符合“**恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。**”\n\n这一动机理论的说法。心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。\n\n极端概括来说，*游戏性（Ludo）*是游戏独特的“构造”，给这个构造赋予意识就是*叙事性（Narreme）*。\n\nNarreme是叙事的基本构成要素，即能让人感知到某种故事的符号。\n\nNarreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。\n\n在初步了解专注游戏的原因后，进一步阐释了**人接触游戏直到沉迷于游戏的整个过程。**\n\n探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过[Hand Regard](http://www.jianshu.com/p/0053638192f0)等方式来学习以及成长。\n\n之后，交互行为的经验，就会以故事的片段，即以叙事的形式铭刻在我们的记忆中。通过关联叙事性的片段，我们来理解“人生”这个故事。这些记忆也会成为一种指导，作为继续生存下去的基础。\n\n如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。\n***\n可能有点枯燥，但这真能从开发者的角度来学习看待问题的方式。\n喜欢《游戏性是什么》这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n\n\n","slug":"文集/游戏性是什么/游戏性是什么-记录《游戏性是什么》","published":1,"updated":"2018-08-04T06:32:45.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkce4006lm4cmuuq5wtad","content":"<p>——内容摘选自《游戏性是什么》各章节</p>\n<h2 id=\"游戏和身体\"><a href=\"#游戏和身体\" class=\"headerlink\" title=\"游戏和身体\"></a>游戏和身体</h2><ul>\n<li>人类通过 <strong>Hand Regard </strong>对身体感觉进行后天学习。</li>\n<li>身体感觉可以通过再次关联学习进行修正和扩展。</li>\n<li>游戏的操作对象，就是人类通过再次关联学习扩展的身体。</li>\n</ul>\n<h2 id=\"游戏和视角\"><a href=\"#游戏和视角\" class=\"headerlink\" title=\"游戏和视角\"></a>游戏和视角</h2><p>通过观察，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是</p>\n<blockquote>\n<p>向特定方向移动重心。</p>\n</blockquote>\n<p>为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。</p>\n<ul>\n<li>大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。</li>\n<li>在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。</li>\n</ul>\n<h2 id=\"游戏和世界\"><a href=\"#游戏和世界\" class=\"headerlink\" title=\"游戏和世界\"></a>游戏和世界</h2><ul>\n<li>我们身处的世界可以分为作用空间和非作用空间。</li>\n<li>根据身体功能的不同，作用空间意义也不同。</li>\n<li>玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。</li>\n</ul>\n<h2 id=\"游戏和触觉\"><a href=\"#游戏和触觉\" class=\"headerlink\" title=\"游戏和触觉\"></a>游戏和触觉</h2><ul>\n<li>游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。</li>\n<li>玩家在进行游戏的同时，会加深对整个世界的认知。</li>\n</ul>\n<h2 id=\"专注于游戏的原因\"><a href=\"#专注于游戏的原因\" class=\"headerlink\" title=\"专注于游戏的原因\"></a>专注于游戏的原因</h2><ul>\n<li>游戏是符号化的现实世界</li>\n<li>麦克利兰的成就动机理论、马洛斯的需求层析理论融入游戏的设计机制</li>\n<li>目前动机研究中，已经存在诸多先行课题。</li>\n<li>心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。</li>\n</ul>\n<h2 id=\"难易度平衡设计与效率预测\"><a href=\"#难易度平衡设计与效率预测\" class=\"headerlink\" title=\"难易度平衡设计与效率预测\"></a>难易度平衡设计与效率预测</h2><ul>\n<li>效率预估型的平衡设计</li>\n<li>风险与时间成本的权衡</li>\n<li>效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。</li>\n</ul>\n<h2 id=\"游戏设计的机制\"><a href=\"#游戏设计的机制\" class=\"headerlink\" title=\"游戏设计的机制\"></a>游戏设计的机制</h2><ul>\n<li>游戏性，是为了引导玩家进行效率预估的一种设计机制。</li>\n<li>引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。</li>\n<li>Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。</li>\n<li>Ludo同样可以应用在游戏之外的内容中。</li>\n</ul>\n<h2 id=\"叙事和Narreme\"><a href=\"#叙事和Narreme\" class=\"headerlink\" title=\"叙事和Narreme\"></a>叙事和Narreme</h2><ul>\n<li>故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。</li>\n<li>叙事是由故事和叙述构成的，讲述行为也成了分析的对象。</li>\n<li>将构成游戏叙事的基本要素成为 Narreme。</li>\n<li>Ludo 和 Narreme 互相影响，共同构成游戏。</li>\n</ul>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li>游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。</li>\n<li>游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。</li>\n<li>影响游戏体验的外部因素是<strong>结构</strong>。</li>\n<li>结构是“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-2f1bdf7cec05bd52.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h2 id=\"总结：游戏性是什么\"><a href=\"#总结：游戏性是什么\" class=\"headerlink\" title=\"总结：游戏性是什么\"></a>总结：游戏性是什么</h2><h3 id=\"从一名对游戏体验本身感兴趣的玩家的角度看待\"><a href=\"#从一名对游戏体验本身感兴趣的玩家的角度看待\" class=\"headerlink\" title=\"从一名对游戏体验本身感兴趣的玩家的角度看待\"></a>从一名对游戏体验本身感兴趣的玩家的角度看待</h3><p>不将现实世界和游戏世界做区分思考，而是<strong>将游戏世界视为现实世界的延伸，并且从人类自身的性质出发来分析游戏的吸引力和游戏性。</strong></p>\n<p>糸川英夫曾在《世界玩具大图鉴》上发表过相关文章。其中他介绍了一个非常有名的实验，即“<strong>蚂蚁用25%的时间工作，用75%的时间玩耍</strong>”，他是这样说的：</p>\n<blockquote>\n<p>蚂蚁的那些乍一看并没有什么意义的玩耍行为，实际上是在对未来的变化做准备，是在学习各种情况来临时的应对能力。</p>\n<p>蚂蚁们碰触蚁后的腹部，实际上是为了记住蚁后的气味，无论蚂蚁离开巢穴多远，它们都能够循着蚁后的味道归巢。</p>\n<p>环境的变化是我们所无法预料到的，而能否应对环境的变化，则是一个关系着我们生存的至关重要的问题。</p>\n<p>虽然蚂蚁75%的时间都偏离了运送食物的初衷，但这些玩耍时间也是使它们能够生存下去的必要部分。</p>\n<p>人类和蚂蚁可以说是一样的。</p>\n<p>那些一天24小时都用在工作上，没有时间玩耍和休闲的人，可能无法良好地应对环境的改变，而那些拥有充分时间玩耍的人，则能够灵活地应对改变，还能够开拓出具有创造性的生活方式。</p>\n<p>因此，与其说像蚂蚁一样工作，不如说像蚂蚁一样玩耍。</p>\n<p>——《玩耍权的回归》，糸川英夫，《世界玩具大图鉴：增刊太阳生活》，平凡社，1982年.</p>\n</blockquote>\n<p>如果如糸川先生所说，“玩耍”是为了提高适应未来能力的行为，那么我们所说的“游戏”可能还没达到“玩耍”的程度。因为在大多数人的理解之中，游戏和现实世界是完全分离开的。</p>\n<p>若从现实世界和游戏世界的交融点——人的身体和认知等方面出发，以多个角度研究游戏。“动机”是本书最终的关键词，<strong>恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。</strong></p>\n<p>不必再认为“游戏只有着能让人沉迷其中的特殊魔力”了。游戏，不过是利用了现实世界中人本身专注于某事的机制。若能理解这一点，就会发现，或许是游戏让我们发现了这种“专注机制”。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-28b73d9c8762a6ee.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h3 id=\"从开发者的角度来看待\"><a href=\"#从开发者的角度来看待\" class=\"headerlink\" title=\"从开发者的角度来看待\"></a>从开发者的角度来看待</h3><p>首先，什么是游戏？<br><em>这里的“游戏”指电子游戏</em></p>\n<p><strong>游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。</strong></p>\n<p>而开发这种环境的行为被称为： <strong> 游戏设计 </strong>。</p>\n<p>若将游戏世界视为现实世界的扩展，那么</p>\n<blockquote>\n<p>游戏是<strong>符号化的现实世界</strong>。<br>而在游戏中玩家控制的角色就是玩家在游戏世界中的身体扩展。</p>\n</blockquote>\n<p>而，<strong>游戏性，是为了引导玩家进行效率预估的一种设计机制。</strong>引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性）。</p>\n<p>效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。</p>\n<p>正好符合“<strong>恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。</strong>”</p>\n<p>这一动机理论的说法。心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。</p>\n<p>极端概括来说，<em>游戏性（Ludo）</em>是游戏独特的“构造”，给这个构造赋予意识就是<em>叙事性（Narreme）</em>。</p>\n<p>Narreme是叙事的基本构成要素，即能让人感知到某种故事的符号。</p>\n<p>Narreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。</p>\n<p>在初步了解专注游戏的原因后，进一步阐释了<strong>人接触游戏直到沉迷于游戏的整个过程。</strong></p>\n<p>探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过<a href=\"http://www.jianshu.com/p/0053638192f0\" target=\"_blank\" rel=\"noopener\">Hand Regard</a>等方式来学习以及成长。</p>\n<p>之后，交互行为的经验，就会以故事的片段，即以叙事的形式铭刻在我们的记忆中。通过关联叙事性的片段，我们来理解“人生”这个故事。这些记忆也会成为一种指导，作为继续生存下去的基础。</p>\n<p>如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。</p>\n<hr>\n<p>可能有点枯燥，但这真能从开发者的角度来学习看待问题的方式。<br>喜欢《游戏性是什么》这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>——内容摘选自《游戏性是什么》各章节</p>\n<h2 id=\"游戏和身体\"><a href=\"#游戏和身体\" class=\"headerlink\" title=\"游戏和身体\"></a>游戏和身体</h2><ul>\n<li>人类通过 <strong>Hand Regard </strong>对身体感觉进行后天学习。</li>\n<li>身体感觉可以通过再次关联学习进行修正和扩展。</li>\n<li>游戏的操作对象，就是人类通过再次关联学习扩展的身体。</li>\n</ul>\n<h2 id=\"游戏和视角\"><a href=\"#游戏和视角\" class=\"headerlink\" title=\"游戏和视角\"></a>游戏和视角</h2><p>通过观察，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是</p>\n<blockquote>\n<p>向特定方向移动重心。</p>\n</blockquote>\n<p>为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。</p>\n<ul>\n<li>大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。</li>\n<li>在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。</li>\n</ul>\n<h2 id=\"游戏和世界\"><a href=\"#游戏和世界\" class=\"headerlink\" title=\"游戏和世界\"></a>游戏和世界</h2><ul>\n<li>我们身处的世界可以分为作用空间和非作用空间。</li>\n<li>根据身体功能的不同，作用空间意义也不同。</li>\n<li>玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。</li>\n</ul>\n<h2 id=\"游戏和触觉\"><a href=\"#游戏和触觉\" class=\"headerlink\" title=\"游戏和触觉\"></a>游戏和触觉</h2><ul>\n<li>游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。</li>\n<li>玩家在进行游戏的同时，会加深对整个世界的认知。</li>\n</ul>\n<h2 id=\"专注于游戏的原因\"><a href=\"#专注于游戏的原因\" class=\"headerlink\" title=\"专注于游戏的原因\"></a>专注于游戏的原因</h2><ul>\n<li>游戏是符号化的现实世界</li>\n<li>麦克利兰的成就动机理论、马洛斯的需求层析理论融入游戏的设计机制</li>\n<li>目前动机研究中，已经存在诸多先行课题。</li>\n<li>心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。</li>\n</ul>\n<h2 id=\"难易度平衡设计与效率预测\"><a href=\"#难易度平衡设计与效率预测\" class=\"headerlink\" title=\"难易度平衡设计与效率预测\"></a>难易度平衡设计与效率预测</h2><ul>\n<li>效率预估型的平衡设计</li>\n<li>风险与时间成本的权衡</li>\n<li>效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。</li>\n</ul>\n<h2 id=\"游戏设计的机制\"><a href=\"#游戏设计的机制\" class=\"headerlink\" title=\"游戏设计的机制\"></a>游戏设计的机制</h2><ul>\n<li>游戏性，是为了引导玩家进行效率预估的一种设计机制。</li>\n<li>引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。</li>\n<li>Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。</li>\n<li>Ludo同样可以应用在游戏之外的内容中。</li>\n</ul>\n<h2 id=\"叙事和Narreme\"><a href=\"#叙事和Narreme\" class=\"headerlink\" title=\"叙事和Narreme\"></a>叙事和Narreme</h2><ul>\n<li>故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。</li>\n<li>叙事是由故事和叙述构成的，讲述行为也成了分析的对象。</li>\n<li>将构成游戏叙事的基本要素成为 Narreme。</li>\n<li>Ludo 和 Narreme 互相影响，共同构成游戏。</li>\n</ul>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li>游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。</li>\n<li>游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。</li>\n<li>影响游戏体验的外部因素是<strong>结构</strong>。</li>\n<li>结构是“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-2f1bdf7cec05bd52.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h2 id=\"总结：游戏性是什么\"><a href=\"#总结：游戏性是什么\" class=\"headerlink\" title=\"总结：游戏性是什么\"></a>总结：游戏性是什么</h2><h3 id=\"从一名对游戏体验本身感兴趣的玩家的角度看待\"><a href=\"#从一名对游戏体验本身感兴趣的玩家的角度看待\" class=\"headerlink\" title=\"从一名对游戏体验本身感兴趣的玩家的角度看待\"></a>从一名对游戏体验本身感兴趣的玩家的角度看待</h3><p>不将现实世界和游戏世界做区分思考，而是<strong>将游戏世界视为现实世界的延伸，并且从人类自身的性质出发来分析游戏的吸引力和游戏性。</strong></p>\n<p>糸川英夫曾在《世界玩具大图鉴》上发表过相关文章。其中他介绍了一个非常有名的实验，即“<strong>蚂蚁用25%的时间工作，用75%的时间玩耍</strong>”，他是这样说的：</p>\n<blockquote>\n<p>蚂蚁的那些乍一看并没有什么意义的玩耍行为，实际上是在对未来的变化做准备，是在学习各种情况来临时的应对能力。</p>\n<p>蚂蚁们碰触蚁后的腹部，实际上是为了记住蚁后的气味，无论蚂蚁离开巢穴多远，它们都能够循着蚁后的味道归巢。</p>\n<p>环境的变化是我们所无法预料到的，而能否应对环境的变化，则是一个关系着我们生存的至关重要的问题。</p>\n<p>虽然蚂蚁75%的时间都偏离了运送食物的初衷，但这些玩耍时间也是使它们能够生存下去的必要部分。</p>\n<p>人类和蚂蚁可以说是一样的。</p>\n<p>那些一天24小时都用在工作上，没有时间玩耍和休闲的人，可能无法良好地应对环境的改变，而那些拥有充分时间玩耍的人，则能够灵活地应对改变，还能够开拓出具有创造性的生活方式。</p>\n<p>因此，与其说像蚂蚁一样工作，不如说像蚂蚁一样玩耍。</p>\n<p>——《玩耍权的回归》，糸川英夫，《世界玩具大图鉴：增刊太阳生活》，平凡社，1982年.</p>\n</blockquote>\n<p>如果如糸川先生所说，“玩耍”是为了提高适应未来能力的行为，那么我们所说的“游戏”可能还没达到“玩耍”的程度。因为在大多数人的理解之中，游戏和现实世界是完全分离开的。</p>\n<p>若从现实世界和游戏世界的交融点——人的身体和认知等方面出发，以多个角度研究游戏。“动机”是本书最终的关键词，<strong>恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。</strong></p>\n<p>不必再认为“游戏只有着能让人沉迷其中的特殊魔力”了。游戏，不过是利用了现实世界中人本身专注于某事的机制。若能理解这一点，就会发现，或许是游戏让我们发现了这种“专注机制”。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-28b73d9c8762a6ee.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h3 id=\"从开发者的角度来看待\"><a href=\"#从开发者的角度来看待\" class=\"headerlink\" title=\"从开发者的角度来看待\"></a>从开发者的角度来看待</h3><p>首先，什么是游戏？<br><em>这里的“游戏”指电子游戏</em></p>\n<p><strong>游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。</strong></p>\n<p>而开发这种环境的行为被称为： <strong> 游戏设计 </strong>。</p>\n<p>若将游戏世界视为现实世界的扩展，那么</p>\n<blockquote>\n<p>游戏是<strong>符号化的现实世界</strong>。<br>而在游戏中玩家控制的角色就是玩家在游戏世界中的身体扩展。</p>\n</blockquote>\n<p>而，<strong>游戏性，是为了引导玩家进行效率预估的一种设计机制。</strong>引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性）。</p>\n<p>效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。</p>\n<p>正好符合“<strong>恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。</strong>”</p>\n<p>这一动机理论的说法。心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。</p>\n<p>极端概括来说，<em>游戏性（Ludo）</em>是游戏独特的“构造”，给这个构造赋予意识就是<em>叙事性（Narreme）</em>。</p>\n<p>Narreme是叙事的基本构成要素，即能让人感知到某种故事的符号。</p>\n<p>Narreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。</p>\n<p>在初步了解专注游戏的原因后，进一步阐释了<strong>人接触游戏直到沉迷于游戏的整个过程。</strong></p>\n<p>探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过<a href=\"http://www.jianshu.com/p/0053638192f0\" target=\"_blank\" rel=\"noopener\">Hand Regard</a>等方式来学习以及成长。</p>\n<p>之后，交互行为的经验，就会以故事的片段，即以叙事的形式铭刻在我们的记忆中。通过关联叙事性的片段，我们来理解“人生”这个故事。这些记忆也会成为一种指导，作为继续生存下去的基础。</p>\n<p>如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。</p>\n<hr>\n<p>可能有点枯燥，但这真能从开发者的角度来学习看待问题的方式。<br>喜欢《游戏性是什么》这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n"},{"title":"难易度平衡设计与效率预测","date":"2016-06-10T10:55:56.000Z","_content":"\n人专注于游戏中的机制，与游戏设计者之间有什么关系？而这又与人类自身的何种特性息息相关？\n\n——《游戏性是什么》第10章\n\n## 平衡设计，大致有以下2点：\n\n- 静态（固定型）平衡设计\n\n- 动态（变动型）平衡设计\n\n## 静态平衡设计\n\n是指游戏制作完成时，平衡设计就固定了。大多数小游戏都这样，如大众熟知《雷电2》、上篇文尾提到的《僵尸危机3》\n\n在游戏中的平衡设计为\n\n> 难度从一开始就故意降低了。\n\n利用跷跷板模式，系统通过调整阻力点，是游戏保持了平衡状态。\n\n利用这种平衡设计，可以给玩家带来“命悬一线的关头躲过了敌人的攻击”的快感。\n\n而并非为了配合玩家的技能而变更游戏的难度。\n\n每一关的难度都被固定了。\n![](http://upload-images.jianshu.io/upload_images/1171873-c7a2caa76dea0fe7.gif?imageMogr2/auto-orient/strip)\n\n## 动态平衡设计\n\n分以下两种类型：\n\n- **任意的负荷可变型平衡设计：**玩家可以任意地对平衡进行改动。\n- **隐藏反馈型平衡设计：**游戏自动调整平衡。游戏利用程序实时解析游戏中玩家的技能，自动，调整游戏的难易度，以匹配玩家技能水平。\n\n隐藏反馈型平衡设计，可以以《[山脊赛车](http://baike.baidu.com/link?url=q1K1FOsroMXxkJ6G7aAtvudxWn5papTNXA4wKr5Z3CWrEHTZAAJ6YcV-dO6toAUigCIW-saK6BPmK7Pvk3G65a#2)》为例。排名越靠后，车辆的控制会变得更加容易。\n\n这是为了保持败者玩家动机的一种设计方法。\n\n隐匿在游戏内部，对玩家来说是不可见的。\n\n## 效率预估型的平衡设计\n\n以《超级马里奥兄弟》中的“**B dash**”为例，按住B键进行移动操作可以进行更加告诉的移动。\n\n灵活使用可以在难度较高的关卡中巧妙避开敌人。\n\n并为快速通关发挥巨大作用。由于在短时间内通关得分比较高，所以也被视为一种高效率的游戏方式。\n\n另一方面，角色触碰到敌人的风险也增加了，这实际上是将难易度的设定托付给了玩家的判断。\n\n玩家在游戏设计者所赋予的幅度之内，根据自己的情况权衡风险与效率（所需时间）。\n\n为了实现这种机制，设计者还需要设计出“**game over**”之类的“危机”供玩家权衡。\n\n## 危机\n\n一般的游戏中，当难度超过技能时，游戏会陷入停滞状态。\n\n通常是“回到起点”“装备减少”“重玩依旧无法通过某个场景”等情况。\n\n将因玩家的抉择而使游戏进入停滞状态的状况称之为“危机”。\n\n> **所谓危机，对于玩家来说就是强制性地花费“时间”成本。**\n\n***\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-ae702f7f6686762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/07/clock-650753_1280-785x510.jpg)\n\n***\n\n## 风险与时间成本的权衡\n\n风险和时间成本，一般是为反比关系。要是将风险规避到最小，就需要花费很高的时间成本。\n\n如上所述，危机机制的设计，是为了实现玩家的风险和时间成本的权衡。因此玩家有必要在下面两个选项中预估出哪一种平衡最合适。\n\n- 抑制陷入危机的风险，接受时间成本的增加\n\n\n- 接受陷入危机的风险，谋求时间成本的减少\n\n当玩家选择风险更高的方式高效达成目标时，看起来为什么会很开心？其实是：\n\n**“平衡难易度”的行为，正是创造出对于玩家自身而言挑战难度最恰当的机制。**\n\n在认为到危机的风险程度增加的同时，预估处当前技能能够跨越这个危机，在短时间内能达成通关目标，便是玩家活用了以往游戏经历中的风险控制经验。\n\n每次游戏时平衡风险与效率的经验积累，可以成为下一次游戏时的参考与指导。\n\n## 小结：\n\n- 游戏平衡设计，分为“静态（固定型）平衡设计”，“动态（变动型）平衡设计”“效率预估型平衡设计”3种。\n- 效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。\n\n\n\n“你学习的时候要是有玩游戏那股冲劲和认真就好喽”\n**……**\n\n***\n\n![](http://upload-images.jianshu.io/upload_images/1171873-8114c2764d17b974.gif?imageMogr2/auto-orient/strip)\n\n***\n\n> 摘自《游戏性是什么》第10章（难易度平衡设计与效率预测）喜欢这本书，\n>\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n\n","source":"_posts/文集/游戏性是什么/游戏性是什么-难易度平衡设计与效率预测.md","raw":"---\ntitle: 难易度平衡设计与效率预测\ndate: 2016-06-10 18:55:56\ntags: 游戏\ncategories: 游戏性是什么\n---\n\n人专注于游戏中的机制，与游戏设计者之间有什么关系？而这又与人类自身的何种特性息息相关？\n\n——《游戏性是什么》第10章\n\n## 平衡设计，大致有以下2点：\n\n- 静态（固定型）平衡设计\n\n- 动态（变动型）平衡设计\n\n## 静态平衡设计\n\n是指游戏制作完成时，平衡设计就固定了。大多数小游戏都这样，如大众熟知《雷电2》、上篇文尾提到的《僵尸危机3》\n\n在游戏中的平衡设计为\n\n> 难度从一开始就故意降低了。\n\n利用跷跷板模式，系统通过调整阻力点，是游戏保持了平衡状态。\n\n利用这种平衡设计，可以给玩家带来“命悬一线的关头躲过了敌人的攻击”的快感。\n\n而并非为了配合玩家的技能而变更游戏的难度。\n\n每一关的难度都被固定了。\n![](http://upload-images.jianshu.io/upload_images/1171873-c7a2caa76dea0fe7.gif?imageMogr2/auto-orient/strip)\n\n## 动态平衡设计\n\n分以下两种类型：\n\n- **任意的负荷可变型平衡设计：**玩家可以任意地对平衡进行改动。\n- **隐藏反馈型平衡设计：**游戏自动调整平衡。游戏利用程序实时解析游戏中玩家的技能，自动，调整游戏的难易度，以匹配玩家技能水平。\n\n隐藏反馈型平衡设计，可以以《[山脊赛车](http://baike.baidu.com/link?url=q1K1FOsroMXxkJ6G7aAtvudxWn5papTNXA4wKr5Z3CWrEHTZAAJ6YcV-dO6toAUigCIW-saK6BPmK7Pvk3G65a#2)》为例。排名越靠后，车辆的控制会变得更加容易。\n\n这是为了保持败者玩家动机的一种设计方法。\n\n隐匿在游戏内部，对玩家来说是不可见的。\n\n## 效率预估型的平衡设计\n\n以《超级马里奥兄弟》中的“**B dash**”为例，按住B键进行移动操作可以进行更加告诉的移动。\n\n灵活使用可以在难度较高的关卡中巧妙避开敌人。\n\n并为快速通关发挥巨大作用。由于在短时间内通关得分比较高，所以也被视为一种高效率的游戏方式。\n\n另一方面，角色触碰到敌人的风险也增加了，这实际上是将难易度的设定托付给了玩家的判断。\n\n玩家在游戏设计者所赋予的幅度之内，根据自己的情况权衡风险与效率（所需时间）。\n\n为了实现这种机制，设计者还需要设计出“**game over**”之类的“危机”供玩家权衡。\n\n## 危机\n\n一般的游戏中，当难度超过技能时，游戏会陷入停滞状态。\n\n通常是“回到起点”“装备减少”“重玩依旧无法通过某个场景”等情况。\n\n将因玩家的抉择而使游戏进入停滞状态的状况称之为“危机”。\n\n> **所谓危机，对于玩家来说就是强制性地花费“时间”成本。**\n\n***\n\n[![](http://upload-images.jianshu.io/upload_images/1171873-ae702f7f6686762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)](http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/07/clock-650753_1280-785x510.jpg)\n\n***\n\n## 风险与时间成本的权衡\n\n风险和时间成本，一般是为反比关系。要是将风险规避到最小，就需要花费很高的时间成本。\n\n如上所述，危机机制的设计，是为了实现玩家的风险和时间成本的权衡。因此玩家有必要在下面两个选项中预估出哪一种平衡最合适。\n\n- 抑制陷入危机的风险，接受时间成本的增加\n\n\n- 接受陷入危机的风险，谋求时间成本的减少\n\n当玩家选择风险更高的方式高效达成目标时，看起来为什么会很开心？其实是：\n\n**“平衡难易度”的行为，正是创造出对于玩家自身而言挑战难度最恰当的机制。**\n\n在认为到危机的风险程度增加的同时，预估处当前技能能够跨越这个危机，在短时间内能达成通关目标，便是玩家活用了以往游戏经历中的风险控制经验。\n\n每次游戏时平衡风险与效率的经验积累，可以成为下一次游戏时的参考与指导。\n\n## 小结：\n\n- 游戏平衡设计，分为“静态（固定型）平衡设计”，“动态（变动型）平衡设计”“效率预估型平衡设计”3种。\n- 效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。\n\n\n\n“你学习的时候要是有玩游戏那股冲劲和认真就好喽”\n**……**\n\n***\n\n![](http://upload-images.jianshu.io/upload_images/1171873-8114c2764d17b974.gif?imageMogr2/auto-orient/strip)\n\n***\n\n> 摘自《游戏性是什么》第10章（难易度平衡设计与效率预测）喜欢这本书，\n>\n> 其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。\n\n","slug":"文集/游戏性是什么/游戏性是什么-难易度平衡设计与效率预测","published":1,"updated":"2018-08-04T06:32:45.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgtkce8006pm4cmgl4e8hoj","content":"<p>人专注于游戏中的机制，与游戏设计者之间有什么关系？而这又与人类自身的何种特性息息相关？</p>\n<p>——《游戏性是什么》第10章</p>\n<h2 id=\"平衡设计，大致有以下2点：\"><a href=\"#平衡设计，大致有以下2点：\" class=\"headerlink\" title=\"平衡设计，大致有以下2点：\"></a>平衡设计，大致有以下2点：</h2><ul>\n<li><p>静态（固定型）平衡设计</p>\n</li>\n<li><p>动态（变动型）平衡设计</p>\n</li>\n</ul>\n<h2 id=\"静态平衡设计\"><a href=\"#静态平衡设计\" class=\"headerlink\" title=\"静态平衡设计\"></a>静态平衡设计</h2><p>是指游戏制作完成时，平衡设计就固定了。大多数小游戏都这样，如大众熟知《雷电2》、上篇文尾提到的《僵尸危机3》</p>\n<p>在游戏中的平衡设计为</p>\n<blockquote>\n<p>难度从一开始就故意降低了。</p>\n</blockquote>\n<p>利用跷跷板模式，系统通过调整阻力点，是游戏保持了平衡状态。</p>\n<p>利用这种平衡设计，可以给玩家带来“命悬一线的关头躲过了敌人的攻击”的快感。</p>\n<p>而并非为了配合玩家的技能而变更游戏的难度。</p>\n<p>每一关的难度都被固定了。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-c7a2caa76dea0fe7.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h2 id=\"动态平衡设计\"><a href=\"#动态平衡设计\" class=\"headerlink\" title=\"动态平衡设计\"></a>动态平衡设计</h2><p>分以下两种类型：</p>\n<ul>\n<li><strong>任意的负荷可变型平衡设计：</strong>玩家可以任意地对平衡进行改动。</li>\n<li><strong>隐藏反馈型平衡设计：</strong>游戏自动调整平衡。游戏利用程序实时解析游戏中玩家的技能，自动，调整游戏的难易度，以匹配玩家技能水平。</li>\n</ul>\n<p>隐藏反馈型平衡设计，可以以《<a href=\"http://baike.baidu.com/link?url=q1K1FOsroMXxkJ6G7aAtvudxWn5papTNXA4wKr5Z3CWrEHTZAAJ6YcV-dO6toAUigCIW-saK6BPmK7Pvk3G65a#2\" target=\"_blank\" rel=\"noopener\">山脊赛车</a>》为例。排名越靠后，车辆的控制会变得更加容易。</p>\n<p>这是为了保持败者玩家动机的一种设计方法。</p>\n<p>隐匿在游戏内部，对玩家来说是不可见的。</p>\n<h2 id=\"效率预估型的平衡设计\"><a href=\"#效率预估型的平衡设计\" class=\"headerlink\" title=\"效率预估型的平衡设计\"></a>效率预估型的平衡设计</h2><p>以《超级马里奥兄弟》中的“<strong>B dash</strong>”为例，按住B键进行移动操作可以进行更加告诉的移动。</p>\n<p>灵活使用可以在难度较高的关卡中巧妙避开敌人。</p>\n<p>并为快速通关发挥巨大作用。由于在短时间内通关得分比较高，所以也被视为一种高效率的游戏方式。</p>\n<p>另一方面，角色触碰到敌人的风险也增加了，这实际上是将难易度的设定托付给了玩家的判断。</p>\n<p>玩家在游戏设计者所赋予的幅度之内，根据自己的情况权衡风险与效率（所需时间）。</p>\n<p>为了实现这种机制，设计者还需要设计出“<strong>game over</strong>”之类的“危机”供玩家权衡。</p>\n<h2 id=\"危机\"><a href=\"#危机\" class=\"headerlink\" title=\"危机\"></a>危机</h2><p>一般的游戏中，当难度超过技能时，游戏会陷入停滞状态。</p>\n<p>通常是“回到起点”“装备减少”“重玩依旧无法通过某个场景”等情况。</p>\n<p>将因玩家的抉择而使游戏进入停滞状态的状况称之为“危机”。</p>\n<blockquote>\n<p><strong>所谓危机，对于玩家来说就是强制性地花费“时间”成本。</strong></p>\n</blockquote>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/07/clock-650753_1280-785x510.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-ae702f7f6686762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<hr>\n<h2 id=\"风险与时间成本的权衡\"><a href=\"#风险与时间成本的权衡\" class=\"headerlink\" title=\"风险与时间成本的权衡\"></a>风险与时间成本的权衡</h2><p>风险和时间成本，一般是为反比关系。要是将风险规避到最小，就需要花费很高的时间成本。</p>\n<p>如上所述，危机机制的设计，是为了实现玩家的风险和时间成本的权衡。因此玩家有必要在下面两个选项中预估出哪一种平衡最合适。</p>\n<ul>\n<li>抑制陷入危机的风险，接受时间成本的增加</li>\n</ul>\n<ul>\n<li>接受陷入危机的风险，谋求时间成本的减少</li>\n</ul>\n<p>当玩家选择风险更高的方式高效达成目标时，看起来为什么会很开心？其实是：</p>\n<p><strong>“平衡难易度”的行为，正是创造出对于玩家自身而言挑战难度最恰当的机制。</strong></p>\n<p>在认为到危机的风险程度增加的同时，预估处当前技能能够跨越这个危机，在短时间内能达成通关目标，便是玩家活用了以往游戏经历中的风险控制经验。</p>\n<p>每次游戏时平衡风险与效率的经验积累，可以成为下一次游戏时的参考与指导。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li>游戏平衡设计，分为“静态（固定型）平衡设计”，“动态（变动型）平衡设计”“效率预估型平衡设计”3种。</li>\n<li>效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。</li>\n</ul>\n<p>“你学习的时候要是有玩游戏那股冲劲和认真就好喽”<br><strong>……</strong></p>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-8114c2764d17b974.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>摘自《游戏性是什么》第10章（难易度平衡设计与效率预测）喜欢这本书，</p>\n<p>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>人专注于游戏中的机制，与游戏设计者之间有什么关系？而这又与人类自身的何种特性息息相关？</p>\n<p>——《游戏性是什么》第10章</p>\n<h2 id=\"平衡设计，大致有以下2点：\"><a href=\"#平衡设计，大致有以下2点：\" class=\"headerlink\" title=\"平衡设计，大致有以下2点：\"></a>平衡设计，大致有以下2点：</h2><ul>\n<li><p>静态（固定型）平衡设计</p>\n</li>\n<li><p>动态（变动型）平衡设计</p>\n</li>\n</ul>\n<h2 id=\"静态平衡设计\"><a href=\"#静态平衡设计\" class=\"headerlink\" title=\"静态平衡设计\"></a>静态平衡设计</h2><p>是指游戏制作完成时，平衡设计就固定了。大多数小游戏都这样，如大众熟知《雷电2》、上篇文尾提到的《僵尸危机3》</p>\n<p>在游戏中的平衡设计为</p>\n<blockquote>\n<p>难度从一开始就故意降低了。</p>\n</blockquote>\n<p>利用跷跷板模式，系统通过调整阻力点，是游戏保持了平衡状态。</p>\n<p>利用这种平衡设计，可以给玩家带来“命悬一线的关头躲过了敌人的攻击”的快感。</p>\n<p>而并非为了配合玩家的技能而变更游戏的难度。</p>\n<p>每一关的难度都被固定了。<br><img src=\"http://upload-images.jianshu.io/upload_images/1171873-c7a2caa76dea0fe7.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h2 id=\"动态平衡设计\"><a href=\"#动态平衡设计\" class=\"headerlink\" title=\"动态平衡设计\"></a>动态平衡设计</h2><p>分以下两种类型：</p>\n<ul>\n<li><strong>任意的负荷可变型平衡设计：</strong>玩家可以任意地对平衡进行改动。</li>\n<li><strong>隐藏反馈型平衡设计：</strong>游戏自动调整平衡。游戏利用程序实时解析游戏中玩家的技能，自动，调整游戏的难易度，以匹配玩家技能水平。</li>\n</ul>\n<p>隐藏反馈型平衡设计，可以以《<a href=\"http://baike.baidu.com/link?url=q1K1FOsroMXxkJ6G7aAtvudxWn5papTNXA4wKr5Z3CWrEHTZAAJ6YcV-dO6toAUigCIW-saK6BPmK7Pvk3G65a#2\" target=\"_blank\" rel=\"noopener\">山脊赛车</a>》为例。排名越靠后，车辆的控制会变得更加容易。</p>\n<p>这是为了保持败者玩家动机的一种设计方法。</p>\n<p>隐匿在游戏内部，对玩家来说是不可见的。</p>\n<h2 id=\"效率预估型的平衡设计\"><a href=\"#效率预估型的平衡设计\" class=\"headerlink\" title=\"效率预估型的平衡设计\"></a>效率预估型的平衡设计</h2><p>以《超级马里奥兄弟》中的“<strong>B dash</strong>”为例，按住B键进行移动操作可以进行更加告诉的移动。</p>\n<p>灵活使用可以在难度较高的关卡中巧妙避开敌人。</p>\n<p>并为快速通关发挥巨大作用。由于在短时间内通关得分比较高，所以也被视为一种高效率的游戏方式。</p>\n<p>另一方面，角色触碰到敌人的风险也增加了，这实际上是将难易度的设定托付给了玩家的判断。</p>\n<p>玩家在游戏设计者所赋予的幅度之内，根据自己的情况权衡风险与效率（所需时间）。</p>\n<p>为了实现这种机制，设计者还需要设计出“<strong>game over</strong>”之类的“危机”供玩家权衡。</p>\n<h2 id=\"危机\"><a href=\"#危机\" class=\"headerlink\" title=\"危机\"></a>危机</h2><p>一般的游戏中，当难度超过技能时，游戏会陷入停滞状态。</p>\n<p>通常是“回到起点”“装备减少”“重玩依旧无法通过某个场景”等情况。</p>\n<p>将因玩家的抉择而使游戏进入停滞状态的状况称之为“危机”。</p>\n<blockquote>\n<p><strong>所谓危机，对于玩家来说就是强制性地花费“时间”成本。</strong></p>\n</blockquote>\n<hr>\n<p><a href=\"http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/07/clock-650753_1280-785x510.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://upload-images.jianshu.io/upload_images/1171873-ae702f7f6686762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></a></p>\n<hr>\n<h2 id=\"风险与时间成本的权衡\"><a href=\"#风险与时间成本的权衡\" class=\"headerlink\" title=\"风险与时间成本的权衡\"></a>风险与时间成本的权衡</h2><p>风险和时间成本，一般是为反比关系。要是将风险规避到最小，就需要花费很高的时间成本。</p>\n<p>如上所述，危机机制的设计，是为了实现玩家的风险和时间成本的权衡。因此玩家有必要在下面两个选项中预估出哪一种平衡最合适。</p>\n<ul>\n<li>抑制陷入危机的风险，接受时间成本的增加</li>\n</ul>\n<ul>\n<li>接受陷入危机的风险，谋求时间成本的减少</li>\n</ul>\n<p>当玩家选择风险更高的方式高效达成目标时，看起来为什么会很开心？其实是：</p>\n<p><strong>“平衡难易度”的行为，正是创造出对于玩家自身而言挑战难度最恰当的机制。</strong></p>\n<p>在认为到危机的风险程度增加的同时，预估处当前技能能够跨越这个危机，在短时间内能达成通关目标，便是玩家活用了以往游戏经历中的风险控制经验。</p>\n<p>每次游戏时平衡风险与效率的经验积累，可以成为下一次游戏时的参考与指导。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><ul>\n<li>游戏平衡设计，分为“静态（固定型）平衡设计”，“动态（变动型）平衡设计”“效率预估型平衡设计”3种。</li>\n<li>效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。</li>\n</ul>\n<p>“你学习的时候要是有玩游戏那股冲劲和认真就好喽”<br><strong>……</strong></p>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1171873-8114c2764d17b974.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>摘自《游戏性是什么》第10章（难易度平衡设计与效率预测）喜欢这本书，</p>\n<p>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjkgtkc3v000bm4cmc6tgmihk","category_id":"cjkgtkc3j0008m4cmfchn9rkp","_id":"cjkgtkc46000im4cm0adikfeq"},{"post_id":"cjkgtkc3f0006m4cmjtrmbes2","category_id":"cjkgtkc3j0008m4cmfchn9rkp","_id":"cjkgtkc49000mm4cmonw7negf"},{"post_id":"cjkgtkc42000gm4cmz7gcbd4q","category_id":"cjkgtkc3j0008m4cmfchn9rkp","_id":"cjkgtkc4b000pm4cmvftybqan"},{"post_id":"cjkgtkc3h0007m4cmra4vkxoc","category_id":"cjkgtkc40000dm4cm104rpec4","_id":"cjkgtkc4f000tm4cm41hcedb3"},{"post_id":"cjkgtkc45000hm4cmwottf6x4","category_id":"cjkgtkc3j0008m4cmfchn9rkp","_id":"cjkgtkc4h000wm4cmi9t30m4i"},{"post_id":"cjkgtkc3t000am4cmaix8wi64","category_id":"cjkgtkc47000jm4cmv9gcezsg","_id":"cjkgtkc4k000zm4cmclwzegco"},{"post_id":"cjkgtkc4a000om4cmztzk5u0l","category_id":"cjkgtkc3j0008m4cmfchn9rkp","_id":"cjkgtkc4m0012m4cmp93enl5v"},{"post_id":"cjkgtkc3x000cm4cmzfh06b7j","category_id":"cjkgtkc47000jm4cmv9gcezsg","_id":"cjkgtkc4n0014m4cmyqs1l4d0"},{"post_id":"cjkgtkc4u001dm4cm4oq13ebu","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc51001lm4cmvve5x5li"},{"post_id":"cjkgtkc4o0017m4cmrowomtf1","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc53001om4cm7wwh7o3p"},{"post_id":"cjkgtkc4w001fm4cmnv79058k","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc55001sm4cmlxdqaiv3"},{"post_id":"cjkgtkc4y001im4cmpsy2ke3i","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc57001vm4cmj8qxpsyd"},{"post_id":"cjkgtkc4s001cm4cmn29eylpk","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc5a001zm4cmd3uqma8r"},{"post_id":"cjkgtkc50001km4cmiv32v44c","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc5c0022m4cmffa12k5s"},{"post_id":"cjkgtkc52001nm4cmclltq7b6","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc5f0026m4cmhax4vhac"},{"post_id":"cjkgtkc54001rm4cmgjap1w9w","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc5i0029m4cmqog5eq1j"},{"post_id":"cjkgtkc56001um4cma9a5g9ew","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc5l002dm4cm25n74dpp"},{"post_id":"cjkgtkc58001ym4cmbfoyqkx8","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc5n002hm4cmksf116vh"},{"post_id":"cjkgtkc5b0021m4cmoe5k76g7","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc5p002lm4cmsufoqh9c"},{"post_id":"cjkgtkc5e0025m4cm3tovxdy5","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc5s002om4cmj6h6vnq3"},{"post_id":"cjkgtkc5k002cm4cm5d6h1bej","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc5w002sm4cmov9n6si8"},{"post_id":"cjkgtkc5m002gm4cmzy98ipkp","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc60002wm4cmovhjuny2"},{"post_id":"cjkgtkc5h0028m4cm1rlmemg0","category_id":"cjkgtkc5m002em4cm646z58xk","_id":"cjkgtkc630030m4cmmk9ca5z3"},{"post_id":"cjkgtkc5u002rm4cmeunusxiz","category_id":"cjkgtkc4r001am4cmfcjb8hnx","_id":"cjkgtkc660033m4cmi4mgphqr"},{"post_id":"cjkgtkc5y002vm4cm9k5a90v7","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc6b0036m4cmle0pg4ib"},{"post_id":"cjkgtkc5o002km4cmtnhukiur","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc6f0039m4cmocolxiy0"},{"post_id":"cjkgtkc61002ym4cmgx8cy4jz","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc6i003cm4cmnov15q6a"},{"post_id":"cjkgtkc650032m4cm7z6akb09","category_id":"cjkgtkc63002zm4cmny0dig0l","_id":"cjkgtkc6m003fm4cmqr4ngskb"},{"post_id":"cjkgtkc5r002nm4cmvlu9tz97","category_id":"cjkgtkc63002zm4cmny0dig0l","_id":"cjkgtkc6o003hm4cmz0kobby7"},{"post_id":"cjkgtkc680035m4cm0zbd91mf","category_id":"cjkgtkc63002zm4cmny0dig0l","_id":"cjkgtkc6s003jm4cmygml61uv"},{"post_id":"cjkgtkc6c0038m4cm34diafyn","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc6w003lm4cm6nwhnnxg"},{"post_id":"cjkgtkc6h003bm4cmbucplz5d","category_id":"cjkgtkc63002zm4cmny0dig0l","_id":"cjkgtkc6z003nm4cm5naq0vzv"},{"post_id":"cjkgtkc6k003em4cmhbkk69mx","category_id":"cjkgtkc63002zm4cmny0dig0l","_id":"cjkgtkc71003qm4cmb199xhjp"},{"post_id":"cjkgtkc6n003gm4cmdeqlos5y","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc72003sm4cm3jjvakvi"},{"post_id":"cjkgtkc6p003im4cmusqgs1k7","category_id":"cjkgtkc63002zm4cmny0dig0l","_id":"cjkgtkc74003um4cm1gwerjfe"},{"post_id":"cjkgtkc6t003km4cmfr3j43mr","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc76003xm4cmslxzs0a2"},{"post_id":"cjkgtkc6x003mm4cmaki87yt3","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc78003zm4cmt9i6qial"},{"post_id":"cjkgtkc70003pm4cm4i1xjri8","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc790041m4cm09x3pe5d"},{"post_id":"cjkgtkc71003rm4cmsw0p8pvp","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc7b0043m4cm0d8xzfvr"},{"post_id":"cjkgtkc73003tm4cma3h8r2lh","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc7d0045m4cmuxiljd4j"},{"post_id":"cjkgtkc75003wm4cm4izrxloh","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc7f0047m4cm2520n5p7"},{"post_id":"cjkgtkc77003ym4cm9fzy0tvg","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc7h0049m4cmpuwslncq"},{"post_id":"cjkgtkc780040m4cmaxicogwh","category_id":"cjkgtkc63002zm4cmny0dig0l","_id":"cjkgtkc7i004bm4cmnc2nq43i"},{"post_id":"cjkgtkc7a0042m4cmf6h42kxw","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc7k004dm4cmluwqfh9x"},{"post_id":"cjkgtkc7c0044m4cmokpuqh1c","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc7m004fm4cmzynpp3qi"},{"post_id":"cjkgtkc7e0046m4cmpwacsmfb","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc7o004jm4cm0v4wkwwa"},{"post_id":"cjkgtkc7g0048m4cmpf9vlm9i","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc7p004lm4cms6srtl15"},{"post_id":"cjkgtkc7h004am4cmzz0dsvx0","category_id":"cjkgtkc5t002pm4cmxnpgwb68","_id":"cjkgtkc7r004om4cm1kb1ngji"},{"post_id":"cjkgtkc7j004cm4cmq29ngeta","category_id":"cjkgtkc7m004gm4cmqc1m841y","_id":"cjkgtkc7t004sm4cmy43hfef0"},{"post_id":"cjkgtkc7q004mm4cmnymucdhi","category_id":"cjkgtkc7m004gm4cmqc1m841y","_id":"cjkgtkc7u004tm4cm9hqr7dva"},{"post_id":"cjkgtkc7l004em4cmzwloidop","category_id":"cjkgtkc7m004gm4cmqc1m841y","_id":"cjkgtkc7v004vm4cmc54xhzj8"},{"post_id":"cjkgtkc7n004im4cmlvtpfbhw","category_id":"cjkgtkc7m004gm4cmqc1m841y","_id":"cjkgtkc7v004wm4cm8y79ewwa"},{"post_id":"cjkgtkc7o004km4cm0mdzbdvg","category_id":"cjkgtkc7u004um4cmcbsb22gw","_id":"cjkgtkc7v004xm4cmaf4qk7yi"},{"post_id":"cjkgtkccn004ym4cm8lg29z4k","category_id":"cjkgtkc40000dm4cm104rpec4","_id":"cjkgtkccz0054m4cmsdxepx3n"},{"post_id":"cjkgtkcd00055m4cmey8lkm8t","category_id":"cjkgtkccy0052m4cmcsgpyxk8","_id":"cjkgtkcdb005dm4cm35gn7jis"},{"post_id":"cjkgtkccs004zm4cmhe5mwxew","category_id":"cjkgtkccy0052m4cmcsgpyxk8","_id":"cjkgtkcde005hm4cmj16yp1us"},{"post_id":"cjkgtkcd20058m4cmvdagmofl","category_id":"cjkgtkc40000dm4cm104rpec4","_id":"cjkgtkcdg005km4cmzj811w55"},{"post_id":"cjkgtkccv0051m4cmke5jcqvy","category_id":"cjkgtkccy0052m4cmcsgpyxk8","_id":"cjkgtkcdi005om4cmmulaj2qq"},{"post_id":"cjkgtkcd6005cm4cmh55bam4h","category_id":"cjkgtkc40000dm4cm104rpec4","_id":"cjkgtkcdl005rm4cmejg8hjgv"},{"post_id":"cjkgtkccy0053m4cmhczblgfo","category_id":"cjkgtkccy0052m4cmcsgpyxk8","_id":"cjkgtkcdn005vm4cmuerd7qhp"},{"post_id":"cjkgtkcdh005nm4cm96k8tcgv","category_id":"cjkgtkc40000dm4cm104rpec4","_id":"cjkgtkcdp005ym4cmvrle3mb3"},{"post_id":"cjkgtkcd4005am4cm1z7dqix5","category_id":"cjkgtkcdg005lm4cmik6y98l0","_id":"cjkgtkcdr0062m4cm9ywrbrgb"},{"post_id":"cjkgtkcdd005gm4cmf0ysqib5","category_id":"cjkgtkcdg005lm4cmik6y98l0","_id":"cjkgtkcdu0065m4cmw5gcdpn8"},{"post_id":"cjkgtkcdf005jm4cmc179ns4g","category_id":"cjkgtkcdp0060m4cmfovajvaz","_id":"cjkgtkcdy006cm4cmlqh4s66l"},{"post_id":"cjkgtkcdk005qm4cm64yyj4dt","category_id":"cjkgtkcdu0067m4cmwmnhtu02","_id":"cjkgtkce3006jm4cmelegzic5"},{"post_id":"cjkgtkcdm005um4cmn5hk9w8l","category_id":"cjkgtkcdu0067m4cmwmnhtu02","_id":"cjkgtkce7006nm4cm23w1g2pk"},{"post_id":"cjkgtkce4006lm4cmuuq5wtad","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkced006tm4cmbteaz735"},{"post_id":"cjkgtkcdo005xm4cms2zdp30b","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkcee006vm4cmuq9xlix7"},{"post_id":"cjkgtkce8006pm4cmgl4e8hoj","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkceg006xm4cmitjq9bhv"},{"post_id":"cjkgtkcdq0061m4cm9x3r4d0s","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkceh0070m4cme0eni6bh"},{"post_id":"cjkgtkcds0064m4cmlzygujzl","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkcei0073m4cmyb4peazd"},{"post_id":"cjkgtkcdu0068m4cmuca53nup","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkcek0077m4cmshr7cbs5"},{"post_id":"cjkgtkcdw006am4cm0poskg0i","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkcem007bm4cmxg9r7v3t"},{"post_id":"cjkgtkcdz006em4cmj5pyqnw3","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkceo007fm4cmmvt13enh"},{"post_id":"cjkgtkce1006gm4cmlcatkken","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkceq007im4cmgdxblbsv"},{"post_id":"cjkgtkce3006km4cmfztreby5","category_id":"cjkgtkce2006im4cmhedz6oyt","_id":"cjkgtkcer007lm4cm3k3auvxn"}],"PostTag":[{"post_id":"cjkgtkc3f0006m4cmjtrmbes2","tag_id":"cjkgtkc3s0009m4cmeppbvkuj","_id":"cjkgtkc41000fm4cm6lp4rlq9"},{"post_id":"cjkgtkc3h0007m4cmra4vkxoc","tag_id":"cjkgtkc40000em4cmuj4u76iu","_id":"cjkgtkc49000nm4cmrzzfvpr0"},{"post_id":"cjkgtkc3t000am4cmaix8wi64","tag_id":"cjkgtkc47000km4cmr479t80m","_id":"cjkgtkc4g000um4cmbi292a7m"},{"post_id":"cjkgtkc3v000bm4cmc6tgmihk","tag_id":"cjkgtkc4c000rm4cm95nwrd91","_id":"cjkgtkc4k0010m4cmikofgo0e"},{"post_id":"cjkgtkc3x000cm4cmzfh06b7j","tag_id":"cjkgtkc4i000xm4cmw185s6w1","_id":"cjkgtkc4o0016m4cmt8jt1ptv"},{"post_id":"cjkgtkc42000gm4cmz7gcbd4q","tag_id":"cjkgtkc4c000rm4cm95nwrd91","_id":"cjkgtkc4s001bm4cmby1powkm"},{"post_id":"cjkgtkc45000hm4cmwottf6x4","tag_id":"cjkgtkc4r0019m4cmnxi945l0","_id":"cjkgtkc4x001hm4cmr1h2jn07"},{"post_id":"cjkgtkc4a000om4cmztzk5u0l","tag_id":"cjkgtkc4v001em4cmstghaj32","_id":"cjkgtkc52001mm4cmoircpaje"},{"post_id":"cjkgtkc50001km4cmiv32v44c","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc54001pm4cmnlyin08o"},{"post_id":"cjkgtkc4o0017m4cmrowomtf1","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc56001tm4cm9y8duznq"},{"post_id":"cjkgtkc52001nm4cmclltq7b6","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc58001wm4cmxqg9kibi"},{"post_id":"cjkgtkc54001rm4cmgjap1w9w","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc5a0020m4cmrwm7d7eu"},{"post_id":"cjkgtkc4s001cm4cmn29eylpk","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc5d0023m4cmuw1q4lo4"},{"post_id":"cjkgtkc56001um4cma9a5g9ew","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc5g0027m4cmeieb5w74"},{"post_id":"cjkgtkc58001ym4cmbfoyqkx8","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc5j002am4cmxlli4tq0"},{"post_id":"cjkgtkc4u001dm4cm4oq13ebu","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc5m002fm4cmlpmvnufz"},{"post_id":"cjkgtkc5b0021m4cmoe5k76g7","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc5o002im4cm7oratz5i"},{"post_id":"cjkgtkc5e0025m4cm3tovxdy5","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc5q002mm4cm81htd6j0"},{"post_id":"cjkgtkc4w001fm4cmnv79058k","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc5t002qm4cmwenol6ti"},{"post_id":"cjkgtkc5k002cm4cm5d6h1bej","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc5y002um4cm6bojw6yv"},{"post_id":"cjkgtkc4y001im4cmpsy2ke3i","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc61002xm4cm107rec6l"},{"post_id":"cjkgtkc5m002gm4cmzy98ipkp","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc640031m4cma9j67xez"},{"post_id":"cjkgtkc5h0028m4cm1rlmemg0","tag_id":"cjkgtkc5o002jm4cm0ctsyd54","_id":"cjkgtkc670034m4cmg3e85t3p"},{"post_id":"cjkgtkc5u002rm4cmeunusxiz","tag_id":"cjkgtkc4z001jm4cm1pzcvljc","_id":"cjkgtkc6c0037m4cmbcem5hbz"},{"post_id":"cjkgtkc5r002nm4cmvlu9tz97","tag_id":"cjkgtkc5x002tm4cmyhgwlhqr","_id":"cjkgtkc6g003am4cmrhk41ibp"},{"post_id":"cjkgtkc680035m4cm0zbd91mf","tag_id":"cjkgtkc5x002tm4cmyhgwlhqr","_id":"cjkgtkc6j003dm4cmm6r86gs9"},{"post_id":"cjkgtkc6t003km4cmfr3j43mr","tag_id":"cjkgtkc6z003om4cmrzf5a5jt","_id":"cjkgtkc75003vm4cm6jqfq6k1"},{"post_id":"cjkgtkc7j004cm4cmq29ngeta","tag_id":"cjkgtkc7n004hm4cmpj7fzcge","_id":"cjkgtkc7s004pm4cmuw8k7kf4"},{"post_id":"cjkgtkc7q004mm4cmnymucdhi","tag_id":"cjkgtkc7n004hm4cmpj7fzcge","_id":"cjkgtkc7t004qm4cmh7insbr9"},{"post_id":"cjkgtkccn004ym4cm8lg29z4k","tag_id":"cjkgtkccv0050m4cmy3k09tvw","_id":"cjkgtkcd20057m4cmmtwm5l5s"},{"post_id":"cjkgtkccs004zm4cmhe5mwxew","tag_id":"cjkgtkcd10056m4cmp0aubt01","_id":"cjkgtkcdc005fm4cmqavalwev"},{"post_id":"cjkgtkccv0051m4cmke5jcqvy","tag_id":"cjkgtkcd10056m4cmp0aubt01","_id":"cjkgtkcdh005mm4cmgrui2u2p"},{"post_id":"cjkgtkccy0053m4cmhczblgfo","tag_id":"cjkgtkcd10056m4cmp0aubt01","_id":"cjkgtkcdl005sm4cmb0rd459i"},{"post_id":"cjkgtkcd00055m4cmey8lkm8t","tag_id":"cjkgtkcd10056m4cmp0aubt01","_id":"cjkgtkcdp005zm4cmkavf7nh9"},{"post_id":"cjkgtkcd20058m4cmvdagmofl","tag_id":"cjkgtkcdn005wm4cm4jzzhf3v","_id":"cjkgtkcdu0066m4cmxp1muwhw"},{"post_id":"cjkgtkcd6005cm4cmh55bam4h","tag_id":"cjkgtkcdn005wm4cm4jzzhf3v","_id":"cjkgtkcdy006bm4cmxc2r2rjg"},{"post_id":"cjkgtkcdd005gm4cmf0ysqib5","tag_id":"cjkgtkcdw0069m4cmk7uex55l","_id":"cjkgtkce2006hm4cm9fe01kxj"},{"post_id":"cjkgtkcdf005jm4cmc179ns4g","tag_id":"cjkgtkce0006fm4cmnch76bwv","_id":"cjkgtkce8006om4cm2mfn0q7k"},{"post_id":"cjkgtkcdh005nm4cm96k8tcgv","tag_id":"cjkgtkcdn005wm4cm4jzzhf3v","_id":"cjkgtkced006sm4cm01w09ohd"},{"post_id":"cjkgtkcdk005qm4cm64yyj4dt","tag_id":"cjkgtkcec006rm4cmj1ixuiz4","_id":"cjkgtkceh006zm4cm8kl0aq56"},{"post_id":"cjkgtkcdm005um4cmn5hk9w8l","tag_id":"cjkgtkcec006rm4cmj1ixuiz4","_id":"cjkgtkcei0074m4cmitgkcqan"},{"post_id":"cjkgtkcdo005xm4cms2zdp30b","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkcel0078m4cm73fz601t"},{"post_id":"cjkgtkcdq0061m4cm9x3r4d0s","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkcen007cm4cmoo471d97"},{"post_id":"cjkgtkcds0064m4cmlzygujzl","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkcep007gm4cmmsoryjst"},{"post_id":"cjkgtkcdu0068m4cmuca53nup","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkceq007jm4cm08lkbn5i"},{"post_id":"cjkgtkcdw006am4cm0poskg0i","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkcer007mm4cmdqh08mug"},{"post_id":"cjkgtkcdz006em4cmj5pyqnw3","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkces007om4cmzrkq703j"},{"post_id":"cjkgtkce1006gm4cmlcatkken","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkceu007qm4cmaam41d6a"},{"post_id":"cjkgtkce3006km4cmfztreby5","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkcev007sm4cmlnp4f2r6"},{"post_id":"cjkgtkce4006lm4cmuuq5wtad","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkcew007um4cm9q87lrnp"},{"post_id":"cjkgtkce8006pm4cmgl4e8hoj","tag_id":"cjkgtkceh0071m4cmpg3fcn4p","_id":"cjkgtkcew007vm4cm0lpfqob9"}],"Tag":[{"name":"arch","_id":"cjkgtkc3s0009m4cmeppbvkuj"},{"name":"docker linux","_id":"cjkgtkc40000em4cmuj4u76iu"},{"name":"linux","_id":"cjkgtkc47000km4cmr479t80m"},{"name":"linux sogou","_id":"cjkgtkc4c000rm4cm95nwrd91"},{"name":"linux 网络","_id":"cjkgtkc4i000xm4cmw185s6w1"},{"name":"linux ssh","_id":"cjkgtkc4r0019m4cmnxi945l0"},{"name":"linux centos","_id":"cjkgtkc4v001em4cmstghaj32"},{"name":"电脑问题","_id":"cjkgtkc4z001jm4cm1pzcvljc"},{"name":"神器","_id":"cjkgtkc5o002jm4cm0ctsyd54"},{"name":"Google","_id":"cjkgtkc5x002tm4cmyhgwlhqr"},{"name":"碎碎 子涵","_id":"cjkgtkc6z003om4cmrzf5a5jt"},{"name":"科普","_id":"cjkgtkc7n004hm4cmpj7fzcge"},{"name":"maven","_id":"cjkgtkccv0050m4cmy3k09tvw"},{"name":"spring","_id":"cjkgtkcd10056m4cmp0aubt01"},{"name":"ajax 前端","_id":"cjkgtkcdn005wm4cm4jzzhf3v"},{"name":"apahce","_id":"cjkgtkcdw0069m4cmk7uex55l"},{"name":"翻墙 Shadowsocks arch","_id":"cjkgtkce0006fm4cmnch76bwv"},{"name":"翻墙 Shadowsocks","_id":"cjkgtkcec006rm4cmj1ixuiz4"},{"name":"游戏","_id":"cjkgtkceh0071m4cmpg3fcn4p"}]}}