<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>How to kill a currently using port on localhost in windows?[TOP]</title>
      <link href="/2030/08/16/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-How-to-kill-a-currently-using-port-on-localhost-in-windows/"/>
      <url>/2030/08/16/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-How-to-kill-a-currently-using-port-on-localhost-in-windows/</url>
      <content type="html"><![CDATA[<p>you can use port 5000, no 4000 in hexo, like this<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 5000</span><br></pre></td></tr></table></figure></p><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>Run command-line as an Administrator. Then run the below mention command. type your port number in <strong>yourPortNumber</strong></p><blockquote><p>netstat -ano | findstr :<strong>yourPortNumber</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yaokunyi&gt;netstat -ano | findstr :35729</span><br><span class="line">TCP    0.0.0.0:35729          0.0.0.0:0              LISTENING       5396</span><br><span class="line">TCP    [::]:35729             [::]:0                 LISTENING       5396</span><br></pre></td></tr></table></figure><p>See the PID ? In here the port is 5396 (process identifier)</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>Then you execute this command after identify the PID.<br>(/F forcefully terminates the process)</p><blockquote><p>taskkill /PID <strong>typeyourPIDhere</strong> /F</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yaokunyi&gt;taskkill /PID 5396 /F</span><br><span class="line">SUCCESS: The process with PID 5396 has been terminated.</span><br></pre></td></tr></table></figure><p>P.S. Run the first command again to check if process is still available or not. You’ll get empty line if process is successfully ended.</p><hr><p>By <a href="https://stackoverflow.com/questions/39632667/how-to-kill-a-currently-using-port-on-localhost-in-windows#" target="_blank" rel="noopener">stackoverflow</a></p><p>近期频繁使用<strong>gitbook</strong>，发现<strong>gitbook</strong>有时会出现端口被占用的问题无法启动服务，也是郁闷到底是谁占用的。</p>]]></content>
      
      <categories>
          
          <category> 电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 端口 占用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>idea 2019.3 破解</title>
      <link href="/2020/01/10/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-idea-2019-3-%E7%A0%B4%E8%A7%A3/"/>
      <url>/2020/01/10/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-idea-2019-3-%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote><p>转载： <a href="https://mp.weixin.qq.com/s/EYjO4W8eWxafM_1fPOFsIA" target="_blank" rel="noopener">【必读】IDEA 2019.3 最新激活教程，有效期到 2089 年(持续更新中~)</a></p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>本教程理论上适用于 IntelliJ IDEA 所有版本，请放心食用~</li><li>本教程适用于 JetBrains 全系列产品，包括 Pycharm、IDEA、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等。</li><li>本教程无需修改 hosts 文件。</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说实话，IDEA 更新是真滴快，还以为 IDEA 2019.2.4 后面会更新 IDEA 2019.2.5 版本，谁知道 11 月份刚结束，官方直接就上了 2019.3 版本</p><p>据官方说 IDEA 2019.3 版本在启动速度以及 UI 交互上做了很大优化。</p><p>今天无事便更新一波，尝尝鲜，使用的方法还是之前 <strong>2019.2</strong> 的破解方法，同样可以破解成功，Happy , 又可以愉快的玩耍了。</p><h2 id="补丁下载"><a href="#补丁下载" class="headerlink" title="补丁下载"></a>补丁下载</h2><p><a href="\file\idea\破解补丁+注册码激活\破解补丁1\jetbrains-agent.jar">破解补丁1</a><br><a href="\file\idea\破解补丁+注册码激活\破解补丁2\jetbrains-agent.jar">破解补丁2</a></p><h2 id="机器码"><a href="#机器码" class="headerlink" title="机器码"></a>机器码</h2><p><a href="\file\idea\破解补丁+注册码激活\机器环境不同,如未破解成功，激活码和破解补丁换着都试试看.txt">机器环境不同,如未破解成功，激活码和破解补丁换着都试试看</a><br><a href="\file\idea\破解补丁+注册码激活\激活码1.txt">激活码1</a><br><a href="\file\idea\破解补丁+注册码激活\激活码2.txt">激活码2</a><br><a href="\file\idea\破解补丁+注册码激活\激活码3.txt">激活码3</a></p><h3 id="直接注册码激活"><a href="#直接注册码激活" class="headerlink" title="直接注册码激活"></a>直接注册码激活</h3><p><a href="\file\idea\直接注册码激活\激活码.txt">激活码</a></p><h2 id="关于破解方法"><a href="#关于破解方法" class="headerlink" title="关于破解方法"></a>关于破解方法</h2><h3 id="破解方法有两种："><a href="#破解方法有两种：" class="headerlink" title="破解方法有两种："></a>破解方法有两种：</h3><ol><li>直接通过注册码激活，这种方法能够快速激活使用，但是激活时间只能到 2021 年。</li><li>下面重点要说的办法</li></ol><h2 id="开始激活"><a href="#开始激活" class="headerlink" title="开始激活"></a>开始激活</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在激活之前，主要注意：无需改动 host 文件。</span><br><span class="line"></span><br><span class="line">重点：激活码需要结合破解补丁，一起使用，请参考下面步骤 ⬇️⬇️⬇️</span><br></pre></td></tr></table></figure><p>如下图所示，我们先选择免费试用 30 天，先进去再说:<br><img src="/file/image/idea破解1.jpg" alt="免费试用"></p><h2 id="配置破解补丁"><a href="#配置破解补丁" class="headerlink" title="配置破解补丁"></a>配置破解补丁</h2><blockquote><p>进去过后，我们随便建个项目，点击菜单栏 Help -&gt; Edit Custom VM Options:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：切记一定要通过 IDEA 来修改 .vmoptions 文件，不要手动直接去修改，现在 IDEA 针对反破解已经越来越严格了~</span><br></pre></td></tr></table></figure><p><img src="/file/image/idea破解2.jpg" alt="Help -&gt; Edit Custom VM Options"></p><p>下载破解补丁成功以后，笔者将它放置在了 IDEA 的安装目录 /bin 路径下，以防止后面被自己误删:<br><img src="/file/image/idea破解3.jpg" alt="破解jar"></p><p><strong>注意：补丁全路径中不要包含中文，否则，可能导致破解失败！</strong></p><ul><li>另外，jetbrains-agent.jar 补丁是不需要解压的</li></ul><p><img src="/file/image/idea破解4.jpg" alt="机器码"></p><p><img src="/file/image/idea破解5.jpg" alt="vmoptions"></p><blockquote><p>在 .vmoptions 文件中配置我们补丁放置的全路径位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2019.3\bin\jetbrains-agent.jar</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="重启IDEA"><a href="#重启IDEA" class="headerlink" title="重启IDEA"></a>重启IDEA</h2><p>破解补丁配置完成以后，重启IDEA。</p><h2 id="填入激活码，激活"><a href="#填入激活码，激活" class="headerlink" title="填入激活码，激活"></a>填入激活码，激活</h2><p>重启完成后，开始填入激活码，点击菜单栏 Help -&gt; Register:<br><img src="/file/image/idea破解6.jpg" alt="Help -&gt; Register:"><br><img src="/file/image/idea破解7.jpg" alt="Register"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">** 注意：激活码需搭配上面的破解补丁一起使用才有效！！！ **</span><br></pre></td></tr></table></figure><h2 id="点击激活"><a href="#点击激活" class="headerlink" title="点击激活"></a>点击激活</h2><p><img src="/file/image/idea破解7.jpg" alt="点击激活"></p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多个git账号的SSH key切换</title>
      <link href="/2019/11/21/%E7%BC%96%E7%A8%8B-%E5%A4%9A%E4%B8%AAgit%E8%B4%A6%E5%8F%B7%E7%9A%84SSH-key%E5%88%87%E6%8D%A2/"/>
      <url>/2019/11/21/%E7%BC%96%E7%A8%8B-%E5%A4%9A%E4%B8%AAgit%E8%B4%A6%E5%8F%B7%E7%9A%84SSH-key%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<blockquote><p>摘自：<a href="https://www.jianshu.com/p/c596d584ed82" target="_blank" rel="noopener">多github帐号的SSH key切换</a></p></blockquote><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ol><li>根据需要创建两个别名的<strong>ssh key</strong></li><li>新密钥添加到SSH agent中</li><li>创建 config 配置文件</li><li>分别测试</li></ol><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="创建-ssh-key-时起个名字"><a href="#创建-ssh-key-时起个名字" class="headerlink" title="创建 ssh key 时起个名字"></a>创建 ssh key 时起个名字</h3><p>不要一路回车了，给这个文件起一个名字 不然默认的话就覆盖了之前生成的第一个<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -o -t rsa -b 4096 -C <span class="string">"rabbitucute@facebook.com"</span></span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line"></span><br><span class="line">( 起个名字 ) Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/anan/.ssh/id_rsa): facebook </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> facebook.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> facebook.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:fYY3j8+sQocxaCUw2O2AhknZhnww9RNo5dhaNUIDTs4 rabbitucute@facebook.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 4096]----+</span></span><br><span class="line"><span class="string">| o+O+OOoo        |</span></span><br><span class="line"><span class="string">|  **X=o*o..      |</span></span><br><span class="line"><span class="string">|   =E *o +       |</span></span><br><span class="line"><span class="string">|     o .+.o.     |</span></span><br><span class="line"><span class="string">|    .  .S o+=    |</span></span><br><span class="line"><span class="string">|          o+.+   |</span></span><br><span class="line"><span class="string">|         . .. .  |</span></span><br><span class="line"><span class="string">|          .  +   |</span></span><br><span class="line"><span class="string">|           ...+  |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure></p><blockquote><p>重复操作，分别创建了 <strong>facebook</strong> 和 <strong>google</strong>，得到四个文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh</span><br><span class="line">$ ls</span><br><span class="line"></span><br><span class="line">  google</span><br><span class="line">  google.pub</span><br><span class="line">  facebook</span><br><span class="line">  facebook.pub</span><br></pre></td></tr></table></figure><h3 id="新密钥添加到SSH-agent中"><a href="#新密钥添加到SSH-agent中" class="headerlink" title="新密钥添加到SSH agent中"></a>新密钥添加到SSH agent中</h3><p>因为默认只读取id_rsa，为了让SSH识别新的私钥，需将其添加到SSH agent中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_work</span><br></pre></td></tr></table></figure></p><blockquote><p>如果出现 <strong>Could not open a connection to your authentication agent</strong> 的错误，就试着用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add ~/.ssh/id_rsa_work</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="创建-config-配置文件"><a href="#创建-config-配置文件" class="headerlink" title="创建 config 配置文件"></a>创建 config 配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 该文件用于配置私钥对应的服务器</span><br><span class="line"># Default github user(first@mail.com)</span><br><span class="line"></span><br><span class="line">Host facebook.com</span><br><span class="line"> HostName facebook.com</span><br><span class="line"> User git</span><br><span class="line"> IdentityFile C:/Users/Administrator/.ssh/facebook</span><br><span class="line"></span><br><span class="line"># second user(second@mail.com) # 建一个github别名，新建的帐号使用这个别名做克隆和更新</span><br><span class="line"></span><br><span class="line">Host google</span><br><span class="line"> HostName google.com</span><br><span class="line"> User git</span><br><span class="line"> IdentityFile C:/Users/Administrator/.ssh/google</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@facebook.com</span><br><span class="line">Hi anan! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gogs, GitLab 如何恢复repository</title>
      <link href="/2019/10/24/%E6%90%AD%E5%BB%BA-Git-%E4%BB%93%E5%BA%93%E6%81%A2%E5%A4%8D/"/>
      <url>/2019/10/24/%E6%90%AD%E5%BB%BA-Git-%E4%BB%93%E5%BA%93%E6%81%A2%E5%A4%8D/</url>
      <content type="html"><![CDATA[<h2 id="自建Git-数据库丢失"><a href="#自建Git-数据库丢失" class="headerlink" title="自建Git 数据库丢失"></a>自建Git 数据库丢失</h2><ol><li>进入git的repository目录，将其中某个project，重命名为其它名字，比如 <strong>赚了100万.git</strong> 改名为 <strong>赚了100万.git.11 </strong></li><li>打开gogs控制台，创建 <strong>赚了100万项目</strong></li><li>删除目录中刚刚创建的 <strong>赚了100万.git</strong> ，将 <strong>赚了100万.git.11</strong> 再改为 <strong>赚了100万.git</strong></li><li>在本地 <strong>clone 赚了100万.git</strong>，如果之前已经有了，可以跳过这一步</li><li>随意修改某一文件，提交到origin</li><li>刷新gogs控制台，你会发现一切又都回来了（如果你的项目很多的话，恩。。。写个for循环吧）</li></ol><h2 id="GIT拉出错误-远程对象已损坏"><a href="#GIT拉出错误-远程对象已损坏" class="headerlink" title="GIT拉出错误-远程对象已损坏"></a>GIT拉出错误-远程对象已损坏</h2><blockquote><p><a href="(https://stackoverflow.com/questions/4170317/git-pull-error-remote-object-is-corrupted">GIT pull error - remote object is corrupted</a>)</p></blockquote><p>eg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cloning into &apos;Allcloud&apos;...</span><br><span class="line">remote: Counting objects: 36, done.</span><br><span class="line">remote: fatal: Out of memory, malloc failed (tried to allocate 185646833 bytes)</span><br><span class="line">remote: aborting due to possible repository corruption on the remote side.</span><br><span class="line">fatal: protocol error: bad pack header</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line"></span><br><span class="line">remote: fatal: object 21f3981dd35fccd28febabd96f27241eea856c50 is corrupted</span><br><span class="line">error: git upload-pack: git-pack-objects died with error.</span><br><span class="line">fatal: git upload-pack: aborting due to possible repository corruption on the remote side.</span><br><span class="line">remote: aborting due to possible repository corruption on the remote side.</span><br><span class="line">fatal: protocol error: bad pack header</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><blockquote><p><a href="https://confluence.atlassian.com/display/FISHKB/Git+indexing+fails+due+to+bad+pack+header" target="_blank" rel="noopener">Git indexing fails due to bad pack header</a></p></blockquote><p>这确实可能是内存问题，并且要确保我们在这里不会丢失解决方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global pack.windowMemory &quot;100m&quot;</span><br><span class="line">git config --global pack.SizeLimit &quot;100m&quot; </span><br><span class="line">git config --global pack.threads &quot;1&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>有人说 git config –global pack.window “0” 也可以</p></blockquote><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>Git克隆在克隆存储库时压缩数据，</p><p>在接收数据/文件之前，它将压缩服务器内存上的数据。</p><p>如果服务器内存不足，则打包对象时会出现上述错误</p><p>您可以通过使git克隆存储库而不用以下方法打包服务器上的对象来解决此问题。</p><p>git config –global pack.window “0”</p><hr><p><a href="https://www.cnblogs.com/ilovewindy/p/6700867.html" target="_blank" rel="noopener">gogs: 如何恢复repository</a><br><a href="https://stackoverflow.com/questions/4170317/git-pull-error-remote-object-is-corrupted" target="_blank" rel="noopener">GIT拉出错误-远程对象已损坏</a></p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Github进行fork后与原仓库同步</title>
      <link href="/2019/06/11/%E7%BC%96%E7%A8%8B-Github%E8%BF%9B%E8%A1%8Cfork%E5%90%8E%E4%B8%8E%E5%8E%9F%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/06/11/%E7%BC%96%E7%A8%8B-Github%E8%BF%9B%E8%A1%8Cfork%E5%90%8E%E4%B8%8E%E5%8E%9F%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/</url>
      <content type="html"><![CDATA[<h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>新公司要求所有的代码提交都要先通过自己的库提交到主repo上去，所以先在gitlab网页上fork出一个自己的库，在本地修改完代码后提交到远程自己库上，然后在gitlab网页上发起一个merge request请求，然后等待主repo主人review，同意之后合入。</p><p><strong>问题是同时也有其他同学在主repo合入代码，所以我要定期和主repo保持同步。</strong></p><h3 id="开始我的想法"><a href="#开始我的想法" class="headerlink" title="开始我的想法"></a>开始我的想法</h3><p>gitlab网页上提供了git pull这样的按钮，这样点一下就能让自己fork的库和原始库保持同步。然后自己在本地git pull，就能间接和原始的库保持同步。</p><p>但是我没找到这个按钮。但是我找到了下面这篇文章，照着操作之后，一步一步跟踪观察发现，每一步都能成功。</p><h4 id="整体思路如下"><a href="#整体思路如下" class="headerlink" title="整体思路如下"></a>整体思路如下</h4><ol><li>在自己的本地添加主repo为上游代码库，注意只是配置原仓库的路径，并没有真正clone原仓库</li><li>然后将远程主repo同步到自己本地的机器</li><li>然后本地的机器再push到自己的远程的fork库</li><li>所有的操作都要在本地命令行完成</li></ol><h2 id="下面是我转载的，照着这个操作，完全没问题"><a href="#下面是我转载的，照着这个操作，完全没问题" class="headerlink" title="下面是我转载的，照着这个操作，完全没问题"></a>下面是我转载的，照着这个操作，完全没问题</h2><p>我们在进行Github协同开发的时候，往往会去fork一个仓库到自己的Github中，过一段时间以后，原仓库可能会有各种提交以及修改，很可惜，Github本身并没有自动进行同步的机制，这个需要我们手动去执行，</p><p>现在我来演示一下如何进行自己的仓库和原仓库进行Gith同步的操作。</p><ol><li><p>我使用终端 命令行的方式在Mac中来操作。首先在终端中配置原仓库的位置。进入项目目录，执行如下命令：查看你的远程仓库的路径。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</span><br><span class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span><br></pre></td></tr></table></figure></li><li><p>配置原仓库的路径：下面这步操作即添加主repo为上游代码库。<br><strong>注意一定要cd到你自己fork出来的库里面去，比如工程名叫 luoluo，那要先 cd 到 luoluo 中去，然后才能操作</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</span><br></pre></td></tr></table></figure></li><li><p>再次查看远程目录的位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</span><br><span class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span><br><span class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY (fetch)</span><br><span class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY (push)</span><br></pre></td></tr></table></figure></li><li><p>抓取原仓库的修改文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch upstream</span><br><span class="line"></span><br><span class="line">From https://github.com/Zakariyya/symphony</span><br><span class="line"> * [new branch]          3.6.0-dev  -&gt; upstream/3.6.0-dev</span><br><span class="line"> * [new branch]          master     -&gt; upstream/master</span><br></pre></td></tr></table></figure></li><li><p>切换到master分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br></pre></td></tr></table></figure></li><li><p>合并远程的master分支<br><strong>下面这行代码执行结束之后，本地代码会立刻和主库保持同步，非常神奇</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git merge upstream/master</span><br><span class="line"></span><br><span class="line">Updating a422352..5fdff0f</span><br><span class="line">Fast-forward</span><br><span class="line"> README|9 ------</span><br><span class="line"> REAME.md|   7 ++++</span><br><span class="line"> 2 files changed, 7 insertions(+), 9 deletons(-)</span><br><span class="line"> delete mode 100644 REAME</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure></li><li><p>此时，你的本地库已经和原仓库已经完全同步了。<br>但是注意，此时只是你电脑上的本地库和远程的github原仓库同步了，你自己的github仓库还没有同步，<br>此时需要使用 <strong>git push</strong> 命令把你本地的仓库提交到github中。</p></li></ol><hr><p>其实(4)(5)(6)可以合并成一条命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream master</span><br></pre></td></tr></table></figure></p><ul><li>第一个参数pustream 表示远程主repo</li><li>第二个参数master 表示自己fork库的master分支</li></ul><p>这个是公司文档上写的，并不是从网上找来的<br>为了说清楚这个问题，亲自做了一张图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__________________________________________________________________</span><br><span class="line">| gitlab                                                          |</span><br><span class="line">|                                                                 |</span><br><span class="line">|   __________                                     __________     |</span><br><span class="line">|  |          |         fork                      |          |    |</span><br><span class="line">|  | 主 repo  |---------------------------------&gt; |  My repo |    |</span><br><span class="line">|  |__________|                                   |__________|    |</span><br><span class="line">|_______|____________________________________________| __ ^ ______|</span><br><span class="line">        |                                            |    |</span><br><span class="line">        |                                       Pull |    |</span><br><span class="line">_______ &gt; __________________________________________ &gt; __ | _________</span><br><span class="line">|                                                                    |</span><br><span class="line">| local                                                              |</span><br><span class="line">|                                                                    |</span><br><span class="line">|   __________                                       ______________  |</span><br><span class="line">|  |          |  git remote add upstream https://   |              | |</span><br><span class="line">|  | upstream | &lt;-----------------------------------| Local master | |</span><br><span class="line">|  |__________|-----------------------------------&gt; |______________| |</span><br><span class="line">|               git pull upstream master                             |</span><br><span class="line">|____________________________________________________________________|</span><br></pre></td></tr></table></figure><hr><p>参考：</p><ul><li><a href="https://blog.csdn.net/matrix_google/article/details/80676034" target="_blank" rel="noopener">Github进行fork后如何与原仓库同步</a></li></ul>]]></content>
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>云</title>
      <link href="/2019/05/28/cloud-cloud/"/>
      <url>/2019/05/28/cloud-cloud/</url>
      <content type="html"><![CDATA[<blockquote><p>这部分是当初公司让我做 openstack、云概念的分享写的草稿，后来因为时间问题分享黄了。大部分内容是说给非技术人员听的</p></blockquote><ul><li><p>more: <a href="https://www.qingcloud.com/solutions" target="_blank" rel="noopener">青云</a></p></li><li><p><a href="https://www.zhihu.com/question/35442270" target="_blank" rel="noopener">如何通俗的解释云计算 公有云 私有云 混合云？</a></p></li><li><a href="https://docs.openstack.org/zh_CN/" target="_blank" rel="noopener">OpenStack文档</a></li><li><p><a href="https://www.zhihu.com/question/48174633" target="_blank" rel="noopener">docker容器与虚拟机有什么区别？</a></p></li><li><p><a href="https://juejin.im/post/5b953d21f265da0afa3dc61b" target="_blank" rel="noopener">Kubernetes vs OpenStack</a></p></li><li><p><a href="https://azure.microsoft.com/zh-cn/overview/what-are-private-public-hybrid-clouds/" target="_blank" rel="noopener">什么是公有云、私有云和混合云？</a></p></li><li><p><a href="https://azure.microsoft.com/zh-cn/overview/what-is-cloud-computing/" target="_blank" rel="noopener">什么是云计算？</a></p></li><li><p><a href="https://blog.csdn.net/jiangyu1013/article/details/80417961" target="_blank" rel="noopener">分布式与集群是什么 ？ 区别是什么？</a></p></li></ul><hr><h2 id="云计算-公有云-私有云-混合云"><a href="#云计算-公有云-私有云-混合云" class="headerlink" title="云计算 公有云 私有云 混合云"></a>云计算 公有云 私有云 混合云</h2><h3 id="服务提供商的由来-云计算"><a href="#服务提供商的由来-云计算" class="headerlink" title="服务提供商的由来 云计算"></a>服务提供商的由来 云计算</h3><blockquote><p>资源的动态分配</p></blockquote><p>云计算提出的愿景，是要构建一个自来水厂，而不需要每家每户打井取水，只要通过水管和电线便可享受专业的更高水平的水电服务，且按需付费，若短期突然要大量用水用电，也无需担心资源不足，用多用少可自主决定。</p><p>云计算服务提供商建设好大规模的IT基础设施，通过互联网（网线或无线）为企业提供服务器（虚拟机）、存储、应用程序等的租用，企业无需自己再建设IT基础设施，便可享受专业的更高水平的IT服务，且按需付费。</p><p>若短期内业务访问量暴增（如双11）需要更多的计算资源，也无需担心云计算服务提供商的资源不足，资源的租用可根据使用情况自动伸缩，企业只需按实际使用量付费即可。</p><p>这就是公有云，微软Azure、亚马逊AWS、阿里云、腾讯云便是公有云提供商，提供云计算服务。</p><h3 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h3><p>公有云顾名思义，它是公开对外销售的。</p><p>任何人都可以租用他们的云服务，他们的规模可以做得非常大。亚马逊的AWS服务的年营收高达174.6亿美元，而且还在高速增长中。相应的，这些租用客户的数据存在公有云厂商的服务器上，就会存在着保密问题。</p><h3 id="私有云"><a href="#私有云" class="headerlink" title="私有云"></a>私有云</h3><p>而私有云虽然也是云计算，但是私有云并不对外提供服务。</p><p>而是由私有云的所有者自己使用。一般来说，只有对保密性有很高要求，或者本身业务规模比较庞大的机构才会建设私有云。比如政府机构，大型企业集团等。比如我国各地纷纷建立的政务云就是典型的私有云产品。</p><h3 id="混合云"><a href="#混合云" class="headerlink" title="混合云"></a>混合云</h3><p>私有云虽然安全，但是成本还是比较高。</p><p>于是另外一种综合了公有云与私有云优点的混合云业务发展起来了。比如铁道部的12306，在高峰时期会租用阿里云来提升自己对外服务的能力，这个时候的12306系统就是一个混合云。<br>混合云可以做到将保密的核心数据存放在私有云上，而将对外服务提供用户访问的部分放在公有云上。</p><h3 id="比方"><a href="#比方" class="headerlink" title="比方"></a>比方</h3><p>如果用住酒店来描述</p><ul><li>张三天天住家里，是私有云</li><li>李四天天住酒店，一般住单间，心情好就换大套间，这叫公有云</li><li>某一天张三家来了十来个客人，这是业务突增，家里睡不了那么多人，带着大家去酒店开房，这是私有云转公有云。</li><li>然后王五比较牛叉，在酒店有个固定包间，不对外开放，这是托管型私有云（专有云）。包间就好比云数据中心的托管服务器</li></ul><blockquote><p>房间所以按租收费，随意调整大小弹性扩容</p></blockquote><p>随着云计算的流行，很多本来通过互联网提供服务的东西都改名跟云扯上关系，如：</p><ul><li>网络硬盘改名为<strong>云盘</strong></li><li>网站主机改名为<strong>云主机</strong></li><li>流媒体改名为<strong>云播放</strong></li><li>以及什么<strong>云输入法</strong></li><li><strong>云阅读</strong></li><li><strong>云音乐</strong></li></ul><p>照这样说的话，一早就有的搜索引擎更加是云计算服务了。<br>发展趋势：趋向于基础功能免费、高级功能收费。</p><h2 id="OpenStack历史"><a href="#OpenStack历史" class="headerlink" title="OpenStack历史"></a>OpenStack历史</h2><p>OpenStack 是<strong>NASA</strong>和<strong>Rackspace</strong>合作研发的云计算软件，以<strong>Apache</strong>授权条款授权，并且是自由和开放源代码软件。</p><p>是一系列开源软件项目的组合，这些项目之间是松耦合关系，它们可以独立安装，启动，停止，只有在必要的时候才进行通讯。</p><ul><li>好处是安全性高，不会存在单点故障</li><li>缺点是安装和配置比较复杂</li></ul><p>OpenStack是基础设施即服务（IaaS）软件，让任何人都可以自行创建和提供云计算服务。<br>可以是我们以集中的方式有效的管理，CPU，硬盘，内存，网络等这些资源</p><p>我们把传统的资源管理方式比作为打井取水的话，那openstack就是自来水厂，让我们以按需的方式获取所需要的资源，而不是每家每户去打一口井，<br>当然自来水厂，想向每家每户提供自来水，都需要自来水管道一样，openstack它向用户提供计算机资源的基础，就是计算机网络，当然对于绝大公司来说，<br>目前的网络都不成问题。</p><h2 id="OpenStack是什么"><a href="#OpenStack是什么" class="headerlink" title="OpenStack是什么?"></a>OpenStack是什么?</h2><p>OpenStack是一个云操作系统，通过数据中心可控制大型的计算、存储、网络等资源池。所有的管理通过前端界面管理员就可以完成，同样也可以通过web接口让最终用户部署资源。</p><p>OpenStack系统由几个关键服务组成，它们可以单独安装。这些服务根据你的云需求工作在一起。<br>这些服务包括计算服务、认证服务、网络服务、镜像服务、块存储服务、对象存储服务、计量服务、编排服务和数据库服务。可以独立安装这些服务、独自配置它们或者连接成一个整体。</p><h2 id="OpenStack能做什么"><a href="#OpenStack能做什么" class="headerlink" title="OpenStack能做什么"></a><a href="https://www.redhat.com/zh/topics/openstack" target="_blank" rel="noopener">OpenStack能做什么</a></h2><h2 id="OpenStack组件"><a href="#OpenStack组件" class="headerlink" title="OpenStack组件"></a>OpenStack组件</h2><h3 id="Horizon-dashboard"><a href="#Horizon-dashboard" class="headerlink" title="Horizon(dashboard)"></a>Horizon(dashboard)</h3><ul><li>用于管理Openstack各种服务的、基于web的管理接口</li><li>通过图形界面实现创建用户、管理网络、启动实例等操作</li></ul><h3 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h3><ul><li>在节点上用于管理虚拟机的服务</li><li>Nova是一个分布式的服务,能够与Keystone交互实现认证,与Glance交互实现镜像管理</li><li>Nova被设计成在标准硬件上能够进行水平扩展</li><li>启动实例时,如果有需要则下载镜像</li></ul><h3 id="Keystone"><a href="#Keystone" class="headerlink" title="Keystone"></a>Keystone</h3><ul><li>为其他服务提供认证和授权的集中身份管理服务</li><li>也提供了集中的目录服务</li><li>支持多种身份认证模式,如果密码认证、令牌认证、以及AWS(亚马逊Web服务)登陆</li><li>为用户和其他服务提供了SSO认证服务</li></ul><h3 id="Neutron"><a href="#Neutron" class="headerlink" title="Neutron"></a>Neutron</h3><ul><li>一种软件定义网络服务</li><li>用于创建网络、子网、路由器、管理浮动IP地址</li><li>可以实现虚拟交换机、虚拟路由器</li><li>可用于在项目中创建VPN</li></ul><h3 id="Cinder"><a href="#Cinder" class="headerlink" title="Cinder"></a>Cinder</h3><ul><li>为虚拟机管理存储卷的服务</li><li>为运行在Nova中的实例提供永久的块存储</li><li>可以通过快照进行数据备份</li><li>经常应用在实例存储环境中,如果数据库文件</li></ul><h3 id="Glance"><a href="#Glance" class="headerlink" title="Glance"></a>Glance</h3><ul><li>扮演虚拟机镜像注册的角色</li><li>允许用户为直接存储拷贝服务器镜像</li><li>这些镜像可以用于新建虚拟机的模板</li></ul><h2 id="扩展-k8s-amp-docker"><a href="#扩展-k8s-amp-docker" class="headerlink" title="扩展 - k8s &amp; docker"></a>扩展 - k8s &amp; docker</h2><blockquote><p>docker(集群 swarm) -&gt; k8s<br><a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener">Swarm模式概述</a></p></blockquote><h3 id="openstack-amp-k8s"><a href="#openstack-amp-k8s" class="headerlink" title="openstack &amp; k8s"></a>openstack &amp; k8s</h3><p>openstack  是一个云操作系统，<br>通过数据中心可控制大型的计算、存储、网络等资源池。所有的管理通过前端界面管理员就可以完成，同样也可以通过web接口让最终用户部署资源。</p><p>简单理解: </p><ul><li>可以把它类比公有云，它将各种基础资源虚拟化，并提供简化的方式去管理。偏向IAAS服务</li><li>kubenretes 是用于自动部署、扩展和管理容器化（containerized）应用程序的开源系统。简单理解: 容器编排，管理多机的容器状态. 偏向PAAS服务</li></ul><h3 id="kubernetes-amp-spring-cloud"><a href="#kubernetes-amp-spring-cloud" class="headerlink" title="kubernetes &amp; spring cloud"></a>kubernetes &amp; spring cloud</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/31670782" target="_blank" rel="noopener">Spring Cloud + Kubernetes 微服务框架原理和实践</a></li><li><a href="http://dockone.io/article/2896" target="_blank" rel="noopener">部署微服务的时候，Spring Cloud 和 Kubernetes 哪个更好？</a></li><li><a href="https://www.redhat.com/zh/topics/containers/what-is-kubernetes" target="_blank" rel="noopener">redhat k8s</a></li></ul><h2 id="容器-amp-虚拟机"><a href="#容器-amp-虚拟机" class="headerlink" title="容器 &amp; 虚拟机"></a>容器 &amp; 虚拟机</h2><ul><li><a href="https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine" target="_blank" rel="noopener">kvm Wikipedia</a></li><li><a href="https://wiki.archlinux.org/index.php/KVM_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">kvm arch wiki</a>)</li></ul>]]></content>
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloud 科普 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitMQ</title>
      <link href="/2019/03/14/backEnd-rabbitMQ-%E4%BA%A4%E6%8D%A2%E5%99%A8/"/>
      <url>/2019/03/14/backEnd-rabbitMQ-%E4%BA%A4%E6%8D%A2%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>rabbitMQ 有4种不同的交换器类型</p><ul><li>Direct : 发布与订阅，完全匹配</li><li>Topic : 主题，规则匹配</li><li>Fanout : 广播匹配</li><li>Headers : </li></ul><h2 id="交换器"><a href="#交换器" class="headerlink" title="交换器"></a>交换器</h2><h3 id="Direct"><a href="#Direct" class="headerlink" title="Direct"></a>Direct</h3><blockquote><p>根据 routing.key 进入对应的队列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*                               ___________               #####################</span><br><span class="line">*                              -&gt; |_log.info_|----msg--&gt;  ## info日志处理服务 ##</span><br><span class="line">*                              |                          #####################</span><br><span class="line">*                           ___|________</span><br><span class="line">*                          (routing.key)</span><br><span class="line">*/</span><br><span class="line">*    _______    _________ /</span><br><span class="line">*   |_ 服务_|--&gt;|_交换器_|&lt;</span><br><span class="line">*                         \</span><br><span class="line">*                          \___________</span><br><span class="line">*                          (routing.key)</span><br><span class="line">*                                \     ____________            #####################</span><br><span class="line">*                                 \_&gt; |_log.error_|----msg--&gt;  ## erro日志处理服务 ##</span><br><span class="line">*                                                              #####################</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><blockquote><p>根据 路由key 进行模糊匹配，再决定将哪个消息放到哪个队列中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*                                                                                                              ###########</span><br><span class="line">*                                                                          _________________                 # info 日志  #</span><br><span class="line">*                                              7------ *.log.info -----&gt;|_ log.info 队列_|------- msg -----&gt; #  处理服务  #            </span><br><span class="line">*     ___________                             /                                                               ###########</span><br><span class="line">*    |_ 用户服务 _|-----                      /                                        </span><br><span class="line">*                      \     匹配规则 :topic /             </span><br><span class="line">*                       \                  /                                                                #############</span><br><span class="line">*     ____________       --&gt;  ############                           __________________                    #  error日志  #</span><br><span class="line">*    |_ 商品服务 _|---------&gt;  #  交换器  #-------- *.log.error -----&gt;|_ log.error 队列_|------- msg -----&gt; #  处理服务    #</span><br><span class="line">*                        --&gt;  ############                                                                 #############</span><br><span class="line">*                       /                \</span><br><span class="line">*     ___________      /                  \                                                                  #########</span><br><span class="line">*    |_ 订单服务 _|----^                    \                       _____________                           # 全日志   #</span><br><span class="line">*                                           \------- *.log.* -----&gt;|_ log- 队列_|------- msg -------------&gt; # 处理服务  #                  </span><br><span class="line">*                                                                                                            ##########</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h3><blockquote><p>只要有订阅该交换器的队列都会收到消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*                                                                                  </span><br><span class="line">*                                                      ___________                      #########</span><br><span class="line">*                                              7-----&gt;|_ 队列 Q1 _|---- 短信发送 -----&gt; # 短信服务  #            </span><br><span class="line">*                                             /                                         #########</span><br><span class="line">*                                            /                                        </span><br><span class="line">*                        匹配规则 :Fanout    /             </span><br><span class="line">*                                          /                                            </span><br><span class="line">*     ____________            ########### /            ____________                     ###########</span><br><span class="line">*    |_ 订单服务 _|---------&gt;  #  交换器  #------------&gt;|_ 队列 Q2 _|---- app push ----&gt; # push 服务 #</span><br><span class="line">*                             ############                                              ###########</span><br><span class="line">*</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="持久化（durable）"><a href="#持久化（durable）" class="headerlink" title="持久化（durable）"></a>持久化（durable）</h2><blockquote><p>消息接收者如果宕机后再重启，期间会出现消息丢失，所以需要持久化</p></blockquote><p>在接收者 RabbitListener 中，有不同的注解控制持久化</p><h3 id="autoDelete"><a href="#autoDelete" class="headerlink" title="autoDelete"></a>autoDelete</h3><ul><li>@Queue：autoDelete =”true”。 当所有消费客户端连接断开后，是否自动删除队列，true删除，false不删除</li><li>@Exchange：autoDelete =”true” 当所有绑定队列都不在使用时，是否自动删除交换器，true删除，false不删除</li></ul><h2 id="消息确认-ACK-机制"><a href="#消息确认-ACK-机制" class="headerlink" title="消息确认 ACK 机制"></a>消息确认 ACK 机制</h2><p>如果在处理消息的过程中，消费者的服务器在处理消息时出现异常，那可能这条正在处理的消息就没有完成消息消费，<strong>数据就会丢失</strong>。为了确保数据不会丢失，RabbitMQ支持消息确认-ACK</p><h3 id="确认机制"><a href="#确认机制" class="headerlink" title="确认机制"></a>确认机制</h3><p>ACK机制 是消费者从RabbitMQ收到消息并处理完成后，反馈在RabbitMQ，RabbitMQ收到反馈后才将此消息从队列中删除。</p><ul><li>如果一个消费者在处理消息出现了网络不稳定、服务器异常等现象，那么就<strong>不会有ACK反馈</strong>,RabbitMQ 会认为这个消息没有正常消费，<strong>会将消息重新放入队列中。</strong></li><li>如果在集群的情况下：RabbitMQ会立即将这个消息推送给这个在线的其他消费者。这种机制保证了在消费者服务端故障的时候，不会丢失任何消息和任务。</li><li><strong>消息永远不会从RabbitMQ中删除</strong>：只会当消费者正确发送ACK反馈，RabbitMQ确认收到后，消息才会从RabbitMQ服务器的数据中删除。</li><li>消息的ACK确认机制默认是打开的。</li></ul><h3 id="ACK机制的开发注意事项"><a href="#ACK机制的开发注意事项" class="headerlink" title="ACK机制的开发注意事项"></a>ACK机制的开发注意事项</h3><blockquote><p>如果忘记了ACK，那么后果很严重。当Consumer退出时，Message会一直重新分发。然后忘记RabbitMQ<strong>会占用越来越多的内存</strong>，由于RabbitMQ会长时间运行，因此这个“内存泄漏”是致命的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        retry:</span><br><span class="line">          enabled: <span class="keyword">true</span>  <span class="comment">//通过以上配置可以启动AmqpTemplate的重试机制，例如与RabbitMQ连接丢失的时候将会自动重试事件的发布，这个特性默认是关闭的</span></span><br><span class="line">          max-attempts: <span class="number">5</span> <span class="comment">//重试次数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> backEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backEnd 编程 rabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>v2ray搭建启动</title>
      <link href="/2019/03/12/%E6%90%AD%E5%BB%BA-%E7%BF%BB%E5%A2%99-v2ray%E6%90%AD%E5%BB%BA%E5%90%AF%E5%8A%A8/"/>
      <url>/2019/03/12/%E6%90%AD%E5%BB%BA-%E7%BF%BB%E5%A2%99-v2ray%E6%90%AD%E5%BB%BA%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/v2ray/v2ray-core" target="_blank" rel="noopener">v2ray-core</a><br><a href="https://www.v2ray.com/chapter_00/workflow.html" target="_blank" rel="noopener">v2ray官网</a><br><a href="https://toutyrater.github.io/#" target="_blank" rel="noopener">白话文教程</a>:源码项目名:<a href="https://github.com/toutyrater/v2ray-guide" target="_blank" rel="noopener">https://github.com/toutyrater/v2ray-guide</a><br><a href="https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener">V2Ray一键安装脚本</a><br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">shadowsocks客户端</a></p></blockquote><p>本文转载自233boy的<a href="https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener">V2Ray一键安装脚本</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">更新日志</span><br><span class="line">2018-01-28</span><br><span class="line">第一个完善版本发布…</span><br><span class="line">2018-5-2</span><br><span class="line">支持 HTTP/2 … 懒得发一个版本就在这里写一下</span><br><span class="line">2018-5-26</span><br><span class="line">支持 Socks5 …</span><br><span class="line">2019-1-5</span><br><span class="line">v3 版本，更加好用了。新年快乐！</span><br></pre></td></tr></table></figure></p><p>温馨提示</p><ul><li>特么这个脚本没有挖矿，没有挖矿，没有挖矿。 我很抱歉……认真的开了个玩笑</li><li>脚本是开源的，开源地址： <a href="https://github.com/233boy/v2ray" target="_blank" rel="noopener">https://github.com/233boy/v2ray</a></li></ul><p>安装或卸载</p><ul><li>要求：Ubuntu 16+ / Debian 8+ / CentOS 7+ 系统</li><li>推荐使用 Debian 9 系统，脚本会自动启用 BBR 优化。</li><li>备注：不推荐使用 Debian 8 系统，因为 Caddy 申请证书可能会出现一些莫名其妙的问题</li><li>强烈推荐使用 搬瓦工VPS，稳定，快速，针对中国线路专门优化，完全无须担心跑路，服务好，30天退款保证。</li><li>使用 root 用户输入下面命令安装或卸载</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl</p><ul><li>ubuntu/debian 系统安装 Curl 方法: <strong>apt-get update -y &amp;&amp; apt-get install curl -y</strong></li><li>centos 系统安装 Curl 方法: <strong>yum update -y &amp;&amp; yum install curl -y</strong><br>安装好 curl 之后就能安装脚本了</li></ul><blockquote><p>备注：安装完成后，输入 <strong>v2ray</strong> 即可管理 V2Ray。如果提示你的系统不支持此脚本，那么请尝试更换系统</p></blockquote><h2 id="下面是此脚本的概览"><a href="#下面是此脚本的概览" class="headerlink" title="下面是此脚本的概览"></a>下面是此脚本的概览</h2><h2 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">........... V2Ray 一键安装脚本 &amp; 管理脚本 by v2ray6.com ..........</span><br><span class="line"></span><br><span class="line">帮助说明: https://v2ray6.com/post/1/</span><br><span class="line"></span><br><span class="line">搭建教程: https://v2ray6.com/post/2/</span><br><span class="line"></span><br><span class="line"> 1. 安装</span><br><span class="line"></span><br><span class="line"> 2. 卸载</span><br><span class="line"></span><br><span class="line">请选择 [1-2]:1</span><br><span class="line"></span><br><span class="line">请选择 V2Ray 传输协议 [1-32]</span><br><span class="line"></span><br><span class="line">  1. TCP</span><br><span class="line">  2. TCP_HTTP</span><br><span class="line">  3. WebSocket</span><br><span class="line">  4. WebSocket + TLS</span><br><span class="line">  5. HTTP/2</span><br><span class="line">  6. mKCP</span><br><span class="line">  7. mKCP_utp</span><br><span class="line">  8. mKCP_srtp</span><br><span class="line">  9. mKCP_wechat-video</span><br><span class="line"> 10. mKCP_dtls</span><br><span class="line"> 11. mKCP_wireguard</span><br><span class="line"> 12. QUIC</span><br><span class="line"> 13. QUIC_utp</span><br><span class="line"> 14. QUIC_srtp</span><br><span class="line"> 15. QUIC_wechat-video</span><br><span class="line"> 16. QUIC_dtls</span><br><span class="line"> 17. QUIC_wireguard</span><br><span class="line"> 18. TCP_dynamicPort</span><br><span class="line"> 19. TCP_HTTP_dynamicPort</span><br><span class="line"> 20. WebSocket_dynamicPort</span><br><span class="line"> 21. mKCP_dynamicPort</span><br><span class="line"> 22. mKCP_utp_dynamicPort</span><br><span class="line"> 23. mKCP_srtp_dynamicPort</span><br><span class="line"> 24. mKCP_wechat-video_dynamicPort</span><br><span class="line"> 25. mKCP_dtls_dynamicPort</span><br><span class="line"> 26. mKCP_wireguard_dynamicPort</span><br><span class="line"> 27. QUIC_dynamicPort</span><br><span class="line"> 28. QUIC_utp_dynamicPort</span><br><span class="line"> 29. QUIC_srtp_dynamicPort</span><br><span class="line"> 30. QUIC_wechat-video_dynamicPort</span><br><span class="line"> 31. QUIC_dtls_dynamicPort</span><br><span class="line"> 32. QUIC_wireguard_dynamicPort</span><br><span class="line"></span><br><span class="line">备注1: 含有 [dynamicPort] 的即启用动态端口..</span><br><span class="line">备注2: [utp | srtp | wechat-video | dtls | wireguard] 分别伪装成 [BT下载 | 视频通话 | 微信视频通话 | DTLS 1.2 数据包 | WireGuard 数据包]</span><br><span class="line"></span><br><span class="line">(默认协议: TCP):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> V2Ray 传输协议 = TCP</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">请输入 V2Ray 端口 [1-65535]</span><br><span class="line">(默认端口: 32645):32645</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> V2Ray 端口 = 32645</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">是否开启广告拦截(会影响性能) [Y/N]</span><br><span class="line">(默认 [N]):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 广告拦截 = 关闭</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">是否配置 Shadowsocks [Y/N]</span><br><span class="line">(默认 [N]):</span><br></pre></td></tr></table></figure><h3 id="配置-Shadowsocks"><a href="#配置-Shadowsocks" class="headerlink" title="配置 Shadowsocks"></a>配置 Shadowsocks</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">是否配置 Shadowsocks [Y/N]</span><br><span class="line">(默认 [N]): y</span><br><span class="line"></span><br><span class="line">请输入 Shadowsocks 端口 [1-65535]，不能和 V2Ray 端口相同</span><br><span class="line">(默认端口: 21992): 21992</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Shadowsocks 端口 = 32645</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">请输入 Shadowsocks 密码</span><br><span class="line">(默认密码: 233blog.com): 233blog.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Shadowsocks 密码 = 233blog.com</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">请选择 Shadowsocks 加密协议 [1-7]</span><br><span class="line"></span><br><span class="line"> 1. aes-128-cfb</span><br><span class="line"></span><br><span class="line"> 2. aes-256-cfb</span><br><span class="line"></span><br><span class="line"> 3. chacha20</span><br><span class="line"></span><br><span class="line"> 4. chacha20-ietf</span><br><span class="line"></span><br><span class="line"> 5. aes-128-gcm</span><br><span class="line"></span><br><span class="line"> 6. aes-256-gcm</span><br><span class="line"></span><br><span class="line"> 7. chacha20-ietf-poly1305</span><br><span class="line"></span><br><span class="line">(默认加密协议: chacha20-ietf-poly1305):7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Shadowsocks 加密协议 = chacha20-ietf-poly1305</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">按 Enter 回车键 继续....或按 Ctrl + C 取消.</span><br></pre></td></tr></table></figure><p>安装完成</p><h3 id="管理面板"><a href="#管理面板" class="headerlink" title="管理面板"></a>管理面板</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">........... V2Ray 管理脚本 v3.09 by v2ray6.com ..........</span><br><span class="line"></span><br><span class="line"><span class="comment">## V2Ray 版本: v4.18.0  /  V2Ray 状态: 正在运行 ##</span></span><br><span class="line"></span><br><span class="line">帮助说明: https://v2ray6.com/post/1/</span><br><span class="line"></span><br><span class="line">反馈问题: https://github.com/233boy/v2ray/issues</span><br><span class="line"></span><br><span class="line">TG 群组: https://t.me/blog233</span><br><span class="line"></span><br><span class="line">捐赠脚本作者: https://v2ray6.com/donate/</span><br><span class="line"></span><br><span class="line">捐助 V2Ray: https://www.v2ray.com/chapter_00/02_donate.html</span><br><span class="line"></span><br><span class="line">  1. 查看 V2Ray 配置</span><br><span class="line"></span><br><span class="line">  2. 修改 V2Ray 配置</span><br><span class="line"></span><br><span class="line">  3. 下载 V2Ray 配置 / 生成配置信息链接 / 生成二维码链接</span><br><span class="line"></span><br><span class="line">  4. 查看 Shadowsocks 配置 / 生成二维码链接</span><br><span class="line"></span><br><span class="line">  5. 修改 Shadowsocks 配置</span><br><span class="line"></span><br><span class="line">  6. 查看 MTProto 配置 / 修改 MTProto 配置</span><br><span class="line"></span><br><span class="line">  7. 查看 Socks5 配置 / 修改 Socks5 配置</span><br><span class="line"></span><br><span class="line">  8. 启动 / 停止 / 重启 / 查看日志</span><br><span class="line"></span><br><span class="line">  9. 更新 V2Ray / 更新 V2Ray 管理脚本</span><br><span class="line"></span><br><span class="line"> 10. 卸载 V2Ray</span><br><span class="line"></span><br><span class="line"> 11. 其他</span><br><span class="line"></span><br><span class="line">温馨提示...如果你不想执行选项...按 Ctrl + C 即可退出</span><br><span class="line">请选择菜单 [1-11]:</span><br></pre></td></tr></table></figure><h2 id="Telegram-专用代理"><a href="#Telegram-专用代理" class="headerlink" title="Telegram 专用代理"></a>Telegram 专用代理</h2><p>如果你在使用 Telegram 的话，你可以配置一个 Telegram 的专用代理，这样来，在某些情况下你就不需要再开一个代理软件了。<br>输入 <strong>v2ray tg</strong> 即可配置 TG 专用代理</p><h3 id="配置-Telegram-MTProto"><a href="#配置-Telegram-MTProto" class="headerlink" title="配置 Telegram MTProto"></a>配置 Telegram MTProto</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">请选择菜单 [1-11]:6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 大佬...你没有配置 Telegram MTProto ...不过现在想要配置的话也是可以的 ^_^</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">是否配置 Telegram MTProto [Y/N]</span><br><span class="line">(默认 [N]): y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请输入 Telegram MTProto 端口 [1-65535]，不能和 V2Ray 端口相同</span><br><span class="line">(默认端口: 44832): </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Telegram MTProto 端口 = 44832</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">按 Enter 回车键 继续....或按 Ctrl + C 取消.</span><br></pre></td></tr></table></figure><h3 id="Telegram-MTProto-配置信息"><a href="#Telegram-MTProto-配置信息" class="headerlink" title="Telegram MTProto 配置信息"></a>Telegram MTProto 配置信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---------- Telegram MTProto 配置信息 -------------</span><br><span class="line"></span><br><span class="line"> 主机 (Hostname) = </span><br><span class="line"></span><br><span class="line"> 端口 (Port) = </span><br><span class="line"></span><br><span class="line"> 密钥 (Secret) = </span><br><span class="line"></span><br><span class="line"> Telegram 代理配置链接 =</span><br></pre></td></tr></table></figure><h2 id="快速管理"><a href="#快速管理" class="headerlink" title="快速管理"></a>快速管理</h2><ul><li><strong>v2ray info</strong> 查看 V2Ray 配置信息</li><li><strong>v2ray config</strong> 修改 V2Ray 配置</li><li><strong>v2ray link</strong> 生成 V2Ray 配置文件链接</li><li><strong>v2ray infolink</strong> 生成 V2Ray 配置信息链接</li><li><strong>v2ray qr</strong> 生成 V2Ray 配置二维码链接</li><li><strong>v2ray ss</strong> 修改 Shadowsocks 配置</li><li><strong>v2ray ssinfo</strong> 查看 Shadowsocks 配置信息</li><li><strong>v2ray ssqr</strong> 生成 Shadowsocks 配置二维码链接</li><li><strong>v2ray status</strong> 查看 V2Ray 运行状态</li><li><strong>v2ray start</strong> 启动 V2Ray</li><li><strong>v2ray stop</strong> 停止 V2Ray</li><li><strong>v2ray restart</strong> 重启 V2Ray</li><li><strong>v2ray log</strong> 查看 V2Ray 运行日志</li><li><strong>v2ray update</strong> 更新 V2Ray</li><li><strong>v2ray update</strong>.sh 更新 V2Ray 管理脚本</li><li><strong>v2ray uninstall</strong> 卸载 V2Ray</li></ul><h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><ul><li>V2Ray 配置文件路径：/etc/v2ray/config.json</li><li>Caddy 配置文件路径：/etc/caddy/Caddyfile</li><li>脚本配置文件路径: /etc/v2ray/233blog_v2ray_backup.conf</li></ul><blockquote><p>警告，请不要修改脚本配置文件，免得出错。<br>如果你不是有特别的需求，也不要修改 V2Ray 配置文件<br>不过也没事，若你实在想要瞎折腾，出错了的话，你就卸载，然后重装，再出错 ，再卸载，再重装，重复到自己不再想折腾为止。。</p></blockquote><h2 id="WS-TLS-HTTP2"><a href="#WS-TLS-HTTP2" class="headerlink" title="WS+TLS / HTTP2"></a>WS+TLS / HTTP2</h2><p>如果你使用了这两个协议，那么就会使用了脚本自带的 Caddy 集成。<br>不管如何，不建议直接去更改 Caddy 的配置：<strong>/etc/caddy/Caddyfile</strong><br>如果你需要配置其他网站相关，请将网站的配置文件放到 <strong>/etc/caddy/sites</strong> 目录下，然后重启 Caddy 进程即可，脚本默认生成的 Caddy 的配置会加载 <strong>/etc/caddy/sites</strong> 这个目录下的所有配置文件。<br>所以，请将你的网站配置文件放到 <strong>/etc/caddy/sites</strong> 目录下，完完全全不需要去更改 <strong>/etc/caddy/Caddyfile</strong><br>记得重启 Caddy 进程：<strong>service caddy restart</strong></p><h2 id="Caddy-插件相关"><a href="#Caddy-插件相关" class="headerlink" title="Caddy 插件相关"></a>Caddy 插件相关</h2><p>本脚本集成了 Caddy，但不集成任何 Caddy 插件，如果你需要安装某些 Caddy 插件，你可以使用官方的 Caddy 安装脚本来一键安装。<br>本人的脚本集成的 Caddy 的安装路径，跟 Caddy 官方的安装脚本是一致的。所以可以直接安装，不会有任何问题</p><p>举个例子，安装包含 filemanager 插件的 Caddy，执行如下命令即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://getcaddy.com | bash -s personal http.filemanager</span><br></pre></td></tr></table></figure></p><p>你可以在 <strong> <a href="https://caddyserver.com/download" target="_blank" rel="noopener">https://caddyserver.com/download</a></strong> 找到 Caddy 更多插件和安装命令。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>V2Ray 客户端配置文件 SOCKS 监听端口为 2333， HTTP 监听端口为 6666<br>可能某些 V2Ray 客户端的选项或描述略有不同，但事实上，此脚本显示的 V2Ray 配置信息已经足够详细，由于客户端的不同，请对号入座。</p><h2 id="反馈问题"><a href="#反馈问题" class="headerlink" title="反馈问题"></a>反馈问题</h2><p>请先查阅：V2Ray 一键安装脚本疑问集合</p><ul><li>Telegram 群组： <a href="https://t.me/blog233" target="_blank" rel="noopener">https://t.me/blog233</a> </li><li>Github 反馈： <a href="https://github.com/233boy/v2ray/issues" target="_blank" rel="noopener">https://github.com/233boy/v2ray/issues</a> <blockquote><p>任何有关于 V2Ray 的问题，请自行到 V2Ray 官方反馈。<br>目前只支持配置一个 V2Ray 账号…一个 Shadowsocks 账号。。不支持 SSR。。<br>使用国际大厂的 VPS，请自行在安全组 (防火墙) 开放端口和 UDP 协议 (如果你要使用含有 mKCP 的传输协议)</p></blockquote></li></ul><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>为了避免由于不可抗拒的原因所造成本人主动删除脚本，所以建议请将本脚本 Fork 一份<br>备份地址： <a href="https://github.com/233boy/v2ray/fork" target="_blank" rel="noopener">https://github.com/233boy/v2ray/fork</a><br>安装方法，确保你已经 Fork 了脚本，将 233boy 修改成你的 Github 用户名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/233boy/v2ray</span><br><span class="line">cd v2ray</span><br><span class="line">chmod +x install.sh</span><br><span class="line">./install.sh local</span><br></pre></td></tr></table></figure></p><p>如果提示 git 命令不可用，那就自己安装咯，不会安装啊？我也不知道啊。哈哈</p><h2 id="及时更新脚本"><a href="#及时更新脚本" class="headerlink" title="及时更新脚本"></a>及时更新脚本</h2><p>为确保你能愉快使用，请留意使用 v2ray update.sh 命令来更新管理脚本。<br>脚本难免会有 BUG，所以建议有空就检查一下更新情况。</p><h2 id="关注脚本最新动态"><a href="#关注脚本最新动态" class="headerlink" title="关注脚本最新动态"></a>关注脚本最新动态</h2><p>本人会在 <a href="https://t.me/blog2333" target="_blank" rel="noopener">本站 Telegram</a> 公告频道 推送脚本最新动态相关，如果你使用 Telegram 的话，可以关注一下。<br>当然啦，你也可以加入 <a href="https://t.me/blog233" target="_blank" rel="noopener">本站 Telegram 群组</a> 来吹水。</p><h2 id="资助-V2Ray"><a href="#资助-V2Ray" class="headerlink" title="资助 V2Ray"></a>资助 V2Ray</h2><p>如果你觉得 V2Ray 很好用，能解决你的某些问题，请考虑 <a href="https://www.v2ray.com/chapter_00/02_donate.html" target="_blank" rel="noopener">资助 V2Ray</a> 发展 。</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>V2Ray： <a href="https://www.v2ray.com/" target="_blank" rel="noopener">https://www.v2ray.com/</a></p><h2 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h2><p>此脚本使用 GPL v3 协议共享。</p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>如果觉得脚本好用，记得分享给你的其他小伙伴们哦~</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>请勿违反国家法律法规，否则后果自负！<br>使用一键脚本并不会害了你，并且会让你节省大量的时间，工具从来都是为了更快的解决问题。</p>]]></content>
      
      <categories>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 v2ray </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS RabbitMQ Server</title>
      <link href="/2019/03/04/%E6%90%AD%E5%BB%BA-RabbitMQ-server%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/03/04/%E6%90%AD%E5%BB%BA-RabbitMQ-server%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="首先需要安装erlang"><a href="#首先需要安装erlang" class="headerlink" title="首先需要安装erlang"></a>首先需要安装erlang</h2><blockquote><p>参考：<a href="http://fedoraproject.org/wiki/EPEL/FAQ#howtouse" target="_blank" rel="noopener">http://fedoraproject.org/wiki/EPEL/FAQ#howtouse</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm</span><br><span class="line">yum install erlang</span><br></pre></td></tr></table></figure><h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install rabbitmq-server-3.6.6-1.el7.noarch.rpm </span><br><span class="line"></span><br><span class="line">service rabbitmq-server start</span><br><span class="line">service rabbitmq-server status</span><br></pre></td></tr></table></figure><h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Redirecting to /bin/systemctl status rabbitmq-server.service</span><br><span class="line">● rabbitmq-server.service - RabbitMQ broker</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2019-03-04 15:21:52 CST; 6s ago</span><br><span class="line"> Main PID: 793 (beam.smp)</span><br><span class="line">   Status: <span class="string">"Initialized"</span></span><br><span class="line">   CGroup: /system.slice/rabbitmq-server.service</span><br><span class="line">           ├─ 793 /usr/lib64/erlang/erts-5.10.4/bin/beam.smp -W w -A 64 -P 1048576 -t 5000000 -stbt db -zdbbl 32000 -K <span class="literal">true</span> -- -root /usr/lib64/erlang ...</span><br><span class="line">           ├─ 929 /usr/lib64/erlang/erts-5.10.4/bin/epmd -daemon</span><br><span class="line">           ├─1061 inet_gethost 4</span><br><span class="line">           └─1062 inet_gethost 4</span><br><span class="line"></span><br><span class="line">Mar 04 15:21:48 anan rabbitmq-server[793]: RabbitMQ 3.6.6. Copyright (C) 2007-2016 Pivotal Software, Inc.</span><br><span class="line">Mar 04 15:21:48 anan rabbitmq-server[793]: <span class="comment">##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></span><br><span class="line">Mar 04 15:21:48 anan rabbitmq-server[793]: <span class="comment">##  ##</span></span><br><span class="line">Mar 04 15:21:48 anan rabbitmq-server[793]: <span class="comment">##########  Logs: /var/log/rabbitmq/rabbit@anan.log</span></span><br><span class="line">Mar 04 15:21:48 anan rabbitmq-server[793]: <span class="comment">######  ##        /var/log/rabbitmq/rabbit@anan-sasl.log</span></span><br><span class="line">Mar 04 15:21:48 anan rabbitmq-server[793]: <span class="comment">##########</span></span><br><span class="line">Mar 04 15:21:48 anan rabbitmq-server[793]: Starting broker...</span><br><span class="line">Mar 04 15:21:52 anan rabbitmq-server[793]: systemd unit <span class="keyword">for</span> activation check: <span class="string">"rabbitmq-server.service"</span></span><br><span class="line">Mar 04 15:21:52 anan systemd[1]: Started RabbitMQ broker.</span><br><span class="line">Mar 04 15:21:52 anan rabbitmq-server[793]: completed with 0 plugins.</span><br></pre></td></tr></table></figure><p>打开 <a href="mailto:/var/log/rabbitmq/rabbit@anan.log" target="_blank" rel="noopener">/var/log/rabbitmq/rabbit@anan.log</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@anan rabbitmq]<span class="comment"># cat rabbit\@anan.log</span></span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 4-Mar-2019::15:21:48 ===</span><br><span class="line">Starting RabbitMQ 3.6.6 on Erlang R16B03-1</span><br><span class="line">Copyright (C) 2007-2016 Pivotal Software, Inc.</span><br><span class="line">Licensed under the MPL.  See http://www.rabbitmq.com/</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 4-Mar-2019::15:21:48 ===</span><br><span class="line">node           : rabbit@anan</span><br><span class="line">home dir       : /var/lib/rabbitmq</span><br><span class="line">config file(s) : /etc/rabbitmq/rabbitmq.config (not found)</span><br><span class="line">cookie <span class="built_in">hash</span>    : 9csyWc/ryZpumbtCpBTFYg==</span><br><span class="line"><span class="built_in">log</span>            : /var/<span class="built_in">log</span>/rabbitmq/rabbit@anan.log</span><br><span class="line">sasl <span class="built_in">log</span>       : /var/<span class="built_in">log</span>/rabbitmq/rabbit@anan-sasl.log</span><br><span class="line">database dir   : /var/lib/rabbitmq/mnesia/rabbit@anan</span><br></pre></td></tr></table></figure></p><h4 id="注意，这里出现config-file-s-etc-rabbitmq-rabbitmq-config-not-found"><a href="#注意，这里出现config-file-s-etc-rabbitmq-rabbitmq-config-not-found" class="headerlink" title="注意，这里出现config file(s) : /etc/rabbitmq/rabbitmq.config (not found)"></a>注意，这里出现<strong>config file(s) : /etc/rabbitmq/rabbitmq.config (not found)</strong></h4><blockquote><p>这里显示的是没有找到配置文件，我们可以自己创建这个文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/rabbitmq/</span><br><span class="line">vi rabbitmq.config</span><br></pre></td></tr></table></figure><h5 id="编辑内容如下"><a href="#编辑内容如下" class="headerlink" title="编辑内容如下"></a>编辑内容如下</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</span><br></pre></td></tr></table></figure><blockquote><p>后面的“.”是要的，不是写错<br>这里的意思是开放使用，rabbitmq默认创建的用户guest，密码也是guest，这个用户默认只能是本机访问，localhost或者127.0.0.1，从外部访问需要添加上面的配置。</p></blockquote><h5 id="保存配置后重启服务"><a href="#保存配置后重启服务" class="headerlink" title="保存配置后重启服务"></a>保存配置后重启服务</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service rabbitmq-server stop</span><br><span class="line">service rabbitmq-server start</span><br></pre></td></tr></table></figure><h2 id="开放-15672-端口"><a href="#开放-15672-端口" class="headerlink" title="开放 15672 端口"></a>开放 15672 端口</h2><blockquote><p>这里虚拟机操作，没有机子没装防火墙，固做记录未亲测</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent</span><br><span class="line">firewall-cmd --reload </span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接关闭防火墙</span></span><br><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ无法访问Web管理页面"><a href="#RabbitMQ无法访问Web管理页面" class="headerlink" title="RabbitMQ无法访问Web管理页面"></a>RabbitMQ无法访问Web管理页面</h2><blockquote><p>启动RabbitMQ后，没法访问Web管理页面，RabbitMQ安装后默认是不启动管理模块的，所以需要配置将管理模块启动 </p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl start_app</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line">rabbitmqctl stop</span><br></pre></td></tr></table></figure><h2 id="设置-RabbitMQ-远程-IP-登陆-以下操作不需要重启"><a href="#设置-RabbitMQ-远程-IP-登陆-以下操作不需要重启" class="headerlink" title="设置 RabbitMQ 远程 IP 登陆 (以下操作不需要重启)"></a>设置 RabbitMQ 远程 IP 登陆 (以下操作不需要重启)</h2><blockquote><p>rabbitmq默认创建的用户guest，密码也是guest</p></blockquote><ol><li><p>创建一个 anan 的账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user anan 123456</span><br></pre></td></tr></table></figure></li><li><p>设置用户角色</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_user_tags anan  administrator</span><br></pre></td></tr></table></figure></li><li><p>设置用户权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p <span class="string">"/"</span> anan <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></span><br></pre></td></tr></table></figure></li><li><p>设置完成后可以查看当前用户和角色（需要开启服务）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>访问： <a href="http://ip:15672" target="_blank" rel="noopener">http://ip:15672</a></p></blockquote><hr><ul><li><a href="https://www.cnblogs.com/uptothesky/p/6094357.html" target="_blank" rel="noopener">在CentOS7上安装RabbitMQ</a></li><li><a href="https://fedoraproject.org/wiki/EPEL/FAQ#howtouse" target="_blank" rel="noopener">How can I install the packages from the EPEL software repository?</a></li><li><a href="https://blog.csdn.net/qq_35873847/article/details/78721696" target="_blank" rel="noopener">RabbitMQ无法访问Web管理页面</a></li></ul>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见版本号</title>
      <link href="/2019/03/01/%E7%A7%91%E6%99%AE-%E5%B8%B8%E8%A7%81%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
      <url>/2019/03/01/%E7%A7%91%E6%99%AE-%E5%B8%B8%E8%A7%81%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
      <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">版本号</th><th style="text-align:center">版本</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">BUILD-XXX</td><td style="text-align:center">开发版</td><td style="text-align:left">一般是开发团队内部使用</td></tr><tr><td style="text-align:left">GA</td><td style="text-align:center">稳定版</td><td style="text-align:left">内部开发到一定阶段，各个模块集成后，经过全面测试发现没有问题，可对外发行了。<br>这时候叫GA（General Availability）。基本上可以使用</td></tr><tr><td style="text-align:left">PRE（M1, M2）</td><td style="text-align:center">里程碑版</td><td style="text-align:left">由于GA还不属于公开发行版，里面还有些功能不完善或者bug，于是就有了milestone（里程碑版）。<br>milestone版主要修复了一些bug调整。一个GA后。一般会有很多个里程碑版。例如 M1 M2 M3……</td></tr><tr><td style="text-align:left">RC</td><td style="text-align:center">候选发布版</td><td style="text-align:left">从BUILD后到GA在到M基本上系统就算是定型了，这时候系统就进入Release Candidate（候选发布版）。<br>该阶段的软件类似于最终发行前的一个<strong>观察期</strong>，该期间只对一些发现等级高的bug进行修复。<br>发布 RC1 RC2 等版本</td></tr><tr><td style="text-align:left">SR</td><td style="text-align:center">正式发布版</td><td style="text-align:left">公开正式发布。正式发布版一般也有多个发布，例如 SR1 SR2 SR3 等等，<br>一般是用来修复大bug或者优化</td></tr></tbody></table><h2 id="常见数字版本号"><a href="#常见数字版本号" class="headerlink" title="常见数字版本号"></a>常见数字版本号</h2><blockquote><p>软件版本号：2.0.2.RELEASE</p></blockquote><ul><li>2：<strong>主版本号</strong>：当功能模块有较大更新或者整体架构发生变化时，主版本号会更新</li><li>0：<strong>次版本号</strong>：表示只是局部的一些变动</li><li>2：<strong>修改版本号</strong>：一般是bug的修复或者小的变动</li><li>RELEASE：希腊字母版本号，表示注明当前版本的软件处于哪个开发阶段</li></ul><h2 id="常见希腊字母，用于表示当前开发阶段"><a href="#常见希腊字母，用于表示当前开发阶段" class="headerlink" title="常见希腊字母，用于表示当前开发阶段"></a>常见希腊字母，用于表示当前开发阶段</h2><ul><li><strong>Base</strong>: 设计阶段，只有相应的设计没有具体功能实现</li><li><strong>Alpha</strong>：软件的初级版本，内测版，存在较多bug</li><li><strong>Bate</strong>：表示相对 alpha 有了很大进步，消除了严重的bug，还存在一些潜在的bug</li><li><strong>Release</strong>：该版本表示最终版本。</li></ul>]]></content>
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SpringCloud 的 Eureka</title>
      <link href="/2019/02/24/backEnd-spring-SpringCloud/"/>
      <url>/2019/02/24/backEnd-spring-SpringCloud/</url>
      <content type="html"><![CDATA[<h1 id="Eureka-注册中心三种角色"><a href="#Eureka-注册中心三种角色" class="headerlink" title="Eureka 注册中心三种角色"></a>Eureka 注册中心三种角色</h1><p>Eureka 是 Netflix 开发的服务发现组件，本身是一个基于 REST 的服务， SpringCloud将它继承在其子项目 spring-cloud-netflix 中，以实现 Springcloud 的服务注册与发现，同时还提供了负载均衡，故障转移等功能</p><h2 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h2><h3 id="单节点"><a href="#单节点" class="headerlink" title="单节点"></a>单节点</h3><p>通过 Register、Get、Renew 等接口提供服务和发现</p><blockquote><p>通过spring 官网上 <a href="https://spring.io/projects/spring-cloud-netflix" target="_blank" rel="noopener">eureka</a>得到：<br>任何Spring Boot应用程序<strong>@EnableEurekaClient</strong>都会尝试联系Eureka服务器<a href="http://localhost:8761（默认值为" target="_blank" rel="noopener">http://localhost:8761（默认值为</a> eureka.client.serviceUrl.defaultZone）</p></blockquote><p>要运行您自己的服务器，请pom使用<strong>spring-cloud-starter-netflix-eureka-server</strong>依赖项和在启动类上添加<strong>@EnableEurekaServer</strong>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    context-path:</span> <span class="string">/eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否将自己注册到 eureka-server 中，默认为true。否则eureka会一直尝试自己注册自己，导致异常</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 是否从 eureka-server 中获取服务注册信息，默认为true</span></span><br></pre></td></tr></table></figure><blockquote><p>不添加配置，会导致<strong>eureka</strong>一直自己注册自己导致启动异常</p></blockquote><p>访问 <strong><a href="http://localhost:8761/eureka-server/" target="_blank" rel="noopener">http://localhost:8761/eureka-server/</a></strong> 看到 eureka 服务管理平台</p><h3 id="eureka-集群"><a href="#eureka-集群" class="headerlink" title="eureka 集群"></a>eureka 集群</h3><p>在搭建 Eureka 集群时，需要添加多个配置文件，并且使用Springboot的多环境配置方式，集群中需要多少节点就添加多个配置文件。<br>根据不同的配置文件到不同的节点进行部署即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    context-path:</span> <span class="string">/</span>  <span class="comment"># 集群 这里 非/ 的话会出现eureka中没有互相注册，没有服务注册的情况</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">eureka1</span>  <span class="comment"># 设置eureka实例名称，与配置文件的变量为主</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka2:8761/eureka/</span>  <span class="comment"># 设置服务注册中心地址，指向另一个注册中心 ，结构是一定的：http://&#123;hostname&#125;:&#123;port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ol><li>与单节点不同，配置文件属性<strong>defaultZone</strong>会指向另外一个节点，使得自己跑到指定的节点下注册自己</li><li>instance.hostname：是自己的主机名，多个节点都有自己的主机名。</li><li>hostname: eureka1 和 defaultZone 中的 eureka2 </li></ol><h2 id="Application-Server-Service-Provider"><a href="#Application-Server-Service-Provider" class="headerlink" title="Application Server(Service Provider)"></a>Application Server(Service Provider)</h2><blockquote><p>服务提供方，把自身的服务实例注册到 <strong>Eureka Server</strong> 中</p></blockquote><h3 id="pom-文件需要"><a href="#pom-文件需要" class="headerlink" title="pom 文件需要"></a>pom 文件需要</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    context-path:</span> <span class="string">/eureka-provider</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka1:8761/eureka/,http://eureka2:8761/eureka/</span>  <span class="comment"># 设置服务注册中心地址，指向另一个注册中心，用逗号分割</span></span><br></pre></td></tr></table></figure><blockquote><p>域名 修改 hosts ，略</p></blockquote><h2 id="Application-Client-Service-Consumer"><a href="#Application-Client-Service-Consumer" class="headerlink" title="Application Client(Service Consumer)"></a>Application Client(Service Consumer)</h2><blockquote><p>服务调用方，通过<strong>Eureka Server</strong>获取服务列表，消费服务</p></blockquote>]]></content>
      
      <categories>
          
          <category> java Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring SpringCloud Eureka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git tag</title>
      <link href="/2019/01/27/%E7%BC%96%E7%A8%8B-Git/"/>
      <url>/2019/01/27/%E7%BC%96%E7%A8%8B-Git/</url>
      <content type="html"><![CDATA[<h2 id="基本-git-tag-常用命令"><a href="#基本-git-tag-常用命令" class="headerlink" title="基本 git tag 常用命令"></a>基本 git tag 常用命令</h2><h3 id="查看tag列表"><a href="#查看tag列表" class="headerlink" title="查看tag列表"></a>查看tag列表</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag <span class="comment"># 展示出当前仓库所有的tag</span></span><br><span class="line">git tag -l <span class="string">'v1.0*'</span> <span class="comment"># 搜索并展示出v1.0开头的tag</span></span><br></pre></td></tr></table></figure><h3 id="增加（“打”）tag"><a href="#增加（“打”）tag" class="headerlink" title="增加（“打”）tag"></a>增加（“打”）tag</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag <span class="built_in">test</span> <span class="comment"># 创建轻量tag</span></span><br><span class="line">git tag -a <span class="string">'v1.0.0'</span> -m <span class="string">"1.0.0版本"</span> <span class="comment"># 创建附注tag，参数a即annotated的缩写，指定Tag类型，后附Tag名。参数m指定Tag说明，说明信息会保存在Tag对象中。</span></span><br></pre></td></tr></table></figure><h3 id="切换tag"><a href="#切换tag" class="headerlink" title="切换tag"></a>切换tag</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="built_in">test</span> <span class="comment"># 切换到 test tag</span></span><br><span class="line">git branch &lt;branch name&gt; &lt;tag name&gt; <span class="comment">#在tag点上创建分支</span></span><br></pre></td></tr></table></figure><h3 id="查看某个tag信息"><a href="#查看某个tag信息" class="headerlink" title="查看某个tag信息"></a>查看某个tag信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show <span class="built_in">test</span> <span class="comment"># 查看test tag的版本信息</span></span><br></pre></td></tr></table></figure><h3 id="删除某个tag"><a href="#删除某个tag" class="headerlink" title="删除某个tag"></a>删除某个tag</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d <span class="built_in">test</span> <span class="comment"># 删除test tag</span></span><br></pre></td></tr></table></figure><h3 id="给指定的commit打Tag"><a href="#给指定的commit打Tag" class="headerlink" title="给指定的commit打Tag"></a>给指定的commit打Tag</h3><p>打Tag不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。<br>注意：需要填写保存信息并输入:wq<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0.1 sd74d5s7</span><br></pre></td></tr></table></figure></p><h3 id="tag推送远程仓库"><a href="#tag推送远程仓库" class="headerlink" title="tag推送远程仓库"></a>tag推送远程仓库</h3><p>通常的git push不会将Tag对象提交到git服务器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin –-tags <span class="comment"># 将本地所有Tag提交到远程仓库</span></span><br></pre></td></tr></table></figure></p><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag new old</span><br><span class="line">git tag -d old</span><br><span class="line">git push origin :refs/tags/old</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h2 id="仓库常用命令"><a href="#仓库常用命令" class="headerlink" title="仓库常用命令"></a>仓库常用命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看远程仓库：$ git remote -v</span><br><span class="line">添加远程仓库：$ git remote add [name] [url]</span><br><span class="line">删除远程仓库：$ git remote rm [name]</span><br><span class="line">修改远程仓库：$ git remote <span class="built_in">set</span>-url --push [name][newUrl]</span><br><span class="line">拉取远程仓库：$ git pull [remoteName] [localBranchName]</span><br><span class="line">推送远程仓库：$ git push [remoteName] [localBranchName]</span><br></pre></td></tr></table></figure><h2 id="远程创建分支"><a href="#远程创建分支" class="headerlink" title="远程创建分支"></a>远程创建分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin 本地:远程     </span><br><span class="line">git push origin <span class="built_in">test</span>:<span class="built_in">test</span>  //eg 注意，操作不当会覆盖掉远程现有分支</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>唯一索引异常捕获</title>
      <link href="/2019/01/24/backEnd-spring-%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/"/>
      <url>/2019/01/24/backEnd-spring-%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</url>
      <content type="html"><![CDATA[<blockquote><p>今天碰到个问题</p></blockquote><h2 id="前提场景"><a href="#前提场景" class="headerlink" title="前提场景"></a>前提场景</h2><ul><li>数据库表字段设为 <strong>唯一</strong></li><li>插入数据时爆出 <strong>java.sql.SQLIntegrityConstraintViolationException: Duplicate entry ‘anan1529’ for key ‘account’</strong></li><li>期望：能将该异常捕获并识别处理</li></ul><h2 id="先解决问题"><a href="#先解决问题" class="headerlink" title="先解决问题"></a>先解决问题</h2><p>经过不断 ctrl + 鼠标左键 ，找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception</span><br><span class="line">|-- java.sql.SQLException</span><br><span class="line">|-- SQLNonTransientException</span><br><span class="line">|-- SQLIntegrityConstraintViolationException</span><br></pre></td></tr></table></figure></p><p><strong>SQLIntegrityConstraintViolationException</strong> 和 <strong>SQLException</strong> 都没法被 <strong>try catch</strong>，<a href="https://stackoverflow.com/questions/54035808/how-to-handle-the-sqlintegrityconstraintviolationexception-in-spring-boot" target="_blank" rel="noopener">该贴</a>指出用 <strong>DataIntegrityViolationException</strong> 或 <strong>Exception</strong> 来捕获。</p><p><a href="https://www.oschina.net/question/86510_14830" target="_blank" rel="noopener">该贴</a>指出用：捕捉到这个异常后要调用 .getCause() 方法才能获取真实的异常信息。</p><p>于是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  userRepository.save(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (DataIntegrityViolationException e) &#123; <span class="comment">// 存在相同的唯一索引数据</span></span><br><span class="line">  log.info(<span class="string">"e.getCause().getCause().getMessage() ==&gt; "</span>+e.getCause().getCause().getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">打印： e.getCause().getCause().getMessage() ==&gt; Duplicate entry <span class="string">'anan1529'</span> <span class="keyword">for</span> key <span class="string">'account'</span></span><br></pre></td></tr></table></figure></p><p>正是我需要的内容，对信息处理下后即可作为错误信息返回出去，将该思路抽取到 CoreService 中所有代码服用，每次新增 <strong>唯一索引</strong> 的需求，，只需要在数据库字段添加<strong>唯一</strong>标识，而不需要修改代码。</p><h2 id="底下补充内容"><a href="#底下补充内容" class="headerlink" title="底下补充内容"></a>底下补充内容</h2><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><blockquote><ul><li><strong>检查性异常</strong> : 指在编译时即可查出的异常，会在编译时抛出，常见异常如下</li><li><strong>非检查性异常</strong> ： 通常时由于业务，流程导致不可预测的异常，比方说 <strong>空指针异常，IO流异常</strong>等，通常为 <strong>RuntimeException</strong></li></ul></blockquote><h4 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h4><ul><li>检查性异常<ul><li>ClassNotFoundException：应用程序试图加载类时，找不到相应的类，抛出该异常。</li><li>CloneNotSupportedException：当调用 Object 类中的 clone 方法克隆对象，但该对象的类无法实现 Cloneable 接口时，抛出该异常。</li><li>IllegalAccessException：拒绝访问一个类的时候，抛出该异常。</li><li>InstantiationException：当试图使用 Class 类中的 newInstance 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</li><li>InterruptedException：一个线程被另一个线程中断，抛出该异常。</li><li>NoSuchFieldException：请求的变量不存在。</li><li>NoSuchMethodException：请求的方法不存在。</li></ul></li><li>非检查性异常（通常时由于业务，流程导致不可预测的异常，比方说）<ul><li>ArithmeticException：当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例。</li><li>ArrayIndexOutOfBoundsException：用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</li><li>ArrayStoreException：试图将错误类型的对象存储到一个对象数组时抛出的异常。</li><li>ClassCastException：当试图将对象强制转换为不是实例的子类时，抛出该异常。</li><li>IllegalArgumentException：抛出的异常表明向方法传递了一个不合法或不正确的参数。</li><li>IllegalMonitorStateException：抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。</li><li>IllegalStateException：在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。</li><li>IllegalThreadStateException：线程没有处于请求操作所要求的适当状态时抛出的异常。</li><li>IndexOutOfBoundsException：指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</li><li>NegativeArraySizeException：如果应用程序试图创建大小为负的数组，则抛出该异常。</li><li>NullPointerException：当应用程序试图在需要对象的地方使用 null 时，抛出该异常</li><li>NumberFormatException：当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</li><li>SecurityException：由安全管理器抛出的异常，指示存在安全侵犯。</li><li>StringIndexOutOfBoundsException：此异常由 String 方法抛出，指示索引或者为负，或者超出字符串的大小。</li><li>UnsupportedOperationException：当不支持请求的操作时，抛出该异常。</li></ul></li></ul><hr><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/54035808/how-to-handle-the-sqlintegrityconstraintviolationexception-in-spring-boot" target="_blank" rel="noopener">How to handle the SQLIntegrityConstraintViolationException in Spring Boot?</a>:Since you are using spring-data JPA repository to save entity you should catch DataIntegrityViolationException instead of SQLException</li><li><a href="http://www.runoob.com/java/java-exceptions.html" target="_blank" rel="noopener">Java 异常处理 - 菜鸟教程</a></li><li><a href="https://www.oschina.net/question/86510_14830" target="_blank" rel="noopener">InvocationTargetException是什么异常？</a></li></ul><blockquote><p>好久没有写跟java相关的笔记了，啧啧啧</p></blockquote>]]></content>
      
      <categories>
          
          <category> java Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>命令行下安装 oracle 11gR2 数据库</title>
      <link href="/2019/01/17/linux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E5%AE%89%E8%A3%85-oracle-11gR2-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/01/17/linux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E5%AE%89%E8%A3%85-oracle-11gR2-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="Centos-linux系统-命令行（静默）安装oracle-11gR2"><a href="#Centos-linux系统-命令行（静默）安装oracle-11gR2" class="headerlink" title="Centos linux系统 命令行（静默）安装oracle 11gR2"></a>Centos linux系统 命令行（静默）安装oracle 11gR2</h1><blockquote><p><a href="http://www.cnblogs.com/yingsong/p/6031235.html?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">参考</a></p></blockquote><h2 id="修改-hostname-db-hosts文件"><a href="#修改-hostname-db-hosts文件" class="headerlink" title="修改 hostname db / hosts文件"></a>修改 hostname db / hosts文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.0.48   db</span><br></pre></td></tr></table></figure><h2 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h2><h3 id="etc-sysctl-conf"><a href="#etc-sysctl-conf" class="headerlink" title="/etc/sysctl.conf"></a>/etc/sysctl.conf</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim /etc/sysctl.conf  </span></span><br><span class="line">net.ipv4.ip_local_port_range= 9000 65500 </span><br><span class="line">fs.file-max = 6815744 </span><br><span class="line">kernel.shmall = 10523004 </span><br><span class="line">kernel.shmmax = 6465333657 </span><br><span class="line">kernel.shmmni = 4096 </span><br><span class="line">kernel.sem = 250 32000 100128 </span><br><span class="line">net.core.rmem_default=262144 </span><br><span class="line">net.core.wmem_default=262144 </span><br><span class="line">net.core.rmem_max=4194304 </span><br><span class="line">net.core.wmem_max=1048576 </span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line"><span class="comment"># sysctl -p  #使配置生效</span></span><br></pre></td></tr></table></figure><h3 id="用户的限制文件-etc-security-limits-conf"><a href="#用户的限制文件-etc-security-limits-conf" class="headerlink" title="用户的限制文件/etc/security/limits.conf"></a>用户的限制文件/etc/security/limits.conf</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oracle           soft    nproc           2047</span><br><span class="line">oracle           hard    nproc           16384</span><br><span class="line">oracle           soft    nofile          1024</span><br><span class="line">oracle           hard    nofile          65536</span><br><span class="line">oracle           soft    stack           10240</span><br></pre></td></tr></table></figure><blockquote><p>修改/etc/pam.d/login文件，增加如下：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session  required   /lib64/security/pam_limits.so  //64为系统，千万别写成/lib/security/pam_limits.so，否则导致无法登录</span><br><span class="line">session  required   pam_limits.so</span><br></pre></td></tr></table></figure><h2 id="创建用户及组"><a href="#创建用户及组" class="headerlink" title="创建用户及组"></a>创建用户及组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//创建用户及组</span><br><span class="line"># groupadd oinstall </span><br><span class="line"># groupadd dba</span><br><span class="line"># useradd -g oinstall -G dba -d /home/u11 oracle</span><br><span class="line"># passwd oracle</span><br><span class="line"></span><br><span class="line">//创建安装目录</span><br><span class="line"># mkdir -p /opt/app/oracle/product/11.2.0/db_1</span><br><span class="line"></span><br><span class="line">//数据文件存放目录</span><br><span class="line"># mkdir -p /opt/app/oracle/oradata</span><br><span class="line"></span><br><span class="line">//数据恢复目录</span><br><span class="line"># mkdir -p /opt/app/oracle/recovery_area</span><br><span class="line"></span><br><span class="line">//数据库创建及使用过程中的日志目录</span><br><span class="line"># mkdir -p /opt/app/oracle/oraInventory</span><br><span class="line"></span><br><span class="line">####################</span><br><span class="line"></span><br><span class="line">//修改安装目录权限</span><br><span class="line">#chown -R oracle:oinstall /opt/app/oracle</span><br><span class="line">#chmod 775 /opt/app/oracle</span><br></pre></td></tr></table></figure><h2 id="登录oracle用户，设置环境变量"><a href="#登录oracle用户，设置环境变量" class="headerlink" title="登录oracle用户，设置环境变量"></a>登录oracle用户，设置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#su - oracle</span><br></pre></td></tr></table></figure><p>view .bash_profile //这里我修改为/etc/profile<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ORACLE_BASE=/opt/app/oracle</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="variable">$ORACLE_BASE</span>/product/11.2.0/db_1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ORACLE_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$ORACLE_HOME</span>/JRE:<span class="variable">$ORACLE_HOME</span>/jlib:<span class="variable">$ORACLE_HOME</span>/rdbms/jlib</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$ORACLE_HOME</span>/lib:/lib64:/usr/lib64:/usr/<span class="built_in">local</span>/lib64</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=cgw</span><br><span class="line"></span><br><span class="line">//如果设置NLS_LANG，容易产生导入sql或dmp出错，因为其他环境下的不是utf8</span><br><span class="line"><span class="built_in">export</span> NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line"></span><br><span class="line">//监听服务创建是为了后面静默安装用的</span><br><span class="line"><span class="built_in">export</span> DISPLAY=127.0.0.1:1.0</span><br></pre></td></tr></table></figure></p><p>使设置生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile // 我为 /etc/profile</span><br></pre></td></tr></table></figure></p><h2 id="安装oracle"><a href="#安装oracle" class="headerlink" title="安装oracle"></a>安装oracle</h2><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install gcc gcc-c++ make binutilscompat-libstdc++-33 elfutils-libelf elfutils-libelf-develglibc glibc-commonglibc-devel libaio libaio-devel libgcclibstdc++libstdc++-devel unixODBC unixODBC-devel ksh</span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># yum -y installbinutils compat-libstdc++-33 compat-libstdc++-33.i686 </span><br><span class="line">elfutils-libelfelfutils-libelf-devel gcc gcc-c++ glibc glibc.i686 glibc-common </span><br><span class="line">glibc-devel glibc-devel.i686glibc-headers ksh libaio libaio.i686 libaio-devel </span><br><span class="line">libaio-devel.i686 libgcclibgcc.i686 libstdc++ libstdc++.i686 libstdc++-devel make </span><br><span class="line">sysstat unixODBC unixODBC-devel</span><br></pre></td></tr></table></figure></p><h3 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h3><blockquote><p>unzip 两个包，在oracle用户下在 /home/u11 下面</p></blockquote><h3 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h3><blockquote><p>路径： /databases/response</p></blockquote><ul><li>db_install.rsp 安装应答配置文件</li><li>dbca.rsp 创建数据库应答</li><li>netca.rsp 建立监听、本地服务名等网络设置应答</li></ul><h4 id="修改配置文件db-install-rsp，并安装"><a href="#修改配置文件db-install-rsp，并安装" class="headerlink" title="修改配置文件db_install.rsp，并安装"></a>修改配置文件db_install.rsp，并安装</h4><blockquote><p>下面把主要修改的地方贴出来，具体详细文件，请查看另一篇文章：<a href="http://www.cnblogs.com/yingsong/p/6031452.html" target="_blank" rel="noopener">Oracle 11gR2 db_install.rsp详解</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">oracle.install.option=INSTALL_DB_SWONLY</span><br><span class="line">ORACLE_HOSTNAME=db</span><br><span class="line">UNIX_GROUP_NAME=oinstall</span><br><span class="line">INVENTORY_LOCATION=/opt/app/oracle/oraInventory</span><br><span class="line">SELECTED_LANGUAGES=en,zh_CN</span><br><span class="line">ORACLE_HOME=/opt/app/oracle/product/11.2.0/db_1</span><br><span class="line">ORACLE_BASE=/opt/app/oracle</span><br><span class="line">oracle.install.db.InstallEdition=EE</span><br><span class="line">oracle.install.db.DBA_GROUP=dba</span><br><span class="line">oracle.install.db.OPER_GROUP=oinstall</span><br><span class="line">oracle.install.db.config.starterdb.characterSet=AL32UTF8</span><br><span class="line">oracle.install.db.config.starterdb.storageType=FILE_SYSTEM_STORAGE</span><br><span class="line">oracle.install.db.config.starterdb.fileSystemStorage.dataLocation=/opt/app/oracle/oradata</span><br><span class="line">oracle.install.db.config.starterdb.fileSystemStorage.recoveryLocation=/opt/app/oracle/recovery_data</span><br><span class="line">DECLINE_SECURITY_UPDATES=<span class="literal">true</span>    //一定要设为<span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>报错：<a href="http://blog.51cto.com/linuxzqdn/1751651" target="_blank" rel="noopener">DISPLAY environment variable not set! Oracle Net Configuration Assistan</a> .处理：export DISPLAY=127.0.0.1:1.0 (上面已经处理了)</p></blockquote><h3 id="登录oracle用户，执行安装"><a href="#登录oracle用户，执行安装" class="headerlink" title="登录oracle用户，执行安装"></a>登录oracle用户，执行安装</h3><p>在解压路径下：/database/response路径下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">./runInstaller -silent -responseFile /home/u11/database/response/db_install.rsp </span><br><span class="line"><span class="comment">## 安装过程中，如果提示[WARNING]不必理会，此时安装程序仍在进行，如果出现[FATAL]，则安装程序已经停止了。</span></span><br><span class="line"><span class="comment">## 打开另一个终端，执行命令</span></span><br><span class="line">tail -100 f /u01/app/oracle/oraInventory/logs/installActions......log</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 可以实时跟踪查看安装日志，了解安装的进度。</span></span><br><span class="line"><span class="comment">## 当出现</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  以下配置脚本需要以 <span class="string">"root"</span> 用户的身份执行。</span><br><span class="line">   <span class="comment">#!/bin/sh</span></span><br><span class="line">   <span class="comment">#要运行的 Root 脚本</span></span><br><span class="line"></span><br><span class="line">  /u01/app/oracle/oraInventory/orainstRoot.sh</span><br><span class="line">  /u01/app/oracle/product/11.2.0/db_1/root.sh</span><br><span class="line">  要执行配置脚本, 请执行以下操作:</span><br><span class="line">     1. 打开一个终端窗口</span><br><span class="line">     2. 以 <span class="string">"root"</span> 身份登录</span><br><span class="line">     3. 运行脚本</span><br><span class="line">     4. 返回此窗口并按 <span class="string">"Enter"</span> 键继续</span><br><span class="line"></span><br><span class="line">  Successfully Setup Software.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 出现这个的话，说明已安装成功，则需要按提示操作，操作完返回Enter成功</span></span><br></pre></td></tr></table></figure></p><h4 id="缺包"><a href="#缺包" class="headerlink" title="缺包"></a>缺包</h4><blockquote><p><a href="https://stackoverflow.com/questions/29741518/error-libxext-so-6-cannot-open-shared-object-file-no-such-file-or-directory" target="_blank" rel="noopener">Error: libXext.so.6: cannot open shared object file: No such file or directory</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libXext.x86_64 libXrender.x86_64 libXtst.x86_64</span><br></pre></td></tr></table></figure><h4 id="静默安装Oracle-11g过程中提示：Exception-in-thread-“main”-java-lang-NoClassDefFoundError"><a href="#静默安装Oracle-11g过程中提示：Exception-in-thread-“main”-java-lang-NoClassDefFoundError" class="headerlink" title="静默安装Oracle 11g过程中提示：Exception in thread “main” java.lang.NoClassDefFoundError"></a>静默安装Oracle 11g过程中提示：Exception in thread “main” java.lang.NoClassDefFoundError</h4><blockquote><p><a href="https://my.oschina.net/siiiso/blog/809173" target="_blank" rel="noopener">https://my.oschina.net/siiiso/blog/809173</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset DISPLAY</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="配置监听配置文件-response-netca-rsp"><a href="#配置监听配置文件-response-netca-rsp" class="headerlink" title="配置监听配置文件 response/netca.rsp"></a>配置监听配置文件 response/netca.rsp</h3><ul><li>命令netca path：$ORACLE_HOME/bin</li><li>netca.rsp path: /home/u11/database/response/netca.rsp</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">netca -silent -responsefile response/netca.rsp</span><br><span class="line"></span><br><span class="line">正在对命令行参数进行语法分析:</span><br><span class="line"> 参数<span class="string">"silent"</span> = <span class="literal">true</span></span><br><span class="line"> 参数<span class="string">"responsefile"</span> = /home/oracle/response/netca.rsp</span><br><span class="line"> 完成对命令行参数进行语法分析。</span><br><span class="line"> Oracle Net Services 配置:</span><br><span class="line"> 完成概要文件配置。</span><br><span class="line"> Oracle Net 监听程序启动:</span><br><span class="line">  正在运行监听程序控制:</span><br><span class="line">    /opt/oracle/11.2.0/bin/lsnrctl start LISTENER</span><br><span class="line">  监听程序控制完成。</span><br><span class="line">  监听程序已成功启动。</span><br><span class="line"> 监听程序配置完成。</span><br><span class="line"> 成功完成 Oracle Net Services 配置</span><br><span class="line"></span><br><span class="line"><span class="comment">## 成功运行后，在/opt/oracle/11.2.0/network/admin目录下生成sqlnet.ora和listener.ora两个文件。</span></span><br><span class="line"><span class="comment">## 完成后通过命令“netstat -tlnp”可以查看到1521端口已开</span></span><br><span class="line">tcp  0   0 :::1521        :::*      LISTEN      5477/tnslsnr</span><br></pre></td></tr></table></figure><h3 id="修改配置文件response-dbca-rsp，静默建立新库"><a href="#修改配置文件response-dbca-rsp，静默建立新库" class="headerlink" title="修改配置文件response/dbca.rsp，静默建立新库"></a>修改配置文件response/dbca.rsp，静默建立新库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RESPONSEFILE_VERSION = <span class="string">"11.2.0"</span>  <span class="comment">## 不能更改</span></span><br><span class="line">OPERATION_TYPE = <span class="string">"createDatabase"</span></span><br><span class="line">GDBNAME = <span class="string">"hello.dlxg.gov.cn"</span>  <span class="comment">## 全局数据库的名字=SID+主机域名</span></span><br><span class="line">SID = <span class="string">"hello"</span>    <span class="comment">## 对应的实例名字</span></span><br><span class="line">TEMPLATENAME = <span class="string">"General_Purpose.dbc"</span> <span class="comment">## 建库用的模板文件</span></span><br><span class="line">DATAFILEDESTINATION = /opt/oracle/oradata <span class="comment">## 数据文件存放目录</span></span><br><span class="line">RECOVERYAREADESTINATION=/opt/oracle/recovery_data <span class="comment">## 恢复数据存放目录</span></span><br><span class="line">CHARACTERSET = <span class="string">"AL32UTF8"</span>   <span class="comment">## 字符集，重要!!! 建库后一般不能更改，所以建库前要确定清楚。</span></span><br><span class="line">TOTALMEMORY = <span class="string">"5120"</span>    <span class="comment">## oracle内存5120MB</span></span><br></pre></td></tr></table></figure><h4 id="配置完之后，执行命令"><a href="#配置完之后，执行命令" class="headerlink" title="配置完之后，执行命令"></a>配置完之后，执行命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dbca -silent -responseFile /etc/dbca.rsp </span><br><span class="line"><span class="comment">## 注意，这里我用的时候很奇怪，界面光标往回走的，我改用这个，这个就没有使用上面的配置文件</span></span><br><span class="line">dbca -silent -createDatabase -templateName General_Purpose.dbc -gdbName <span class="built_in">test</span> -sysPassword oracle -systemPassword oracl</span><br><span class="line"></span><br><span class="line">1% 已完成</span><br><span class="line">3% 已完成</span><br><span class="line">11% 已完成</span><br><span class="line">18% 已完成</span><br><span class="line">26% 已完成</span><br><span class="line">37% 已完成</span><br><span class="line">正在创建并启动 Oracle 实例</span><br><span class="line">40% 已完成</span><br><span class="line">45% 已完成</span><br><span class="line">50% 已完成</span><br><span class="line">55% 已完成</span><br><span class="line">56% 已完成</span><br><span class="line">60% 已完成</span><br><span class="line">62% 已完成</span><br><span class="line">正在进行数据库创建</span><br><span class="line">66% 已完成</span><br><span class="line">70% 已完成</span><br><span class="line">73% 已完成</span><br><span class="line">85% 已完成</span><br><span class="line">96% 已完成</span><br><span class="line">100% 已完成</span><br><span class="line">有关详细信息, 请参阅日志文件 <span class="string">"/u01/app/oracle/cfgtoollogs/dbca/wang/wang.log"</span>。</span><br><span class="line"> </span><br><span class="line">查看日志文件</span><br><span class="line">$ cat /u01/app/oracle/cfgtoollogs/dbca/wang/wang.log</span><br></pre></td></tr></table></figure><h3 id="ORA-12528-TNS-Listener-all-appropriate-instances-are-blocking-new-connections-Instance-“CLRExtProc”-status-UNKNOWN"><a href="#ORA-12528-TNS-Listener-all-appropriate-instances-are-blocking-new-connections-Instance-“CLRExtProc”-status-UNKNOWN" class="headerlink" title="ORA-12528: TNS Listener: all appropriate instances are blocking new connections. Instance “CLRExtProc”, status UNKNOWN"></a>ORA-12528: TNS Listener: all appropriate instances are blocking new connections. Instance “CLRExtProc”, status UNKNOWN</h3><blockquote><p><a href="https://stackoverflow.com/questions/23743910/ora-12528-tns-listener-all-appropriate-instances-are-blocking-new-connections" target="_blank" rel="noopener">https://stackoverflow.com/questions/23743910/ora-12528-tns-listener-all-appropriate-instances-are-blocking-new-connections</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set ORACLE_SID=&lt;YOUR_SID&gt; </span><br><span class="line">sqlplus &quot;/as sysdba&quot;</span><br><span class="line">alter system disable restricted session;</span><br><span class="line"></span><br><span class="line">eg : set ORACLE_SID=oracle</span><br></pre></td></tr></table></figure><p>or maybe<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown abort;</span><br></pre></td></tr></table></figure></p><p>or maybe<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsnrctl stop</span><br><span class="line">lsnrctl start</span><br></pre></td></tr></table></figure></p><h2 id="登陆连接"><a href="#登陆连接" class="headerlink" title="登陆连接"></a>登陆连接</h2><ul><li>sid:oracle</li><li>username: system</li><li>password: oracle</li></ul><h2 id="navicat-connect-oracle-fail"><a href="#navicat-connect-oracle-fail" class="headerlink" title="navicat connect oracle fail"></a>navicat connect oracle fail</h2><blockquote><p>TNS: no listen 什么鬼的没有监听到</p></blockquote><p>找到 listener.ora，存放位置一般在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $ORACLE_HOME/network/admin ## 这个目录下</span><br><span class="line">cp listener.ora listener.ora.bak</span><br><span class="line">vim listener.ora</span><br></pre></td></tr></table></figure></p><p>清空内容，复制下面内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LISTENER=</span><br><span class="line">  (DESCRIPTION=</span><br><span class="line">    (ADDRESS_LIST=</span><br><span class="line">      (ADDRESS=(PROTOCOL=tcp)(HOST=sale-server)(PORT=1521))</span><br><span class="line">      (ADDRESS=(PROTOCOL=ipc)(KEY=extproc))))</span><br><span class="line">SID_LIST_LISTENER=</span><br><span class="line">  (SID_LIST=</span><br><span class="line">    (SID_DESC=</span><br><span class="line">      (GLOBAL_DBNAME=sales.us.acme.com)</span><br><span class="line">      (ORACLE_HOME=/oracle10g)</span><br><span class="line">      (SID_NAME=sales))</span><br><span class="line">    (SID_DESC=</span><br><span class="line">      (SID_NAME=plsextproc)</span><br><span class="line">      (ORACLE_HOME=/oracle10g)</span><br><span class="line">      (PROGRAM=extproc)))</span><br></pre></td></tr></table></figure></p><h3 id="文件组成部分"><a href="#文件组成部分" class="headerlink" title="文件组成部分"></a>文件组成部分</h3><ul><li>listener的名称</li><li>listener接受连接的协议地址</li><li>数据库服务名</li><li>Oracle8之后的版本有动态监听注册，可以不需要配置静态监听。但是Oracle官网说如果想要使用em需要配置静态监听</li><li>控制参数</li></ul><h3 id="监听参数说明"><a href="#监听参数说明" class="headerlink" title="监听参数说明"></a>监听参数说明</h3><h4 id="协议地址部分"><a href="#协议地址部分" class="headerlink" title="协议地址部分"></a>协议地址部分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listener_name=</span><br><span class="line">(DESCRIPTION=</span><br><span class="line">(ADDRESS=(PROTOCOL=tcp)(HOST=hr-server)(PORT=1521))</span><br><span class="line">(ADDRESS=(PROTOCOL=tcp)(HOST=sales-server)(PORT=1521)))</span><br></pre></td></tr></table></figure><h5 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QUEUESIZE：并发请求连接数</span><br><span class="line">RECV_BUF_SIZE，SEND_BUF_SIZE</span><br></pre></td></tr></table></figure><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listener_name=</span><br><span class="line">(DESCRIPTION=</span><br><span class="line">(ADDRESS=(PROTOCOL=tcp)(HOST=hr-server)(PORT=1521)(RECV_BUF_SIZE=11784)(SEND_BUF_SIZE=11280))</span><br><span class="line">(ADDRESS=(PROTOCOL=tcp)(HOST=sales-server)(PORT=1521)(QUEUESIZE=20)))</span><br></pre></td></tr></table></figure><h4 id="静态监听部分"><a href="#静态监听部分" class="headerlink" title="静态监听部分"></a>静态监听部分</h4><p>静态监听就是SID_LIST_xxx节点下的配置，最简单的配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SID_LIST_listener_name=</span><br><span class="line">(SID_LIST= </span><br><span class="line">(SID_DESC=...)</span><br><span class="line">(SID_DESC=...))</span><br></pre></td></tr></table></figure></p><h5 id="可允许的参数"><a href="#可允许的参数" class="headerlink" title="可允许的参数"></a>可允许的参数</h5><ul><li>ENVS环境变量键值对</li><li>GLOBAL_DBNAME：对外提供的网络服务名</li><li>ORACLE_HOME</li><li>PROGRAM：用来标识服务可执行程序，最常用的PROGRAM=extproc</li><li>SID_NAME： Oracle System Identifier (SID)</li><li>SDU： session data unit </li></ul><h5 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a>示例配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SID_LIST_listener_name=</span><br><span class="line">(SID_LIST= </span><br><span class="line">(SID_DESC=</span><br><span class="line">(SDU=2085)</span><br><span class="line">(GLOBAL_DBNAME=sales.us.acme.com)</span><br><span class="line">(SID_NAME=sales)</span><br><span class="line">(ORACLE_HOME=/usr/oracle)(ENVS=&quot;LD_LIBRARY_PATH=/private/xpm/lib:/private/mylibs,MYPATH=/usr/ucb:/usr/local/packages,APL_ENV_FILE=/apl/conf/env.txt&quot;)))</span><br></pre></td></tr></table></figure><h4 id="控制参数部分（基本不需要配置）"><a href="#控制参数部分（基本不需要配置）" class="headerlink" title="控制参数部分（基本不需要配置）"></a>控制参数部分（基本不需要配置）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> - ADMIN_RESTRICTIONS_listener_name #主要用来保护lsnrctl命令下，对没有使用密码保护的listener的更改，设置了on之后，就不允许在命令行动态的更改参数配置，只有stop，start才行。</span><br><span class="line"> - INBOUND_CONNECT_TIMEOUT_listener_name #连接超时</span><br><span class="line"> - LOG_DIRECTORY_listener_name #日志路径</span><br><span class="line"> - LOG_FILE_listener_name #日志名称</span><br><span class="line"> - LOGGING_listener_name #是否记录日志</span><br><span class="line"> - PASSWORDS_listener_name #listener的密码</span><br><span class="line"> - SAVE_CONFIG_ON_STOP_listener_name # 关闭监听的时候是否保存配置</span><br><span class="line"> - SSL_CLIENT_AUTHENTICATION #ssl认证</span><br><span class="line"></span><br><span class="line">STARTUP_WAIT_TIME_listener_name</span><br><span class="line">TRACE_DIRECTORY_listener_name</span><br><span class="line">TRACE_FILE_listener_name</span><br><span class="line">TRACE_FILELEN_listener_name</span><br><span class="line">TRACE_FILENO_listener_name</span><br><span class="line">TRACE_LEVEL_listener_name</span><br><span class="line">TRACE_TIMESTAMP_listener_name</span><br><span class="line">WALLET_LOCATION</span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/wang77777/article/details/84369248" target="_blank" rel="noopener">Oracle listener.ora配置</a></li><li><a href="https://hub.docker.com/r/wnameless/oracle-xe-11g/" target="_blank" rel="noopener">docker wnameless/oracle-xe-11g</a></li><li><a href="https://github.com/wnameless/docker-oracle-xe-11g" target="_blank" rel="noopener">github wnameless</a></li></ul>]]></content>
      
      <categories>
          
          <category> 系统 Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux centos oracle databases </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Offline Installation Docker</title>
      <link href="/2019/01/11/linux-docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
      <url>/2019/01/11/linux-docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="Offline-Installation-Docker"><a href="#Offline-Installation-Docker" class="headerlink" title="Offline Installation Docker"></a>Offline Installation Docker</h2><p><a href="https://download.docker.com/linux/static/stable/x86_64/" target="_blank" rel="noopener">download docker .tar.gz</a> and follow  the doucment</p><ol><li>Download the statis binary archive. Go to <a href="http://download.docker.com/linux/static/stabl" target="_blank" rel="noopener">http://download.docker.com/linux/static/stabl</a><br>(or change stable to edge or test), choose your hardware platform, and download the <strong>.taz</strong> file relating to the version of Docker CE you want to install.</li><li><p>Extract the archive using the tar utility. The dockerd and docker binaries are ectracted.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf /path/to/&lt;FILE&gt;.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>Optional: Move the biaries to a directory on your executable path, such as <strong> /usr/bin/ </strong> . If you skip this step, you must provide the path to the executable when you invoke <strong> docker </strong> or  <strong> dockerd </strong> commands.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp docker/* /usr/bin/</span><br></pre></td></tr></table></figure></li><li><p>Start the Docker daremon:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dockerd &amp;</span><br></pre></td></tr></table></figure></li></ol><p>If you need to start the daemon with additional options, modify the above command accordingly or create and edit the file <strong> /etc/docker/daemon.json </strong> to add the custom configuration options.</p><h2 id="DockerHub-sreach-oracle"><a href="#DockerHub-sreach-oracle" class="headerlink" title="DockerHub sreach oracle"></a>DockerHub sreach oracle</h2><blockquote><p>warning: Step1 is online , Step2 is offline install docker</p></blockquote><h3 id="Step-1-docker-pull"><a href="#Step-1-docker-pull" class="headerlink" title="Step 1 docker pull"></a>Step 1 docker pull</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull wnameless/oracle-xe-11g</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://hub.docker.com/r/wnameless/oracle-xe-11g/" target="_blank" rel="noopener">wnameless/oracle-xe-11g</a></p></blockquote><p>Just being bored like this, here is “offline install “ </p><h3 id="Step-2-cloning-the-project-wnameless-oracle-xe-11g-on-github"><a href="#Step-2-cloning-the-project-wnameless-oracle-xe-11g-on-github" class="headerlink" title="Step 2 cloning the project wnameless/oracle-xe-11g on github"></a>Step 2 cloning the project <a href="https://github.com/wnameless/docker-oracle-xe-11g" target="_blank" rel="noopener">wnameless/oracle-xe-11g</a> on github</h3><ol><li><p>find the file( <strong> dockerfile </strong> )location, exec command then waiting</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build .</span><br></pre></td></tr></table></figure></li><li><p>start command (in github readme)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 49161:1521 -e ORACLE_DISABLE_ASYNCH_IO=true wnameless/oracle-xe-11g</span><br></pre></td></tr></table></figure></li></ol><p>或者(参考<a href="https://github.com/wnameless/docker-oracle-xe-11g/issues/64" target="_blank" rel="noopener">dragonbest520</a>这位大佬的回答)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name oracle11g -d -p 49161:22 -p 1522:1521 -p 49163:8080 -v /oracle11g-data/:/u01/app/oracle/oradata/oracle11g-data/ -e ORACLE_ALLOW_REMOTE=true --restart=always wnameless/oracle-xe-11g</span><br></pre></td></tr></table></figure></p><p>By default, the password verification is disable(password never expired)<br>Connect database with following setting:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hostname: localhost</span><br><span class="line">port: 49161</span><br><span class="line">sid: xe</span><br><span class="line">username: system</span><br><span class="line">password: oracle</span><br></pre></td></tr></table></figure></p><h3 id="Step-3-copy-the-image-with-other-PC"><a href="#Step-3-copy-the-image-with-other-PC" class="headerlink" title="Step 3 copy the image with other PC"></a>Step 3 copy the image with other PC</h3><p>you can exec the Step1 and then save the image with other PC, copy into the target PC, save the image<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images ## show the images list</span><br><span class="line">docker save -o &lt;save /path/file name.tar&gt;  &lt;image name&gt; </span><br><span class="line"></span><br><span class="line">eg : docker save -o /opt/oracle.tar  wnameless/-oracle-xe-11g:v1</span><br></pre></td></tr></table></figure></p><p>Target PC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; /home/save.tar&gt;</span><br><span class="line"></span><br><span class="line">eg: docker load /opt/oracle.tar</span><br></pre></td></tr></table></figure></p><blockquote><p>docker command <strong> save </strong> and <strong> load </strong> ,<br> <strong> export </strong> and <strong> import </strong> ,<br>save is used for image, no container.<br>export is used for container, no image.</p></blockquote><h2 id="Docker-modify-the-default-path"><a href="#Docker-modify-the-default-path" class="headerlink" title="Docker modify the default path"></a>Docker modify the default path</h2><blockquote><p>use yum install the docker ,the default path is: /var/lib/docker . In fact, we need custom path into save and install it. </p></blockquote><p>在硬盘上开一个100g大小的空间，并格式化，参考命令：mkfs.ext4 /dev/sda2 ，然后挂载。如果不明白如何分区格式化并且挂载，请看考<a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks" target="_blank" rel="noopener">这里</a>。这篇文章可以说是我见过关于初级磁盘管理最好的一篇文章了。<br>挂载之后复制文件夹/var/lib/docker/ 到挂载的位置，再软连接回去。（然后docker images就可以持久化放到硬盘里面了重启不会丢失）。参考操作如下：</p><h3 id="查看docker的基本信息"><a href="#查看docker的基本信息" class="headerlink" title="查看docker的基本信息"></a>查看docker的基本信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info  #查看docker的基本信息</span><br></pre></td></tr></table></figure><h3 id="更改安装路径"><a href="#更改安装路径" class="headerlink" title="更改安装路径"></a>更改安装路径</h3><h4 id="停止docker服务"><a href="#停止docker服务" class="headerlink" title="停止docker服务"></a>停止docker服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h4 id="备份原目录"><a href="#备份原目录" class="headerlink" title="备份原目录"></a>备份原目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r /var/lib/docker  /data/app/docker</span><br><span class="line">mv /var/lib/docker /var/lib/docker.bak</span><br><span class="line">ln -s /data/app/docker /var/lib/docker</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -rf /var/lib/docker /mnt/</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">ln -s /mnt/docker /var/lib/docker</span><br></pre></td></tr></table></figure></p><h4 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="查看docker信息"><a href="#查看docker信息" class="headerlink" title="查看docker信息"></a>查看docker信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><h2 id="Docker-持久化"><a href="#Docker-持久化" class="headerlink" title="Docker 持久化"></a>Docker 持久化</h2><h3 id="容器中数据持久化主要有两种方式："><a href="#容器中数据持久化主要有两种方式：" class="headerlink" title="容器中数据持久化主要有两种方式："></a>容器中数据持久化主要有两种方式：</h3><ul><li>数据卷（Data Volumes）</li><li>数据卷容器（Data Volumes Dontainers）</li></ul><h4 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h4><p>数据卷是一个可供一个或多个容器使用的特殊目录，可以绕过UFS（Unix File System）。</p><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新，不会影响镜像</li><li>数据卷默认会一直存在，即使容器被删除</li><li>一个容器可以挂载多个数据卷</li></ul><blockquote><p>注意：数据卷的使用，类似于 Linux 下对目录或文件进行 mount。</p></blockquote><h5 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h5><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-data -v /mydir nginx</span><br></pre></td></tr></table></figure><p>执行如下命令即可查看容器构造的详情：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure></p><p>由测试可知</p><ul><li>Docker会自动生成一个目录作为挂载的目录。</li><li>即使容器被删除，宿主机中的目录也不会被删除。</li></ul><h5 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h5><p>数据卷是被设计来持久化数据的，因此，删除容器并不会删除数据卷。如果想要在删除容器时同时删除数据卷，可使用如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -v 容器ID</span><br></pre></td></tr></table></figure></p><p>这样既可在删除容器的同时也将数据卷删除。</p><h5 id="挂载宿主机目录作为数据卷"><a href="#挂载宿主机目录作为数据卷" class="headerlink" title="挂载宿主机目录作为数据卷"></a>挂载宿主机目录作为数据卷</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-data2 -v /host-dir:/container-dir nginx</span><br></pre></td></tr></table></figure><p>这样既可将宿主机的/host-dir路径加载到容器的/container-dir中。</p><p>需要注意的是：</p><ul><li>宿主机路径尽量设置绝对路径——如果使用相对路径会怎样？<ul><li>测试给答案</li></ul></li><li>如果宿主机路径不存在，Docker会自动创建</li></ul><h5 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h5><blockquote><p>Dockerfile暂时不支持这种形式。</p></blockquote><h5 id="挂载宿主机文件作为数据卷"><a href="#挂载宿主机文件作为数据卷" class="headerlink" title="挂载宿主机文件作为数据卷"></a>挂载宿主机文件作为数据卷</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-data3 -v /文件路径:/container路径 nginx</span><br></pre></td></tr></table></figure><h4 id="指定权限"><a href="#指定权限" class="headerlink" title="指定权限"></a>指定权限</h4><blockquote><p>默认情况下，挂载的权限是读写权限。也可使用:ro 参数指定只读权限。</p></blockquote><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-data4 -v /host-dir:/container-dir:ro nginx</span><br></pre></td></tr></table></figure></p><p>这样，在容器中就只能读取/container-dir中的文件，而不能修改了。</p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><blockquote><p>如果有数据需要在多个容器之间共享，此时可考虑使用数据卷容器。</p></blockquote><p>创建数据卷容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-volume -v /data nginx</span><br></pre></td></tr></table></figure></p><p>在其他容器中使用<strong> -volumes-from </strong> 来挂载<strong> nginx-volume </strong> 容器中的数据卷。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name v1 --volumes-from nginx-volume nginx</span><br><span class="line">docker run --name v2 --volumes-from nginx-volume nginx</span><br></pre></td></tr></table></figure></p><p>这样</p><ul><li>v1、v2两个容器即可共享nginx-volume这个容器中的文件。</li><li>即使nginx-volume停止，也不会有任何影响。</li></ul><hr><h2 id="Tips-Reference-docker-离线安装-centos-ubuntu-linux"><a href="#Tips-Reference-docker-离线安装-centos-ubuntu-linux" class="headerlink" title="Tips / Reference: docker, 离线安装, centos, ubuntu, linux"></a>Tips / Reference: docker, 离线安装, centos, ubuntu, linux</h2><ul><li><a href="https://blog.csdn.net/ghui23/article/details/82185037?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">简单离线安装docker</a></li><li><p><a href="https://docs.docker.com/install/linux/docker-ce/binaries/" target="_blank" rel="noopener">从二进制文件安装Docker CE</a></p></li><li><p><a href="https://www.jianshu.com/p/5a2ff266b6e9" target="_blank" rel="noopener">Docker 修改默认存储位置</a></p></li><li><a href="http://www.runoob.com/w3cnote/coreos-setup-pc.html" target="_blank" rel="noopener">CoreOS 在 PC 上快速安装方法指南</a></li><li><p><a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks" target="_blank" rel="noopener">Preparing the disks</a></p></li><li><p><a href="https://hub.docker.com/r/wnameless/oracle-xe-11g/" target="_blank" rel="noopener">docker wnameless/oracle-xe-11g</a></p></li><li><p><a href="https://github.com/wnameless/docker-oracle-xe-11g" target="_blank" rel="noopener">github wnameless</a></p></li><li><p><a href="https://blog.csdn.net/guizaijianchic/article/details/78324646" target="_blank" rel="noopener">docker save load export import的区别</a></p></li><li><p><a href="http://www.itmuch.com/docker/14-docker-volume/" target="_blank" rel="noopener">Docker系列教程14-Docker数据持久化</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> 系统 Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux docker Oracle Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven pom文件结构详解</title>
      <link href="/2019/01/03/backEnd-maven-maven%E6%A0%87%E7%AD%BE%E5%AD%97%E5%85%B8/"/>
      <url>/2019/01/03/backEnd-maven-maven%E6%A0%87%E7%AD%BE%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<blockquote><p>这玩意肯定是用来查的，和了解pom文件大致结构的 </p></blockquote><p>今天发现我写的一个模块没法被其他项目调用，然后发现我项目里面的pom写得乱七八糟。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd "</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span> <span class="comment">&lt;!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span> <span class="comment">&lt;!-- 被继承的父项目的构件标识符 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> /&gt;</span> <span class="comment">&lt;!-- 被继承的父项目的全球唯一标识符 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> /&gt;</span> <span class="comment">&lt;!-- 被继承的父项目的版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span> 4.0.0 <span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span> <span class="comment">&lt;!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span> asia.banseon <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="comment">&lt;!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> <span class="comment">&lt;!-- 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.0-SNAPSHOT <span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon-maven <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 项目的名称, Maven产生的文档用 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> <span class="comment">&lt;!-- 项目主页的URL, Maven产生的文档用 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span> A maven project to study maven. <span class="tag">&lt;/<span class="name">description</span>&gt;</span> <span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span> <span class="comment">&lt;!-- 描述了这个项目构建环境中的前提条件。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">maven</span> /&gt;</span> <span class="comment">&lt;!-- 构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span> <span class="comment">&lt;!-- 项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">system</span>&gt;</span> jira <span class="tag">&lt;/<span class="name">system</span>&gt;</span> <span class="comment">&lt;!-- 问题管理系统（例如jira）的名字， --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span> http://jira.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> <span class="comment">&lt;!-- 该项目使用的问题管理系统的URL --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span> <span class="comment">&lt;!-- 项目持续集成信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">system</span> /&gt;</span> <span class="comment">&lt;!-- 持续集成系统的名字，例如continuum --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span> /&gt;</span> <span class="comment">&lt;!-- 该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">notifiers</span>&gt;</span> <span class="comment">&lt;!-- 构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">notifier</span>&gt;</span> <span class="comment">&lt;!-- 配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">type</span> /&gt;</span> <span class="comment">&lt;!-- 传送通知的途径 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">sendOnError</span> /&gt;</span> <span class="comment">&lt;!-- 发生错误时是否通知 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">sendOnFailure</span> /&gt;</span> <span class="comment">&lt;!-- 构建失败时是否通知 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">sendOnSuccess</span> /&gt;</span> <span class="comment">&lt;!-- 构建成功时是否通知 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">sendOnWarning</span> /&gt;</span> <span class="comment">&lt;!-- 发生警告时是否通知 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">address</span> /&gt;</span> <span class="comment">&lt;!-- 不赞成使用。通知发送到哪里 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span> <span class="comment">&lt;!-- 扩展配置项 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">notifier</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">inceptionYear</span> /&gt;</span> <span class="comment">&lt;!-- 项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span> <span class="comment">&lt;!-- 项目相关邮件列表信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mailingList</span>&gt;</span> <span class="comment">&lt;!-- 该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> Demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 邮件的名称 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">post</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">post</span>&gt;</span> <span class="comment">&lt;!-- 发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">subscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span> <span class="comment">&lt;!-- 订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span> <span class="comment">&lt;!-- 取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">archive</span>&gt;</span> http:/hi.baidu.com/banseon/demo/dev/ <span class="tag">&lt;/<span class="name">archive</span>&gt;</span> <span class="comment">&lt;!-- 你可以浏览邮件信息的URL --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span> <span class="comment">&lt;!-- 项目开发者列表 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">developer</span>&gt;</span> <span class="comment">&lt;!-- 某个项目开发者的信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span> HELLO WORLD <span class="tag">&lt;/<span class="name">id</span>&gt;</span> <span class="comment">&lt;!-- SCM里项目开发者的唯一标识符 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 项目开发者的全名 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">email</span>&gt;</span> <span class="comment">&lt;!-- 项目开发者的email --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span> /&gt;</span> <span class="comment">&lt;!-- 项目开发者的主页的URL --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">roles</span>&gt;</span> <span class="comment">&lt;!-- 项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">role</span>&gt;</span> Project Manager <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">role</span>&gt;</span> Architect <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">roles</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">organization</span>&gt;</span> <span class="comment">&lt;!-- 项目开发者所属组织 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span> http://hi.baidu.com/banseon <span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span> <span class="comment">&lt;!-- 项目开发者所属组织的URL --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span> <span class="comment">&lt;!-- 项目开发者属性，如即时消息如何处理等 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dept</span>&gt;</span> No <span class="tag">&lt;/<span class="name">dept</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">timezone</span>&gt;</span> -5 <span class="tag">&lt;/<span class="name">timezone</span>&gt;</span> <span class="comment">&lt;!-- 项目开发者所在时区， -11到12范围内的整数。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">developer</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">contributors</span>&gt;</span> <span class="comment">&lt;!-- 项目的其他贡献者列表 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">contributor</span>&gt;</span> <span class="comment">&lt;!-- 项目的其他贡献者。参见developers/developer元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">email</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organizationUrl</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">roles</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">timezone</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">contributor</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">contributors</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span> <span class="comment">&lt;!-- 该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span> <span class="comment">&lt;!-- 描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> Apache 2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- license用于法律上的名称 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon/LICENSE-2.0.txt <span class="tag">&lt;/<span class="name">url</span>&gt;</span> <span class="comment">&lt;!-- 官方的license正文页面的URL --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项目分发的主要方式： </span></span><br><span class="line"><span class="comment">repo，可以从Maven库下载 </span></span><br><span class="line"><span class="comment">manual， 用户必须手动下载和安装依赖 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">distribution</span>&gt;</span> repo <span class="tag">&lt;/<span class="name">distribution</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">comments</span>&gt;</span> A business-friendly OSS license <span class="tag">&lt;/<span class="name">comments</span>&gt;</span> <span class="comment">&lt;!-- 关于license的补充信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">license</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span> <span class="comment">&lt;!-- SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">connection</span>&gt;</span> <span class="comment">&lt;!-- SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span> </span><br><span class="line">scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk) </span><br><span class="line"><span class="tag">&lt;/<span class="name">connection</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span> <span class="comment">&lt;!-- 给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span> </span><br><span class="line">scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk </span><br><span class="line"><span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span> /&gt;</span> <span class="comment">&lt;!-- 当前代码的标签，在开发阶段默认为HEAD --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span> http://svn.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> <span class="comment">&lt;!-- 指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span> <span class="comment">&lt;!-- 描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 组织的全名 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> <span class="comment">&lt;!-- 组织主页的URL --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">organization</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span> <span class="comment">&lt;!-- 构建项目需要的信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span> /&gt;</span> <span class="comment">&lt;!-- 该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">scriptSourceDirectory</span> /&gt;</span> <span class="comment">&lt;!-- 该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">testSourceDirectory</span> /&gt;</span> <span class="comment">&lt;!-- 该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span> <span class="comment">&lt;!-- 被编译过的应用程序class文件存放的目录。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">testOutputDirectory</span> /&gt;</span> <span class="comment">&lt;!-- 被编译过的测试class文件存放的目录。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">extensions</span>&gt;</span> <span class="comment">&lt;!-- 使用来自该项目的一系列构建扩展 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">extension</span>&gt;</span> <span class="comment">&lt;!-- 描述使用到的构建扩展。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> /&gt;</span> <span class="comment">&lt;!-- 构建扩展的groupId --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span> <span class="comment">&lt;!-- 构建扩展的artifactId --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> /&gt;</span> <span class="comment">&lt;!-- 构建扩展的版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">extension</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span> <span class="comment">&lt;!-- 当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span> <span class="comment">&lt;!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span> <span class="comment">&lt;!-- 这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span> /&gt;</span> <span class="comment">&lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span> /&gt;</span> <span class="comment">&lt;!-- 描述存放资源的目录，该路径相对POM路径 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span> /&gt;</span> <span class="comment">&lt;!-- 包含的模式列表，例如**/*.xml. --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span> /&gt;</span> <span class="comment">&lt;!-- 排除的模式列表，例如**/*.xml --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">testResources</span>&gt;</span> <span class="comment">&lt;!-- 这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">testResource</span>&gt;</span> <span class="comment">&lt;!-- 这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">testResource</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">testResources</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span> /&gt;</span> <span class="comment">&lt;!-- 构建产生的所有文件存放的目录 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span> /&gt;</span> <span class="comment">&lt;!-- 产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filters</span> /&gt;</span> <span class="comment">&lt;!-- 当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span> <span class="comment">&lt;!-- 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span> <span class="comment">&lt;!-- 使用的插件列表 。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span> <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> /&gt;</span> <span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span> <span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> /&gt;</span> <span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">extensions</span> /&gt;</span> <span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span> <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span> <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> /&gt;</span> <span class="comment">&lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span> /&gt;</span> <span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span> /&gt;</span> <span class="comment">&lt;!-- 配置的执行目标 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span> <span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span> <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span> <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span> <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span> <span class="comment">&lt;!-- 使用的插件列表 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span> <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">extensions</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span> <span class="comment">&lt;!-- 在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span> <span class="comment">&lt;!-- 根据环境参数或命令行参数激活某个构建处理 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> /&gt;</span> <span class="comment">&lt;!-- 构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 </span></span><br><span class="line"><span class="comment">能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span> /&gt;</span> <span class="comment">&lt;!-- profile默认是否激活的标志 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span> /&gt;</span> <span class="comment">&lt;!-- 当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">os</span>&gt;</span> <span class="comment">&lt;!-- 当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> Windows XP <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 激活profile的操作系统的名字 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span> Windows <span class="tag">&lt;/<span class="name">family</span>&gt;</span> <span class="comment">&lt;!-- 激活profile的操作系统所属家族(如 'windows') --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">arch</span>&gt;</span> x86 <span class="tag">&lt;/<span class="name">arch</span>&gt;</span> <span class="comment">&lt;!-- 激活profile的操作系统体系结构 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span> 5.1.2600 <span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 激活profile的操作系统版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">os</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> mavenVersion <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 激活profile的属性的名称 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span> 2.0.3 <span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="comment">&lt;!-- 激活profile的属性的值 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span> <span class="comment">&lt;!-- 提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">exists</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">exists</span>&gt;</span> <span class="comment">&lt;!-- 如果指定的文件存在，则激活profile。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">missing</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">missing</span>&gt;</span> <span class="comment">&lt;!-- 如果指定的文件不存在，则激活profile。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">file</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span> <span class="comment">&lt;!-- 构建项目所需要的信息。参见build元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">testResources</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">testResource</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">testResource</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">testResources</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filters</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span> <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span> <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> /&gt;</span><span class="tag">&lt;<span class="name">phase</span> /&gt;</span><span class="tag">&lt;<span class="name">goals</span> /&gt;</span><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span> /&gt;</span> <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span> <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span> <span class="comment">&lt;!-- 参见repositories/repository元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span> /&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span> /&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> /&gt;</span><span class="tag">&lt;<span class="name">name</span> /&gt;</span><span class="tag">&lt;<span class="name">url</span> /&gt;</span><span class="tag">&lt;<span class="name">layout</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">reports</span> /&gt;</span> <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span> <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span> <span class="comment">&lt;!-- 该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> <span class="comment">&lt;!-- 参见dependencyManagement元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span>  <span class="comment">&lt;!-- 参见distributionManagement元素 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> /&gt;</span> <span class="comment">&lt;!-- 参见properties元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span> /&gt;</span> <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span> <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span> <span class="comment">&lt;!-- 包含需要连接到远程仓库的信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">releases</span>&gt;</span> <span class="comment">&lt;!-- 如何处理远程仓库里发布版本的下载 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span> /&gt;</span> <span class="comment">&lt;!-- true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span> <span class="comment">&lt;!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span> <span class="comment">&lt;!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">id</span>&gt;</span> <span class="comment">&lt;!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 远程仓库名称 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span> http://192.168.1.169:9999/repository/ <span class="tag">&lt;/<span class="name">url</span>&gt;</span> <span class="comment">&lt;!-- 远程仓库URL，按protocol://hostname/path形式 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span>&gt;</span> default <span class="tag">&lt;/<span class="name">layout</span>&gt;</span> <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.apache.maven <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="comment">&lt;!-- 依赖的group ID --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> maven-artifact <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="comment">&lt;!-- 依赖的artifact ID --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span> 3.8.1 <span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">type</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 </span></span><br><span class="line"><span class="comment">- compile ：默认范围，用于编译 </span></span><br><span class="line"><span class="comment">- provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span></span><br><span class="line"><span class="comment">- runtime: 在执行时需要使用 </span></span><br><span class="line"><span class="comment">- test: 用于test任务时使用 </span></span><br><span class="line"><span class="comment">- system: 需要外在提供相应的元素。通过systemPath来取得 </span></span><br><span class="line"><span class="comment">- systemPath: 仅用于范围为system。提供相应的路径 </span></span><br><span class="line"><span class="comment">- optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span> test <span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span> <span class="comment">&lt;!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span> <span class="comment">&lt;!-- 当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> spring-core <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.springframework <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span> true <span class="tag">&lt;/<span class="name">optional</span>&gt;</span> <span class="comment">&lt;!-- 可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span> <span class="comment">&lt;!-- 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">excludeDefaults</span> /&gt;</span> <span class="comment">&lt;!-- true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span> <span class="comment">&lt;!-- 所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span> <span class="comment">&lt;!-- 使用的报表插件和他们的配置。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span> <span class="comment">&lt;!-- plugin元素包含描述报表插件需要的信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> /&gt;</span> <span class="comment">&lt;!-- 报表插件在仓库里的group ID --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span> <span class="comment">&lt;!-- 报表插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> /&gt;</span> <span class="comment">&lt;!-- 被使用的报表插件的版本（或版本范围） --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span> <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span> <span class="comment">&lt;!-- 报表插件的配置 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">reportSets</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">reportSet</span>&gt;</span> <span class="comment">&lt;!-- 表示报表的一个集合，以及产生该集合的配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> /&gt;</span> <span class="comment">&lt;!-- 报表集合的唯一标识符，POM继承时用到 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span> <span class="comment">&lt;!-- 产生报表集合时，被使用的报表的配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span> <span class="comment">&lt;!-- 配置是否被继承到子POMs --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">reports</span> /&gt;</span> <span class="comment">&lt;!-- 这个集合里使用到哪些报表 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span> <span class="comment">&lt;!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span> <span class="comment">&lt;!-- 部署项目产生的构件到远程仓库需要的信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span> <span class="comment">&lt;!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon maven2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span> file://$&#123;basedir&#125;/target/deploy <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span> <span class="comment">&lt;!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> Banseon-maven2 Snapshot Repository <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span> scp://svn.baidu.com/banseon:/usr/local/maven-snapshot <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">site</span>&gt;</span> <span class="comment">&lt;!-- 部署项目的网站需要的信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-site <span class="tag">&lt;/<span class="name">id</span>&gt;</span> <span class="comment">&lt;!-- 部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> business api website <span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- 部署位置的名称 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span> <span class="comment">&lt;!-- 部署位置的URL，按protocol://hostname/path形式 --&gt;</span> </span><br><span class="line">scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web </span><br><span class="line"><span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">site</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">downloadUrl</span> /&gt;</span> <span class="comment">&lt;!-- 项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">relocation</span>&gt;</span> <span class="comment">&lt;!-- 如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> /&gt;</span> <span class="comment">&lt;!-- 构件新的group ID --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span> <span class="comment">&lt;!-- 构件新的artifact ID --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> /&gt;</span> <span class="comment">&lt;!-- 构件新的版本号 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">message</span> /&gt;</span> <span class="comment">&lt;!-- 显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">relocation</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">status</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> /&gt;</span> <span class="comment">&lt;!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span><span class="comment">&lt;!-- 头文件结束符，靠一开始没反应过来，找了好半天 --&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>转载自：<a href="http://www.zuidaima.com/share/1781583829978112.htm" target="_blank" rel="noopener">史上最全的maven pom.xml文件教程详解</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown折叠内容语法</title>
      <link href="/2019/01/02/%E7%BC%96%E7%A8%8B-markdown%E6%8A%98%E5%8F%A0%E5%86%85%E5%AE%B9%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/02/%E7%BC%96%E7%A8%8B-markdown%E6%8A%98%E5%8F%A0%E5%86%85%E5%AE%B9%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote><p>在看racaljk的GitHub上看到这个readme，才知道原来还可以这么玩，这也是H5的语法<br>参考 <a href="https://github.com/racaljk/yvm" target="_blank" rel="noopener">racaljk/yvm</a> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;Title&lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">content!!!</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><p>eg:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## collapsible markdown?</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;CLICK ME&lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">** &lt;summary&gt;标签与正文间要空一行 **</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure></p><hr><h2 id="这是一个折叠列表"><a href="#这是一个折叠列表" class="headerlink" title="这是一个折叠列表"></a>这是一个折叠列表</h2><blockquote><p>没想到在这里面的支持这么丑</p></blockquote><details><br><summary>Title1</summary><br><br>content!!!===<br></details><details><br><summary>Title2</summary><br><br>content!!!***<br></details><details><br><br><summary>Title3</summary><br><br>content!!!+++<br></details>]]></content>
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>IDEA 多模块项目Module must not contain source root. The root already belongs to module</title>
      <link href="/2018/12/19/backEnd-IDEA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AEModule-must-not-contain-source-root-The-root-already-belongs-to-module/"/>
      <url>/2018/12/19/backEnd-IDEA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AEModule-must-not-contain-source-root-The-root-already-belongs-to-module/</url>
      <content type="html"><![CDATA[<blockquote><p>本文来自 CSDN <a href="https://blog.csdn.net/u013041642/article/details/72835242" target="_blank" rel="noopener">多模块项目Module must not contain source root. The root already belongs to module</a></p></blockquote><p>有时候新建了maven工程，然后删了里面的src目录让它成为空的父项目，但是会报下面的错误。</p><p>Module “<em>” must not contain source root </em>. The root already belongs to module “*”.</p><h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><p>打开工程的iml文件后，发现里面记录了开始的源文件和资源文件的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule</span>=<span class="string">"true"</span> <span class="attr">type</span>=<span class="string">"JAVA_MODULE"</span> <span class="attr">version</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"NewModuleRootManager"</span> <span class="attr">LANGUAGE_LEVEL</span>=<span class="string">"JDK_1_5"</span> <span class="attr">inherit-compiler-output</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">url</span>=<span class="string">"file://$MODULE_DIR$/target/classes"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output-test</span> <span class="attr">url</span>=<span class="string">"file://$MODULE_DIR$/target/test-classes"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span> <span class="attr">url</span>=<span class="string">"file://$MODULE_DIR$"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sourceFolder</span> <span class="attr">url</span>=<span class="string">"file://$MODULE_DIR$/src/main/java"</span> <span class="attr">isTestSource</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sourceFolder</span> <span class="attr">url</span>=<span class="string">"file://$MODULE_DIR$/src/main/resources"</span> <span class="attr">type</span>=<span class="string">"java-resource"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sourceFolder</span> <span class="attr">url</span>=<span class="string">"file://$MODULE_DIR$/src/test/java"</span> <span class="attr">isTestSource</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">excludeFolder</span> <span class="attr">url</span>=<span class="string">"file://$MODULE_DIR$/target"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">"inheritedJdk"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">"sourceFolder"</span> <span class="attr">forTests</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改以后的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=&quot;true&quot; type=&quot;JAVA_MODULE&quot; version=&quot;4&quot;&gt;</span><br><span class="line">  &lt;component name=&quot;NewModuleRootManager&quot; LANGUAGE_LEVEL=&quot;JDK_1_5&quot; inherit-compiler-output=&quot;false&quot;&gt;</span><br><span class="line">    &lt;output url=&quot;file://$MODULE_DIR$/target/classes&quot; /&gt;</span><br><span class="line">    &lt;output-test url=&quot;file://$MODULE_DIR$/target/test-classes&quot; /&gt;</span><br><span class="line">    &lt;content url=&quot;file://$MODULE_DIR$&quot;&gt;</span><br><span class="line">      &lt;excludeFolder url=&quot;file://$MODULE_DIR$/target&quot; /&gt;</span><br><span class="line">    &lt;/content&gt;</span><br><span class="line">    &lt;orderEntry type=&quot;inheritedJdk&quot; /&gt;</span><br><span class="line">    &lt;orderEntry type=&quot;sourceFolder&quot; forTests=&quot;false&quot; /&gt;</span><br><span class="line">  &lt;/component&gt;</span><br><span class="line">&lt;/module&gt;</span><br></pre></td></tr></table></figure></p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p><img src="https://img-blog.csdn.net/20170601210423506?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzA0MTY0Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="hexo贴图片确实是个问题"></p><p>在项目设置中, 右侧有源文件、资源文件等 目录列表。<br>删除掉不是子工程该有的目录。</p>]]></content>
      
      <categories>
          
          <category> backEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backEnd 编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx 搭建文档</title>
      <link href="/2018/09/23/%E6%90%AD%E5%BB%BA-nginx-%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/"/>
      <url>/2018/09/23/%E6%90%AD%E5%BB%BA-nginx-%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<blockquote><p>以Centos 7 为例</p></blockquote><h2 id="Edit-yum’s-aliyun源"><a href="#Edit-yum’s-aliyun源" class="headerlink" title="Edit yum’s aliyun源"></a>Edit yum’s aliyun源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum makecache #生成缓存</span><br></pre></td></tr></table></figure><h2 id="Yum-command"><a href="#Yum-command" class="headerlink" title="Yum command"></a>Yum command</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum update  ## Update all rpm packages</span><br><span class="line">yum upgrade ## 大规模的版本升级,与yum update不同的是,连旧的淘汰的包也升级</span><br></pre></td></tr></table></figure><h2 id="Install-some-softs-and-the-environment"><a href="#Install-some-softs-and-the-environment" class="headerlink" title="Install some softs and the environment"></a>Install some softs and the environment</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir app backup download logs work  # 这里是自己的习惯的目录结构</span><br><span class="line">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake</span><br><span class="line">yum -y install wget httpd-tools vim</span><br><span class="line"></span><br><span class="line">yum list | grep gcc</span><br></pre></td></tr></table></figure><h2 id="Install-nginx"><a href="#Install-nginx" class="headerlink" title="Install nginx"></a>Install nginx</h2><blockquote><p>link: <a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">https://nginx.org/en/download.html</a></p></blockquote><ul><li>click: Linux packages for <a href="http://nginx.org/en/linux_packages.html#stable" target="_blank" rel="noopener">stable version</a></li><li><p>copy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li><li><p>create a file of nginx by yum in vim</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line"></span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>install</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep nginx</span><br><span class="line">## You can find the nginx app</span><br><span class="line"></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></li></ul><h2 id="Installed-nginx"><a href="#Installed-nginx" class="headerlink" title="Installed nginx"></a>Installed nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ngxin -v  # view the version</span><br><span class="line">systemctl start nginx.service</span><br><span class="line">systemctl restart nginx.servcice</span><br><span class="line">systemctl reload nginx.service</span><br></pre></td></tr></table></figure><h3 id="查看nginx安装目录"><a href="#查看nginx安装目录" class="headerlink" title="查看nginx安装目录"></a>查看nginx安装目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql nginx</span><br></pre></td></tr></table></figure><h3 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h3><table><thead><tr><th style="text-align:left">路径</th><th style="text-align:left">类型</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">/etc/logrotate.d/nginx</td><td style="text-align:left">配置文件</td><td style="text-align:left">Nginx日志轮转，用于logrotate服务的日志切割</td></tr><tr><td style="text-align:left">/etc/nginx/nginx.conf</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/etc/nginx/nginx.conf</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/etc/nginx/conf.d</td><td style="text-align:left">目录、配置文件</td><td style="text-align:left">Nginx主配置文件</td></tr><tr><td style="text-align:left">/etc/nginx/conf.d/default.conf</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/etc/nginx/fastcgi_params</td><td style="text-align:left">配置文件</td><td style="text-align:left">cgi配置相关，fascgi配置</td></tr><tr><td style="text-align:left">/etc/nginx/uwsgi_params</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/etc/nginx/scgi_params</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/etc/nginx/koi-utf</td><td style="text-align:left">配置文件</td><td style="text-align:left">编码转换映射转化文件</td></tr><tr><td style="text-align:left">/etc/nginx/koi-win</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/etc/nginx/win-utf</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/etc/nginx/mime.types</td><td style="text-align:left">配置文件</td><td style="text-align:left">设置http协议的COntent-type与扩展名对应关系</td></tr></tbody></table><table><thead><tr><th style="text-align:left">路径</th><th style="text-align:left">类型</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">/usr/lib/systemd/system/nginx-debug.service</td><td style="text-align:left">配置文件</td><td style="text-align:left">用于配置出系统守护进程管理器管理方式</td></tr><tr><td style="text-align:left">/usr/lib/systemd/system/nginx.service</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/etc/sysconfig/nginx</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/etc/sysconfig/nginx-debug</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/usr/lib64/nginx/modules</td><td style="text-align:left">目录</td><td style="text-align:left">Nginx模块目录</td></tr><tr><td style="text-align:left">/etc/nginx/modules</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/usr/sbin/nginx</td><td style="text-align:left">命令</td><td style="text-align:left">Nginx服务启动管理的终端命令</td></tr><tr><td style="text-align:left">/usr/sbin/nginx-debug</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/usr/share/doc/nginx-1.12.0</td><td style="text-align:left">文件目录</td><td style="text-align:left">Nginx的手册和帮助文件</td></tr><tr><td style="text-align:left">/usr/share/doc/nginx-1.12.0/COPYRIGHT</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/usr/share/man/man8/nginx.8.gz</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">/var/cache/nginx</td><td style="text-align:left">目录</td><td style="text-align:left">Nginx的缓存目录</td></tr><tr><td style="text-align:left">/var/log/nginx</td><td style="text-align:left">目录</td><td style="text-align:left">Nginx的日志目录</td></tr></tbody></table><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.jianshu.com/p/4aa7b63f9026" target="_blank" rel="noopener">将Centos的yum源更换为国内的阿里云源</a><br><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx: download</a><br><a href="http://nginx.org/en/linux_packages.html#stable" target="_blank" rel="noopener">nginx: Linux packages</a></p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Teamviewer 重置ID的工具</title>
      <link href="/2018/09/23/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-Teamviewer-%E9%87%8D%E7%BD%AEID%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/09/23/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-Teamviewer-%E9%87%8D%E7%BD%AEID%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p><a href="/file/TVTools_AlterID.exe">工具下载</a></p><p>当 TeamViewer 使用率超过 TeamViewer 所认定久会被锁定限时，这时候除了有license或破解TeamViewer，还有一种方式，那就是用<strong>TVTools Alter 2.0</strong>将TeamViewer ID reset 就可以展示解决被限时间的情况。</p><p>如果TeamViewer已经执行状态，只要执行<strong>TVTools AlterID.exe</strong>工具，点选<strong>[start]</strong>钮，等待Progress 100%之后点选<strong>[end]</strong>钮即可。</p><p>如果TeamViewer尚未执行状态，将<strong>TVTools AlterID.exe</strong> 复制到TeamViewer 安装之根目录，并执行TVTools AlterID.exe工具，点选<strong>[start]</strong>，等待progress 100%之后再点选<strong>[end]</strong>即可。</p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul><li>试用：重置ID，重新启动TeamViewer，注册带有试用许可证的新ID</li><li>免费：重置ID，重新启动TeamViewer，注册一个带有免费许可证的新ID</li><li>擦除：获取Teamviewer在第一次启动时获得的原始ID</li></ul><h2 id="试用许可证的优点"><a href="#试用许可证的优点" class="headerlink" title="试用许可证的优点"></a>试用许可证的优点</h2><ul><li>无广告。</li><li>没有关于空闲会话结束的讯息。</li><li>没有商业用途的怀疑，也没有与之相关的限制。</li><li>没有5分钟的限制。</li><li>许多商业许可机会都可用</li></ul><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>如果选择试用模式的试用模式将在7天内过期。<br>因此，应该再次试用<strong>TVTools AlterID.exe</strong>来重置ID或者延长试用许可证。</p><blockquote><p>参考：<br><a href="https://www.youtube.com/watch?v=7cHXLyhyWgw" target="_blank" rel="noopener">How to change or reset ID of Teamviewer 13</a><br><a href="http://mitblog.pixnet.net/blog/post/44052315-%5B%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7%5D-%E5%A6%82%E4%BD%95%E9%87%8D%E8%A8%AD-teamviewer-id%EF%BC%9F-%28how-to-reset-t" target="_blank" rel="noopener">破解工具 如何重置 TeamViewer ID</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> teamviewer 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu添加可信任根证书</title>
      <link href="/2018/09/19/linux-Ubuntu%E6%B7%BB%E5%8A%A0%E5%8F%AF%E4%BF%A1%E4%BB%BB%E6%A0%B9%E8%AF%81%E4%B9%A6/"/>
      <url>/2018/09/19/linux-Ubuntu%E6%B7%BB%E5%8A%A0%E5%8F%AF%E4%BF%A1%E4%BB%BB%E6%A0%B9%E8%AF%81%E4%B9%A6/</url>
      <content type="html"><![CDATA[<blockquote><p>文章引用自：<a href="http://yaxin-cn.github.io/Linux/add-root-certificate-in-ubuntu.html" target="_blank" rel="noopener">Ubuntu添加可信任根证书</a></p></blockquote><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>Ubuntu下添加根证书非常简单, 只要将证书(扩展名为crt)复制到<strong>/usr/local/share/ca-certificates</strong>文件夹然后运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-ca-certificates</span><br></pre></td></tr></table></figure></p><p>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[yaxin@ubox ~]$sudo cp xinmu.crt /usr/local/share/ca-certificates</span><br><span class="line">[yaxin@ubox ~]$sudo update-ca-certificates</span><br><span class="line">Updating certificates in /etc/ssl/certs... 1 added, 0 removed; done.</span><br><span class="line">Running hooks in /etc/ca-certificates/update.d....done.</span><br></pre></td></tr></table></figure></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>直接将<strong>/usr/local/share/ca-certificates</strong>对应的证书删除，然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-ca-certificates</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[yaxin@ubox ~]$sudo rm -f /usr/local/share/ca-certificates/xinmu.crt</span><br><span class="line">[yaxin@ubox ~]$sudo update-ca-certificates</span><br><span class="line">Updating certificates in /etc/ssl/certs... 0 added, 0 removed; done.</span><br><span class="line">Running hooks in /etc/ca-certificates/update.d....done.</span><br></pre></td></tr></table></figure><blockquote><p>注意: 这时候并不会提示1 removed, 但证书是已经被删除了的</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-ca-certificates</span><br></pre></td></tr></table></figure></p><p>是一个shell脚本, 使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which</span><br></pre></td></tr></table></figure></p><p>找出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-ca-certificates</span><br></pre></td></tr></table></figure></p><p>的绝对路径，然后打开就可以查看其源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[yaxin@ubox ~]$which update-ca-certificates</span><br><span class="line">/usr/sbin/update-ca-certificates</span><br><span class="line">[yaxin@ubox ~]$file /usr/sbin/update-ca-certificates</span><br><span class="line">/usr/sbin/update-ca-certificates: POSIX shell script, ASCII text executable</span><br></pre></td></tr></table></figure><p>通过阅读源码可以看出,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-ca-certificates</span><br></pre></td></tr></table></figure></p><p>命令的本质其实是将PEM格式的根证书内容附加到<strong>/etc/ssl/certs/ca-certificates.crt</strong>, 而<strong>/etc/ssl/certs/ca-certificates.crt</strong>中本身就包含了系统自带的各种可信根证书.</p><p>文章引用自：<a href="http://yaxin-cn.github.io/Linux/add-root-certificate-in-ubuntu.html" target="_blank" rel="noopener">Ubuntu添加可信任根证书</a></p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql安装文档</title>
      <link href="/2018/09/19/%E6%90%AD%E5%BB%BA-mysql%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/"/>
      <url>/2018/09/19/%E6%90%AD%E5%BB%BA-mysql%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br><span class="line">add-apt-repository &apos;deb http://archive.ubuntu.com/ubuntu trusty universe&apos;</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure><h2 id="使用service-启动、关闭MySQL服务"><a href="#使用service-启动、关闭MySQL服务" class="headerlink" title="使用service 启动、关闭MySQL服务"></a>使用service 启动、关闭MySQL服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql stop</span><br><span class="line">service mysql restart</span><br><span class="line">使用ps -aux | grep mysql 查询是否启动成功</span><br></pre></td></tr></table></figure><h2 id="修改root权限"><a href="#修改root权限" class="headerlink" title="修改root权限"></a>修改root权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">show databases;</span><br><span class="line">use mysql;</span><br></pre></td></tr></table></figure><h3 id="两种"><a href="#两种" class="headerlink" title="两种"></a>两种</h3><ol><li><p>改表法<br>可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称”%” </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">use mysql; </span><br><span class="line">update user set host = &apos;%&apos; where user = &apos;root&apos;; </span><br><span class="line">select host, user from user;</span><br></pre></td></tr></table></figure></li><li><p>授权法<br>赋予任何主机访问数据的权限 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos;WITH GRANT OPTION</span><br></pre></td></tr></table></figure></li></ol><p>修改生效 :mysql&gt;FLUSH PRIVILEGES </p><p>结果出现，就OK了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| %         | root             |</span><br><span class="line">| localhost | debian-sys-maint |</span><br><span class="line">| localhost | mysql.session    |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">+-----------+------------------+</span><br></pre></td></tr></table></figure></p><h2 id="无法远程连接MySQL服务器"><a href="#无法远程连接MySQL服务器" class="headerlink" title="无法远程连接MySQL服务器"></a>无法远程连接MySQL服务器</h2><p>要在Linux终端中测试远程MySQL连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u username -h 192.16.8.1.22 -p</span><br></pre></td></tr></table></figure></p><p>或者通过WIndows的Telnet：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 192.16.8.1.22 3306</span><br></pre></td></tr></table></figure></p><p>如果在尝试连接到远程MySQL服务器时遇到错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 2003 (HY000): Can&apos;t connect to MySQL server on &apos;192.16.8.1.22&apos; (111)</span><br></pre></td></tr></table></figure></p><p>或者在Telnet中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connecting To 192.16.8.1.22...Could not open connection to the host, on port 3306: Connect failed</span><br></pre></td></tr></table></figure></p><h3 id="检查防火墙"><a href="#检查防火墙" class="headerlink" title="检查防火墙"></a>检查防火墙</h3><p>首先，如果ufw启用了防火墙，请确保您有MySQL规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow mysql</span><br></pre></td></tr></table></figure></p><p>重启服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ufw restart</span><br></pre></td></tr></table></figure></p><h3 id="检查MySQL配置"><a href="#检查MySQL配置" class="headerlink" title="检查MySQL配置"></a>检查MySQL配置</h3><p>您可能需要bind-address在MySQL配置文件中  注释掉mysqld.cnf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><p>找到行<strong>bind-address</strong>  （CTRL+ W搜索）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Instead of skip-networking the default is now to listen only on</span><br><span class="line"># localhost which is more compatible and is not less secure.</span><br><span class="line">bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure><p>以上行告诉MySQL只接受本地连接。通过#在它之前添加来注释掉这一行。<br>重新启动MySQL服务以使更改生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p><p>谢谢吉内给的文档<br>参考：<a href="https://devanswers.co/cant-connect-mysql-server-remotely/#comment-1727" target="_blank" rel="noopener">Can’t connect to MySQL server remotely on Ubuntu</a></p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>广电对游戏版号的限制</title>
      <link href="/2018/09/10/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E5%B9%BF%E7%94%B5%E5%AF%B9%E6%B8%B8%E6%88%8F%E7%89%88%E5%8F%B7%E7%9A%84%E9%99%90%E5%88%B6/"/>
      <url>/2018/09/10/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E5%B9%BF%E7%94%B5%E5%AF%B9%E6%B8%B8%E6%88%8F%E7%89%88%E5%8F%B7%E7%9A%84%E9%99%90%E5%88%B6/</url>
      <content type="html"><![CDATA[<blockquote><p>腾讯运营的《绝地求生》一直没有出收费项目，是因为早前广电颁发规定，非七大类游戏暂时无法办理版号。</p></blockquote><p>2016 年 5 月，国家广播电视总局下发了《关于移动游戏出版服务管理的通知》，规定游戏运营需要版号。只有获得了版号，游戏才可以上线收费，否则只能是不断地免费公测。</p><p>称霸了今年游戏榜的《绝地求生·刺激战场》就因为没有版号，至今还未在国内市场给腾讯带来一分钱的回报。</p><p>游戏公司找一个流行的游戏玩法，不管是卡牌、Dota 还是射击，再包装上流行的形象，一个免费下载的游戏就出来了。之后游戏公司投入广告推广让人下载，再用游戏设计引诱玩家付费买道具。这已经是整个中国手机游戏业的标准模版。</p><p>市场上大量制造流行形象和游戏机制的游戏，以期迅速获得短期的收益。同期获得版号的游戏里，可能有数十款都是贪吃蛇、捕鱼一类的玩法、形象。举例来说，过审手游中棋牌类游戏的占比一向是有相当的比例。根据统计，2017 年下半年，棋牌类手游在所有手游中占比将近 ⅓。</p><p>在这个更考验经营能力、产品经验而非创意的模版下，一个游戏火不了太久，当它的收入抵消不了推广费用，就需要靠新游戏接上去。而没有版号就没有新游戏。</p><p>整个版号申请所需要的流程相对较长。将所有资质办齐预估就需要 3 - 5 个月，如果再加上游戏内容修改、申报游戏的品类不属于广电总局所规定的“七大类”（没情节或者休闲向的消除类、跑酷类、飞行类、棋牌类、解谜类、体育类、音乐舞蹈类游戏），或者是当前排队等待申请版号的游戏过多，通常而言时间都会更长。</p><p><img src="http://img.qdaily.com/uploads/20180906055417b6LfTSW3JQvMVrID.jpg-WebpWebW640" alt="游戏上架手续"></p><p>在<a href="http://www.sapprft.gov.cn/sapprft/contents/6588/298011.shtml" target="_blank" rel="noopener">关于移动游戏出版服务管理的通知</a>中第三条：</p><blockquote><p>三、申请出版不涉及政治、军事、民族、宗教等题材内容，且无故事情节或者情节简单的消除类、跑酷类、飞行类、棋牌类、解谜类、体育类、音乐舞蹈类等休闲益智国产移动游戏，按照以下要求办理：…………（略）</p></blockquote><p>呐 ~ 这样一过滤就剩《开心消消乐》这类的游戏了。</p><hr><p>2018-08-30 <a href="http://www.moe.edu.cn/srcsite/A17/moe_943/s3285/201808/t20180830_346672.html" target="_blank" rel="noopener">教育部等八部门关于印发《综合防控儿童青少年近视实施方案》的通知</a>，紧接9月6日<a href="https://mp.weixin.qq.com/s/VB20RfCgxnoBsdVC6DZTpQ" target="_blank" rel="noopener">腾讯游戏</a>，<a href="https://mp.weixin.qq.com/s/QzcDkWmRcAccvTvWT8TM0w" target="_blank" rel="noopener">王者荣耀</a>的微信公众号相继发布公告称，腾讯将升级《王者荣耀》这款游戏的健康系统，也就是对用户加强实名制审核。</p><p>预计从下周起，新用户在首次进入《王者荣耀》游戏时，腾讯将会通过接入“公安权威数据平台”对用户的年龄进行校验，判断用户是否未成年人，以便确定是否将此帐号纳入到防沉迷体系中。</p><p>腾讯没有解释“公安权威数据平台”具体包含哪些数据，但很可能包括人脸数据、身份证等配对信息。此前借用身份证之类的做法很可能不再可行。</p><p>根据腾讯的说明，《王者荣耀》接入公安数据校验预计在 9 月 15 日前后开始。时间主要涉及到 iOS 新版本的审核。腾讯预计 9 月份可以完成对所有新用户年龄的校验。</p><p>《王者荣耀》之后，腾讯还计划将旗下更多的游戏接入“公安权威数据平台”。</p><p>这次升级《王者荣耀》的健康系统可能也是近期才作出的调整。《王者荣耀》公众号这次的文章中称，这次升级“经过历时数月的开发与测试”，也就是在游戏版号审批暂停的几个月内。</p><p>2017 年 7 月份，《王者荣耀》团队给出的说法是，实名制的主要措施是通过身份证和征信信息进行综合判断，人脸识别等其他强化实名认证的举措正在排入开发计划。</p><p>自游戏版号审批今年 3 月暂停以来，腾讯的《绝地求生·刺激战场》等游戏无法通过用户充值获得收入。腾讯的股价也一路下跌。目前腾讯股价在 311.4 港元，为 2017 年 8 月来新低。其市值跌去了 30%。</p><blockquote><p>有人猜测游戏中可能会通过调用前置摄像头获取玩家脸部作判别</p></blockquote><p>参考文：<br><a href="http://www.sapprft.gov.cn/sapprft/contents/6588/298011.shtml" target="_blank" rel="noopener">关于移动游戏出版服务管理的通知</a><br><a href="http://wemedia.ifeng.com/54432384/wemedia.shtml" target="_blank" rel="noopener">观察 | 网传受国家机构改革影响，非七大类游戏将暂时无法办理版号</a><br><a href="http://www.qdaily.com/articles/56124.html" target="_blank" rel="noopener">版号停止审批的 6 个月，游戏公司们都经历了什么</a></p><p><a href="http://www.moe.edu.cn/srcsite/A17/moe_943/s3285/201808/t20180830_346672.html" target="_blank" rel="noopener">教育部等八部门关于印发《综合防控儿童青少年近视实施方案》的通知</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Springboot @Component下@Autowired的注入为null【转】</title>
      <link href="/2018/08/23/backEnd-spring-springboot-Component%E4%B8%8B-Autowired%E7%9A%84%E6%B3%A8%E5%85%A5%E4%B8%BAnull/"/>
      <url>/2018/08/23/backEnd-spring-springboot-Component%E4%B8%8B-Autowired%E7%9A%84%E6%B3%A8%E5%85%A5%E4%B8%BAnull/</url>
      <content type="html"><![CDATA[<blockquote><p>原文： <a href="https://blog.csdn.net/georgeshaw1/article/details/74943089" target="_blank" rel="noopener">SpringBoot在自定义类中调用service层等Spring其他层</a></p></blockquote><p>自定义类时，出现<strong>@Autowired</strong>下的层出现空指针异常。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>做了一个TCP服务器来接入智能设备，然后需要将设备实时发送的定位等关键信息存储到数据库。为了考虑将来可能对外提供rest接口，采用将TCP服务器集成到SpringBoot框架，当然，也是为了能最快利用mybatis框架实现数据访问，然后依次解决了如何启动，如何注销等各种问题，然后在TCP服务器消息处理时，需要写数据库，直接调用DAO层，编译报错。改为调用Service层，编译正常，运行到调用的地方，报空指针异常，跟踪到异常位置，发现service为空，也就是按照之前controller层通过@Autowired注入service层失效。 </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">IoHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> HealthDataService healthDataService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServerHandler  serverHandler ;</span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">//通过@PostConstruct实现初始化bean之前进行的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        serverHandler = <span class="keyword">this</span>;  </span><br><span class="line">        serverHandler.healthDataService = <span class="keyword">this</span>.healthDataService;        </span><br><span class="line">        <span class="comment">// 初使化时将已静态化的testService实例化</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//测试调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        serverHandler .healthDataService.你的service层方法;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>将需要调用Spring的Service层的类通过@Component注解为组件加载； </li><li>同样通过@Autowired获取Service层的Bean对象； </li><li>为类声明一个静态变量，方便下一步存储bean对象； </li><li><strong>划重点：通过注解 @PostConstruct ，在初始化的时候初始化静态对象和它的静态成员变量healthDataService，原理是拿到service层bean对象，静态存储下来，防止被释放。</strong></li></ul><h2 id="那些趟过的坑"><a href="#那些趟过的坑" class="headerlink" title="那些趟过的坑"></a>那些趟过的坑</h2><p>刚开始调用的时候，总觉得很简单，以前springmvc写个配置，将对象标注为bean就可以随意调用Spring IOC容器的beans了，但是这是SpringBoot，估计还是有区别，依次试验了百度出来的前三页帮助，基本没有成功的。包括： </p><ul><li>将工具类申明为spring组件，如<strong>@controller</strong> <strong>@compent</strong> 等，在spring自动扫描包设置中将工具类所在的包加进来； 无效 </li><li>new一个service； 无效；<br>等等！</li></ul><blockquote><p>以上为原文转载，再次感谢原文作者分享： <a href="https://blog.csdn.net/georgeshaw1/article/details/74943089" target="_blank" rel="noopener">SpringBoot在自定义类中调用service层等Spring其他层</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> backEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FTP文件上传、下载</title>
      <link href="/2018/08/17/backEnd-FTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E3%80%81%E4%B8%8B%E8%BD%BD/"/>
      <url>/2018/08/17/backEnd-FTP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E3%80%81%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="上传文件到-FTP-中"><a href="#上传文件到-FTP-中" class="headerlink" title="上传文件到 FTP 中"></a>上传文件到 FTP 中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还没写</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 从 FTP 中下载文件到本地</span><br><span class="line">```java</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.net.ftp.FtpClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * connectFTP(ip,port,userName,password)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">(String arg[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">FtpClient ftp = connectFTP(ip,<span class="number">21</span>,userName,password);</span><br><span class="line">List&lt;String&gt; list = download(filePath + fileName, ftp);<span class="comment">//获得文件每一行的内容，并写到 list 种</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">  <span class="comment">//遍历 list 取出每一行的数据</span></span><br><span class="line">sout(list.get(i));</span><br><span class="line"><span class="comment">//外部创建 File 对象后，写入到 File 对象中</span></span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ftp.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">download</span><span class="params">(String ftpFile, FtpClient ftp)</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">  String str = <span class="string">""</span>;</span><br><span class="line">  InputStream is = <span class="keyword">null</span>;</span><br><span class="line">  BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取ftp上的文件</span></span><br><span class="line">      is = ftp.getFileStream(ftpFile);</span><br><span class="line">      <span class="comment">//转为字节流</span></span><br><span class="line">      br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is,<span class="string">"GBK"</span>));</span><br><span class="line">      <span class="keyword">while</span>((str=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">          list.add(str);</span><br><span class="line">      &#125;</span><br><span class="line">      br.close();</span><br><span class="line">  &#125;<span class="keyword">catch</span> (FtpProtocolException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> backEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP 文件上传 文件下载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件上传、下载</title>
      <link href="/2018/08/17/backEnd-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
      <url>/2018/08/17/backEnd-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 上传文件到服务器--创建一个工具类，直接调用该方法即可</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mulFile：文件流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uploadPath：文件上传后存储的路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">uploadFile</span><span class="params">(MultipartFile mulFile, String uploadPath)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  String fileName = mulFile.getOriginalFilename();<span class="comment">// 获取文件名（包括后缀名）</span></span><br><span class="line">  String suffixName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));<span class="comment">// 获取文件的后缀名</span></span><br><span class="line">  String infrontName = fileName.substring(<span class="number">0</span>,fileName.lastIndexOf(<span class="string">"."</span>));<span class="comment">//获取文件的文件名</span></span><br><span class="line"></span><br><span class="line">  String timestamp = <span class="keyword">new</span> Timestamp(System.currentTimeMillis()).getTime()+<span class="string">""</span>;<span class="comment">//当前时间戳</span></span><br><span class="line">  String filePath = uploadPath + infrontName + <span class="string">"-"</span> + timestamp + suffixName;<span class="comment">// 给名字添加时间戳</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 文件存储</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  File target = <span class="keyword">new</span> File(filePath);<span class="comment">// 创建一个新文件</span></span><br><span class="line">  <span class="keyword">if</span> (!target.getParentFile().exists()) &#123;<span class="comment">// 检测是否存在目录</span></span><br><span class="line">    target.getParentFile().mkdirs();<span class="comment">// 新建文件夹</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    mulFile.transferTo(target);<span class="comment">// 把file文件写入dest</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"reload"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(@RequestParam(value = <span class="string">"mulFile"</span>, required = <span class="keyword">false</span>)</span> MultipartFile uploadfile,</span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(value = <span class="string">"id"</span>, required = <span class="keyword">true</span>, defaultValue = <span class="string">""</span>)</span> String id) </span>&#123;</span><br><span class="line"></span><br><span class="line">String uploadPath = <span class="string">"d:/file"</span>;</span><br><span class="line">File result = uploadFile(uploadfile,uploadPath);</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span>:<span class="number">11</span>,</span><br><span class="line"><span class="attr">"mulFile"</span>:<span class="string">"#@#!%@#*!%$"</span>//文件流</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供文件下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回结果集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/io"</span>, method = RequestMethod.GET, produces = &#123; MediaType.APPLICATION_JSON_UTF8_VALUE &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;InputStreamResource&gt; <span class="title">download</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>)</span> Integer id) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  val filePath = <span class="string">"D:/file/haha1534299140658.csv"</span>;</span><br><span class="line"></span><br><span class="line">  val file = <span class="keyword">new</span> FileSystemResource(filePath);</span><br><span class="line">  HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">  headers.add(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache, no-store, must-revalidate"</span>);</span><br><span class="line">  headers.add(<span class="string">"Content-Disposition"</span>, String.format(<span class="string">"attachment; filename=\"%s\""</span>, file.getFilename()));</span><br><span class="line">  headers.add(<span class="string">"Pragma"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">  headers.add(<span class="string">"Expires"</span>, <span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity</span><br><span class="line">            .ok()</span><br><span class="line">            .headers(headers)</span><br><span class="line">            .contentLength(file.contentLength())</span><br><span class="line">            .contentType(MediaType.parseMediaType(<span class="string">"application/octet-stream"</span>))</span><br><span class="line">            .body(<span class="keyword">new</span> InputStreamResource(file.getInputStream()));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    log.info(<span class="string">"==== 文件下载出现异常：IOException：：位置：HFileController.download/GET  ==="</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建-MultipartFile-对象-供后端测试"><a href="#创建-MultipartFile-对象-供后端测试" class="headerlink" title="创建 MultipartFile 对象 供后端测试"></a>创建 MultipartFile 对象 供后端测试</h2><blockquote><p>核心代码</p></blockquote><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String path = <span class="string">"d:/"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(path + <span class="string">"haha.csv"</span>);</span><br><span class="line">MultipartFile mulFile = <span class="keyword">new</span> MockMultipartFile(</span><br><span class="line">        <span class="string">"haha4.csv"</span>,        <span class="comment">//文件名</span></span><br><span class="line">        <span class="string">"haha2.csv"</span>,        <span class="comment">//originalName 相当于上传文件在客户机上的文件名</span></span><br><span class="line">        ContentType.APPLICATION_OCTET_STREAM.toString(),    <span class="comment">//文件类型</span></span><br><span class="line">        <span class="keyword">new</span> FileInputStream(file)                           <span class="comment">//文件流</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> backEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 文件上传 文件下载 编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建个人Leanote云笔记</title>
      <link href="/2018/08/15/%E6%90%AD%E5%BB%BA-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA-Leanote-%E4%BA%91%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
      <url>/2018/08/15/%E6%90%AD%E5%BB%BA-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA-Leanote-%E4%BA%91%E7%AC%94%E8%AE%B0%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h2 id="下载启动-MongoDB"><a href="#下载启动-MongoDB" class="headerlink" title="下载启动 MongoDB"></a>下载启动 MongoDB</h2><blockquote><p>Leanote 依赖 MongoDB 作为数据存储，下面开始安装 MongoDB：</p></blockquote><h3 id="下载-MongoDB"><a href="#下载-MongoDB" class="headerlink" title="下载 MongoDB"></a>下载 MongoDB</h3><p>进入 /home 目录，并下载 MongoDB：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br></pre></td></tr></table></figure></p><p>下载源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</span><br></pre></td></tr></table></figure></p><p>解压缩源码包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf mongodb-linux-x86_64-3.0.1.tgz</span><br></pre></td></tr></table></figure></p><p>创建用于存储的文件夹目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/db</span><br></pre></td></tr></table></figure></p><h3 id="配置-MongoDB-的环境变量"><a href="#配置-MongoDB-的环境变量" class="headerlink" title="配置 MongoDB 的环境变量"></a>配置 MongoDB 的环境变量</h3><p>编辑 /etc/profile，在文件末尾追加以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例代码：/etc/profile</span><br><span class="line">export PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin</span><br></pre></td></tr></table></figure></p><p>并执行以下命令，使环境变量生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork</span><br></pre></td></tr></table></figure></p><h2 id="安装-Leanote"><a href="#安装-Leanote" class="headerlink" title="安装 Leanote"></a>安装 Leanote</h2><blockquote><p>Leanote 是一款 Linux 下开源的软件，下面开始安装 Leanote：</p></blockquote><h3 id="下载-Leanote"><a href="#下载-Leanote" class="headerlink" title="下载 Leanote"></a>下载 Leanote</h3><p>先进入 /home 目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br></pre></td></tr></table></figure></p><p>下载 Leanote 源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz</span><br></pre></td></tr></table></figure></p><p>解开压缩包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz</span><br></pre></td></tr></table></figure></p><h3 id="编辑-Leanote-配置文件"><a href="#编辑-Leanote-配置文件" class="headerlink" title="编辑 Leanote 配置文件"></a>编辑 Leanote 配置文件</h3><p>编辑文件 app.conf，在文件中找到 app.secret= 项，并修改为如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.secret=qcloud666</span><br></pre></td></tr></table></figure></p><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>导入初始化数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/</span><br></pre></td></tr></table></figure></p><p>启动 Leanote 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /bin/bash /home/leanote/bin/run.sh &gt;&gt; /var/log/leanote.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><h2 id="准备域名和证书"><a href="#准备域名和证书" class="headerlink" title="准备域名和证书"></a>准备域名和证书</h2><ul><li>域名注册</li><li>域名解析</li><li><p>ping <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a></p><blockquote><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p></blockquote></li></ul><p>注意替换下面命令中的 <a href="http://www.yourmpdomain.com" target="_blank" rel="noopener">www.yourmpdomain.com</a> 为你自己的注册的域名</p><h2 id="访问-Leanote-云笔记本"><a href="#访问-Leanote-云笔记本" class="headerlink" title="访问 Leanote 云笔记本"></a>访问 Leanote 云笔记本</h2><p>通过 ip 访问笔记本<br>通过访问 http://&lt;你的 CVM IP 地址&gt;:9000 就可以了使用自己的笔记本。</p><ul><li>初始化账户： admin</li><li>初始化密码： abc123</li><li>请务必修改密码已确保使用安全！</li></ul><p>通过域名访问笔记本<br>如果你申请了域名，可以将 Ip 地址替换为对应的域名作为访问凭据，如：<a href="http://www.yourmpdomain.com:9000" target="_blank" rel="noopener">http://www.yourmpdomain.com:9000</a> , 注：请将 <a href="http://www.yourmpdomain.com" target="_blank" rel="noopener">www.yourmpdomain.com</a> 替换为你申请的域名。</p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 Leanote 云 笔记 云笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建JavaWeb开发环境</title>
      <link href="/2018/08/10/%E6%90%AD%E5%BB%BA-%E6%90%AD%E5%BB%BAjavaweb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/08/10/%E6%90%AD%E5%BB%BA-%E6%90%AD%E5%BB%BAjavaweb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<blockquote><p>本文将讲述如何配置 JDK 、Tomcat 和 Mysql</p></blockquote><h2 id="搭建-Java-开发环境"><a href="#搭建-Java-开发环境" class="headerlink" title="搭建 Java 开发环境"></a>搭建 Java 开发环境</h2><h3 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h3><p>JDK 是开发Java程序必须安装的软件，我们查看一下 yum 源里面的 JDK：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list java*</span><br></pre></td></tr></table></figure></p><p>选择适合本机的JDK，并安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.7.0-openjdk* -y</span><br></pre></td></tr></table></figure></p><p>安装完成后，查看是否安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></p><h2 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h2><p>Tomcat 是一个应用服务器，是开发和调试 jsp 程序的首选，可以利用它来响应 HTML 页面的访问请求。</p><p>进入本地文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br></pre></td></tr></table></figure></p><p>到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压这个文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf apache-tomcat-7.0.77.tar.gz</span><br></pre></td></tr></table></figure></p><p>重命名这个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-tomcat-7.0.77 /usr/local/tomcat7</span><br></pre></td></tr></table></figure></p><p>进入 bin 文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tomcat7/bin</span><br></pre></td></tr></table></figure></p><p>给这个文件夹下的所有 shell 脚本授予权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 *.sh</span><br></pre></td></tr></table></figure></p><p>开启tomcat服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure></p><blockquote><p>重命名是为了方便后续操作, 并非必须步骤</p></blockquote><h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><p>使用 yum 安装 MySQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mysql-server mysql mysql-devel</span><br></pre></td></tr></table></figure></p><p>安装完成后，启动 MySQL 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure></p><p>设置 MySQL 账户 root 密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/mysqladmin -u root password &apos;Password&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>下面命令中的密码是教程为您自动生成的，为了方便实验的进行，不建议使用其它密码。如果设置其它密码，请把密码记住。</p></blockquote><h2 id="访问-Tomcat"><a href="#访问-Tomcat" class="headerlink" title="访问 Tomcat"></a>访问 Tomcat</h2><p>访问 Tomcat，此时，访问 <strong>http://&lt;您的 CVM IP 地址&gt;:8080</strong> 可访问到刚才启动的 Tomcat 的内置示例页面</p><p>搭建 Java Web 开发环境完成</p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 开发环境 javaweb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建Git服务器</title>
      <link href="/2018/08/03/%E6%90%AD%E5%BB%BA-%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/08/03/%E6%90%AD%E5%BB%BA-%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="下载安装-git"><a href="#下载安装-git" class="headerlink" title="下载安装 git"></a>下载安装 git</h2><p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>此实验以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。</p><p>安装依赖库和编译工具<br>为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br></pre></td></tr></table></figure></p><h2 id="安装编译工具"><a href="#安装编译工具" class="headerlink" title="安装编译工具"></a>安装编译工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure><h2 id="下载-git"><a href="#下载-git" class="headerlink" title="下载 git"></a>下载 git</h2><p>选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br></pre></td></tr></table></figure></p><p>到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz</span><br></pre></td></tr></table></figure></p><h2 id="解压和编译"><a href="#解压和编译" class="headerlink" title="解压和编译"></a>解压和编译</h2><p>解压下载的源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf git-2.10.0.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压后进入 git-2.10.0 文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd git-2.10.0</span><br></pre></td></tr></table></figure></p><p>执行编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make all prefix=/usr/local/git</span><br></pre></td></tr></table></figure></p><p>编译完成后, 安装到 /usr/local/git 目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install prefix=/usr/local/git</span><br></pre></td></tr></table></figure></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>将 git 目录加入 PATH<br>将原来的 PATH 指向目录修改为现在的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;export PATH=$PATH:/usr/local/git/bin&apos; &gt;&gt; /etc/bashrc</span><br></pre></td></tr></table></figure></p><p>生效环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/bashrc</span><br></pre></td></tr></table></figure></p><p>此时我们能查看 git 版本号，说明我们已经安装成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></p><h2 id="创建-git-账号密码"><a href="#创建-git-账号密码" class="headerlink" title="创建 git 账号密码"></a>创建 git 账号密码</h2><p>为我们刚刚搭建好的 git 创建一个账号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m gituser</span><br></pre></td></tr></table></figure></p><p>为这个账号设置密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd gituser</span><br></pre></td></tr></table></figure></p><p>控制台输入创建密码后，输入您自定义的密码，并二次确认。</p><h2 id="初始化-git-仓库并配置用户权限"><a href="#初始化-git-仓库并配置用户权限" class="headerlink" title="初始化 git 仓库并配置用户权限"></a>初始化 git 仓库并配置用户权限</h2><h3 id="创建-git-仓库并初始化"><a href="#创建-git-仓库并初始化" class="headerlink" title="创建 git 仓库并初始化"></a>创建 git 仓库并初始化</h3><p>我们创建 /data/repositories 目录用于存放 git 仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/repositories</span><br></pre></td></tr></table></figure></p><p>创建好后，初始化这个仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/repositories/ &amp;&amp; git init --bare test.git</span><br></pre></td></tr></table></figure></p><h3 id="配置用户权限"><a href="#配置用户权限" class="headerlink" title="配置用户权限"></a>配置用户权限</h3><p>给 git 仓库目录设置用户和用户组并设置权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R gituser:gituser /data/repositories</span><br><span class="line">chmod 755 /data/repositories</span><br></pre></td></tr></table></figure></p><p>[查找 git-shell 所在目录] , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 git-shell 的目录如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例代码：/etc/passwd</span><br><span class="line">gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell</span><br></pre></td></tr></table></figure></p><p>如果按照刚才的步骤执行, 这个位置应该是 /usr/local/git/bin/git-shell, 否则请通过 <figure class="highlight plain"><figcaption><span>git-shell``` 命令查看位置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安全目的, 限制 git 账号的 ssh 连接只能是登录 git-shell</span><br><span class="line">使用搭建好的 Git 服务</span><br><span class="line">克隆 test repo 到本地</span><br></pre></td></tr></table></figure></p><p>cd ~ &amp;&amp; git clone gituser@&lt;您的 CVM IP 地址&gt;:/data/repositories/test.git<br><code>`</code><br>恭喜，Git 服务器搭建完成, 从此以后你可以方便地将你的本地代码提交到 Git 服务器托管了</p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 Git 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Ubuntu搭建FTP</title>
      <link href="/2018/08/03/%E6%90%AD%E5%BB%BA-%E5%9F%BA%E4%BA%8EUbuntu%E6%90%AD%E5%BB%BAFTP/"/>
      <url>/2018/08/03/%E6%90%AD%E5%BB%BA-%E5%9F%BA%E4%BA%8EUbuntu%E6%90%AD%E5%BB%BAFTP/</url>
      <content type="html"><![CDATA[<h2 id="安装并启动-FTP-服务"><a href="#安装并启动-FTP-服务" class="headerlink" title="安装并启动 FTP 服务"></a>安装并启动 FTP 服务</h2><h3 id="安装-VSFTPD"><a href="#安装-VSFTPD" class="headerlink" title="安装 VSFTPD"></a>安装 VSFTPD</h3><p>使用 apt-get 安装 [vsftpd]：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd -y</span><br></pre></td></tr></table></figure></p><blockquote><p>vsftpd 是在 Linux 上被广泛使用的 FTP 服务器，根据其官网介绍，它可能是 UNIX-like 系统下最安全和快速的 FTP 服务器软件。</p></blockquote><h3 id="启动-VSFTPD"><a href="#启动-VSFTPD" class="headerlink" title="启动 VSFTPD"></a>启动 VSFTPD</h3><p>安装完成后 VSFTPD 会自动启动，通过 netstat 命令可以看到系统已经[监听了 21 端口]：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -nltp | grep 21</span><br></pre></td></tr></table></figure></p><p>如果没有启动，可以手动开启 VSFTPD 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start vsftpd.service</span><br></pre></td></tr></table></figure></p><blockquote><p>FTP 协议默认使用 21 端口作为服务端口</p></blockquote><h2 id="配置用户访问目录"><a href="#配置用户访问目录" class="headerlink" title="配置用户访问目录"></a>配置用户访问目录</h2><h3 id="新建用户主目录"><a href="#新建用户主目录" class="headerlink" title="新建用户主目录"></a>新建用户主目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/uftp</span><br></pre></td></tr></table></figure><p>执行完后，在这里 /home/uftp [?] 就能看到新建的文件夹 uftp 了。<br>创建登录欢迎文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /home/uftp/welcome.txt</span><br></pre></td></tr></table></figure></p><p>方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。<br>用户的主目录是用户通过 FTP 登录后看到的根目录</p><p>新建用户 uftp 并设置密码<br>创建一个用户 uftp ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -d /home/uftp -s /bin/bash uftp</span><br></pre></td></tr></table></figure></p><p>为用户 uftp 设置密码 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd uftp</span><br></pre></td></tr></table></figure></p><p>删除掉 pam.d 中 vsftpd，因为该配置文件会导致使用用户名登录 ftp 失败：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/pam.d/vsftpd</span><br></pre></td></tr></table></figure></p><p>为了方便后面的实验步骤，不建议使用其它的用户名<br>请记住设置的密码以用于后续步骤</p><h2 id="限制该用户仅能通过-FTP-访问"><a href="#限制该用户仅能通过-FTP-访问" class="headerlink" title="限制该用户仅能通过 FTP 访问"></a>限制该用户仅能通过 FTP 访问</h2><p>限制用户 uftp 只能通过 FTP 访问服务器，而不能直接登录服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -s /sbin/nologin uftp</span><br></pre></td></tr></table></figure></p><p>修改 vsftpd 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+w /etc/vsftpd.conf</span><br></pre></td></tr></table></figure></p><p>修改 /etc/vsftpd.conf 文件中的配置（直接将如下配置添加到配置文件最下方）：</p><ul><li><p>限制用户对主目录以外目录访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=YES</span><br></pre></td></tr></table></figure></li><li><p>指定一个 userlist 存放允许访问 ftp 的用户列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userlist_deny=NO</span><br><span class="line">userlist_enable=YES</span><br></pre></td></tr></table></figure></li><li><p>记录允许访问 ftp 用户列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userlist_file=/etc/vsftpd.user_list</span><br></pre></td></tr></table></figure></li><li><p>不配置可能导致莫名的530问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seccomp_sandbox=NO</span><br></pre></td></tr></table></figure></li><li><p>允许文件上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write_enable=YES</span><br></pre></td></tr></table></figure></li><li><p>使用utf8编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utf8_filesystem=YES</span><br></pre></td></tr></table></figure></li></ul><h3 id="新建文件-etc-vsftpd-user-list，用于存放允许访问-ftp-的用户："><a href="#新建文件-etc-vsftpd-user-list，用于存放允许访问-ftp-的用户：" class="headerlink" title="新建文件 /etc/vsftpd.user_list，用于存放允许访问 ftp 的用户："></a>新建文件 /etc/vsftpd.user_list，用于存放允许访问 ftp 的用户：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/vsftpd.user_list</span><br><span class="line">sudo chmod a+w /etc/vsftpd.user_list</span><br></pre></td></tr></table></figure><p>修改 /etc/vsftpd.user_list ，加入刚刚创建的用户：<br>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/vsftpd.user_list</span><br><span class="line">uftp</span><br></pre></td></tr></table></figure></p><p>设置访问权限<br>设置主目录访问权限（只读）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a-w /home/uftp</span><br></pre></td></tr></table></figure></p><p>新建公共目录，并设置权限（读写）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public</span><br></pre></td></tr></table></figure></p><p>重启vsftpd 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure></p><h2 id="访问-FTP-服务"><a href="#访问-FTP-服务" class="headerlink" title="访问 FTP 服务"></a>访问 FTP 服务</h2><p>FTP 服务已安装并配置完成，下面我们来使用该 FTP 服务</p><h3 id="访问-FTP-服务-1"><a href="#访问-FTP-服务-1" class="headerlink" title="访问 FTP 服务"></a>访问 FTP 服务</h3><p>根据你个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务</p><h4 id="通过-FTP-客户端工具访问"><a href="#通过-FTP-客户端工具访问" class="headerlink" title="通过 FTP 客户端工具访问"></a>通过 FTP 客户端工具访问</h4><p>FTP 客户端工具众多，下面推荐两个常用的：</p><ul><li>FileZilla - 跨平台的 FTP 客户端，支持 Windows 和 Mac</li><li>WinSCP - Windows 下的 FTP 和 SFTP 连接客户端</li></ul><ol><li>下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[主机]：</span><br><span class="line">&lt;你的 CVM IP 地址&gt;</span><br><span class="line">用户：</span><br></pre></td></tr></table></figure></li></ol><p>输入密码后，如果能够正常连接，那么大功告成，你可以开始使用属于你自己的 FTP 服务器了！<br>接下来，请上传任意一张图片到你的 FTP 服务器上的 uftp 的 public 目录下，然后，就可以在 /home/uftp/public 中看到了。</p><ol start="2"><li>通过 Windows 资源管理器访问<br>Windows 用户可以复制下面的[链接]到资源管理器的地址栏访问：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp://uftp:你的密码@&lt;你的 CVM IP 地址&gt;</span><br></pre></td></tr></table></figure></li></ol><p>如果你申请了域名，可以将Ip 地址替换为对应的域名作为访问凭据，可以将链接中的 Ip 地址替换为对应的域名访问 FTP 服务</p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 Ubuntu FTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Ubuntu搭建个人网盘</title>
      <link href="/2018/08/02/%E6%90%AD%E5%BB%BA-%E5%9F%BA%E4%BA%8E-Ubuntu-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/"/>
      <url>/2018/08/02/%E6%90%AD%E5%BB%BA-%E5%9F%BA%E4%BA%8E-Ubuntu-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/</url>
      <content type="html"><![CDATA[<h2 id="准备域名"><a href="#准备域名" class="headerlink" title="准备域名"></a>准备域名</h2><h3 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h3><p>ping <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a><br>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><p>注意替换下面命令中的 <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a> 为您自己的注册的域名</p><h2 id="安装-Seafile-服务器"><a href="#安装-Seafile-服务器" class="headerlink" title="安装 Seafile 服务器"></a>安装 Seafile 服务器</h2><h3 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h3><p>在 Debian/Ubuntu 系统下，可以使用以下命令安装 MySQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></p><p>使用以下命令安装 Python 相关依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python2.7 python-setuptools python-imaging python-ldap python-mysqldb python-memcache python-urllib3</span><br></pre></td></tr></table></figure></p><p>安装 MySQL 过程需要为 MySQL 的 root 用户设置新密码，请记住该[密码]以供后面步骤使用。</p><h3 id="为-Seafile-创建一个用户"><a href="#为-Seafile-创建一个用户" class="headerlink" title="为 Seafile 创建一个用户"></a>为 Seafile 创建一个用户</h3><p>创建 Seafile 用户，使用它运行 Seafile 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m -s /bin/bash seafile</span><br></pre></td></tr></table></figure></p><p>为该用户设置密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd seafile</span><br></pre></td></tr></table></figure></p><h3 id="下载Seafile"><a href="#下载Seafile" class="headerlink" title="下载Seafile"></a>下载Seafile</h3><p>切换到新用户，需要输入你刚才为seafile用户设置的密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - seafile</span><br></pre></td></tr></table></figure></p><p>切换目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure></p><p>这里可以查看获取最新 Seafile 下载链接，参考以下命令进行下载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_i386.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf seafile-server_*</span><br><span class="line">mv seafile-server-*/ seafile-server/</span><br></pre></td></tr></table></figure></p><h2 id="配置-Seafile"><a href="#配置-Seafile" class="headerlink" title="配置 Seafile"></a>配置 Seafile</h2><p>运行Seafile设置脚本，并回答预设问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd seafile-server*</span><br><span class="line">./setup-seafile-mysql.sh</span><br></pre></td></tr></table></figure></p><p>执行过程输入参数如下：</p><p>其中：</p><ul><li>[ This server’s ip or domain ] 字段输入教程第一步申请的域名或者IP地址（&lt;您的 CVM IP 地址&gt;）。</li><li>mysql 的 [ root password ] 字段输入数据库密码。</li><li>其他字段一路回车使用默认值。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[serve name] Seafile</span><br><span class="line"></span><br><span class="line">What is the ip or domain of the server?</span><br><span class="line">For example: www.mucompany.com, 192.168.1.101</span><br><span class="line">[This server&apos;s ip or domain] www.qcloudlab.wang</span><br><span class="line"></span><br><span class="line">Wheredo you want to put your seafile data?</span><br><span class="line">Please use a volume with enough free space</span><br><span class="line">[default &quot;/opt/seafile/seafile-data&quot;]</span><br><span class="line"></span><br><span class="line">Which port do you want to use for the seafile fileserver?</span><br><span class="line">[default &quot;8082&quot;]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line">Please choose a way to initialize seafile databases:</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">[1] Create new ccnet/seafile/seahub databases</span><br><span class="line">[2] Use existing ccnet/sseafile/seahub databases</span><br><span class="line"></span><br><span class="line">[1 ro 2] 1</span><br><span class="line"></span><br><span class="line">What is the host of mysql server?</span><br><span class="line">[default &quot;localhost&quot;]</span><br><span class="line"></span><br><span class="line">What is the port of mysql server?</span><br><span class="line">[default &quot;3306&quot;]</span><br><span class="line"></span><br><span class="line">What is the password of the mysql root user?</span><br><span class="line">[root password]</span><br><span class="line"></span><br><span class="line">verifying password of user root ... done </span><br><span class="line"></span><br><span class="line">Enter the name for mysql user of seafile. It would be created if not exists.</span><br><span class="line">[default &quot;root&quot;]</span><br><span class="line"></span><br><span class="line">Enter the database name for ccnet-server:</span><br><span class="line">[default &quot;ccnet-db&quot;]</span><br><span class="line"></span><br><span class="line">Enter the database name for seafile-server:</span><br></pre></td></tr></table></figure><h2 id="启动-Seafile"><a href="#启动-Seafile" class="headerlink" title="启动 Seafile"></a>启动 Seafile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./seafile.sh start</span><br><span class="line">./seahub.sh start</span><br></pre></td></tr></table></figure><p>执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 <a href="mailto:admin@qcloudlab.wang" target="_blank" rel="noopener">admin@qcloudlab.wang</a>。</p><p>[ admin password ] 和 [ admin password again ] 设置为登录网盘的密码，如 admin_Password：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">What is the email for the admin account?</span><br><span class="line">[admin email] admin@qcloudlab.wang</span><br><span class="line"></span><br><span class="line">What is the password for the admin account?</span><br><span class="line">[admin password]</span><br><span class="line"></span><br><span class="line">Enter the password again:</span><br><span class="line">[admin password again]</span><br></pre></td></tr></table></figure><p>此时 Seafile 已经部署完成，登录的帐号密码是：启动 Seafile 步骤中设置的邮箱和密码。<br>可以通过 IP 访问网盘：http://&lt;您的域名&gt;:8000</p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 网盘 Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Maven安装与入门</title>
      <link href="/2018/08/02/%E6%90%AD%E5%BB%BA-Maven-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%85%A5%E9%97%A8/"/>
      <url>/2018/08/02/%E6%90%AD%E5%BB%BA-Maven-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h2><p>Apache Maven 是一个软件项目管理及自动构建工具，由 Apache 软件基金会所提供。基于项目对象模型（缩写：POM）概念，Maven 利用一小段描述信息能管理一个项目的构建、报告和文档等步骤。</p><h3 id="Java-安装"><a href="#Java-安装" class="headerlink" title="Java 安装"></a>Java 安装</h3><p>首先我们需要准备 Java 开发环境，使用下面命令来安装 Java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure></p><h3 id="Maven-下载"><a href="#Maven-下载" class="headerlink" title="Maven 下载"></a>Maven 下载</h3><p>我们可以从官网下载页获取最新的下载链接（Binary tar.gz archive）。</p><p>然后我们使用 wget 命令将其下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">wget http://mirrors.shuosc.org/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压压缩包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure></p><p>将文件夹移动至 /usr/local/ 目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-maven-3.5.4 /usr/local/apache-maven</span><br></pre></td></tr></table></figure></p><p>配置环境变量<br>编辑 /etc/profile，在最下方添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAVEN_HOME=/usr/local/apache-maven</span><br><span class="line">export MAVEN_HOME</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br></pre></td></tr></table></figure></p><p>Ctrl + S 保存文件，并运行如下命令使环境变量生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>检查 Maven 是否成功安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure></p><h2 id="Maven-简单使用"><a href="#Maven-简单使用" class="headerlink" title="Maven 简单使用"></a>Maven 简单使用</h2><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">archetype:generate</span><br></pre></td></tr></table></figure></p><p>命令快速构建出项目骨架。</p><blockquote><p>Hello World<br>我们使用该命令创建一个 helloworld 项目。过程中可一路回车键选择默认值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">mvn archetype:generate -DgroupId=helloworld -DartifactId=helloworld</span><br></pre></td></tr></table></figure><p>mvn 指令首次执行时，会从远程“中央仓库”下载一些必需的文件，请耐心等待。</p><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>点击 /home/helloworld 查看项目结构。<br>其中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/pom.xml 为项目对象模型（Maven 项目配置）</span><br><span class="line">/src/main/java 用于存放源代码</span><br><span class="line">/src/test/java 用于存放单元测试代码</span><br><span class="line">/src/target 用于存放编译、打包后的输出文件</span><br></pre></td></tr></table></figure></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>进入项目目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/helloworld</span><br></pre></td></tr></table></figure></p><p>执行编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn compile</span><br></pre></td></tr></table></figure></p><p>重新开启 helloworld 项目文件夹，可以看到生成 target 目录。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>你可以使用 mvn 指明 mainClass 来运行项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn exec:java -Dexec.mainClass=&quot;helloworld.App&quot;</span><br></pre></td></tr></table></figure></p><p>完成后可看到终端输出了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们可以通过 test 指令来运行单元测试代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn test</span><br></pre></td></tr></table></figure></p><p>完成后可看到终端输出测试结果。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>通过 package 指令来执行打包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure></p><p>重新开启 target 目录，可看到生成了 .jar 文件。</p><p>从输出的日志可以看到，执行 package 前，会先执行 compile 及 test，最后执行了打包。</p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jib构建java镜像</title>
      <link href="/2018/08/01/%E6%90%AD%E5%BB%BA-Jib%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E9%95%9C%E5%83%8F/"/>
      <url>/2018/08/01/%E6%90%AD%E5%BB%BA-Jib%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E9%95%9C%E5%83%8F/</url>
      <content type="html"><![CDATA[<blockquote><p>参考<br>jib Official：<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleContainerTools%2Fjib" target="_blank" rel="noopener">GoogleContainerTools/jib</a><br>本文示例完整 demo github地址 <a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmoxingwang%2Fjib" target="_blank" rel="noopener">github.com/moxingwang/…</a></p></blockquote><h2 id="想要了解并且使用jib，首先你得知道或者使用过docker，在这个基础上才能够明白jib是干什么得，解决了什么问题。"><a href="#想要了解并且使用jib，首先你得知道或者使用过docker，在这个基础上才能够明白jib是干什么得，解决了什么问题。" class="headerlink" title="想要了解并且使用jib，首先你得知道或者使用过docker，在这个基础上才能够明白jib是干什么得，解决了什么问题。"></a>想要了解并且使用jib，首先你得知道或者使用过docker，在这个基础上才能够明白jib是干什么得，解决了什么问题。</h2><p>首先我们先看一个例子，如何将一个spring-boot项目简单容器化，如果你从未操作过，可以动手自己实现，或者仔细阅读这篇文章<a href="https://blog.csdn.net/u010046908/article/details/56008445" target="_blank" rel="noopener">第一个 spring Boot 应用通过Docker 来实现构建、运行、发布</a>。你可能发现如果需要把一个java项目容器化这是一个麻烦和相对复杂的过程，首先你需要编写dockerfile，然后在build dockefile，如过需要push到registries，还需要经过push操作。虽然build和push还是非常简单得。但是写一个dockerfile真的比较麻烦，学习成本也高，看看官网<a href="https://docs.docker.com/engine/reference/builder/#usage" target="_blank" rel="noopener">Dockerfile reference</a>就不想学了。那么有没有简单得办法呢，记住几个简单得命令就可以运行了，如同</p><blockquote><p>mvn spring-boot:run</p></blockquote><h2 id="这么简单得命令，这个时候jib出场了，他就是来完成这个伟大得使命。"><a href="#这么简单得命令，这个时候jib出场了，他就是来完成这个伟大得使命。" class="headerlink" title="这么简单得命令，这个时候jib出场了，他就是来完成这个伟大得使命。"></a>这么简单得命令，这个时候jib出场了，他就是来完成这个伟大得使命。</h2><p>如果你还没明白jib是用来做什么事情得，推荐你阅读<a href="http://www.infoq.com/cn/news/2018/07/google-opensource-Jib#" target="_blank" rel="noopener">谷歌开源Java镜像构建工具Jib</a>的前半部分，或者阅读<a href="https://github.com/GoogleContainerTools/jib" target="_blank" rel="noopener">jib Official：GoogleContainerTools/jib</a>。<br>接下来主要介绍具体如何使用(maven的方式)。<br>将java项目容器化push到registries<br>jib的引入非常简单，已maven plugin的方式集成到项目中，只需要在你的项目中引入下面代码即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.cloud.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jib-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">from</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--base image--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span>&gt;</span>openjdk:alpine<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;image&gt;registry.cn-hangzhou.aliyuncs.com/m65536/jibtest&lt;/image&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--目标镜像registry地址，为了方便测试，你需要换成自己的地址，如果你的网络不好，可以选用国内加速器，比如阿里云的--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span>&gt;</span>registry.hub.docker.com/moxingwang/jibtest<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这只是一个最简单的配置，比如registry认证配置，jvm配置等等，可以参考github jib详细说明<a href="https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#from-object" target="_blank" rel="noopener">jib/jib-maven-plugin/</a>。</p><h2 id="构建你的镜像"><a href="#构建你的镜像" class="headerlink" title="构建你的镜像"></a>构建你的镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn compile jib:build</span><br></pre></td></tr></table></figure><p>可能你刚刚运行玩这一步就出现错误，提示Unauthorized，不用担心，这个命令需要把构建出来的image commit并且push到你远程的registry（我这里是registry.hub.docker.com），你可以按照【常见错误1】的方法解决问题。<br>如果你的网速慢一点可能会在最后步骤’Finalizing…’,不过没有关系，稍微多等一会就ok，直到’BUILD SUCCESS’出现。最终一个完整的java project被实例化成镜像并且push到了registry里。接下来你可以测试刚刚完成push的镜像。<br>打开<a href="https://hub.docker.com/" target="_blank" rel="noopener">hub.docker.com/</a>,你会发现你的image已经构建成功。</p><h2 id="docker使用镜像"><a href="#docker使用镜像" class="headerlink" title="docker使用镜像"></a>docker使用镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p8080:8080 registry.hub.docker.com/moxingwang/jibtest</span><br></pre></td></tr></table></figure><p>一个spring-boot的image这样就被启动成功了。本文示例demo中集成了swagger-iu, 项目启动成功后我们可以通过<a href="http://localhost:8080/sw/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/sw/swagger-ui.html</a>访问，可以成功在浏览器打开swagger。</p><p>把镜像直接构建到本地docker中<br>使用这种构建方式，首先你要确保本已经安装docker并且环境变量都配置正确，因为这种方式jib依赖docker 命令执行，你还需要保证已经启动服务（在terminal中执行 docker –version 能够正确返回）。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn compile jib:dockerBuild</span><br></pre></td></tr></table></figure></p><p>接下来直接操作，首先查看本地已有images<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker iamges</span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight plain"><figcaption><span>compile jib:dockerBuild```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以看到本地image已经build成功。可以直接启动使用</span><br></pre></td></tr></table></figure></p><p>docker run -it –rm -p8080:8080 moxingwang/jibtest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">启动成功后同样可以直接访问[http://localhost:8080/sw/swagger-ui.htmlswagger](http://localhost:8080/sw/swagger-ui.htmlswagger)页面。</span><br><span class="line"></span><br><span class="line">## 常见错误</span><br><span class="line"></span><br><span class="line">1. Failed to execute goal com.google.cloud.tools:jib-maven-plugin:0.9.6:build (default-cli) on project jib: Build image failed, perhaps you should set a credential helper name with the configuration &apos;&apos; or set credentials for &apos;registry.hub.docker.com&apos; in your Maven settings: Unauthorized for registry.hub.docker.com/moxingwang/jibtest: 401 Unauthorized</span><br><span class="line"></span><br><span class="line">当你从私有的registries pull或者push的时候需要认证机制。阅读官方说明按照步骤操作即可。[Authentication Methods](https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin/README.md)。</span><br><span class="line">如果帮你本机已经按照docker，那么操作更简单，可以通过docker命令直接登陆registries，然后继续其他jib的操作。</span><br><span class="line"></span><br><span class="line">## registry.hub.docker.com</span><br></pre></td></tr></table></figure></p><p>docker login –username=你的hub.docker的用户名 registry.hub.docker.com<br>registry.cn-hangzhou.aliyuncs.com<br>docker login –username=阿里云docker用户名 registry.cn-hangzhou.aliyuncs.com<br><code>`</code></p><hr><p>作者：m65536<br>链接：<a href="https://juejin.im/post/5b4e9c316fb9a04fa01d39d6" target="_blank" rel="noopener">https://juejin.im/post/5b4e9c316fb9a04fa01d39d6</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IaaS、SaaS 和 PaaS 的区别</title>
      <link href="/2018/08/01/%E7%A7%91%E6%99%AE-IaaS%E3%80%81SaaS-%E5%92%8C-PaaS-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/08/01/%E7%A7%91%E6%99%AE-IaaS%E3%80%81SaaS-%E5%92%8C-PaaS-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<ul><li><strong>IaaS</strong>是卖笔记本电脑的，</li><li><strong>PaaS</strong>卖操作系统的（比如windows），</li><li><strong>SaaS</strong>是卖应用程序的（比如Office等办公软件，普通小白用户能直接用的东西）</li></ul><p>从售卖数量上来说，卖笔记本本身的<strong>IaaS</strong>大于卖电脑操作系统的<strong>PaaS</strong>，但是利润率正好反过来，卖操作系统的<strong>PaaS</strong>更赚钱，所以微软的头号摇钱树就是office；</p><p>一个行业刚兴起的时候，一般是卖硬件的最赚钱。打个比方，智能手机刚兴起的时候是苹果最赚钱，其次赚钱的是卖操作系统的，例如小米等，最不赚钱的是卖应用程序的比如腾讯；</p><p>但是随着时间推移和行业的发展，利润中心会逐步向后移，市场成熟后，利润都集中到应用程序（<strong>SaaS</strong>）上，因为应用程序才是普通用户最终接触到，直接能使用的。</p><p>大概是酱紫。</p><p>上面这个比喻使用和计算机领域相关的东西来比喻的，如果用日常生活中的东西来比喻的话：</p><ul><li>IaaS是政府出租土地的，可以种地，可以盖楼，相当于出租资源；</li><li>PaaS是地产开发商，盖了楼卖毛坯房的，相当于有了应用的架子，但是并不能给最终用户使用；</li><li>SaaS是装修队，根据用户需求把房子装修出来给不同需求的人住，面向最终用户。</li></ul><p>你也可以想象一下中国地产的发展情况，20世纪时候成片出租土地最赚钱，21世纪初的时候是地产开放商最赚钱的时候，而现在房产泡沫没有之前那么繁荣了，利润点也就慢慢往诸如房产交易商、软装公司转移了~</p><blockquote><p>原文来自 <a href="https://www.zhihu.com/question/20387284" target="_blank" rel="noopener">知乎</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修改形参对象值，会影响实参</title>
      <link href="/2018/07/21/backEnd-%E4%BF%AE%E6%94%B9%E5%BD%A2%E5%8F%82%E5%AF%B9%E8%B1%A1%E5%80%BC%EF%BC%8C%E4%BC%9A%E5%BD%B1%E5%93%8D%E5%AE%9E%E5%8F%82/"/>
      <url>/2018/07/21/backEnd-%E4%BF%AE%E6%94%B9%E5%BD%A2%E5%8F%82%E5%AF%B9%E8%B1%A1%E5%80%BC%EF%BC%8C%E4%BC%9A%E5%BD%B1%E5%93%8D%E5%AE%9E%E5%8F%82/</url>
      <content type="html"><![CDATA[<blockquote><p>这个问题是在写工具类的时候碰到的，<br>有时候为了方便，直接操作形参，可能会导致函数外实参的改变，<br>然后bug就这样诞生了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Timestamp now = <span class="keyword">new</span> Timestamp(System.currentTimeMillis());</span><br><span class="line">System.out.println(<span class="string">"now:: "</span> + now.toString());</span><br><span class="line">Timestamp nextTime = DateUtils.getNextTime(now, Calendar.MONDAY, <span class="number">2</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">31</span>, TaskTypeEnums.EVERY_MONTH.getCode());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"now after:: "</span> + now.toString());</span><br><span class="line"><span class="comment">// 周一，2号，12：23：31，每月</span></span><br><span class="line">System.out.println(<span class="string">"nextTime:: ="</span>+nextTime.toString());</span><br></pre></td></tr></table></figure><p>打印出来的结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">now:: 2018-07-21 13:52:29.2</span><br><span class="line">now after:: 2018-07-02 12:23:31.2</span><br><span class="line">nextTime:: =2018-07-02 12:23:31.2</span><br></pre></td></tr></table></figure></p><h2 id="提供一段伪代码"><a href="#提供一段伪代码" class="headerlink" title="提供一段伪代码"></a>提供一段伪代码</h2><blockquote><p>当形参是对象时，形参指向的是实参的堆地址值，直接在函数中操作形参自然会影响到实参<br>但是，当形参是基础类型时，实参值不受影响</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Class Monitor&#123;</span><br><span class="line"><span class="keyword">private</span> String cpuUsed;</span><br><span class="line"><span class="function">String <span class="title">getCpuUsed</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cpuUsed;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">2</span>;</span><br><span class="line">Monitor a = <span class="keyword">new</span> Monitor();</span><br><span class="line">flagObject.setCpuUsed(<span class="string">"11"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"before::flag:: "</span>+flag+<span class="string">",a:: "</span>+a.getCpuUsed());</span><br><span class="line"></span><br><span class="line">aaa(flag,a);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"after::flag:: "</span>+flag+<span class="string">",a:: "</span>+a.getCpuUsed());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">aaa</span><span class="params">(<span class="keyword">int</span> a, Monitor a1)</span></span>&#123;</span><br><span class="line">  a+=<span class="number">1</span>;</span><br><span class="line">  a1.setCpuUsed(<span class="string">"22"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before::flag:: <span class="number">2</span>,a::<span class="number">11</span> </span><br><span class="line">after::flag:: <span class="number">2</span>,a::<span class="number">22</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> backEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backEnd 编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot多数据源整合</title>
      <link href="/2018/07/19/backEnd-spring-Spring-Boot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E6%95%B4%E5%90%88/"/>
      <url>/2018/07/19/backEnd-spring-Spring-Boot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E6%95%B4%E5%90%88/</url>
      <content type="html"><![CDATA[<h1 id="如何用Spring-Boot-整合-MyBatis-连接多种数据源-amp-Spring-Data-Jpa-如何连接多种数据源"><a href="#如何用Spring-Boot-整合-MyBatis-连接多种数据源-amp-Spring-Data-Jpa-如何连接多种数据源" class="headerlink" title="如何用Spring Boot 整合 MyBatis 连接多种数据源 &amp; Spring Data Jpa 如何连接多种数据源"></a>如何用Spring Boot 整合 MyBatis 连接多种数据源 &amp; Spring Data Jpa 如何连接多种数据源</h1><blockquote><p>引入依赖项公用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')</span><br><span class="line">compile('org.springframework.boot:spring-boot-starter-web')</span><br><span class="line">runtime('mysql:mysql-connector-java')</span><br><span class="line">runtime('com.microsoft.sqlserver:mssql-jdbc')</span><br><span class="line">testCompile('org.springframework.boot:spring-boot-starter-test')</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="配置数据源公用"><a href="#配置数据源公用" class="headerlink" title="配置数据源公用"></a>配置数据源公用</h2><blockquote><p>新建数据源配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"mysqlDataSource"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"datasource.mysql"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">mysqlDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"mssqlDataSource"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"datasource.mssql"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">mssqlDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="application-properties配置数据源"><a href="#application-properties配置数据源" class="headerlink" title="application.properties配置数据源"></a>application.properties配置数据源</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">datasource.mysql.url=jdbc:mysql://xx?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span><br><span class="line">datasource.mysql.username=xx</span><br><span class="line">datasource.mysql.password=xx</span><br><span class="line">datasource.mysql.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">datasource.mssql.url=jdbc:sqlserver://xx;databasename=xx</span><br><span class="line">datasource.mssql.username=xx</span><br><span class="line">datasource.mssql.password=xx</span><br><span class="line">datasource.mssql.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br></pre></td></tr></table></figure><hr><h2 id="MyBatis配置"><a href="#MyBatis配置" class="headerlink" title="MyBatis配置"></a>MyBatis配置</h2><h3 id="mssql配置"><a href="#mssql配置" class="headerlink" title="mssql配置"></a>mssql配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"指定mssql repository包名"</span>, sqlSessionFactoryRef = <span class="string">"mssqlSessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MssqlConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"mssqlDataSource"</span>)</span><br><span class="line"><span class="keyword">private</span> DataSource mssqlDataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"mssqlTransactionManager"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(mssqlDataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"mssqlSessionFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">clusterSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> SqlSessionFactoryBean sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">sessionFactory.setDataSource(mssqlDataSource);</span><br><span class="line">sessionFactory.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:config/mybatis/mapper/*.xml"</span>));</span><br><span class="line"><span class="keyword">return</span> sessionFactory.getObject();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"指定mysql repository包名"</span>, sqlSessionFactoryRef = <span class="string">"mysqlSessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"mysqlDataSource"</span>)</span><br><span class="line"><span class="keyword">private</span> DataSource mysqlDataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"mysqlTransactionManager"</span>)</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(mysqlDataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"mysqlSessionFactory"</span>)</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">clusterSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> SqlSessionFactoryBean sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">sessionFactory.setDataSource(mysqlDataSource);</span><br><span class="line">sessionFactory.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:config/mybatis/mapper/*.xml"</span>));</span><br><span class="line"><span class="keyword">return</span> sessionFactory.getObject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Data-Jpa配置"><a href="#Spring-Data-Jpa配置" class="headerlink" title="Spring Data Jpa配置"></a>Spring Data Jpa配置</h2><h3 id="mssql配置-1"><a href="#mssql配置-1" class="headerlink" title="mssql配置"></a>mssql配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(entityManagerFactoryRef=<span class="string">"entityManagerFactorySecondary"</span>,</span><br><span class="line">transactionManagerRef=<span class="string">"transactionManagerSecondary"</span>,</span><br><span class="line">basePackages= &#123; <span class="string">"指定mssql repository包名"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MSSqlConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"mssqlDataSource"</span>)</span><br><span class="line"><span class="keyword">private</span> DataSource mssqlDataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"entityManagerSecondary"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> entityManagerFactorySecondary(builder).getObject().createEntityManager();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactorySecondary"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactorySecondary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.dataSource(mssqlDataSource).properties(getVendorProperties(mssqlDataSource))</span><br><span class="line"><span class="comment">//设置实体类所在位置</span></span><br><span class="line">.packages(<span class="string">"指定实体路径"</span>)</span><br><span class="line">.persistenceUnit(<span class="string">"mssqlPersistenceUnit"</span>)</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map <span class="title">getVendorProperties</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> jpaProperties.getHibernateProperties(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"transactionManagerSecondary"</span>)</span><br><span class="line"><span class="function">PlatformTransactionManager <span class="title">transactionManagerSecondary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mysql配置"><a href="#Mysql配置" class="headerlink" title="Mysql配置"></a>Mysql配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(entityManagerFactoryRef = <span class="string">"entityManagerFactoryPrimary"</span>,</span><br><span class="line">transactionManagerRef = <span class="string">"transactionManagerPrimary"</span>,basePackages = &#123;<span class="string">"指定mysql repository包名"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"mysqlDataSource"</span>)</span><br><span class="line"><span class="keyword">private</span> DataSource mysqlDataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"entityManagerPrimary"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactoryPrimary"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryPrimary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.dataSource(mysqlDataSource).properties(getVendorProperties(mysqlDataSource))</span><br><span class="line"><span class="comment">//设置实体类所在位置</span></span><br><span class="line">.packages(<span class="string">"指定实体路径"</span>)</span><br><span class="line">.persistenceUnit(<span class="string">"mysqlPersistenceUnit"</span>)</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map <span class="title">getVendorProperties</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> jpaProperties.getHibernateProperties(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"transactionManagerPrimary"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManagerPrimary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键注解的解析"><a href="#关键注解的解析" class="headerlink" title="关键注解的解析"></a>关键注解的解析</h2><blockquote><ol><li>@Configuration</li></ol></blockquote><p>相当于传统的xml配置文件，项目中如果需要依赖第三方的xml文件，仍然建议通过此配置类作为项目的配置主类，通过@ImportResource注解加载xml配置文件。</p><blockquote><ol start="2"><li>@Bean</li></ol></blockquote><p>该注解告诉Spring这个方法将会返回一个对象，该对象要注册为Spring应用上下文中的bean</p><blockquote><ol start="3"><li>@ConfigurationProperties</li></ol></blockquote><p>读取配置文件信息，读取并自动封装成实体类。这样在代码里使用更加方便。@Value需要单独建立xxxProperties进行映射，效果差不多</p><blockquote><ol start="4"><li>@Primary</li></ol></blockquote><p>当系统里面出现多个数据源的时候，需要进行人为指定主数据源</p><blockquote><ol start="5"><li>@EnableTransactionManagement</li></ol></blockquote><p>Spring Boot使用事务非常简单，使用该注解开启事务支持，然后在访问数据库的Service方法上添加注解@Transactional便可。</p><blockquote><ol start="6"><li>@MapperScan</li></ol></blockquote><p>在数据持久层使用MyBatis时候，使用该注解配置扫描Mapper位置</p><blockquote><ol start="7"><li>@Autowired</li></ol></blockquote><p>使用该注解进行自动注入，但是Spring 容器中匹配候选Bean数目必须有且仅有一个。当找不到一个匹配的时候，Spring容器会抛出异常</p><blockquote><ol start="8"><li>@Qualifier</li></ol></blockquote><p>在当使用@Autowired产生歧义的时候，可以使用该注解指定对应的name来消除歧义</p><blockquote><ol start="9"><li>EnableJpaRepositories</li></ol></blockquote><p>该注解开启对Spring Data JPA Repository的支持</p><p>通过以上的配置，项目就可以同时访问多种数据源了。</p><p>赶紧记下，别待会儿忘了</p>]]></content>
      
      <categories>
          
          <category> java Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java调用Python</title>
      <link href="/2018/07/12/%E7%BC%96%E7%A8%8B-Java%E8%B0%83%E7%94%A8Python/"/>
      <url>/2018/07/12/%E7%BC%96%E7%A8%8B-Java%E8%B0%83%E7%94%A8Python/</url>
      <content type="html"><![CDATA[<p>祝，获得一项新技能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java 调用 Python</span></span><br><span class="line"><span class="comment"> * test for chengzhan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> anan</span></span><br><span class="line"><span class="comment"> * Created on 2018/7/12.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeByRuntime</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">    String exe = <span class="string">"python3"</span>; <span class="comment">// 执行命令</span></span><br><span class="line">    String command = <span class="string">"./dtcTest.py"</span>; <span class="comment">//执行文件</span></span><br><span class="line">    String num1 = <span class="string">"1"</span>; <span class="comment">// 入参</span></span><br><span class="line">    String num2 = <span class="string">"2"</span>; <span class="comment">// 入参</span></span><br><span class="line">    System.out.println(<span class="string">"11111111111"</span>);</span><br><span class="line">    String[] cmdArr = <span class="keyword">new</span> String[] &#123;exe, command, num1, num2&#125;;</span><br><span class="line">    Process process;</span><br><span class="line"></span><br><span class="line">    process = Runtime.getRuntime().exec(cmdArr); <span class="comment">// 相当于在部署机中执行了：python3 ./dtcTest.py 1 2  返回的是输出结果</span></span><br><span class="line"></span><br><span class="line">    InputStream is = process.getInputStream();  <span class="comment">//输出内容以 “流” 形式存在</span></span><br><span class="line">    String str;</span><br><span class="line"></span><br><span class="line">    InputStreamReader dat=<span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">    BufferedReader bin=<span class="keyword">new</span> BufferedReader(dat);</span><br><span class="line">    <span class="keyword">while</span>((str=bin.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">    process.waitFor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>软件为何会有那么多权限</title>
      <link href="/2018/07/03/%E7%A7%91%E6%99%AE-%E8%BD%AF%E4%BB%B6%E4%B8%BA%E4%BD%95%E4%BC%9A%E6%9C%89%E9%82%A3%E4%B9%88%E5%A4%9A%E6%9D%83%E9%99%90/"/>
      <url>/2018/07/03/%E7%A7%91%E6%99%AE-%E8%BD%AF%E4%BB%B6%E4%B8%BA%E4%BD%95%E4%BC%9A%E6%9C%89%E9%82%A3%E4%B9%88%E5%A4%9A%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<blockquote><p>行业内的变革并不是由于行业内的人来改变的，往往是由外来者来改变的。</p></blockquote><p>这段是由oppo find X 和 vivo NEX 的弹出式摄像头引发的。</p><p>前些日子，find X 和 NEX 的用户发现，开启某些软件时候，摄像头会弹出并立马缩回：</p><ul><li>QQ浏览器在启动时调用了前置摄像头</li><li>百度输入法调用了麦克风<br>这种未提醒使用者就调用了设备，涉及到隐私问题。</li></ul><p>其实这几年社交，直播类的发展，渐渐减弱了人们面对摄像头的敏感度。<br>隐私问题严重性一直存在，大家都知道，只是无奈，不给权限就得不到该软件带来的便利。<br>加上隐私泄露带来的后果给受害者没有带来直接伤害，于是侥幸心理的人就多了起来。</p><h2 id="这里有个值得关注的点"><a href="#这里有个值得关注的点" class="headerlink" title="这里有个值得关注的点"></a>这里有个值得关注的点</h2><p>其实当开发者开发的一个日历软件，并不需要什么权限，可当它上架到各个软件市场的时候，这些软件市场会要求开发者：<br>程序必须用软件市场提供的市场专用的程序包进行二次封装。</p><p>当打开从软件市场上下载的程序，程序启动的画面中会出现几个小字：“XXX市场首发专版”，开发者们表示，这种软件二次封装包<br>里面，通常包含着各种各样的权限。</p><p>假如有机会的话，是可以到软件开发者自己的官方网站上下载的，一方面是权限的问题，另一方面是软件开发者在市场里面上架软件，每个市场是要分成的，一般是30-40%不等。</p>]]></content>
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 搭建过程</title>
      <link href="/2018/06/28/%E6%90%AD%E5%BB%BA-Hexo%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/06/28/%E6%90%AD%E5%BB%BA-Hexo%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="Hexo的搭建"><a href="#Hexo的搭建" class="headerlink" title="Hexo的搭建"></a>Hexo的搭建</h1><blockquote><p>A fast, simple &amp; powerful blog framework<br>一个快速、简洁、强大的静态博客框架。</p></blockquote><p>根据以下官网wiki安装即可<br><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Nodejs</a><br><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a><br><a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">Hexo</a></p><h2 id="安装Nodejs，git"><a href="#安装Nodejs，git" class="headerlink" title="安装Nodejs，git"></a>安装Nodejs，git</h2><p>略</p><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h3 id="安装-初始化-hexo"><a href="#安装-初始化-hexo" class="headerlink" title="安装/初始化 hexo"></a>安装/初始化 hexo</h3><p>之后打开终端，使用npm安装hexo，需要root权限进行某些文件的写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><p>博客初始化，hexo会初始化文件夹（没有会自己创建），博客所有内容将放在改文件夹中。<br>初始化完毕后，进入该文件夹中执行npm install对npm模块进行初始化安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init dirName #eg:hexo init H2O2</span><br><span class="line">cd dirName</span><br><span class="line">npm install #对dirName进行nodejs库的安装（用于后续插件安装）</span><br></pre></td></tr></table></figure></p><p>之后打开刚才的文件夹，会看到这样的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml     //hexo配置文件</span><br><span class="line">├── node_modules     //node.js运行库</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds     //markdown模板</span><br><span class="line">├── source     //资源文件夹</span><br><span class="line">└── themes     //主题</span><br></pre></td></tr></table></figure></p><p>试着运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>用浏览器打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>hexo编译的时候会出现报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure></p><p>这是模块报错，npm install 重装一遍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --no-optional</span><br></pre></td></tr></table></figure></p><p>如果是墙的问题导致安装不成功，切换淘宝镜像源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">npm install hexo --no-optional</span><br></pre></td></tr></table></figure></p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;文章名称&apos;</span><br></pre></td></tr></table></figure><p>之后就会在 <strong>source/_posts/</strong>生成对应的md文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">date: 2016-03-05 14:56:52</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>多标签的写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line"></span><br><span class="line">- tag1</span><br><span class="line">- tag2</span><br><span class="line">- tag3</span><br></pre></td></tr></table></figure></p><h3 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h3><p>hexo默认的主题是<strong>landscape</strong>，主题放在themes文件夹中，之后在hexo的配置文件_config.yml中将theme后的名称改成想更改的主题名称即可。主题的配置因主题而异，在主题中同样有一个_config.yml文件，是配置主题设置的，不要与hexo的配置文件弄混。</p><h3 id="config-yml配置文件"><a href="#config-yml配置文件" class="headerlink" title="_config.yml配置文件"></a><strong>_config.yml</strong>配置文件</h3><p>hexo的相关配置在这个文件中都可以配置，详细介绍一下</p><blockquote><p><a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">Docs</a><br> <a href="https://github.com/hexojs/hexo/" target="_blank" rel="noopener">Source</a></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Site        #网站基本信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>        <span class="comment">#网站名称</span></span><br><span class="line"><span class="attr">subtitle:</span>        <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span>        <span class="comment">#描述，会被搜索引擎抓取，分享文章的时候也会显示</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span>        <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span>        <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span>        <span class="comment">#时区，留空为系统默认时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL        #网站URL信息</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://yoursite.com</span>        <span class="comment">#网站URL</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span>        <span class="comment">#网站根目录，如果整个博客是一个网站的子目录，需要将根目录改为子目录的名称</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>        <span class="comment">#每篇文章的URL格式</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>        <span class="comment">#默认URL格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts        #默认新文章的名字</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>        <span class="comment">#默认文章布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab        #是否在新标签页打开链接</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span>        <span class="comment">#代码高亮设置</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>        <span class="comment">#代码高亮开关</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span>        <span class="comment">#是否显示行号</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span>        <span class="comment">#是否自动判断语言</span></span><br><span class="line"><span class="attr">  tab_replace:</span>        <span class="comment">#用空格替换tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag        #目录与标签设置</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format        #日期设置</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span>        <span class="comment">#日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span>        <span class="comment">#时间格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span>        <span class="comment">#每页的文章数目</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span>        <span class="comment">#页面路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions        #扩展配置，配置主题以及hexo插件信息</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span>        <span class="comment">#主题名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment        #发布相关配置，需要安装相应插件</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span></span><br></pre></td></tr></table></figure><h3 id="生成网站文件"><a href="#生成网站文件" class="headerlink" title="生成网站文件"></a>生成网站文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>之后会生成一个public文件夹，文件夹中的文件即为生成的网页文件。</p><h3 id="将博客部署到github"><a href="#将博客部署到github" class="headerlink" title="将博客部署到github"></a>将博客部署到github</h3><p>按照github pages的说明配置，申请一个github帐号，之后新建项目，注意项目名称为用户名.github.io否则之后是无法访问的，一个账户只能建一个github pages。之后将之前的public文件夹里的内容都同步到这个项目的master分支，之后浏览器访问用户名.github.io就能看到hexo的博客界面了。</p><p>连接github同步可以直接使用git命令或者github客户端，但是这样都需要 <strong>hexo generate</strong> 之后再使用git，还是有些麻烦。hexo-deployer-git是hexo的一个插件，可以直接使用hexo命令在生成博客文件后部署到github上。<br>（此处关于github注册，连接，创建仓库不讲，自行搜索）</p><h4 id="首先进入到博客文件夹，安装hexo-deployer-git"><a href="#首先进入到博客文件夹，安装hexo-deployer-git" class="headerlink" title="首先进入到博客文件夹，安装hexo-deployer-git"></a>首先进入到博客文件夹，安装hexo-deployer-git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 博客文件夹</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后在博客的配置文件_config.yml（注意是hexo工作目录，不是主题中的）中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Zakariyya/zakariyya.github.io.git # 这是我的仓库，请自行修改对应的</span><br><span class="line">  branch: master  #博客生成网页推送的分支，请于源码（很多个.md文件）区分开</span><br></pre></td></tr></table></figure></p><p>git地址在git主页中可以看到，注意选择ssh的地址</p><h4 id="在本地生成ssh密钥-做连接github用"><a href="#在本地生成ssh密钥-做连接github用" class="headerlink" title="在本地生成ssh密钥(做连接github用)"></a>在本地生成ssh密钥(做连接github用)</h4><blockquote><p>这里只简单讲解ssh密钥，复杂配置自行搜索</p></blockquote><h5 id="git-bash运行生成密钥对"><a href="#git-bash运行生成密钥对" class="headerlink" title="git bash运行生成密钥对"></a>git bash运行生成密钥对</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><ul><li>windows用户：<strong>C:/用户/.ssh</strong></li><li>linux用户：<strong>~/.ssh</strong><br>进入以上路径后可以看到<strong>id_rsa</strong>和<strong>id_rsa.pub</strong>两个文件，分别是私钥和公钥，下面就不用多解释了。此时还没有<strong>know_hosts</strong>文件，使用ssh连接后才会生成。</li></ul><h5 id="读取生成密钥的公钥：id-rsa-pub"><a href="#读取生成密钥的公钥：id-rsa-pub" class="headerlink" title="读取生成密钥的公钥：id_rsa.pub"></a>读取生成密钥的公钥：id_rsa.pub</h5><p>把显示出来的内容复制下来，然后到github的网页上，进入到设置界面，找到ssh key，新建一个key，那刚才的内容粘贴进去。<br>添加之后测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>第一次使用ssh连接github会有提示，输入yes即可，之后如果出现success的字样说明连接正常，ssh配置成功。<br>现在就可以使用hexo-deployer-git插件了，方法很简单，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g  ##之后再使用</span><br><span class="line">hexo deploy  ##就可以自动部署了。</span><br></pre></td></tr></table></figure></p><h3 id="hexo短命令"><a href="#hexo短命令" class="headerlink" title="hexo短命令"></a>hexo短命令</h3><p>hexo支持短命令，使用起来不用输入太长的指令，只列出常用的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo s    //相当于hexo server在本机预览网页</span><br><span class="line">hexo g    //相当于hexo generate生成静态网页</span><br><span class="line">hexo d    //相当于hexo deploy部署网页到服务器</span><br><span class="line">hexo g -d    //hexo generate和hexo deploy的结合</span><br></pre></td></tr></table></figure></p><p>至此博客已经可以使用了。</p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo 搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot YML文件配置多环境</title>
      <link href="/2018/06/28/backEnd-spring-Spring-Boot-YML%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/06/28/backEnd-spring-Spring-Boot-YML%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h2 id="yml与properties"><a href="#yml与properties" class="headerlink" title="yml与properties"></a>yml与properties</h2><p>其实yml和properties文件是一样的原理，且一个项目上要么yml或者properties，二选一的存在。</p><p>推荐使用yml，更简洁。</p><h2 id="bootstrap与application"><a href="#bootstrap与application" class="headerlink" title="bootstrap与application"></a>bootstrap与application</h2><h3 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h3><p>这里主要是说明application和bootstrap的加载顺序。</p><blockquote><p>bootstrap.yml（bootstrap.properties）先加载<br>application.yml（application.properties）后加载<br>bootstrap.yml 用于应用程序上下文的引导阶段。</p></blockquote><p>bootstrap.yml 由父Spring ApplicationContext加载。<br>父ApplicationContext 被加载到使用 application.yml 的之前。</p><h3 id="配置区别"><a href="#配置区别" class="headerlink" title="配置区别"></a>配置区别</h3><p>bootstrap.yml 和application.yml 都可以用来配置参数。</p><p>bootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。<br>application.yml 可以用来定义应用级别的，如果搭配 <strong>spring-cloud-config</strong> 使用 application.yml 里面定义的文件可以实现动态替换。<br>使用<strong>Spring-Cloud-Config-Server</strong>时，应在 bootstrap.yml 中指定：</p><p>spring.application.name<br>spring.cloud.config.server.git.uri<br>一些加密/解密信息<br>实例：</p><p>bootstrap.yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">service-a</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://127.0.0.1:8888</span></span><br><span class="line"><span class="attr">      fail-fast:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">$&#123;CONFIG_SERVER_PASSWORD:password&#125;</span></span><br><span class="line"><span class="attr">      retry:</span></span><br><span class="line"><span class="attr">        initial-interval:</span> <span class="number">2000</span></span><br><span class="line"><span class="attr">        max-interval:</span> <span class="number">10000</span></span><br><span class="line"><span class="attr">        multiplier:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">        max-attempts:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="两种配置方式-1：在一个yml文件中，2：在多个yml文件中"><a href="#两种配置方式-1：在一个yml文件中，2：在多个yml文件中" class="headerlink" title="两种配置方式 1：在一个yml文件中，2：在多个yml文件中"></a>两种配置方式 1：在一个yml文件中，2：在多个yml文件中</h2><h3 id="一个yml文件"><a href="#一个yml文件" class="headerlink" title="一个yml文件"></a>一个yml文件</h3><p>application.yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发环境配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试环境配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">stg</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产环境配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prd</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1002</span></span><br></pre></td></tr></table></figure></p><h3 id="多个yml文件"><a href="#多个yml文件" class="headerlink" title="多个yml文件"></a>多个yml文件</h3><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>application-dev.yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure></p><p>application-stg.yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1001</span></span><br></pre></td></tr></table></figure></p><p>application-prd.yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1002</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> java Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>arch开机自启动脚本</title>
      <link href="/2018/04/23/%E6%90%AD%E5%BB%BA-%E7%BF%BB%E5%A2%99-arch-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2018/04/23/%E6%90%AD%E5%BB%BA-%E7%BF%BB%E5%A2%99-arch-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>在写启动脚本之前，需要写一个service：</p><ol><li><p>首先切换用户到root，然后进入/etc/systemd/system目录</p></li><li><p>创建一个.service文件，名称顺便取，本例中为<strong>AutoExec.service</strong></p></li><li><p>设置权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 644 AutoExec.service</span><br></pre></td></tr></table></figure></li><li><p>添加以下内容到AutoExec.service</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=AutoExec</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/root/AutoExec.sh</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ol start="5"><li><p>上面的ExecStart=/root/AutoExec.sh表明开机会执行/root/AutoExec.sh，那么命令写在这里面就行了，<br>当然，文件是可以任意指定的，改为/etc/rc.local之类的都没问题。</p></li><li><p>连接到multi-user.target.wants：<br>ln -s AutoExec.service multi-user.target.wants/<br>（注：这一步是为了让这个服务开机自启动，效果和systemctl enable AutoExec.service是等价的）</p></li><li><p>创建/root/AutoExec.sh，向里面写入想要开机启动的命令，</p></li></ol><p>并设置权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 744 /root/AutoExec.sh</span><br></pre></td></tr></table></figure></p><p>（文件路径和文件名可随便改，但一定要添加可执行权限）</p><p>以上就设置完了，<strong>systemctl start AutoExec.service</strong>，就能看到<strong>AutoExec.sh</strong>里的命令执行了，当然，每次开机也是自动执行的。</p>]]></content>
      
      <categories>
          
          <category> 翻墙 Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 Shadowsocks arch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shadowsocks搭建过程(客户端)</title>
      <link href="/2018/04/23/%E6%90%AD%E5%BB%BA-%E7%BF%BB%E5%A2%99-shadowsocks%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B-%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2018/04/23/%E6%90%AD%E5%BB%BA-%E7%BF%BB%E5%A2%99-shadowsocks%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B-%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      <content type="html"><![CDATA[<p>这里着重介绍 <strong>macOS</strong>上的配置</p><blockquote><p>链接扩展<br><a href="https://shadowsocks.org/en/index.html" target="_blank" rel="noopener">shadowsocks</a><br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9" target="_blank" rel="noopener">shadowsocks-windows</a><br><a href="https://github.com/shadowsocks/shadowsocks-libev/" target="_blank" rel="noopener">shadowsocks-libev</a><br><a href="https://v2ray.com" target="_blank" rel="noopener">v2ray</a><br><a href="https://vultr.com" target="_blank" rel="noopener">vultr</a></p></blockquote><h2 id="一些通用的配置"><a href="#一些通用的配置" class="headerlink" title="一些通用的配置"></a>一些通用的配置</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>填IP和域名都可以，不过shadowsocks服务器域名的解析应该用的是本地的DNS（毕竟还没有连上代理），所以尽量填IP吧。</p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>服务器端如果是自己搭的，尽量把端口设置为80或443这种常用端口，因为有的网络环境会限制一些端口，8080，25这种非HTTP端口也可以。</p><h3 id="算法-amp-密码"><a href="#算法-amp-密码" class="headerlink" title="算法&amp;密码"></a>算法&amp;密码</h3><p>现在所有平台的客户端都支持AEAD加密算法，推荐AEAD。另外shadowsocks基本上没有什么多用户的概念，如果是多人使用多个密码的话一般就是开多个端口，每个端口设置一个密码。</p><h3 id="全局-amp-自动代理"><a href="#全局-amp-自动代理" class="headerlink" title="全局 &amp; 自动代理"></a>全局 &amp; 自动代理</h3><p>全局代理指全局的SOCKS代理，所有流量都走代理端口。</p><p>自动代理一般使用PAC文件，黑名单指在黑名单内域名走代理，不在黑名单内的不走代理；</p><p>白名单相反，只有在白名单内的域名不走代理。如果代理流量有限制，最好使用黑名单，不限制流量的话，白名单更好一些。</p><p>黑名单一般都是用著名的<a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="noopener">gfwlist</a>，白名单个人推荐<a href="https://github.com/R0uter/gfw_domain_whitelist" target="_blank" rel="noopener">这个</a>。</p><h2 id="Android、Windows、OpenWrt-LEDE端"><a href="#Android、Windows、OpenWrt-LEDE端" class="headerlink" title="Android、Windows、OpenWrt/LEDE端"></a>Android、Windows、OpenWrt/LEDE端</h2><p>参考<a href="https://cokebar.info/archives/978" target="_blank" rel="noopener">这篇</a></p><h2 id="macOS端"><a href="#macOS端" class="headerlink" title="macOS端"></a>macOS端</h2><p>github上的GUI版本不怎么能满足我的使用需求，所以我用的是shadowocks-libev。</p><h3 id="安装shadowsocks-libev"><a href="#安装shadowsocks-libev" class="headerlink" title="安装shadowsocks-libev"></a>安装shadowsocks-libev</h3><p>使用<a href="https://brew.sh/" target="_blank" rel="noopener">homebrew</a>安装即可，没必要手动编译源码。没安装 homebrew 的用户，需要先到 App Store 下载 <strong>Xcode</strong>，之后在终端运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>其实就是运行一个ruby脚本。用homebrew来管理macOS上的命令行工具是不错的选择，软件包更新也跟得上。安装好homebrew后就可以安装shadowsocks-libev：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local$ brew update    #更新homebrew软件源</span><br><span class="line">local$ brew install shadowsocks-libev</span><br></pre></td></tr></table></figure><h3 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h3><p>安装之后我们会看到终端中提示这样的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">To have launchd start shadowsocks-libev now and restart at login:</span><br><span class="line">  brew services start shadowsocks-libev</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.json</span><br></pre></td></tr></table></figure><p>这是告诉我们开机自动运行shadowsocks的方法，和手动运行的方法。开机自动运行使用的是homebrew提供的服务，相当于执行了下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local$ ss-local -c /usr/local/etc/shadowsocks-libev.json</span><br></pre></td></tr></table></figure><p>ss-local是shadowsocks-libev中的客户端命令。可以看出，homebrew安装shadowsocks时<br>在/usr/local/etc/路径下建立了配置文件，供开机启动shadowsocks服务用。<br>使用vim或是文本编辑器都可以，这可是macOS，不是没有GUI的Linux VPS了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;server_ip&quot;,</span><br><span class="line">    &quot;server_port&quot;:8088,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;password&quot;,</span><br><span class="line">    &quot;timeout&quot;:5,</span><br><span class="line">    &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;,</span><br><span class="line">    &quot;mode&quot;:&quot;tcp_and_udp&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同服务器上的配置文件基本一至，不过多了一个local_port，<br>这是因为上面说的本地要开一个端口用于把流量转发到shadowsocks服务器，<br>所以要显式地写明端口，如果不写会默认1080端口。之后就可以启用shadowsocks的homebrew服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local$ brew services start shadowsocks-libev</span><br></pre></td></tr></table></figure><p>可以看到成功的提示信息。</p><h2 id="全局代理"><a href="#全局代理" class="headerlink" title="全局代理"></a>全局代理</h2><p>本地开启socks代理，在系统设置里填上端口就可以使用全局代理。</p><h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><p>当然，平时我们不会使用全局代理的，所以接下来要配置上面提到过的PAC自动代理。</p><p>首先下载<a href="https://github.com/R0uter/gfw_domain_whitelist" target="_blank" rel="noopener">域名白名单</a>，<br>要使用的是里面的PAC文件。</p><p>如果本地代理端口不是默认的1080，下好的PAC文件还需要编辑一下脚本上使用的socks端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var proxy = new Array( &quot;SOCKS5 127.0.0.1:port;&quot;)</span><br></pre></td></tr></table></figure><p>将代理端口改为我们上面设置的本地端口。</p><p>因为10.12开始macOS不允许使用本地文件路么作为PAC文件路径，<br>所以要把PAC文件放在网络环境下才可以正常使用，使用macOS自带的网页服务器即可。</p><p>将PAC文件复制到/Library/WebServer/Documents/目录下，之后启用网页服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local$ sudo apachectl start</span><br></pre></td></tr></table></figure><p>输入密码后，在浏览器中输入<a href="http://localhost可以看到It" target="_blank" rel="noopener">http://localhost可以看到It</a> works!字样即为启动成功，</p><p>接着在网络设置中自动代理的地址填写白名单的地址即可。</p><h3 id="代理切换"><a href="#代理切换" class="headerlink" title="代理切换"></a>代理切换</h3><p>可以在网络设置添加一个网络位置，通过切换网络位置来切换代理方式，不过在切换网络位置的时候会断开wifi，显得不够优雅。使用networksetup命令来切换代理，这个命令实际上就相当于我们有网络没置中进行的设置的命令行形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 打开PAC</span><br><span class="line">local$ networksetup -setautoproxyurl Wi-Fi http://127.0.0.1:80/whitelist.pac</span><br><span class="line"></span><br><span class="line">#关闭PAC</span><br><span class="line">local$ networksetup -setautoproxystate Wi-Fi off</span><br><span class="line"></span><br><span class="line"># 打开socks</span><br><span class="line">local$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 on</span><br><span class="line"></span><br><span class="line"># 关闭socks</span><br><span class="line">local$ networksetup -setsocksfirewallproxy Wi-Fi localhost 1080 off</span><br></pre></td></tr></table></figure><p>应该一下子就能看明白怎么使用，其中Wi-Fi是网络接口的服务名称，如果用的是wifi就不用改了，可以在网络设置右边看到各个接口的名称，PAC文件的位置和socks端口对应修改就好了。</p><p>可以把这几个命令写成脚本，因为我也使用Alfred，所以就写了个Alfred的workflow，用Alfred的可以直接下载使用。更改网络设置需要root权限，所以会提示输入密码。</p><blockquote><p>文章摘自<a href="https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AF%87/#androidwindowsopenwrtlede" target="_blank" rel="noopener">shino.space</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shadowsocks搭建过程(服务端)</title>
      <link href="/2018/04/23/%E6%90%AD%E5%BB%BA-%E7%BF%BB%E5%A2%99-shadowsocks%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B-%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>/2018/04/23/%E6%90%AD%E5%BB%BA-%E7%BF%BB%E5%A2%99-shadowsocks%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B-%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      <content type="html"><![CDATA[<blockquote><p>链接扩展<br><a href="https://shadowsocks.org/en/index.html" target="_blank" rel="noopener">shadowsocks</a><br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.0.9" target="_blank" rel="noopener">shadowsocks-windows</a><br><a href="https://github.com/shadowsocks/shadowsocks-libev/" target="_blank" rel="noopener">shadowsocks-libev</a><br><a href="https://v2ray.com" target="_blank" rel="noopener">v2ray</a><br><a href="https://vultr.com" target="_blank" rel="noopener">vultr</a></p></blockquote><h2 id="安装shadowsocks-libev"><a href="#安装shadowsocks-libev" class="headerlink" title="安装shadowsocks-libev"></a>安装shadowsocks-libev</h2><p>shadowsocks的服务端也分python版本、go版本以及C语言写的shadowsocks-libev，因为libev版更新快，而且C语言编写的运行效率更高些，所以采用libev版。</p><h3 id="安装预编译包"><a href="#安装预编译包" class="headerlink" title="安装预编译包"></a>安装预编译包</h3><p>在shadowsocks-libev的github项目上有release预编译版本，可以直接安装（以目前的3.1.3版本为例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#下载预编译文件</span><br><span class="line">wget https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.0.3/shadowsocks-libev-3.1.3.tar.gz</span><br><span class="line">tar zxf shadowsocks-libev-3.0.3.tar.gz    #解压缩</span><br><span class="line">cd shadowsocks    #进入项目文件夹</span><br><span class="line">./configure    #配置安装</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="编译源码安装"><a href="#编译源码安装" class="headerlink" title="编译源码安装"></a>编译源码安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/shadowsocks/shadowsocks-libev.git #下载源码</span><br><span class="line">cd shadowsocks-libev/    #进入项目目录</span><br><span class="line">git submodule update --init    #下载git子模块</span><br><span class="line">./autogen.sh    #生成配置文件</span><br><span class="line">./configure    #配置编译环境</span><br><span class="line">make     #编译</span><br><span class="line">make install    #安装</span><br></pre></td></tr></table></figure><p>这样就装好了，shadowsocks-libev中常用的命令有<br><strong>ss-server</strong>、<strong>ss-local</strong>、<strong>ss-redir</strong>、<strong>ss-tunnel</strong>等，<br>服务端只用<strong>ss-server</strong>。关于使用方法，可以man shadowsocks-libev或者man ss-server来查看，下面只会提到必要用法。</p><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p>一般为了方便，会将shadowsocks设置的参数写成配置文件，配置文件为json格式，服务端可以使用的key如下：</p><table><thead><tr><th style="text-align:center">key</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">server</td><td style="text-align:center">服务器IP</td></tr><tr><td style="text-align:center">server_port</td><td style="text-align:center">服务端口</td></tr><tr><td style="text-align:center">password</td><td style="text-align:center">密码</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">加密算法</td></tr><tr><td style="text-align:center">timeout</td><td style="text-align:center">超时</td></tr><tr><td style="text-align:center">mode</td><td style="text-align:center">代理协议</td></tr></tbody></table><p>服务器IP如果设为0.0.0.0则绑定所有IP；代理协议指的是代理TCP还是UDP，<br>至于加密算法，3.0以上版本的shadowsocks目前支持18种算法，但推荐使用以下支持AEAD加密的：</p><ul><li>chacha20-ietf-poly1305</li><li>aes-256-gcm</li><li>aes-192-gcm</li><li>aes-128-gcm</li></ul><p>至于原因可以参考这篇文章这里以我常用的配置文件为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch config.json    #新建文件</span><br><span class="line">vim config.json    #编辑文件</span><br></pre></td></tr></table></figure><p>config.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,    //服务器IP，0.0.0.0代表绑定服务器的所有IP</span><br><span class="line">    &quot;server_port&quot;:8088,    //服务端口</span><br><span class="line">    &quot;password&quot;:&quot;password&quot;,    //密码</span><br><span class="line">    &quot;timeout&quot;:&quot;5&quot;,    //超时重连</span><br><span class="line">    &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;,    //加密方式</span><br><span class="line">    &quot;mode&quot;:&quot;tcp_and_udp&quot;    //代理TCP和UDP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件为json格式，//后为注释，方便说明加的，实际配置文件里不能写注释（看那个红色就知道不能加）。</p><p>这里用的是在移动设备上性能相对效好的chacha20-ietf-poly1305。</p><p>因为只有shadowsocks-libev更新了AEAD加密，所以为了兼容可以改为chacha20等非AEAD加密算法。</p><h2 id="运行shadowsocks-libev"><a href="#运行shadowsocks-libev" class="headerlink" title="运行shadowsocks-libev"></a>运行shadowsocks-libev</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss-server -c config.json</span><br></pre></td></tr></table></figure><p>可以看到服务在前台运行，-c后面接配置文件。若要后台运行，可以加上-f参数，后面接一个pid文件名，运行后会生成这个pid文件，里面保存着这个后台ss-server进程的pid。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss-server -c config.json -f proxy.pid</span><br></pre></td></tr></table></figure><p>如果想开多个端口，可以使用多个配置文件+多个pid文件的方式来管理。这样服务端就完成了。</p><blockquote><p>文章摘自<a href="https://shino.space/2017/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%B3%BB%E7%BB%9F-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/" target="_blank" rel="noopener">shino.space</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见视频格式</title>
      <link href="/2018/03/24/%E7%A7%91%E6%99%AE-%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F/"/>
      <url>/2018/03/24/%E7%A7%91%E6%99%AE-%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="帧速率"><a href="#帧速率" class="headerlink" title="帧速率"></a>帧速率</h2><p>我们看到的视频是由一帧帧的画面，也就是一张张的图片构成；</p><p>如果一秒钟跑过去的图片有24张，帧速率就是24帧/秒（fps）；</p><p>只有8张，帧速率就是8帧/秒（fps）<strong><em>看起来就一卡一卡的</em></strong>；</p><p>帧速率越大，画面就越流畅，当然大到一定程度，也不需要过大了，一方面肉眼也看不出有毛区别，另一方面电脑吃不消啊！</p><h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><p>我们所看到的图像都是由一个个的像素点构成的；</p><p>分辨率就是所显示图像的精密程度，也可以理解为像素点的多少。</p><p>在屏幕大小一定的情况下，分辨率越高，图像就会越清晰；在分辨率一定的情况下，屏幕越小，图像越清晰；</p><p>从前我们看到的电视都是标清，大致都是720x576的分辨率，长宽比一般是4:3；</p><p>如今我们看到的大部分都是16：9的电视和节目，分辨率为1920x1080；更大的分辨率就是4k。 </p><blockquote><p>1920*1080可以理解为，一个屏幕中，每行有1920个像素点，一共有1080行</p></blockquote><p><a href="https://www.jianshu.com/p/c3387bcc4f6e" target="_blank" rel="noopener">了解更多</a></p><h2 id="码率（比特率）"><a href="#码率（比特率）" class="headerlink" title="码率（比特率）"></a>码率（比特率）</h2><p>码率，又叫比特率，是指每秒钟视频或音频的数据量，一般用兆／秒或K／秒表示。</p><p>其他条件相同的情况下，码率越大，视频越清晰，但文件也越大；</p><p>另外，码率超过一定数值，对图像并没多大影响，还搞得电脑吃不消呀～</p><hr><p>平常我们总在想，如何让视频文件更小，让视频更清晰呢？答案就在码率上，对码率进行处理，就叫做编码方式，一般有CBR/ABR/VBR三种方式。</p><table><thead><tr><th>编码方式</th><th>全称</th><th>意思</th><th>说人话</th></tr></thead><tbody><tr><td>CBR</td><td>constant bitrate</td><td>固定码率（比特率）</td><td>全片码率固定不变</td></tr><tr><td>ABR</td><td>average bitrate</td><td>平均码率（比特率）</td><td>介于CBR和VBC的折中选择</td></tr><tr><td>VBR</td><td>variable bitrate</td><td>可变码率（比特率）</td><td>全片码率根据画面丰富程度变化</td></tr></tbody></table><ul><li><p>CBR全称constant bitrate，意思是固定码率,就是在整个视频当中，码率固定不变；</p></li><li><p>VBR全称Variable Bitrate，意为可变码率。</p><p>其实在视频当中，画面内容越丰富，所需码率越高，成像质量也会越好，画面内容不怎么丰富的地方用高码率就是浪费，</p><p>所以可变码率根据画面内容的丰富程度自动调节，保证成像质量的同时，让文件变得更小。</p><p><strong>所以要让视频文件更小，内容更清晰，采用VBR的编码方式，并设定科学的数值，就是解决问题的关键。</strong></p></li><li><p>ABR全称average bitrate ，意为平均码率，是一种介于CBR和VBR之间的折中方式。</p></li></ul><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="MPEG"><a href="#MPEG" class="headerlink" title="MPEG"></a>MPEG</h3><p>1988年由众多世界知名公司组成的300多名成员成立了一个活动专家组，<strong>Moving Picture Experts Group</strong>，</p><p>简称<strong>MPEG</strong>，他们制定提出不同标准，对图像进行压缩、编码，最终应用与不同领域。编码出来的视频就被称为<strong>MPEG</strong>格式，简称<strong>MPG</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MPEG 正式审核程序是 Moving Picture Experts Group 的简称。</span><br><span class="line">这个名字本来的含义是指一个研究视频和音频编码标准的“动态图像专家组”组织，</span><br><span class="line">成立于1988年，致力开发视频、音频的压缩编码技术。</span><br><span class="line"></span><br><span class="line">现在我们所说的MPEG泛指由该小组制定的一系列视频编码标准正式审核程序。</span><br><span class="line">该小组于1988年组成，至今已经制定了</span><br><span class="line">MPEG-1、MPEG-2、MPEG-3、MPEG-4、MPEG-7等多个标准，MPEG-21正在制定中。</span><br><span class="line"></span><br><span class="line">MPEG是ISO和IEC的工作组，</span><br><span class="line">它的官方头衔为：第一技术委员会第二十九子委员会第十一号工作组正式审核程序，</span><br><span class="line">英文头衔为ISO/IEC JTC1/SC29 WG11。</span><br><span class="line"></span><br><span class="line">MPEG大约每2-3个月举行一次会议，每次会议大约持续5天，在会议期间，</span><br><span class="line">新的建议和技术细节先在小组中讨论，成熟后进入标准化的正式审核程序。</span><br><span class="line">与MPEG工作组相关的其他几个视频标准化工作组包括ITU-T VCEG以及JVT。</span><br></pre></td></tr></table></figure><blockquote><p>另，常用的音频格式<strong>mp3</strong>，是<strong>MPEG-1 Layer 3</strong>的简称</p></blockquote><table><thead><tr><th>编码格式</th><th>应用于</th></tr></thead><tbody><tr><td>MPEG-1</td><td>VCD</td></tr><tr><td>MPEG-2</td><td>DVD</td></tr><tr><td>MPEG-4</td><td>家庭摄影录像、网络传播、视像电话、邮件</td></tr></tbody></table><ul><li><p>MPEG-1的编码用于老VCD</p></li><li><p>MPEG-2的编码用于DVD</p></li><li><p>之后的<strong>MPEG-4</strong>被用于更多更广泛的平台，这里的MPEG-4就是传说中的<strong>MP4</strong>  :)</p></li></ul><h3 id="ITU"><a href="#ITU" class="headerlink" title="ITU"></a>ITU</h3><p>还有一个叫做国际电传视讯联盟（ITU）主导的另一套编码方式，称为<strong>H.26X系列</strong>，</p><p>之后与MPEG合作弄出了 <strong>H.264</strong> 编码方式，成为如今最热门的编码方式。</p><hr><h4 id="flv"><a href="#flv" class="headerlink" title="flv"></a>flv</h4><p>全称  <strong>flash video</strong>，广泛用于网络视频，体积小，易于传播，</p><p>遇到<strong>h.264</strong>的编码之后，生了个儿子 <strong>f4v</strong> ，有体积小、图像更清晰的特点。</p><h3 id="其他格式"><a href="#其他格式" class="headerlink" title="其他格式"></a>其他格式</h3><blockquote><p> mov是由苹果公司开发出来的视频格式，wmv由微软开发出来。</p></blockquote><h4 id="rmvb"><a href="#rmvb" class="headerlink" title="rmvb"></a>rmvb</h4><p>它的爸爸叫做就是<strong>rm</strong>格式，以前有个叫做 <strong><a href="https://www.google.com/search?q=realplayer&amp;oq=realplayer&amp;aqs=chrome..69i57.265j0j4&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="noopener">realplayer</a></strong> 的播放器，<strong>rm</strong>就是它们公司开发的视频格式，现在后边添个<strong>vb</strong>，</p><p>意思就是<strong>variable bitrate</strong>，可变比特率。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th></th><th>格式</th><th>老爸</th></tr></thead><tbody><tr><td>最好最常用</td><td>MP4</td><td>MPG</td></tr><tr><td>质量高文件小</td><td>f4v</td><td>flv</td></tr><tr><td>常用电影格式</td><td>rmvb</td><td>rm</td></tr><tr><td>剪辑编辑常用</td><td>avi（适合编辑者进行再编辑）</td><td></td></tr><tr><td>其他</td><td>mov、wmv</td><td>苹果、微软</td></tr></tbody></table><p>提示：</p><ol><li><p>电视、电脑、手机都能打开的格式一般是MP4格式（除苹果手机外）</p></li><li><p>要视频更清晰、文件更小，需要采用VBR，并使用最新的编码技术和格式</p></li><li><p>上传网络生成的视频质量越高越好，视频网站会进行二次转码</p></li><li><p>平常下载的视频如今的主流播放器都能打开，因为都有编码器</p></li></ol><hr><p>关于视频格式，传统一般叫做封装格式，包括编码格式在内，并非本文说的如此简单。</p><p>这仅仅是科普，所没提到或者具体提到的avi、mkv，以及其他格式都属于封装格式的一种。</p><p>封装格式并非完全按照编码技术命名，编码技术也并非仅此而已。</p>]]></content>
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>tiny-spring 简介</title>
      <link href="/2018/03/18/backEnd-spring-tiny-spring-%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/03/18/backEnd-spring-tiny-spring-%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>tiny-spring是模拟Spring的一个简单的框架，主要包含如下设计模式：</p><ul><li>模板方法模式</li></ul><p>该模式大量使用，例如在 BeanFactory 中，把 getBean() 交给子类实现，不同的子类 <strong>BeanFactory</strong> 对其可以采取不同的实现。</p><ul><li>代理模式</li></ul><p>在tiny-spring 中，ApplicationContext继承了BeanFactory接口，具备了 getBean() 功能，但是又内置了一个BeanFactory实例，getBean()直接调用 BeanFactory的 getBean() 。但是ApplicationContext 加强了 BeanFactory，它把类定义的加载也包含进去了。</p><ul><li>策略模式</li></ul><p>生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现</p><h2 id="tiny-spring-IOC构建流程"><a href="#tiny-spring-IOC构建流程" class="headerlink" title="tiny-spring IOC构建流程"></a>tiny-spring IOC构建流程</h2><p>(节选之tiny-spring的changelog.md)</p><h3 id="1-step1-最基本的容器"><a href="#1-step1-最基本的容器" class="headerlink" title="1. step1-最基本的容器"></a>1. step1-最基本的容器</h3><p>IoC最基本的角色有两个：容器(<code>BeanFactory</code>)和Bean本身。这里使用<code>BeanDefinition</code>来封装了bean对象，这样可以保存一些额外的元信息。测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 1.初始化beanfactory</span><br><span class="line">BeanFactory beanFactory = new BeanFactory();</span><br><span class="line"></span><br><span class="line">// 2.注入bean</span><br><span class="line">BeanDefinition beanDefinition = new BeanDefinition(new HelloWorldService());</span><br><span class="line">beanFactory.registerBeanDefinition(&quot;helloWorldService&quot;, beanDefinition);</span><br><span class="line"></span><br><span class="line">// 3.获取bean</span><br><span class="line">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class="line">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure><h3 id="2-step2-将bean创建放入工厂"><a href="#2-step2-将bean创建放入工厂" class="headerlink" title="2. step2-将bean创建放入工厂"></a>2. step2-将bean创建放入工厂</h3><p>step1中的bean是初始化好之后再set进去的，实际使用中，我们希望容器来管理bean的创建。于是我们将bean的初始化放入BeanFactory中。为了保证扩展性，我们使用Extract Interface的方法，将<code>BeanFactory</code>替换成接口，而使用<code>AbstractBeanFactory</code>和<code>AutowireCapableBeanFactory</code>作为其实现。”AutowireCapable”的意思是“可自动装配的”，为我们后面注入属性做准备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> // 1.初始化beanfactory</span><br><span class="line">BeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class="line"></span><br><span class="line">// 2.注入bean</span><br><span class="line">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class="line">beanDefinition.setBeanClassName(&quot;us.codecraft.tinyioc.HelloWorldService&quot;);</span><br><span class="line">beanFactory.registerBeanDefinition(&quot;helloWorldService&quot;, beanDefinition);</span><br><span class="line"></span><br><span class="line">// 3.获取bean</span><br><span class="line">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class="line">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure><h3 id="3-step3-为bean注入属性"><a href="#3-step3-为bean注入属性" class="headerlink" title="3. step3-为bean注入属性"></a>3. step3-为bean注入属性</h3><p>这一步，我们想要为bean注入属性。我们选择将属性注入信息保存成<code>PropertyValue</code>对象，并且保存到<code>BeanDefinition</code>中。这样在初始化bean的时候，我们就可以根据PropertyValue来进行bean属性的注入。Spring本身使用了setter来进行注入，这里为了代码简洁，我们使用Field的形式来注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 1.初始化beanfactory</span><br><span class="line">BeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class="line"></span><br><span class="line">// 2.bean定义</span><br><span class="line">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class="line">beanDefinition.setBeanClassName(&quot;us.codecraft.tinyioc.HelloWorldService&quot;);</span><br><span class="line"></span><br><span class="line">// 3.设置属性</span><br><span class="line">PropertyValues propertyValues = new PropertyValues();</span><br><span class="line">propertyValues.addPropertyValue(new PropertyValue(&quot;text&quot;, &quot;Hello World!&quot;));</span><br><span class="line">beanDefinition.setPropertyValues(propertyValues);</span><br><span class="line"></span><br><span class="line">// 4.生成bean</span><br><span class="line">beanFactory.registerBeanDefinition(&quot;helloWorldService&quot;, beanDefinition);</span><br><span class="line"></span><br><span class="line">// 5.获取bean</span><br><span class="line">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class="line">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure><h3 id="4-step4-读取xml配置来初始化bean"><a href="#4-step4-读取xml配置来初始化bean" class="headerlink" title="4. step4-读取xml配置来初始化bean"></a>4. step4-读取xml配置来初始化bean</h3><p>这么大一坨初始化代码让人心烦。这里的<code>BeanDefinition</code>只是一些配置，我们还是用xml来初始化吧。我们定义了<code>BeanDefinitionReader</code>初始化bean，它有一个实现是<code>XmlBeanDefinitionReader</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 1.读取配置</span><br><span class="line">XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());</span><br><span class="line">xmlBeanDefinitionReader.loadBeanDefinitions(&quot;tinyioc.xml&quot;);</span><br><span class="line"></span><br><span class="line">// 2.初始化BeanFactory并注册bean</span><br><span class="line">BeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class="line">for (Map.Entry&lt;String, BeanDefinition&gt; beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) &#123;</span><br><span class="line">        beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3.获取bean</span><br><span class="line">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class="line">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure><h3 id="5-step5-为bean注入bean"><a href="#5-step5-为bean注入bean" class="headerlink" title="5. step5-为bean注入bean"></a>5. step5-为bean注入bean</h3><p>使用xml配置之后，似乎里我们熟知的Spring更近了一步！但是现在有一个大问题没有解决：我们无法处理bean之间的依赖，无法将bean注入到bean中，所以它无法称之为完整的IoC容器！如何实现呢？我们定义一个<code>BeanReference</code>，来表示这个属性是对另一个bean的引用。这个在读取xml的时候初始化，并在初始化bean的时候，进行解析和真实bean的注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for (PropertyValue propertyValue : mbd.getPropertyValues().getPropertyValues()) &#123;</span><br><span class="line">    Field declaredField = bean.getClass().getDeclaredField(propertyValue.getName());</span><br><span class="line">    declaredField.setAccessible(true);</span><br><span class="line">    Object value = propertyValue.getValue();</span><br><span class="line">    if (value instanceof BeanReference) &#123;</span><br><span class="line">        BeanReference beanReference = (BeanReference) value;</span><br><span class="line">        value = getBean(beanReference.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    declaredField.set(bean, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时为了解决循环依赖的问题，我们使用lazy-init的方式，将createBean的事情放到<code>getBean</code>的时候才执行，是不是一下子方便很多？这样在注入bean的时候，如果该属性对应的bean找不到，那么就先创建！因为总是先创建后注入，所以不会存在两个循环依赖的bean创建死锁的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 1.读取配置</span><br><span class="line">XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());</span><br><span class="line">xmlBeanDefinitionReader.loadBeanDefinitions(&quot;tinyioc.xml&quot;);</span><br><span class="line"></span><br><span class="line">// 2.初始化BeanFactory并注册bean</span><br><span class="line">AbstractBeanFactory beanFactory = new AutowireCapableBeanFactory();</span><br><span class="line">for (Map.Entry&lt;String, BeanDefinition&gt; beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) &#123;</span><br><span class="line">    beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3.初始化bean</span><br><span class="line">beanFactory.preInstantiateSingletons();</span><br><span class="line"></span><br><span class="line">// 4.获取bean</span><br><span class="line">HelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(&quot;helloWorldService&quot;);</span><br><span class="line">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure><h3 id="6-step6-ApplicationContext登场"><a href="#6-step6-ApplicationContext登场" class="headerlink" title="6. step6-ApplicationContext登场"></a>6. step6-ApplicationContext登场</h3><p>现在BeanFactory的功能齐全了，但是使用起来有点麻烦。于是我们引入熟悉的<code>ApplicationContext</code>接口，并在<code>AbstractApplicationContext</code>的<code>refresh()</code>方法中进行bean的初始化工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;tinyioc.xml&quot;);</span><br><span class="line">HelloWorldService helloWorldService = (HelloWorldService) applicationContext.getBean(&quot;helloWorldService&quot;);</span><br><span class="line">helloWorldService.helloWorld();</span><br></pre></td></tr></table></figure><p>是不是非常熟悉？至此为止，我们的tiny-spring的IoC部分可说完工了。这部分的类、方法命名和作用，都是对应Spring中相应的组件。虽然代码量只有400多行，但是已经有了基本的IoC功能！</p><h2 id="tiny-spring的核心类"><a href="#tiny-spring的核心类" class="headerlink" title="tiny-spring的核心类"></a>tiny-spring的核心类</h2><h3 id="1-Resource家族"><a href="#1-Resource家族" class="headerlink" title="1. Resource家族"></a>1. Resource家族</h3><p>Resource以及继承它的几个类，用于IOC的类定位，也就是：<strong>配置文件从哪读、如何读。</strong></p><h4 id="Resource接口"><a href="#Resource接口" class="headerlink" title="Resource接口"></a>Resource接口</h4><p>标识一个外部资源。定义getInputStream()方法来获取资源的输入流。</p><h4 id="UrlResource"><a href="#UrlResource" class="headerlink" title="UrlResource"></a>UrlResource</h4><p>实现 Resource 接口的资源类，通过 URL 获取资源。</p><h4 id="ResourceLoader"><a href="#ResourceLoader" class="headerlink" title="ResourceLoader"></a>ResourceLoader</h4><p>资源加载类。通过 getResource(String)方法获取一个Resouce对象，是获取Resouce的主要途径。</p><h3 id="2-BeanDefinition家族"><a href="#2-BeanDefinition家族" class="headerlink" title="2. BeanDefinition家族"></a>2. BeanDefinition家族</h3><p>BeanDefinition为核心的几个类，是用来<strong>定义Bean</strong>：名字是什么、类型是什么、属性赋予了哪些值或者引用，使得IoC容器可以根据这个定义来生成实例。</p><h4 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h4><p>该类保存了Bean定义，包括，名字(String beanClassName)、类型(Class beanClass)、属性(PropertyValues propertyValues)。根据其类型可以生成一个类实例，然后可以把属性 注入进去。</p><h4 id="BeanDefinitionReader"><a href="#BeanDefinitionReader" class="headerlink" title="BeanDefinitionReader"></a>BeanDefinitionReader</h4><p>解析BeanDefinition的接口。通过loadBeanDefinitions(String)从一个地址加载类定义。</p><h4 id="AbstractBeanDefinitionReader"><a href="#AbstractBeanDefinitionReader" class="headerlink" title="AbstractBeanDefinitionReader"></a>AbstractBeanDefinitionReader</h4><p>实现 BeanDefinitionReader 接口的抽象类（未具体实现 loadBeanDefinitions，而是规范了 BeanDefinitionReader 的基本结构）。内置一个 HashMap rigistry，用于保存 String - beanDefinition 的键值对。内置一个 ResourceLoader resourceLoader，用于保存类加载器。使用时，只需要向其 loadBeanDefinitions() 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 BeanDefinition 保存到 registry 中去。</p><h4 id="XmlBeanDefinitionReader"><a href="#XmlBeanDefinitionReader" class="headerlink" title="XmlBeanDefinitionReader"></a>XmlBeanDefinitionReader</h4><p>具体实现了loadBeanDefinitions()方法，并从XML文件中读取类定义。</p><h3 id="3-BeanFactory家族"><a href="#3-BeanFactory家族" class="headerlink" title="3. BeanFactory家族"></a>3. BeanFactory家族</h3><p>以BeanFactory为核心的类，用于IoC容器在已经获取Bean时，对Bean实例的装配、获取。</p><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>接口，标识一个 IoC 容器。通过 getBean(String) 方法来获取一个对象</p><h4 id="AbstractBeanFactory"><a href="#AbstractBeanFactory" class="headerlink" title="AbstractBeanFactory"></a>AbstractBeanFactory</h4><p>BeanFactory 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 Bean 的具体实现方式留给子类实现。</p><p>同时维护一个 beanDefinitionMap 哈希表用于保存类的定义信息（BeanDefinition）。获取 Bean 时，如果 Bean 已经存在于容器中，则返回之，否则则调用 doCreateBean 方法装配一个 Bean。</p><h4 id="AutowireCapableBeanFactory"><a href="#AutowireCapableBeanFactory" class="headerlink" title="AutowireCapableBeanFactory"></a>AutowireCapableBeanFactory</h4><p>实现了 doCreateBean 方法，该方法分三步：1 通过 BeanDefinition 中保存的类信息实例化一个对象；2 把对象保存在 BeanDefinition 中，以备下次获取；3 为其装配属性。</p><h3 id="4-ApplicationContext家族"><a href="#4-ApplicationContext家族" class="headerlink" title="4. ApplicationContext家族"></a>4. ApplicationContext家族</h3><p>以ApplicationContext 接口为核心的类，主要是对前面 Resouce、BeanFactoryBeanDefinition 进行了功能的封装，解决 <strong>根据地址获取 IoC 容器并使用</strong>的问题。</p><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>标记接口，继承了 BeanFactory。通常，要实现一个 IoC 容器时，需要先通过 ResourceLoader 获取一个 Resource，其中包括了容器的配置、Bean 的定义信息。接着，使用 BeanDefinitionReader 读取该 Resource 中的 BeanDefinition 信息。最后，把 BeanDefinition 保存在 BeanFactory 中，容器配置完毕可以使用。</p><p>注意到 BeanFactory只实现了Bean的装配、获取，并未说明Bean的来源 也就是 BeanDefinition是如何加载的。该接口把 BeanFactory 和 BeanDefinitionReader 结合在了一起。</p><h4 id="AbstractApplicationContext"><a href="#AbstractApplicationContext" class="headerlink" title="AbstractApplicationContext"></a>AbstractApplicationContext</h4><p>ApplicationContext的抽象实现，内部包含一个BeanFactory类。主要方法有 getBean() 和 refresh() 方法。getBean() 直接调用了内置 BeanFactory 的 getBean() 方法，refresh() 则用于实现 BeanFactory 的刷新，也就是告诉 BeanFactory 该使用哪个资源（Resource）加载类定义（BeanDefinition）信息，该方法留给子类实现，用以实现 从不同来源的不同类型的资源加载类定义 的效果</p><h4 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h4><p>从类路径加载资源的具体实现类。内部通过 XmlBeanDefinitionReader 解析 UrlResourceLoader 读取到的 Resource，获取 BeanDefinition 信息，然后将其保存到内置的 BeanFactory 中。</p>]]></content>
      
      <categories>
          
          <category> java Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tiny-spring 分析</title>
      <link href="/2018/03/18/backEnd-spring-tiny-spring%E5%88%86%E6%9E%90/"/>
      <url>/2018/03/18/backEnd-spring-tiny-spring%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>—— 转载自D佬笔记：<a href="https://www.zybuluo.com/dugu9sword/note/382745" target="_blank" rel="noopener">原文</a></p><p><strong>前言</strong></p><p>在阅读 Spring 的源代码（依赖注入部分和面向切面编程部分）时遇到不少困惑，庞大的类文件结构、纷繁复杂的方法调用、波诡云谲的多态实现，让自己深陷其中、一头雾水。<br>后来注意到 <a href="https://github.com/code4craft" target="_blank" rel="noopener">code4craft</a> 的 <a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="noopener">tiny-spring</a> 项目，实现了一个微型的 Spring，提供对 IoC 和 AOP 的最基本支持，麻雀虽小，五脏俱全，对 Spring 的认知清晰了不少。这个微型框架的结构包括文件名、方法名都是参照 Spring 来实现的，对于初读 Spring 的学习者，作为研究 Spring 的辅助工具应该能够受益匪浅。<br>在研究 <a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="noopener">tiny-spring</a> 的时候，收获颇多，把对这个微型框架的一些分析写了下来，行文可能有点紊乱。</p><p><strong>本文结构</strong></p><ol><li>第一部分 <strong>IoC 容器的实现</strong> 对应了 <a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="noopener">tiny-spring</a> 的 <a href="https://github.com/code4craft/tiny-spring/releases" target="_blank" rel="noopener">step-1</a> 到 <a href="https://github.com/code4craft/tiny-spring/releases" target="_blank" rel="noopener">step-5</a> 部分，这 5 个 step 实现了基本的 IoC 容器，支持singleton类型的bean，包括初始化、属性注入、以及依赖 Bean 注入，可从 XML 中读取配置，XML 读取方式没有具体深入。</li><li>第二部分 <strong>AOP 容器的实现</strong> 对应了 <a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="noopener">tiny-spring</a> 的 <a href="https://github.com/code4craft/tiny-spring/releases" target="_blank" rel="noopener">step-6</a> 到 <a href="https://github.com/code4craft/tiny-spring/releases" target="_blank" rel="noopener">step-9</a> 部分。<a href="https://github.com/code4craft/tiny-spring/releases" target="_blank" rel="noopener">step-10</a> 中对 cglib 的支持没有分析。这 4 个 step 可以使用 AspectJ 的语法进行 AOP 编写，支持接口代理。考虑到 AspectJ 语法仅用于实现 <code>execution(&quot;***&quot;)</code> 部分的解析，不是主要内容，也可以使用 Java 的正则表达式粗略地完成，因此没有关注这些细节。</li></ol><p><strong>参考书目</strong><br>《Spring 实战》《Spring 技术内幕》</p><hr><p>tiny-spring 分析</p><ul><li>IoC 容器的实现<ul><li>文件结构<ul><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#resource" target="_blank" rel="noopener">Resource</a></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#beandefinition" target="_blank" rel="noopener">BeanDefinition</a></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#beanfactory" target="_blank" rel="noopener">BeanFactory</a></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext" target="_blank" rel="noopener">ApplicationContext</a></li></ul></li><li>设计模式<ul><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">模板方法模式</a></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">代理模式</a></li></ul></li></ul></li><li>AOP 的实现<ul><li>重新分析 IoC 容器<ul><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#beanfactory-%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%89%A7%E8%A1%8C" target="_blank" rel="noopener">BeanFactory 的构造与执行</a></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#applicationcontext-%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%89%A7%E8%A1%8C" target="_blank" rel="noopener">ApplicationContext 的构造和执行</a></li><li>IoC 实现的一些思考与分析<ul><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-1aop-%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%BD%95%E5%A4%84%E8%A2%AB%E5%B5%8C%E5%85%A5%E5%88%B0-ioc-%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%8E%BB" target="_blank" rel="noopener">分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？</a></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-2beanfactory-%E5%92%8C-applicationcontext-%E8%AE%BE%E8%AE%A1%E4%B8%8A%E7%9A%84%E8%80%A6%E5%90%88" target="_blank" rel="noopener">分析 2：BeanFactory 和 ApplicationContext 设计上的耦合</a></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E5%88%86%E6%9E%90-3tiny-spring-%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B%E7%9A%84%E5%88%86%E6%9E%90" target="_blank" rel="noopener">分析 3：tiny-spring 总体流程的分析</a></li></ul></li></ul></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#jdk-%E5%AF%B9%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">JDK 对动态代理的支持</a></li><li>AOP 的植入与实现细节<ul><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E5%9C%A8-bean-%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%AE%8C%E6%88%90-aop-%E7%9A%84%E6%A4%8D%E5%85%A5" target="_blank" rel="noopener">在 Bean 初始化过程中完成 AOP 的植入</a></li><li>AOP 中动态代理的实现步骤<ul><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%86%85%E5%AE%B9" target="_blank" rel="noopener">动态代理的内容</a></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%AD%A5%E9%AA%A4" target="_blank" rel="noopener">动态代理的步骤</a></li></ul></li></ul></li><li>设计模式<ul><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-1" target="_blank" rel="noopener">代理模式</a></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">策略模式</a></li></ul></li><li><a href="https://www.zybuluo.com/dugu9sword/note/382745#%E4%B8%BA-tiny-spring-%E6%B7%BB%E5%8A%A0%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE" target="_blank" rel="noopener">为 tiny-spring 添加拦截器链</a></li></ul></li></ul><h2 id="IoC-容器的实现"><a href="#IoC-容器的实现" class="headerlink" title="IoC 容器的实现"></a>IoC 容器的实现</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><h4 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h4><p>以 <code>Resource</code> 接口为核心发散出的几个类，都是用于解决 IoC 容器中的内容从哪里来的问题，也就是 <strong>配置文件从哪里读取、配置文件如何读取</strong> 的问题。</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td><code>Resource</code></td><td>接口，标识一个外部资源。通过 <code>getInputStream()</code> 方法 <strong>获取资源的输入流</strong> 。</td></tr><tr><td><code>UrlResource</code></td><td>实现 <code>Resource</code> 接口的资源类，通过 URL 获取资源。</td></tr><tr><td><code>ResourceLoader</code></td><td>资源加载类。通过 <code>getResource(String)</code> 方法获取一个 <code>Resouce</code> 对象，是 <strong>获取 Resouce 的主要途径</strong> 。</td></tr></tbody></table><p><em>注：</em> 这里在设计上有一定的问题，<code>ResourceLoader</code> 直接返回了一个 <code>UrlResource</code>，更好的方法是声明一个 <code>ResourceLoader</code> 接口，再实现一个 <code>UrlResourceLoader</code> 类用于加载 <code>UrlResource</code>。</p><h4 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h4><p>以 <code>BeanDefinition</code> 类为核心发散出的几个类，都是用于解决 <code>Bean</code> 的具体定义问题，包括 <code>Bean</code> 的名字是什么、它的类型是什么，它的属性赋予了哪些值或者引用，也就是 <strong>如何在 IoC 容器中定义一个 Bean，使得 IoC 容器可以根据这个定义来生成实例</strong> 的问题。</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td><code>BeanDefinition</code></td><td>该类保存了 <code>Bean</code> 定义。包括 <code>Bean</code> 的 <strong>名字</strong> <code>String beanClassName</code>、<strong>类型</strong><code>Class beanClass</code>、<strong>属性</strong> <code>PropertyValues propertyValues</code>。根据其 <strong>类型</strong> 可以生成一个类实例，然后可以把 <strong>属性</strong> 注入进去。<code>propertyValues</code> 里面包含了一个个 <code>PropertyValue</code> 条目，每个条目都是键值对 <code>String</code> - <code>Object</code>，分别对应要生成实例的属性的名字与类型。在 Spring 的 XML 中的 <code>property</code> 中，键是 <code>key</code> ，值是 <code>value</code> 或者 <code>ref</code>。对于 <code>value</code> 只要直接注入属性就行了，但是 <code>ref</code> 要先进行解析。<code>Object</code> 如果是 <code>BeanReference</code> 类型，则说明其是一个引用，其中保存了引用的名字，需要用先进行解析，转化为对应的实际 <code>Object</code>。</td></tr><tr><td><code>BeanDefinitionReader</code></td><td>解析 <code>BeanDefinition</code> 的接口。通过 <code>loadBeanDefinitions(String)</code> 来从一个地址加载类定义。</td></tr><tr><td><code>AbstractBeanDefinitionReader</code></td><td>实现 <code>BeanDefinitionReader</code> 接口的抽象类（未具体实现 <code>loadBeanDefinitions</code>，而是规范了 <code>BeanDefinitionReader</code> 的基本结构）。内置一个 <code>HashMap rigistry</code>，用于保存 <code>String</code> - <code>beanDefinition</code> 的键值对。内置一个 <code>ResourceLoader resourceLoader</code>，用于保存类加载器。用意在于，使用时，只需要向其 <code>loadBeanDefinitions()</code> 传入一个资源地址，就可以自动调用其类加载器，并把解析到的 <code>BeanDefinition</code> 保存到 <code>registry</code> 中去。</td></tr><tr><td><code>XmlBeanDefinitionReader</code></td><td>具体实现了 <code>loadBeanDefinitions()</code> 方法，从 XML 文件中读取类定义。</td></tr></tbody></table><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>以 <code>BeanFactory</code> 接口为核心发散出的几个类，都是用于解决 IoC 容器在 <strong>已经获取 Bean 的定义的情况下，如何装配、获取 Bean 实例</strong> 的问题。</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td><code>BeanFactory</code></td><td>接口，标识一个 IoC 容器。通过 <code>getBean(String)</code> 方法来 <strong>获取一个对象</strong></td></tr><tr><td><code>AbstractBeanFactory</code></td><td><code>BeanFactory</code> 的一种抽象类实现，规范了 IoC 容器的基本结构，但是把生成 <code>Bean</code>的具体实现方式留给子类实现。IoC 容器的结构：<code>AbstractBeanFactory</code> 维护一个 <code>beanDefinitionMap</code> 哈希表用于保存类的定义信息（<code>BeanDefinition</code>）。获取 <code>Bean</code> 时，如果 <code>Bean</code> 已经存在于容器中，则返回之，否则则调用 <code>doCreateBean</code>方法装配一个 <code>Bean</code>。（所谓存在于容器中，是指容器可以通过 <code>beanDefinitionMap</code> 获取 <code>BeanDefinition</code> 进而通过其 <code>getBean()</code> 方法获取 <code>Bean</code>。）</td></tr><tr><td><code>AutowireCapableBeanFactory</code></td><td>可以实现自动装配的 <code>BeanFactory</code>。在这个工厂中，实现了 <code>doCreateBean</code> 方法，该方法分三步：1，通过 <code>BeanDefinition</code> 中保存的类信息实例化一个对象；2，把对象保存在 <code>BeanDefinition</code> 中，以备下次获取；3，为其装配属性。装配属性时，通过 <code>BeanDefinition</code> 中维护的 <code>PropertyValues</code> 集合类，把 <code>String</code> - <code>Value</code> 键值对注入到 <code>Bean</code> 的属性中去。如果 <code>Value</code> 的类型是 <code>BeanReference</code>则说明其是一个引用（对应于 XML 中的 <code>ref</code>），通过 <code>getBean</code> 对其进行获取，然后注入到属性中。</td></tr></tbody></table><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>以 <code>ApplicationContext</code> 接口为核心发散出的几个类，主要是对前面 <code>Resouce</code> 、 <code>BeanFactory</code>、<code>BeanDefinition</code> 进行了功能的封装，解决 <strong>根据地址获取 IoC 容器并使用</strong> 的问题。</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td><code>ApplicationContext</code></td><td>标记接口，继承了 <code>BeanFactory</code>。通常，要实现一个 IoC 容器时，需要先通过 <code>ResourceLoader</code> 获取一个 <code>Resource</code>，其中包括了容器的配置、<code>Bean</code> 的定义信息。接着，使用 <code>BeanDefinitionReader</code> 读取该 <code>Resource</code> 中的 <code>BeanDefinition</code> 信息。最后，把 <code>BeanDefinition</code> 保存在 <code>BeanFactory</code>中，容器配置完毕可以使用。注意到 <code>BeanFactory</code> 只实现了 <code>Bean</code> 的 <strong>装配、获取</strong>，并未说明 <code>Bean</code> 的 <strong>来源</strong> 也就是 <code>BeanDefinition</code> 是如何 <strong>加载</strong> 的。该接口把 <code>BeanFactory</code> 和 <code>BeanDefinitionReader</code> 结合在了一起。</td></tr><tr><td><code>AbstractApplicationContext</code></td><td><code>ApplicationContext</code> 的抽象实现，内部包含一个 <code>BeanFactory</code> 类。主要方法有 <code>getBean()</code> 和 <code>refresh()</code> 方法。<code>getBean()</code> 直接调用了内置 <code>BeanFactory</code> 的 <code>getBean()</code> 方法，<code>refresh()</code> 则用于实现 <code>BeanFactory</code> 的刷新，也就是告诉 <code>BeanFactory</code> 该使用哪个资源（<code>Resource</code>）加载类定义（<code>BeanDefinition</code>）信息，该方法留给子类实现，用以实现 <strong>从不同来源的不同类型的资源加载类定义</strong> 的效果。</td></tr><tr><td>ClassPathXmlApplicationContext</td><td>从类路径加载资源的具体实现类。内部通过 <code>XmlBeanDefinitionReader</code> 解析 <code>UrlResourceLoader</code> 读取到的 <code>Resource</code>，获取 <code>BeanDefinition</code> 信息，然后将其保存到内置的 <code>BeanFactory</code> 中。</td></tr></tbody></table><p><em>注 1：</em>在 Spring 的实现中，对 <code>ApplicatinoContext</code> 的分层更为细致。<code>AbstractApplicationContext</code> 中为了实现 <strong>不同来源</strong> 的 <strong>不同类型</strong> 的资源加载类定义，把这两步分层实现。以“从类路径读取 XML 定义”为例，首先使用 <code>AbstractXmlApplicationContext</code> 来实现 <strong>不同类型</strong> 的资源解析，接着，通过 <code>ClassPathXmlApplicationContext</code> 来实现 <strong>不同来源</strong> 的资源解析。<br><em>注 2：</em>在 tiny-spring 的实现中，先用 <code>BeanDefinitionReader</code> 读取 <code>BeanDefiniton</code> 后，保存在内置的 <code>registry</code>（键值对为 <code>String</code> - <code>BeanDefinition</code> 的哈希表，通过 <code>getRigistry()</code> 获取）中，然后由 <code>ApplicationContext</code> 把 <code>BeanDefinitionReader</code> 中 <code>registry</code> 的键值对一个个赋值给 <code>BeanFactory</code> 中保存的 <code>beanDefinitionMap</code>。而在 Spring 的实现中，<code>BeanDefinitionReader</code> 直接操作 <code>BeanDefinition</code> ，它的 <code>getRegistry()</code> 获取的不是内置的 <code>registry</code>，而是 <code>BeanFactory</code> 的实例。如何实现呢？以 <code>DefaultListableBeanFactory</code> 为例，它实现了一个 <code>BeanDefinitonRigistry</code> 接口，该接口把 <code>BeanDefinition</code> 的 <strong>注册</strong> 、<strong>获取</strong> 等方法都暴露了出来，这样，<code>BeanDefinitionReader</code> 可以直接通过这些方法把 <code>BeanDefiniton</code> 直接加载到 <code>BeanFactory</code> 中去。</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p><em>注：此处的设计模式分析不限于 tiny-spring，也包括 Spring 本身的内容</em></p><h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><p>该模式大量使用，例如在 <code>BeanFactory</code> 中，把 <code>getBean()</code> 交给子类实现，不同的子类 <code>**BeanFactory</code> 对其可以采取不同的实现。</p><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>在 tiny-spring 中（Spring 中也有类似但不完全相同的实现方式），<code>ApplicationContext</code> 继承了 <code>BeanFactory</code> 接口，具备了 <code>getBean()</code> 功能，但是又内置了一个 <code>BeanFactory</code> 实例，<code>getBean()</code> 直接调用 <code>BeanFactory</code> 的 <code>getBean()</code> 。但是<code>ApplicationContext</code> 加强了 <code>BeanFactory</code>，它把类定义的加载也包含进去了。</p><h2 id="AOP-的实现"><a href="#AOP-的实现" class="headerlink" title="AOP 的实现"></a>AOP 的实现</h2><h3 id="重新分析-IoC-容器"><a href="#重新分析-IoC-容器" class="headerlink" title="重新分析 IoC 容器"></a>重新分析 IoC 容器</h3><p><em>注：以下所说的 BeanFactory 和 ApplicationContext 不是指的那几个最基本的接口类（例如 BeanFactory 接口，它除了 getBean 空方法之外，什么都没有，无法用来分析。），而是指这一类对象总体的表现，比如 ClasspathXmlApplicationContext、FileSystemXmlApplicationContext 都算是 ApplicationContext。</em></p><h4 id="BeanFactory-的构造与执行"><a href="#BeanFactory-的构造与执行" class="headerlink" title="BeanFactory 的构造与执行"></a>BeanFactory 的构造与执行</h4><p><code>BeanFactory</code> 的核心方法是 <code>getBean(String)</code> 方法，用于从工厂中取出所需要的 <code>Bean</code> 。<code>AbstractBeanFactory</code> 规定了基本的构造和执行流程。</p><p><code>getBean</code> 的流程：<em>包括实例化和初始化，也就是生成 Bean，再执行一些初始化操作。</em></p><ol><li><code>doCreateBean</code> ：实例化 <code>Bean</code>。<br>a. <code>createInstance</code> ：生成一个新的实例。<br>b. <code>applyProperties</code> ：注入属性，包括依赖注入的过程。在依赖注入的过程中，如果 <code>Bean</code> 实现了 <code>BeanFactoryAware</code> 接口，则将容器的引用传入到 <code>Bean</code> 中去，这样，<code>Bean</code> 将获取对容器操作的权限，也就允许了 <strong>编写扩展 IoC 容器的功能的 Bean</strong>。</li><li><code>initializeBean(bean)</code> ： 初始化 <code>Bean</code>。<br>a. 从 <code>BeanPostProcessor</code> 列表中，依次取出 <code>BeanPostProcessor</code> 执行 <code>bean = postProcessBeforeInitialization(bean,beanName)</code> 。（<em>为什么调用 BeanPostProceesor 中提供方法时，不是直接 post…(bean,beanName) 而是 bean = post…(bean,beanName) 呢？见分析1 。另外，BeanPostProcessor 列表的获取有问题，见分析2。</em>）<br>b. 初始化方法（tiny-spring 未实现对初始化方法的支持）。<br>c. 从 <code>BeanPostProcessor</code> 列表中， 依次取出 <code>BeanPostProcessor</code> 执行其 <code>bean = postProcessAfterInitialization(bean,beanName)</code>。</li></ol><h4 id="ApplicationContext-的构造和执行"><a href="#ApplicationContext-的构造和执行" class="headerlink" title="ApplicationContext 的构造和执行"></a>ApplicationContext 的构造和执行</h4><p><code>ApplicationContext</code> 的核心方法是 <code>refresh()</code> 方法，用于从资源文件加载类定义、扩展容器的功能。</p><p><code>refresh</code> 的流程：</p><ol><li><code>loadBeanDefinitions(BeanFactory)</code> ：加载类定义，并注入到内置的 <code>BeanFactory</code> 中，这里的可扩展性在于，<strong>未对加载方法进行要求，也就是可以从不同来源的不同类型的资源进行加载</strong>。</li><li><code>registerBeanPostProcessors(BeanFactory)</code> ：获取所有的 <code>BeanPostProcessor</code>，并注册到 <code>BeanFactory</code> 维护的 <code>BeanPostProcessor</code> 列表去。</li><li><code>onRefresh</code> ：<br>a. <code>preInstantiateSingletons</code> ：以单例的方式，初始化所有 <code>Bean</code>。tiny-spring 只支持 <code>singleton</code> 模式。</li></ol><h4 id="IoC-实现的一些思考与分析"><a href="#IoC-实现的一些思考与分析" class="headerlink" title="IoC 实现的一些思考与分析"></a>IoC 实现的一些思考与分析</h4><h5 id="分析-1：AOP-可以在何处被嵌入到-IoC-容器中去？"><a href="#分析-1：AOP-可以在何处被嵌入到-IoC-容器中去？" class="headerlink" title="分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？"></a>分析 1：AOP 可以在何处被嵌入到 IoC 容器中去？</h5><p>在 <code>Bean</code> 的初始化过程中，会调用 <code>BeanPostProcessor</code> 对其进行一些处理。在它的 <code>postProcess...Initialization</code>方法中返回了一个 <code>Bean</code>，这个返回的 <code>Bean</code> 可能已经不是原来传入的 <code>Bean</code> 了，<strong>这为实现 AOP 的代理提供了可能</strong>！以 JDK 提供的动态代理为例，假设方法要求传入的对象实现了 <code>IObj</code> 接口，实际传入的对象是 <code>Obj</code>，那么在方法中，通过动态代理，可以 <strong>生成一个实现了 IObj 接口并把 Obj 作为内置对象的代理类 Proxy 返回</strong>，此时 <code>Bean</code> 已经被偷偷换成了它的代理类。</p><h5 id="分析-2：BeanFactory-和-ApplicationContext-设计上的耦合"><a href="#分析-2：BeanFactory-和-ApplicationContext-设计上的耦合" class="headerlink" title="分析 2：BeanFactory 和 ApplicationContext 设计上的耦合"></a>分析 2：BeanFactory 和 ApplicationContext 设计上的耦合</h5><p><code>BeanFactory</code> 中的 <code>BeanPostProcessor</code> 的列表是哪里生成的呢？是在 <code>ApplicationContext</code> 中的 <code>refresh</code> 方法的第二步，这里设计上应该有些问题，按理说 <code>ApplicationContext</code> 是基于 <code>BeanFactory</code> 的，<code>BeanFactory</code> 的属性的获取，怎么能依赖于 <code>ApplicationContext</code> 的调用呢？</p><h5 id="分析-3：tiny-spring-总体流程的分析"><a href="#分析-3：tiny-spring-总体流程的分析" class="headerlink" title="分析 3：tiny-spring 总体流程的分析"></a>分析 3：tiny-spring 总体流程的分析</h5><p>总体来说，tiny-spring 的 <code>ApplicaitonContext</code> 使用流程是这样的： </p><ol><li><code>ApplicationContext</code> 完成了类定义的读取和加载，并注册到 <code>BeanFactory</code> 中去。 </li><li><code>ApplicationContext</code> 从 <code>BeanFactory</code> 中寻找 <code>BeanPostProcessor</code>，注册到 <code>BeanFactory</code><br>维护的 <code>BeanPostProcessor</code> 列表中去。 </li><li><code>ApplicationContext</code> 以单例的模式，通过主动调用 <code>getBean</code> 实例化、注入属性、然后初始化 <code>BeanFactory</code> 中所有的 <code>Bean</code>。由于所有的 <code>BeanPostProcessor</code> 都已经在第 2 步中完成实例化了，因此接下来实例化的是普通 <code>Bean</code>，因此普通 <code>Bean</code> 的初始化过程可以正常执行。<br>\4. 调用 <code>getBean</code> 时，委托给 <code>BeanFactory</code>，此时只是简单的返回每个 <code>Bean</code> 单例，因为所有的 <code>Bean</code> 实例在第三步都已经生成了。</li></ol><h3 id="JDK-对动态代理的支持"><a href="#JDK-对动态代理的支持" class="headerlink" title="JDK 对动态代理的支持"></a>JDK 对动态代理的支持</h3><p>JDK 中几个关键的类：</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td><code>Proxy</code></td><td>来自 JDK API。提供生成对象的动态代理的功能，通过<code>Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code>方法返回一个代理对象。</td></tr><tr><td><code>InvocationHandler</code></td><td>来自 JDK API。通过 <code>Object invoke(Object proxy, Method method,Object[] args)</code> 方法实现代理对象中方法的调用和其他处理。</td></tr></tbody></table><p>假设以下的情况：</p><ul><li>对象 <code>obj</code> 实现了 <code>IObj</code> 接口，接口中有一个方法 <code>func(Object[] args)</code>。</li><li>对象 <code>handler</code> 是 <code>InvocationHandler</code> 的实例。</li></ul><p>那么，通过 <code>Proxy</code> 的 <code>newProxyInstance(obj.getClassLoader(), obj.getClass().getInterfaces(), handler</code>，可以返回 <code>obj</code> 的代理对象 <code>proxy</code>。</p><p>当调用 <code>proxy.func(args)</code> 时，对象内部将委托给 <code>handler.invoke(proxy, func, args)</code> 函数实现。</p><p>因此，<strong>在 handler 的 invoke 中，可以完成对方法拦截的处理</strong>。可以先判断是不是要拦截的方法，如果是，进行拦截（比如先做一些操作，再调用原来的方法，对应了 Spring 中的前置通知）；如果不是，则直接调用原来的方法。</p><h3 id="AOP-的植入与实现细节"><a href="#AOP-的植入与实现细节" class="headerlink" title="AOP 的植入与实现细节"></a>AOP 的植入与实现细节</h3><h4 id="在-Bean-初始化过程中完成-AOP-的植入"><a href="#在-Bean-初始化过程中完成-AOP-的植入" class="headerlink" title="在 Bean 初始化过程中完成 AOP 的植入"></a>在 <code>Bean</code> 初始化过程中完成 AOP 的植入</h4><p>解决 AOP 的植入问题，首先要解决 <strong>在 IoC 容器的何处植入 AOP</strong> 的问题，其次要解决 <strong>为哪些对象提供 AOP 的植入</strong> 的问题。<br>tiny-spring 中 <code>AspectJAwareAdvisorAutoProxyCreator</code> 类（以下简称 <code>AutoProxyCreator</code>）是实现 AOP 植入的关键类，它实现了两个接口：</p><ol><li><code>BeanPostProcessor</code> ：在 <code>postProcessorAfterInitialization</code> 方法中，使用动态代理的方式，返回一个对象的代理对象。解决了 <strong>在 IoC 容器的何处植入 AOP</strong> 的问题。</li><li><code>BeanFactoryAware</code> ：这个接口提供了对 <code>BeanFactory</code> 的感知，这样，尽管它是容器中的一个 <code>Bean</code>，却可以获取容器的引用，进而获取容器中所有的切点对象，决定对哪些对象的哪些方法进行代理。解决了 <strong>为哪些对象提供 AOP 的植入</strong> 的问题。</li></ol><h4 id="AOP-中动态代理的实现步骤"><a href="#AOP-中动态代理的实现步骤" class="headerlink" title="AOP 中动态代理的实现步骤"></a>AOP 中动态代理的实现步骤</h4><h5 id="动态代理的内容"><a href="#动态代理的内容" class="headerlink" title="动态代理的内容"></a>动态代理的内容</h5><p>首先，要知道动态代理的内容（拦截哪个对象、在哪个方法拦截、拦截具体内容），下面是几个关键的类：</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td><code>PointcutAdvisor</code></td><td>切点通知器，用于提供 <strong>对哪个对象的哪个方法进行什么样的拦截</strong> 的具体内容。通过它可以获取一个切点对象 <code>Pointcut</code> 和一个通知器对象 <code>Advisor</code>。</td></tr><tr><td><code>Pointcut</code></td><td>切点对象可以获取一个 <code>ClassFilter</code> 对象和一个 <code>MethodMatcher</code> 对象。前者用于判断是否对某个对象进行拦截（用于 <strong>筛选要代理的目标对象</strong>），后者用于判断是否对某个方法进行拦截（用于 <strong>在代理对象中对不同的方法进行不同的操作</strong>）。</td></tr><tr><td><code>Advisor</code></td><td>通知器对象可以获取一个通知对象 <code>Advice</code> 。就是用于实现 <strong>具体的方法拦截</strong>，需要使用者编写，也就对应了 Spring 中的前置通知、后置通知、环切通知等。</td></tr></tbody></table><h5 id="动态代理的步骤"><a href="#动态代理的步骤" class="headerlink" title="动态代理的步骤"></a>动态代理的步骤</h5><p>接着要知道动态代理的步骤：</p><ol><li><code>AutoProxyCreator</code>（实现了 <code>BeanPostProcessor</code> 接口）在实例化所有的 <code>Bean</code> 前，最先被实例化。</li><li>其他普通 <code>Bean</code> 被实例化、初始化，在初始化的过程中，<code>AutoProxyCreator</code> 加载 <code>BeanFactory</code> 中所有的 <code>PointcutAdvisor</code>（这也保证了 <code>PointcutAdvisor</code> 的实例化顺序优于普通 <code>Bean</code>。），然后依次使用 <code>PointcutAdvisor</code> 内置的 <code>ClassFilter</code>，判断当前对象是不是要拦截的类。</li><li>如果是，则生成一个 <code>TargetSource</code>（要拦截的对象和其类型），并取出 <code>AutoProxyCreator</code> 的 <code>MethodMatcher</code>（对哪些方法进行拦截）、<code>Advice</code>（拦截的具体操作），再，交给 <code>AopProxy</code> 去生成代理对象。</li><li><code>AopProxy</code> 生成一个 <code>InvocationHandler</code>，在它的 <code>invoke</code> 函数中，首先使用 <code>MethodMatcher</code> 判断是不是要拦截的方法，如果是则交给 <code>Advice</code> 来执行（<code>Advice</code> 由用户来编写，其中也要手动/自动调用原始对象的方法），如果不是，则直接交给 <code>TargetSource</code> 的原始对象来执行。</li></ol><h3 id="设计模式-1"><a href="#设计模式-1" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="代理模式-1"><a href="#代理模式-1" class="headerlink" title="代理模式"></a>代理模式</h4><p>通过动态代理实现，见分析1中的内容，不再赘述。</p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>生成代理对象时，可以使用 JDK 的动态代理和 Cglib 的动态代理，对于不同的需求可以委托给不同的类实现。</p><h3 id="为-tiny-spring-添加拦截器链"><a href="#为-tiny-spring-添加拦截器链" class="headerlink" title="为 tiny-spring 添加拦截器链"></a>为 tiny-spring 添加拦截器链</h3><p>tiny-spring 不支持拦截器链，可以模仿 Spring 中拦截器链的实现，实现对多拦截器的支持。<br>tiny-spring 中的 <code>proceed()</code> 方法是调用原始对象的方法 <code>method.invoke(object,args)</code>。（参见 <code>ReflectiveMethodInvocation</code> 类)<br>为了支持多拦截器，做出以下修改：</p><ul><li>将 <code>proceed()</code> 方法修改为调用代理对象的方法 <code>method.invoke(proxy,args)</code>。</li><li>在代理对象的 <code>InvocationHandler</code> 的 <code>invoke</code> 函数中，查看拦截器列表，如果有拦截器，则调用第一个拦截器并返回，否则调用原始对象的方法。</li></ul>]]></content>
      
      <categories>
          
          <category> java Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我未曾见过你，而你的光却照耀到了我</title>
      <link href="/2018/03/14/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%88%91%E6%9C%AA%E6%9B%BE%E8%A7%81%E8%BF%87%E4%BD%A0-%E8%80%8C%E4%BD%A0%E7%9A%84%E5%85%89%E5%8D%B4%E7%85%A7%E8%80%80%E5%88%B0%E4%BA%86%E6%88%91/"/>
      <url>/2018/03/14/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%88%91%E6%9C%AA%E6%9B%BE%E8%A7%81%E8%BF%87%E4%BD%A0-%E8%80%8C%E4%BD%A0%E7%9A%84%E5%85%89%E5%8D%B4%E7%85%A7%E8%80%80%E5%88%B0%E4%BA%86%E6%88%91/</url>
      <content type="html"><![CDATA[<p>2017年12月27日，冰岛一辆载有多名中国公民的旅游大巴发生翻车事故，造成一名中国人死亡，另有12人重伤。在这场事故中，我们的子涵姐不幸离世。</p><p>可我直到昨天查看子涵姐的电台才发现这消息。愣了，好端端的一个人，说没就没了。</p><p>最近在看《孤独又灿烂的神 —— 鬼怪》，88年出生的子涵姐算下来是29岁走的，或许她就是那群遗漏者之一吧。可惜了~</p><blockquote><p>“ 无常 “</p></blockquote><p>不要沉迷过去，不要害怕未来，</p><p>周围的东西分分钟都在变化，我们是无法控制的，</p><p>与其有时间去大把的回忆它曾经带给你的美好，</p><p>不如变成行动派，</p><p>快快去发现生活中更多的精彩吧</p><hr><p>去认识新的朋友，</p><p>去追新的美剧，</p><p>去建立新的兴趣爱好，</p><p>你总会发现，</p><p>“留”与“逝”之间，其实碰撞出来的，</p><p>是人生中更精彩的花火</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=483717360&auto=1&height=66"></iframe><hr><p>最后，警戒各位，即便是乘坐大巴，也请务必系好安全带。</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎 子涵 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>回调函数（callback）是什么？</title>
      <link href="/2017/08/31/frontEnd-ajax-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%EF%BC%88callback%EF%BC%89%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2017/08/31/frontEnd-ajax-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%EF%BC%88callback%EF%BC%89%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。<br>发布于 2011-08-06</p><p>作者：常溪玲链接：<a href="https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。" target="_blank" rel="noopener">https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><hr><p>参考：<br><a href="https://www.zhihu.com/question/19801131" target="_blank" rel="noopener">回调函数（callback）是什么？</a></p>]]></content>
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven项目jar包导入失败</title>
      <link href="/2017/08/22/backEnd-maven-maven%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/"/>
      <url>/2017/08/22/backEnd-maven-maven%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5/</url>
      <content type="html"><![CDATA[<p>eclipse中导入maven项目时，从仓库中下载jar包失败。<br>提示缺失jar包<br>cmd  maven install 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Maven 安装 JAR 包的命令是：</span><br><span class="line">mvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar</span><br></pre></td></tr></table></figure></p><p>eg:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=c:/Access_JDBC30.jar -DgroupId=com.hxtt -DartifactId=Access_JDBC30 -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure></p><hr><p>#参考</p><p>##将jar包安装到本地repository中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=my-jar.jar -DgroupId=org.richard -DartifactId=my-jar -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure></p><p>在<a href="http://mvnrepository.com/中找到对应的jar：" target="_blank" rel="noopener">http://mvnrepository.com/中找到对应的jar：</a><br>以 <a href="http://lib.csdn.net/base/javaee" target="_blank" rel="noopener">spring</a>-context-support-3.1.0.RELEASE.jar 为例，在 @3图中已经给出这个 jar 包的 groupId，artifactId，version信息，<br>手动安装的时候这些信息不要改，否则 Maven 项目移植的话，jar 包下载就会失败。顺便把这信息帖下面，方便对照：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><hr><p>参考来自<br><a href="http://blog.csdn.net/superit401/article/details/51567646" target="_blank" rel="noopener">向maven仓库中手动安装本地jar的三种方法 - - CSDN博客</a></p>]]></content>
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>eclipse中批量修改Java类文件中引入的package包路径</title>
      <link href="/2017/08/05/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-eclipse%E4%B8%AD%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9Java%E7%B1%BB%E6%96%87%E4%BB%B6%E4%B8%AD%E5%BC%95%E5%85%A5%E7%9A%84package%E5%8C%85%E8%B7%AF%E5%BE%84/"/>
      <url>/2017/08/05/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-eclipse%E4%B8%AD%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9Java%E7%B1%BB%E6%96%87%E4%BB%B6%E4%B8%AD%E5%BC%95%E5%85%A5%E7%9A%84package%E5%8C%85%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<p>当复制其他工程中的包到新工程的目录中时，由于包路径不同，出现红叉，下面的类要一个一个修改包路径，类文件太多的话就比较麻烦了，如何批量改变包路径解决这个问题？</p><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>Ctrl+H &gt; File Serach &gt; 输入原包名 &gt; File name patterns下填写*.java &gt; Replace… &gt; 找到后输入要替换的包名 然后自己选择是全部替换还是部分替换.<br><img src="http://upload-images.jianshu.io/upload_images/1171873-7d92f8f3597989f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>直接修改出错的类所在的包的名称再改回来，这样就可以统一修改所有出错的类的package包名称。</p><hr><p>原文转载自：<a href="https://my.oschina.net/leeoo/blog/37852" target="_blank" rel="noopener">https://my.oschina.net/leeoo/blog/37852</a></p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>$(this)-id和$(this)-attr(&#39;id&#39;)</title>
      <link href="/2017/06/18/frontEnd-ajax-this-id%E5%92%8C-this-attr-id/"/>
      <url>/2017/06/18/frontEnd-ajax-this-id%E5%92%8C-this-attr-id/</url>
      <content type="html"><![CDATA[<p>返回元素都是<strong>ID</strong>，但如果元素没有<strong>ID</strong>，$(this).id  会返回一个空字符串，而<br>  $(this).attr(“id”)  将返回<strong>undefined</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;btn btn-info  modifyuser&quot; href=&quot;#&quot;  id=&quot;$&#123;user.id &#125;&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;icon-edit icon-white &quot;&gt;&lt;/i&gt;  </span><br><span class="line">修改                                            </span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>js中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.modifyuser&quot;).click(function(e)&#123;</span><br><span class="line">var m_id = $(this).attr(&apos;id&apos;);</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>当中的$(this).attr(‘id’)。”this”是指为”.modifyuser”所在的标签，这个标签当中的属性：id<br>既$(“.modifyuser”).getAttribute(‘id’)。</p><hr><p>参考：<a href="https://stackoverflow.com/questions/5597317/this-id-vs-this-attrid" target="_blank" rel="noopener">this.id vs. $(this).attr(‘id’)</a></p>]]></content>
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用ajax()方法加载服务器数据</title>
      <link href="/2017/06/16/frontEnd-ajax-%E4%BD%BF%E7%94%A8ajax-%E6%96%B9%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%B0%E6%8D%AE/"/>
      <url>/2017/06/16/frontEnd-ajax-%E4%BD%BF%E7%94%A8ajax-%E6%96%B9%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>使用<strong>ajax()</strong>方法是最底层、功能最强大的请求服务器数据的方法，它不仅可以获取服务器返回的数据，还能向服务器发送请求并传递数值，它的调用格式如下：</p><blockquote><p> jQuery.ajax([settings])或$.ajax([settings])</p></blockquote><p>其中参数<strong>settings</strong>为发送<strong>ajax</strong>请求时的配置对象，<br>在该对象中，<br><strong>url</strong>表示服务器请求的路径，<br><strong>data</strong>为请求时传递的数据，<br><strong>dataType</strong>为服务器返回的数据类型，<br><strong>success</strong>为请求成功的执行的回调函数，<br><strong>type</strong>为发送数据请求的方式，默认为<strong>get</strong>。</p><p>例如，点击页面中的“加载”按钮，调用ajax()方法向服务器请求加载一个txt文件，并将返回的文件中的内容显示在页面，如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/1171873-b519733b1067b0d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在浏览器中显示的效果：<br><img src="http://upload-images.jianshu.io/upload_images/1171873-f303213b27973778.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>从图中可以看出，当点击“加载”按钮时，调用$.ajax()<br>方法请求服务器中txt文件，当请求成功时调用success回调函数，获取传回的数据，并显示在页面中。</p><pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;    &lt;head&gt;        &lt;title&gt;使用ajax()方法加载服务器数据&lt;/title&gt;        &lt;script src=&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;        &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;    &lt;/head&gt;        &lt;body&gt;        &lt;div id=&quot;divtest&quot;&gt;            &lt;div class=&quot;title&quot;&gt;                &lt;span class=&quot;fl&quot;&gt;检测数字的奇偶性&lt;/span&gt;                 &lt;span class=&quot;fr&quot;&gt;                    &lt;input id=&quot;btnCheck&quot; type=&quot;button&quot; value=&quot;检测&quot; /&gt;                &lt;/span&gt;            &lt;/div&gt;            &lt;ul&gt;               &lt;li&gt;请求输入一个数字                    &lt;input id=&quot;txtNumber&quot; type=&quot;text&quot; size=&quot;12&quot; /&gt;               &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;        &lt;script type=&quot;text/javascript&quot;&gt;            $(function () {                $(&quot;#btnCheck&quot;).bind(&quot;click&quot;, function () {                    $.ajax({                        url:&quot;http://www.imooc.com/data/check.php&quot;,                        data: { num: $(&quot;#txtNumber&quot;).val() },                        type:&quot;GET&quot;,                        success: function (data) {                            $(&quot;ul&quot;).append(&quot;&lt;li&gt;你输入的&lt;b&gt;  &quot;                            + $(&quot;#txtNumber&quot;).val() + &quot; &lt;/b&gt;是&lt;b&gt; &quot;                            + data + &quot; &lt;/b&gt;&lt;/li&gt;&quot;);                        }                    });                })            });        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><hr><p>success中的”<strong>result</strong>“的值是服务器处理后返回的值，返回值类型在dataType中定义了</p><hr><blockquote><p>success<br>类型：Function<br>请求成功后的回调函数。<br>参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。<br>这是一个 Ajax 事件。</p></blockquote><p><a href="http://www.w3school.com.cn/jquery/ajax_ajax.asp" target="_blank" rel="noopener">jQuery ajax - ajax() 方法</a><br><a href="http://www.imooc.com/code/13474" target="_blank" rel="noopener">慕课网——jQuery基础(五)一Ajax应用与常用插件</a></p>]]></content>
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决CentOS（6和7版本），-etc-sysconfig-下没有iptables的问题</title>
      <link href="/2017/05/23/linux-%E8%A7%A3%E5%86%B3CentOS%EF%BC%886%E5%92%8C7%E7%89%88%E6%9C%AC%EF%BC%89%EF%BC%8C-etc-sysconfig-%E4%B8%8B%E6%B2%A1%E6%9C%89iptables%E7%9A%84%E9%97%AE%E9%A2%98-%E5%89%AF%E6%9C%AC/"/>
      <url>/2017/05/23/linux-%E8%A7%A3%E5%86%B3CentOS%EF%BC%886%E5%92%8C7%E7%89%88%E6%9C%AC%EF%BC%89%EF%BC%8C-etc-sysconfig-%E4%B8%8B%E6%B2%A1%E6%9C%89iptables%E7%9A%84%E9%97%AE%E9%A2%98-%E5%89%AF%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>##一、Centos 6版本解决办法：</p><ol><li><p>任意运行一条iptables防火墙规则配置命令：</p><blockquote><p>iptables -P OUTPUT ACCEPT  </p></blockquote></li><li><p>对iptables服务进行保存：</p><blockquote><p>service iptables save  </p></blockquote></li><li><p>重启iptables服务：</p><blockquote><p>service iptables restart </p></blockquote></li></ol><p>##二、Centos 7版本解决办法：</p><ol><li><p>停止并屏蔽firewalld服务</p><blockquote><p>systemctl stop firewalld<br>systemctl mask firewalld</p></blockquote></li><li><p>安装iptables-services软件包</p><blockquote><p>yum install iptables-services</p></blockquote></li><li><p>在引导时启用iptables服务</p><blockquote><p>systemctl enable iptables</p></blockquote></li><li><p>启动iptables服务</p><blockquote><p>systemctl start iptables</p></blockquote></li><li><p>保存防火墙规则</p><blockquote><p>service iptables save<br>或<br>/usr/libexec/iptables/iptables.init save</p></blockquote></li></ol><p><strong>另外：管理iptables服务</strong></p><blockquote><p>systemctl [stop|start|restart] iptables</p></blockquote><hr><p>注：原文摘自==&gt;<a href="http://blog.csdn.net/CSDN_LQR/article/details/53885808" target="_blank" rel="noopener">解决CentOS（6和7版本），/etc/sysconfig/下没有iptables的问题</a></p>]]></content>
      
      <categories>
          
          <category> 系统 Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux centos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>apahce错误提示the-requested-operation-has-failed</title>
      <link href="/2017/04/23/backEnd-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE-apahce%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BAthe-requested-operation-has-failed/"/>
      <url>/2017/04/23/backEnd-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE-apahce%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BAthe-requested-operation-has-failed/</url>
      <content type="html"><![CDATA[<p>今天在修改了<strong>httpd.conf</strong>文件配置之后启动<strong>apache</strong>时提示<strong>the requested operation has failed </strong><br>错误，无法正常启动apache了，后来搜索了一些解决办法，下面分享给各位同学，有需要了解的朋友可参考。**</p><p><strong>找到解决方法：</strong><br>运行cmd 进入到<a href="http://www.111cn.net/list-121/" target="_blank" rel="noopener">apache</a>的bin目录。输入httpd.exe -w -n “Apache2.2” -k start<br>看到这个哥就笑了 原来是180行有问题 找到的时候才知道 180行这个<br>DocumentRoot “D:/www/demo”  就是没有这个目录<br>之后把这个删除了 就运动正常了 后来才明白 之前服务器主人 www 目录下有demo这个文件夹 之后删除了<br>就没有把http.conf 下的配置删除<br>重启就没有问题了<br>如果不会ddos命令的朋友我们可以进入你apache安装上当，然后打开httpd.conf，修改你写错误的地址也是可以地。<br>后来网上找到了一些导致apache 提示<strong>the <a href="http://www.111cn.net/tags.php/request/" target="_blank" rel="noopener">request</a>ed operation has failed</strong> 原因总结<br>原因一：80端口占用 例如IIS，另外就是迅雷。我的apache服务器就是被迅雷害得无法启用！<br>原因二：软件冲突 装了某些软件会使apache无法启动如Dr.com 你打开网络连接-&gt;TcpIp属性-&gt;高级-&gt;WINS标签 把netbios的lmhosts对勾去掉，禁用tcp/ip的netbios. 然后再启动应该就可以了。<br>原因三：httpd.conf配置错误 如果apache的配置文件httpd.conf搞错了，在windows里启动它，会提示the requested operation has failed</p>]]></content>
      
      <categories>
          
          <category> 服务配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apahce </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Update 与 Modify 两者区别</title>
      <link href="/2017/03/24/%E7%A7%91%E6%99%AE-Update%E4%B8%8EModify%E4%B8%A4%E8%80%85%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/03/24/%E7%A7%91%E6%99%AE-Update%E4%B8%8EModify%E4%B8%A4%E8%80%85%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<ul><li>Update更强调时效性，侧重于新加的内容是近期才产生的。</li><li>Modify更偏向于调整和修改(措辞、语法、结构之类的润色)使内容更完善/完美之类的，对时效性之类的没有强调。</li></ul>]]></content>
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis 配置安装</title>
      <link href="/2017/03/24/backEnd-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE-Redis/"/>
      <url>/2017/03/24/backEnd-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE-Redis/</url>
      <content type="html"><![CDATA[<h2 id="Install-Redis-for-windows"><a href="#Install-Redis-for-windows" class="headerlink" title="Install Redis for windows"></a>Install Redis for windows</h2><p><a href="https://github.com/ServiceStack/redis-windows" target="_blank" rel="noopener">https://github.com/ServiceStack/redis-windows</a></p><p>安装步骤：</p><ol><li><p>安装linux虚拟机</p></li><li><p>拷贝Redis压缩包</p></li><li><p>解压缩</p></li><li><p>进入解压目录，进行make操作</p></li><li><p>make PREFIX=”/opt/kgc/install/redis3” install</p><p>cd src &amp;&amp; make install</p><blockquote><p>PREFIX=””：是安装的路径</p></blockquote></li><li><p>如果出现一个bin目录，说明安装成功了</p></li></ol><h2 id="Redis工具简介"><a href="#Redis工具简介" class="headerlink" title="Redis工具简介"></a>Redis工具简介</h2><p>redis-server：用来启动Redis的工具</p><p>redis-bencnmark：检测Redis在本机的运行效率</p><p>redis-check-aof：修复AOE持久化</p><p>redis-check-rdb：修复RDB持久化文件</p><p>redis-cli：命令行工具</p><p>redis-sentinel：软链接</p><h2 id="Redis使用"><a href="#Redis使用" class="headerlink" title="Redis使用"></a>Redis使用</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>想启动Redis，需要Redis的配置文件</p><blockquote><p>路径：cd redis-3.2.3</p><p>当中有“redis.conf”，是redis默认的配置文件</p><p>将这个文件拷贝出去，cp 文件名  拷贝后的路径</p></blockquote><p>接着，在redis解压后中的bin文件夹，找到“redis-server“</p><p>启动服务</p><blockquote><p>./redis-server  ../redis.conf      #启动server命令，并让server启动哪个配置文件</p></blockquote><p>当看到一个六角形图标出现的时候，就说明Redis启动成功了</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-e0742e98607cbed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="redis-bencnmark"><a href="#redis-bencnmark" class="headerlink" title="redis-bencnmark"></a>redis-bencnmark</h3><p>在bin目录下。执行：./redis-bencnmark</p><p>会进行一段比较长的时间扫描、检测</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-d25045bd9595e1fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>redis-bencnmark检测后的吞吐量：37313.43。（配置：deepin、2G内存、1核CPU）</p><p>2013年Redis官方发布，如果没有性能评定的话<strong>Redis</strong>的秒吞吐量应该能达到60万。</p></blockquote><h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h3><p>进入Redis命令界面</p><p>因为是key、value的存储方式</p><p>命令：</p><p>redis-cli  #进入redis</p><blockquote><p>set k1 v1</p><p>会提示：OK</p><p>取出数据：get k1</p><p>弹出：”v1“</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1171873-786d168690352aba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="redis-sentinel"><a href="#redis-sentinel" class="headerlink" title="redis-sentinel"></a>redis-sentinel</h3><p>软连接，相当于<strong>redis-server</strong></p><hr><p><strong>（运行redis以上的命令的前提：启动redis成功，既执行：redis-server）</strong></p><h2 id="Redis常见应用场景"><a href="#Redis常见应用场景" class="headerlink" title="Redis常见应用场景"></a>Redis常见应用场景</h2><ul><li>缓存（最基本的优点）</li><li>取最新N个数据的操作，List</li><li>排行榜类的应用</li><li>计数器应用<ul><li>Redis本身自带这方面的API</li></ul></li><li>存储关系</li><li>实时分析系统</li><li>记录日志（最基本的优点）</li></ul>]]></content>
      
      <categories>
          
          <category> 服务配置 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>windows10关闭自动更新</title>
      <link href="/2017/01/24/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-windows10%E5%85%B3%E9%97%AD%E2%80%9C%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E2%80%9D/"/>
      <url>/2017/01/24/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-windows10%E5%85%B3%E9%97%AD%E2%80%9C%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E2%80%9D/</url>
      <content type="html"><![CDATA[<p><strong>方法一：禁用Windows updata服务</strong><br>Windows updata为自动更新的服务，我们只要将其禁用，也就可以达到更新服务不可用的目的从而阻止自动更新；操作步骤：按WIN+R 打开运行，输入 services.msc 回车 然后找到 “Windows updata”服务，双击后设置为禁用 应用即可；<br><img src="http://upload-images.jianshu.io/upload_images/1171873-706fe65a3311855e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>方法二：推迟自动更新</strong><br>微软在win10系统中Windows更新处虽然没有提供关闭自动更新的选项，不过却提供了延迟更新的选项；操作步骤：打开win10系统的Windows更新，点击高级选项，勾选“推迟升级”选项即可；（同样，我们也可以在组策略中的Windows组件-Windows更新 下 启用“延迟升级”达到推迟几个月升级的目的）<br><img src="http://upload-images.jianshu.io/upload_images/1171873-cb817e2ec1d840d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>方法三：为windows更新指定一个错误的升级服务器地址</strong><br>在win10系统中，组策略中我们可以为Windows更新服务器指定一个地址，从而达到无法检测到更新，而无法更新的目的。操作步骤：按“Win+R”组合键打开运行输入“gpedit.msc”再点“确定”。打开“本地组策略编辑器”展开“管理模版”→“Windows组件”。接着双击“Windows组件”找到“Windows Update”。在“Windows Update”内找到“指定Intranet Microsoft更新服务位置”。选中“指定Intranet Microsoft更新服务位置”右键编辑。将“未配置”框选为“已启用”。再在“设置检测更新的Intranet更新服务”填写127.0.0.1 (注：127.0.0.1为本机IP)<br><img src="http://upload-images.jianshu.io/upload_images/1171873-37773d28d91ab823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意：win10基础版将不会有组策略等功能，也无法关闭自动更新！PS：我们了解到新的Windows系统，要求用户接受每一次更新。“Windows 10家庭版”用户(绝大多数消费者所用版本)完全无法逃避更新；“<a href="http://www.xitonghe.com/win10/" target="_blank" rel="noopener">Windows10专业版</a>”用户有8个月的时间来推迟安装更新，但同样无法拒绝；只有“Windows 10企业版”高级用户才能无限期推迟更新。</p><hr><p>（注：本文非原创，因为需要随便百度来的，作为记录，防止以后忘了而已，部分因时间原因导致文与实际不符。作参考）</p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat提示指定的服务未安装Unable to open the service &#39;tomcat&#39;</title>
      <link href="/2017/01/21/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-Tomcat%E6%8F%90%E7%A4%BA%E6%8C%87%E5%AE%9A%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%9C%AA%E5%AE%89%E8%A3%85Unable-to-open-the-service-tomcat/"/>
      <url>/2017/01/21/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-Tomcat%E6%8F%90%E7%A4%BA%E6%8C%87%E5%AE%9A%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%9C%AA%E5%AE%89%E8%A3%85Unable-to-open-the-service-tomcat/</url>
      <content type="html"><![CDATA[<p>装了windows10后，tomcat莫名其妙的不能用，网上七姑八婆说win10不能用解压版，只能用安装版@#$%^&amp;^%$^&amp;…啧啧啧。然后用解压版后就出现了这个问题</p><hr><p>在使用NetBeans时出现如下所示错误，其原因是部分已安装的组件没有以服务的方式存在。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-5c5aed60d49d7622?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>下面就是解决办法：<br>   打开“运行”到“cmd”，然后进入到tomcat安装路径“*:\Program Files (x86)\Apache Tomcat 8.0.3\bin”的bin下面，然后输入如下所示内容即可：service.bat install<br>效果如下图所示：</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-18e59ba54e43616b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>图2 安装后界面</p><h2 id="在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。"><a href="#在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。" class="headerlink" title="在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。"></a>在安装之后，我们能够看到已经安装成功字符，这时就可以正常启动tomcat。</h2><p>当然，你也可以这样玩，那就是安装之后又卸载，卸载时在安装后界面输入以下代码即可：service.bat uninstall,就这样，完成了卸载，那我们就继续从头开始安装吧，哈哈</p><p>以上就是Tomcat提示指定的服务未安装Unable to open the service ‘tomcat’的解决方法。</p><hr><p>声明：<br>本文转载自<a href="http://blog.csdn.net/suwu150" target="_blank" rel="noopener">suwu150的博客</a><br> <a href="http://blog.csdn.net/suwu150/article/details/51506493" target="_blank" rel="noopener">Tomcat提示指定的服务未安装Unable to open the service ‘tomcat’</a></p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google18岁了</title>
      <link href="/2016/11/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-Google18%E5%B2%81%E4%BA%86/"/>
      <url>/2016/11/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-Google18%E5%B2%81%E4%BA%86/</url>
      <content type="html"><![CDATA[<p><a href="https://www.google.com.hk/search?newwindow=1&amp;safe=strict&amp;site=&amp;q=Google&amp;oi=ddle&amp;ct=googles-18th-birthday-5661535679545344-hp&amp;hl=zh-CN&amp;sa=X&amp;ved=0ahUKEwjo8uvknq7PAhVEH5QKHV40De0QPQgE" target="_blank" rel="noopener"><img src="https://www.google.com.hk/logos/doodles/2016/googles-18th-birthday-5661535679545344-hp.gif" alt="googles-18th-birthday-5661535679545344-hp.gif"></a><br><img src="http://upload-images.jianshu.io/upload_images/1171873-fa08b5a26d07154d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>一早开电脑就被萌萌哒的图惊艳到，眼皮也被这气球拉上去了。哈哈</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>分数，教育的目的</title>
      <link href="/2016/11/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E5%88%86%E6%95%B0%EF%BC%8C%E6%95%99%E8%82%B2%E7%9A%84%E7%9B%AE%E7%9A%84/"/>
      <url>/2016/11/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E5%88%86%E6%95%B0%EF%BC%8C%E6%95%99%E8%82%B2%E7%9A%84%E7%9B%AE%E7%9A%84/</url>
      <content type="html"><![CDATA[<p>——摘自 <a href="http://open.163.com/movie/2016/10/V/A/MC22UD6NI_MC2374LVA.html" target="_blank" rel="noopener">【TED】考试分数不是教育的目的</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-17720d4afdf33fe1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>虽然成绩能够检验我们的知识掌握程度，但也不能成为唯一的衡量标准。</p><p>教育家萨尔曼·可汗（Salman Khan）先生（可汗学院创始人）对此在演讲中分享了两个方面内容：</p><blockquote><p>一个是掌握的技巧，另一个是思维方式。</p></blockquote><p>假设我们现在正身处某中学的数学课堂，课题是指数函数，老师就此内容来上课，然后我们回家做一些相关习题。第二天早上，老师会检查这些作业，之后又是上课，做作业，上课，做作业。</p><p>这样大概会持续几周，就该测验了。在考试中，我也许只会75%的题目，你可能会90%，他可能会95%。但即使考试能帮助我们查缺补漏，可还是会有25%的内容没有掌握。就算那些得A的学生，依旧有5%的内容没有搞懂。但课堂还是会继续，进入下一个课题，它可能是更加复杂的内容，然后会建立在我们的知识漏洞之上。</p><p>因此这并不是学科本身难学，或是因为学生不聪明，而是因为他们<strong>在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习，就导致了他们认为自己没有学习天赋。</strong></p><p>只能当我们长大一点，有了一定的动力并决定下功夫去学时，才会发现自己其实是有能力学好的。</p><p>所以<br>萨尔曼提出：只有掌握了最基本的，我们才能去挑战更难得。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-80149240ae8da39b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这就好比造房子。你请来包工头，告诉他们两周之内打好地基，两周之后你来验收，看到地基整体还不错，但有一些小问题，你对包工头说：你打的地基我能给你80分。 但是不用返工，你们开始建第一层吧，给你们一周时间。 一周过去了，你又来验收，这次问题百出，你只给他们打了60分，但工程并没有停。 最后，在建到第三层的时候，楼房轰然倒塌。</p><p>学习也是如此，<strong>我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。</strong></p><p>因此萨尔曼再次提出：<strong>我们应该将人为的限制、僵化，转换成另一种方式。学生之间的差异应该是用多久和怎么学才能掌握一门学科，最重要的是，让学生们真正掌握知识，培养一种正确的思维方式，而非取得高分。</strong>这可以让他们认识到如果他们只考了80份，也不代表他们天生就只有80分的水平，而是说明他们还需要在这20%的内容上继续努力、迎难而上。</p><p>而且每个学生其实都应该遵循自己的学习进度，进行有个性化的一对一辅导，和有针对性的练习。</p><p>当然，这并不是什么全新的观念，在100年前的伊利诺伊州，温内特卡市就有这样的实践：他们尝试了这种以掌握为目的的教学，成果很显著，但是他们表示很难大面积推广，毕竟可行性太低了。</p><p>于是，基于此，萨尔曼可汗创立了可汗学院，旨在为全世界的人提供高质量的免费学习资源。 这样，学生就能够真正掌握知识，由此培养他们积极的心里，建立对学习的热情，以达到“倒三角”的理想状态。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-94f67ba4827bffd3.gif?imageMogr2/auto-orient/strip" alt></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>在学习中不断积累着知识漏洞，当开始上新课时，之前的漏洞就会阻碍对于新知识的学习</li><li>我们用人为的方式去限制完成学习的时间，几乎可以确定，一定会有出入，然后我们检查也发现了问题，但却又将错就错。</li><li>重要的是，让学生们真正掌握知识，培养一种正确的思维方式</li></ul>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>阶级</title>
      <link href="/2016/11/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-Many-Doors-In-My-Life/"/>
      <url>/2016/11/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-Many-Doors-In-My-Life/</url>
      <content type="html"><![CDATA[<p>而所谓阶级意识，是人们更愿意去寻找在思想上具有相似性和认同感的人。出身会成为划分社会阶级的第一标准，但自身的硬实力使能够改变则中既定阶级的。财富是靠积累的，至于是上一代的还是这一代的还是下一代的，从哪一代开始积累，全凭个人的觉悟和本事。社会本来就是不公平，而在这种不公平的环境下采取一种什么样的态度来面对，是要看个人心态的。</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《越晚越开心》停播</title>
      <link href="/2016/11/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E3%80%8A%E8%B6%8A%E6%99%9A%E8%B6%8A%E5%BC%80%E5%BF%83%E3%80%8B%E5%81%9C%E6%92%AD/"/>
      <url>/2016/11/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E3%80%8A%E8%B6%8A%E6%99%9A%E8%B6%8A%E5%BC%80%E5%BF%83%E3%80%8B%E5%81%9C%E6%92%AD/</url>
      <content type="html"><![CDATA[<p>岁月就像旺财<br>解开那条狗绳的时候，就跑得特快特快<br>突然间，发现自己度过了青春期，走过了高考，读完了大学，毕业且工作</p><p>这些年很多事情都已经改变，很多人也成为了回忆</p><p>一直非常温暖，岁月改变了很多<br>唯一不变的，从高中到今天，每晚10点准时出现的两位姐姐，<br>时而神经时而傻里傻气～</p><p>依旧是那个声音；<br>依旧是熟悉的片曲；<br>却忘了已有 5个年头。</p><p>就像《一点钟情》那样，之后的某天某时习惯性打开收音机，调到那个频道，却没能等到那开场白，心里空了一块一样。<br>大家舍不得的是那个回不去的时光，那个夜里10点后有两位陪伴的时光</p><p>但那都即将是过去式了，在未来日子里占有不过是美好的一隅。<br>就像XX（不知是陆瑾还是腾琪）说的那样：</p><blockquote><p>所以我发现每一个节目都能够陪伴不同的听友，陪他们不断的成长</p></blockquote><p>陆瑾、腾琪<br>请原谅我到现在还没分清谁和谁的声音。</p><p>祝各位万事吉祥</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>日常——google涂鸦</title>
      <link href="/2016/10/31/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%A5%E5%B8%B8%E2%80%94%E2%80%94google%E6%B6%82%E9%B8%A6/"/>
      <url>/2016/10/31/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%A5%E5%B8%B8%E2%80%94%E2%80%94google%E6%B6%82%E9%B8%A6/</url>
      <content type="html"><![CDATA[<p>昨天google主页的动画主题是“万圣节”。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-b59143894c87c939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Happy Halloween"></p><p>没想到的是今天这涂鸦还在主页上。昨晚通关了（共5关）。<br>通关之后还截图分享给小伙伴看，哈哈。小伙伴还说昨晚在抱怨没把手绘板带过来。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-86043ed434335a69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Happy Halloween2"></p><p>很好奇这些动态的涂鸦，google是怎么做的，flash和gif肯定不是google的作风。</p><p>后来找到了相关的，但并不是这种（游戏互动）的。</p><p>#####<a href="http://liucheng.name/1802/" target="_blank" rel="noopener">喜欢今天的Google LOGO 玛莎·葛兰姆 </a></p><blockquote><p>不过google当然不会这么简单的。我弄了弄，把其中的代码给挖了出来。用了几句css，和两张png图片，还有一大段js script。就完成了今天的google logo的作品</p></blockquote><p>#####<a href="http://www.cnblogs.com/hooray/archive/2011/05/11/2043122.html" target="_blank" rel="noopener">模拟谷歌今日使用的css动画</a></p><blockquote><p>不知道大家有没有注意到谷歌今天官网上的logo，刚开始一看还以为是gif，在仔细一看，发现并非如此，原来是使用CSS，Sprite技术，利用一个初始图片和一张画满各个动作的拼接图片，从而实现了动画效果。</p></blockquote><p>#####<a href="http://www.cnblogs.com/hihuimin/archive/2011/05/11/2043327.html" target="_blank" rel="noopener">今天google 首页的javascript 动画实现。好吧，我来晚了。。。</a></p><blockquote><p>我的方法则是和google 一样，不断的插入带有背景的div 来实现的，先是建立一个这些div 样式信息[left, top, width, height, background-position-x, background-position-y] 的数组，然后用setTimeout 定时地插入带有这些样式的div 即可。）</p></blockquote><hr><p><img src="http://upload-images.jianshu.io/upload_images/1171873-0a146614f6d1af94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>每天打开google看主页动画<br>慢慢变成一种习惯。<br>喜欢这种文化，<br>喜欢与小伙伴分享每天的google涂鸦。<br>喜欢一起讨论当中的趣味，<br>google文化影响着我的生活<br>……</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>日常20161030</title>
      <link href="/2016/10/30/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%A5%E5%B8%B820161030/"/>
      <url>/2016/10/30/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%A5%E5%B8%B820161030/</url>
      <content type="html"><![CDATA[<p>昨天晚上看阮一峰大神的博客，中的一篇<a href="http://www.ruanyifeng.com/blog/2008/12/the_perils_of_javaschools.html" target="_blank" rel="noopener">《Java语言学校的危险性（译文）》</a>。</p><p>当中讲到了java中是没有<strong>指针</strong>和<strong>函数式编程</strong>。</p><p>但是，对于某些最激动人心的编程任务来说，指针仍然是非常重要的。<br>比如说，如果不用指针，你根本没办法开发Linux的内核。如果你不是真正地理解了指针，你连一行Linux的代码也看不懂，说实话，任何操作系统的代码你都看不懂。</p><p>如果你不懂函数式编程，你就无法创造出MapReduce，正是这种算法使得Google的可扩展性（scalable）达到如此巨大的规模。单词”Map”（映射）和”Reduce”（化简）分别来自Lisp语言和函数式编程。回想起来，在类似6.001这样的编程课程中，都有提到纯粹的函数式编程没有副作用，因此可以直接用于并行计算（parallelizable）。任何人只要还记得这些内容，那么MapRuduce对他来说就是显而易见的。发明MapReduce的公司是Google，而不是微软，这个简单的事实说出了原因，为什么微软至今还在追赶，还在试图提供最基本的搜索服务，而Google已经转向了下一个阶段，开发世界上最大的并行式超级计算机—-Skynet[8]的H次方的H次方的H次方的H次方的H次方的H次方。我觉得，微软并没有完全明白，在这一波竞争中它落后多远。</p><p>除了上面那些直接就能想到的重要性，指针和递归的真正价值，在于那种你在学习它们的过程中，所得到的思维深度，以及你因为害怕在这些课程中被淘汰，所产生的心理抗压能力，它们都是在建造大型系统的过程中必不可少的。指针和递归要求一定水平的推理能力、抽象思考能力，以及最重要的，在若干个不同的抽象层次上，同时审视同一个问题的能力。因此，是否真正理解指针和递归，与是否是一个优秀程序员直接相关。</p><hr><p>（20161031）<br>昨晚拜托老师帮问了这个问题。今天看到的回复。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-211ea514953b1508.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="  "></p><p>不要吐槽我问题渣啦～～慢慢会晋级的。</p><p>不过第二点个人觉得有点离题了。<br>昨晚快睡觉的时候看到这篇，<a href="http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html" target="_blank" rel="noopener">《为什么Lisp语言如此先进》</a>。<br>希望能够找个时间学习这方面的知识</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ubuntu修改SSH端口</title>
      <link href="/2016/09/11/linux-ubuntu%E4%BF%AE%E6%94%B9ssh%E7%AB%AF%E5%8F%A3/"/>
      <url>/2016/09/11/linux-ubuntu%E4%BF%AE%E6%94%B9ssh%E7%AB%AF%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>修改<strong>/etc/ssh/sshd_config</strong>，在<strong><em>Port 22</em></strong>下添加你的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 22</span><br></pre></td></tr></table></figure><p>Port YOUR_PORT</p><p>修改/etc/ssh/ssh_config，在Host *下添加你的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">Port 22</span><br><span class="line">Port YOUR_PORT</span><br><span class="line">\#   ForwardAgent no</span><br></pre></td></tr></table></figure></p><p>重启ssh</p><figure class="highlight plain"><figcaption><span>ssh restart```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">再ssh连接新的端口，成功连接后再修改上面的配置把22端口注释掉</span><br><span class="line">再在本机~/.ssh/下新建一个config文件，文件内容为：</span><br></pre></td></tr></table></figure><p>Host YOUR_HOST<br>    User YOUR_USER_NAME<br>    Port YOUR_NEW_PORT<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这样下次连接就只需要**ssh YOUR_HOST**就ok了。</span><br><span class="line"></span><br><span class="line">修改ssh默认端口后git的一些远程操作会失败，解决办法也是修改config文件：</span><br></pre></td></tr></table></figure></p><p>Host github.com<br>HostName github.com<br>Port 22<br>Host bitbucket.org<br>HostName bitbucket.org<br>Port 22<br><code>`</code><br>原文摘自“<a href="http://note.axiaoxin.com/contents/change-ubuntu-ssh-port.html" target="_blank" rel="noopener">阿小信的博客</a>”</p><hr><p>中午朋友说我服务器被人攻击，还成功登录了。丫的，密码设linux就是在作死啊……</p>]]></content>
      
      <categories>
          
          <category> 系统 Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sogou输入配置</title>
      <link href="/2016/09/07/linux-sogou%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/09/07/linux-sogou%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><a href="http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-7bda27d363237693.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="-1982943483"></a></p><p><a href="http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/" target="_blank" rel="noopener">2016年3月7日</a> / <a href="http://yamida.org/author/rabbit/" target="_blank" rel="noopener">芽蜜</a> / <a href="http://yamida.org/2016/03/07/sogou%e8%be%93%e5%85%a5%e9%85%8d%e7%bd%ae/#comments" target="_blank" rel="noopener">1 COMMENT</a></p><p>参考“<a href="https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">arch的wiki词条fctix</a>)”</p><p>装完sogou后，装上“ fctix-im ”“ fctix-qt5 ”。</p><p>在~.xprofile，~.bashrc，~.zshrc里面都写上以下三行代码【这里的”~”是指“/home/用户名/”下的，之前弄成在”/”下了，怪不得一直找不到.xprofile文件】(手动滑稽～)</p><blockquote><p>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XMODIFIERS=”@im=fcitx”</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1171873-4d080c26087320c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><blockquote><p>第二次装遇到最大的问题就是这个，哎～</p></blockquote>]]></content>
      
      <categories>
          
          <category> 系统 Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux sogou </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录《游戏性是什么》</title>
      <link href="/2016/06/13/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E8%AE%B0%E5%BD%95%E3%80%8A%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%8B/"/>
      <url>/2016/06/13/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E8%AE%B0%E5%BD%95%E3%80%8A%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>——内容摘选自《游戏性是什么》各章节</p><h2 id="游戏和身体"><a href="#游戏和身体" class="headerlink" title="游戏和身体"></a>游戏和身体</h2><ul><li>人类通过 <strong>Hand Regard </strong>对身体感觉进行后天学习。</li><li>身体感觉可以通过再次关联学习进行修正和扩展。</li><li>游戏的操作对象，就是人类通过再次关联学习扩展的身体。</li></ul><h2 id="游戏和视角"><a href="#游戏和视角" class="headerlink" title="游戏和视角"></a>游戏和视角</h2><p>通过观察，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是</p><blockquote><p>向特定方向移动重心。</p></blockquote><p>为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。</p><ul><li>大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。</li><li>在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。</li></ul><h2 id="游戏和世界"><a href="#游戏和世界" class="headerlink" title="游戏和世界"></a>游戏和世界</h2><ul><li>我们身处的世界可以分为作用空间和非作用空间。</li><li>根据身体功能的不同，作用空间意义也不同。</li><li>玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。</li></ul><h2 id="游戏和触觉"><a href="#游戏和触觉" class="headerlink" title="游戏和触觉"></a>游戏和触觉</h2><ul><li>游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。</li><li>玩家在进行游戏的同时，会加深对整个世界的认知。</li></ul><h2 id="专注于游戏的原因"><a href="#专注于游戏的原因" class="headerlink" title="专注于游戏的原因"></a>专注于游戏的原因</h2><ul><li>游戏是符号化的现实世界</li><li>麦克利兰的成就动机理论、马洛斯的需求层析理论融入游戏的设计机制</li><li>目前动机研究中，已经存在诸多先行课题。</li><li>心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。</li></ul><h2 id="难易度平衡设计与效率预测"><a href="#难易度平衡设计与效率预测" class="headerlink" title="难易度平衡设计与效率预测"></a>难易度平衡设计与效率预测</h2><ul><li>效率预估型的平衡设计</li><li>风险与时间成本的权衡</li><li>效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。</li></ul><h2 id="游戏设计的机制"><a href="#游戏设计的机制" class="headerlink" title="游戏设计的机制"></a>游戏设计的机制</h2><ul><li>游戏性，是为了引导玩家进行效率预估的一种设计机制。</li><li>引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。</li><li>Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。</li><li>Ludo同样可以应用在游戏之外的内容中。</li></ul><h2 id="叙事和Narreme"><a href="#叙事和Narreme" class="headerlink" title="叙事和Narreme"></a>叙事和Narreme</h2><ul><li>故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。</li><li>叙事是由故事和叙述构成的，讲述行为也成了分析的对象。</li><li>将构成游戏叙事的基本要素成为 Narreme。</li><li>Ludo 和 Narreme 互相影响，共同构成游戏。</li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li>游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。</li><li>游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。</li><li>影响游戏体验的外部因素是<strong>结构</strong>。</li><li>结构是“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1171873-2f1bdf7cec05bd52.gif?imageMogr2/auto-orient/strip" alt></p><h2 id="总结：游戏性是什么"><a href="#总结：游戏性是什么" class="headerlink" title="总结：游戏性是什么"></a>总结：游戏性是什么</h2><h3 id="从一名对游戏体验本身感兴趣的玩家的角度看待"><a href="#从一名对游戏体验本身感兴趣的玩家的角度看待" class="headerlink" title="从一名对游戏体验本身感兴趣的玩家的角度看待"></a>从一名对游戏体验本身感兴趣的玩家的角度看待</h3><p>不将现实世界和游戏世界做区分思考，而是<strong>将游戏世界视为现实世界的延伸，并且从人类自身的性质出发来分析游戏的吸引力和游戏性。</strong></p><p>糸川英夫曾在《世界玩具大图鉴》上发表过相关文章。其中他介绍了一个非常有名的实验，即“<strong>蚂蚁用25%的时间工作，用75%的时间玩耍</strong>”，他是这样说的：</p><blockquote><p>蚂蚁的那些乍一看并没有什么意义的玩耍行为，实际上是在对未来的变化做准备，是在学习各种情况来临时的应对能力。</p><p>蚂蚁们碰触蚁后的腹部，实际上是为了记住蚁后的气味，无论蚂蚁离开巢穴多远，它们都能够循着蚁后的味道归巢。</p><p>环境的变化是我们所无法预料到的，而能否应对环境的变化，则是一个关系着我们生存的至关重要的问题。</p><p>虽然蚂蚁75%的时间都偏离了运送食物的初衷，但这些玩耍时间也是使它们能够生存下去的必要部分。</p><p>人类和蚂蚁可以说是一样的。</p><p>那些一天24小时都用在工作上，没有时间玩耍和休闲的人，可能无法良好地应对环境的改变，而那些拥有充分时间玩耍的人，则能够灵活地应对改变，还能够开拓出具有创造性的生活方式。</p><p>因此，与其说像蚂蚁一样工作，不如说像蚂蚁一样玩耍。</p><p>——《玩耍权的回归》，糸川英夫，《世界玩具大图鉴：增刊太阳生活》，平凡社，1982年.</p></blockquote><p>如果如糸川先生所说，“玩耍”是为了提高适应未来能力的行为，那么我们所说的“游戏”可能还没达到“玩耍”的程度。因为在大多数人的理解之中，游戏和现实世界是完全分离开的。</p><p>若从现实世界和游戏世界的交融点——人的身体和认知等方面出发，以多个角度研究游戏。“动机”是本书最终的关键词，<strong>恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。</strong></p><p>不必再认为“游戏只有着能让人沉迷其中的特殊魔力”了。游戏，不过是利用了现实世界中人本身专注于某事的机制。若能理解这一点，就会发现，或许是游戏让我们发现了这种“专注机制”。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-28b73d9c8762a6ee.gif?imageMogr2/auto-orient/strip" alt></p><h3 id="从开发者的角度来看待"><a href="#从开发者的角度来看待" class="headerlink" title="从开发者的角度来看待"></a>从开发者的角度来看待</h3><p>首先，什么是游戏？<br><em>这里的“游戏”指电子游戏</em></p><p><strong>游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。</strong></p><p>而开发这种环境的行为被称为： <strong> 游戏设计 </strong>。</p><p>若将游戏世界视为现实世界的扩展，那么</p><blockquote><p>游戏是<strong>符号化的现实世界</strong>。<br>而在游戏中玩家控制的角色就是玩家在游戏世界中的身体扩展。</p></blockquote><p>而，<strong>游戏性，是为了引导玩家进行效率预估的一种设计机制。</strong>引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性）。</p><p>效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。</p><p>正好符合“<strong>恰当的挑战和难度，才能维持人的动机。而游戏通常是能够提供恰当挑战和难度的最合适的形式。</strong>”</p><p>这一动机理论的说法。心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。</p><p>极端概括来说，<em>游戏性（Ludo）</em>是游戏独特的“构造”，给这个构造赋予意识就是<em>叙事性（Narreme）</em>。</p><p>Narreme是叙事的基本构成要素，即能让人感知到某种故事的符号。</p><p>Narreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。</p><p>在初步了解专注游戏的原因后，进一步阐释了<strong>人接触游戏直到沉迷于游戏的整个过程。</strong></p><p>探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过<a href="http://www.jianshu.com/p/0053638192f0" target="_blank" rel="noopener">Hand Regard</a>等方式来学习以及成长。</p><p>之后，交互行为的经验，就会以故事的片段，即以叙事的形式铭刻在我们的记忆中。通过关联叙事性的片段，我们来理解“人生”这个故事。这些记忆也会成为一种指导，作为继续生存下去的基础。</p><p>如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。</p><hr><p>可能有点枯燥，但这真能从开发者的角度来学习看待问题的方式。<br>喜欢《游戏性是什么》这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>叙事和Narreme</title>
      <link href="/2016/06/12/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E5%8F%99%E4%BA%8B%E5%92%8CNarreme/"/>
      <url>/2016/06/12/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E5%8F%99%E4%BA%8B%E5%92%8CNarreme/</url>
      <content type="html"><![CDATA[<p>——《游戏性是什么》第12章</p><h2 id="游戏中的叙事分析"><a href="#游戏中的叙事分析" class="headerlink" title="游戏中的叙事分析"></a>游戏中的叙事分析</h2><p>游戏中的叙事研究是如何展开的？<br>早在20世纪70年代中期，游戏中就有了故事性要素，时至今日，游戏中的故事性要素更是取得了飞跃的发展，同是还向多方面进一步拓展。</p><p>在此背景下，诸多研究者开始致力于这个课题的研究，如：<br>丹麦游戏研究者杰斯帕·居尔，曾对叙事定义与游戏做了对照分析。他指出，游戏的叙事性，</p><blockquote><p>会随叙事定义的不同、对象游戏的不同而变化。</p></blockquote><p>而且他还指出，在分析游戏中的叙事时，还需比较故事中的时间与现实世界中的时间，并且也要考察玩游戏的时间。</p><p>从Ludo与效率预估中，时间分析也是一个重要的因素。因此，研究游戏的叙事和基本要素时，要重视时间这个要素。</p><p>另外，Tom Bissell 认为，在存在叙事要素的游戏中，都使用了两种类型的故事手法。根据Bissell的观点，一种是Framed（框架型叙事），即用过场动画和影像叙事，不允许玩家介入。</p><p>另一种是“未脚本化的、由玩家决定的……的部分”。Bissell将其成为Ludo叙事（ludonarrative）。</p><p>这里所使用的“ludo”只是单纯的前缀词，表示“游戏的”之意，与之前的Ludo不同。</p><h2 id="Narreme"><a href="#Narreme" class="headerlink" title="Narreme"></a>Narreme</h2><p>一个像Ludo一样的基础概念——Narreme，即“构筑故事性的基础构成要素”，这一概念是1969年由尤金·多尔夫曼提出的。</p><p>1974年，亨利·怀特曼进一步发展了此概念。</p><p>怀特曼从叙事的角度，对广告中宣传语进行了分析研究。</p><p>宣传语中会使用“不完整的语句” 之类的形式，名词和形容词、动词的使用并不鲜见。那么，宣传语是否也是叙事？</p><p>如果不是，叙事和非叙事的界限又是什么？怀特曼用Narreme框架对此进行了分析，用叙事构成要素的形式做了研究。</p><p>Narreme的研究现在被计算机科学研究者阿洛克·邦卡迪和罗赫略·E.卡多纳·里维拉进一步拓展。</p><p>他们指出，<strong>叙事就是由Narreme连锁构成的。</strong></p><h2 id="基本构成要素"><a href="#基本构成要素" class="headerlink" title="基本构成要素"></a>基本构成要素</h2><p><strong>“拥有表面性结构，能发挥所有故事性功能的最小单位”，即“故事中发挥功能的最小单位”</strong></p><p>罗兰·巴特曾经论述道，叙事的最小单位是<strong>功能体</strong>。</p><p>功能体分为两类，一类是作为叙事中的必要要素，起到连接作用的功能体。</p><p>另一类是起补充作用、填故事空间的功能体。</p><p>在影像理论中，Christian Merz 等人提出，叙事的基本结构就是通过连续拍摄得到的影像片段，即镜头。</p><p>不过，David Bordwell 则对此观点提出了异议、因为影像表现中存在这样的叙事：如果在一个镜头中有多个人登场并各自进行自身的表演，需要用一些更加细致的镜头组合来表现不同人物的台词和表演。</p><p>叙事就成为了镜头的核心导向。也就是说，构成叙事的基本要素不仅限于镜头等同一个单位，还应该会随着状况发生变化。</p><p>在现在的影像理论中研究趋势中，David Bordwell 的主张成为了主流。</p><p>那么，Narreme 在影像体验中究竟是什么？</p><p>承继前述 David Bordwell 和怀德曼 的观点，可以对其做出如下解释。</p><blockquote><p>Narreme  是由登场人物、表情、事情、物品、台词、视觉效果、音响效果等影像要素以及这些要素的复合形式构成而成。</p><p>能够使故事得到客观阐释的最低限度要素</p></blockquote><p>这个定义的根基中包括 David Bordwell 的一个观点，即影像体验也是一样的，是通过玩家进行阐释的。</p><p>不过还要加上一个条件，那就是在游戏中，玩家是作为主体介入游戏的。因此，游戏中的叙事，是玩家理解当前的剧情，再找到推进剧情的方式的形式，即玩家来推动游戏的叙事。</p><p>反过来说，只要这些故事阐释的不充分，<strong>原则上</strong>叙事在时间和空间上都无法进一步推进。</p><p>也就是说，对游戏中“叙述的基本构成要素”，可以做出如下定义。</p><blockquote><p>向玩家阐释游戏角色、物体、空间设计、符号以及这些要素复合构成的故事性时间与空间，使得玩家能够向着下一个故事性的时间与空间推进的最低限度的要素。</p></blockquote><p><em>另外，刚才行文中加入了“原则上”这个表述。这是因为有些游戏设计师可能在游戏设计中以 Ludo 的形式加入了“什么也不选择/无法选择”的选择项。</em></p><p>换句话说，就是在叙事过程中，</p><blockquote><p>加入了可以实现交互性介入，但又对玩家的输入 “无反馈” 的设计。</p></blockquote><p>这可以说是游戏设计师在整合 Ludo 和叙事的基础上，加入了自己的想法和理念。</p><h2 id="《吃豆人》的-Narreme"><a href="#《吃豆人》的-Narreme" class="headerlink" title="《吃豆人》的 Narreme"></a>《吃豆人》的 Narreme</h2><p>至此，分别阐述了游戏的基本构成要素 Ludo 和叙事的基本构成要素 Narreme  。来分析 Narreme  在游戏中的作用。</p><p>尝试以 Ludo 为基准重新分析 《Pacman》 ，《Pacman》 中最基本的Ludo，是吃掉场景中亮点和回避敌方角色的结合。</p><p>《Pacman》中，以这个Ludo 为基础的同时，当角色吃掉较大的能量亮点时，就可以逆转与敌方的攻守形式，变成一种无视敌方角色，尽可能多地吃掉亮点的状态。这就是《Pacman》独特的效率预估模型。</p><p>当玩家操作吃豆人时，“想象成了一个生物角色”，才可以将亮点理解为“<strong>食物</strong>（豆）”进行游戏。所以他们才会自然地产生“大亮点代表更多食物，所以能提升能量”的关联想象。</p><hr><ol><li><p>这个是生物</p></li><li><p>所以会吃食物 </p></li><li><p>吃到较大的食物，就可以提升能量</p></li></ol><hr><p>自然地产生这种关联想象，证实玩家可以融入《Pacman》世界的重要原因之一。另外，这也成为了让过去非街机游戏玩家的女性群体接触游戏的原动力。</p><p>虽然《Pacman》的角色和动作的关联并不是叙事，单玩家却可以根据角色和动作想象出“故事”。也就是说，无论是“角色”的外形还是“吃豆”的动作，可以说都让玩家容易理解 Ludo 意义的 Narreme。</p><h2 id="在动作游戏的Narreme"><a href="#在动作游戏的Narreme" class="headerlink" title="在动作游戏的Narreme"></a>在动作游戏的Narreme</h2><p>书中举例《战国BASARA》、《北斗无双》两个游戏。不过我没玩过，简单说说就好了。</p><p>这类游戏中，通常通过角色的动作可以看出该动作的攻击程度，角色的扮相看出装备的强弱。</p><blockquote><p>动作，eg：《街头霸王4》。扮相，eg：《红色警戒》中的坦克和士兵。</p></blockquote><p>正因二者有着这样的区别，对玩家攻击的认识也产生了如下的差异。</p><ul><li>高频率轻量攻击、低频率重量攻击</li></ul><p>这种差异是由于每个游戏的世界观不同而形成的，不过玩家却能通过游戏角色的外观、装备马上认识到这种差异。也就是说：</p><blockquote><p>角色的外观和装备是构成游戏整体叙事的 Narreme 之一。</p></blockquote><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><ul><li><p>故事类型化的方法和研究有多种，其中一些影响了电影脚本的创作。</p></li><li><p>叙事是由故事和叙述构成的，讲述行为也成了分析的对象。</p></li><li><p>将构成游戏叙事的基本要素成为 Narreme。</p></li><li><p>Ludo 和 Narreme 互相影响，共同构成游戏。</p></li></ul><p>这一章真的很枯燥，看了好多遍才慢慢理解叙事和游戏性的关系。看不下去的话就别为难自己</p><blockquote><p>摘自《游戏性是什么》第12章（叙事和Narreme）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>结构</title>
      <link href="/2016/06/11/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E7%BB%93%E6%9E%84/"/>
      <url>/2016/06/11/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>本章将回归到现实社会视角之中。现实社会的各种概念，对商业游戏开发有着怎样的影响？</p><p>回答这个问题的关键点，就是“结构”。</p><p>——《游戏性是什么》第13章</p><h2 id="什么是结构"><a href="#什么是结构" class="headerlink" title="什么是结构"></a>什么是结构</h2><p><strong>结构</strong>一词，原本是建筑学中的专业术语，意为“构造”。</p><p>之后，这一词也在计算机科学和电子工程等领域中使用，意为“设计思想”。</p><p>相信不少人都听说过“CPU和PC的结构”这种说法吧。</p><p>现在这个词的意义又进一步扩展了，已经广泛应用于媒体论、经营学、哲学、法学等各领域。</p><p>在这其中，以社会学观点引起大家注目的，是美国学者劳伦斯·莱斯格关于互联网时代版权研究的《代码》。</p><p>莱斯格论述道，人的活动在无意间会收到很多因素的规制，如法律、习惯、市场和结构。</p><p>他在对社会上所存在的多样的结构样态进行解说的同时，指出其本质是为了让利用者遵守某种规范而设计阶段开始就被设计出来的一种系统。</p><p>另外，日本思想家东浩纪认为，结构就是<strong>环境管理型权力</strong>。</p><p>人在成长的过程中学习法律和社会习惯等，学习社会中行使权力的方式，以及社会所要求的举动、行为等。另一方面，在社会中特定的意图下，还存在着以一种无形的形态融入环境中、无意识间规制了人行为的“结构”。</p><p>举个例子，让我们来看下NHK征收视费的相关内容。</p><p>日本《放送法》第64条规定：“拥有能够收看协会节目的收视设备的人，必须与协会签订关于接收节目的相关合同。</p><p>不过，配置有不以收看节目为目的的收视设备、无线电广播（指传送语音以及其他无线电内容、但并不用于电视节目），或禁用于多工调频的收视设备的群体，则不受此限制。”</p><p>所以，如果是拥有电视但接收节目信号的目的并非收看节目，以及没有电视的情况下，以自己的意志不支付收视费的选择就能够合法化了。</p><p>不过，在出租公寓签订了优先电视等集体合同的情况下，有时管理公司会将集体合同中的租凭费追加到租金中。</p><p>在这种情况下，无论你是否拥有电视机，都不可回避支付收视费。这就是一个环境管理型权力的不错案例。</p><p>除此之外，还有像使用录音录像机器、DVD等私人录制设备录制的补偿金等，也都可以作为这种类型的例子。因为不管是不是对电视节目等进行录像和录音，消费者都必须支付这个费用。</p><h2 id="经营学中的结构"><a href="#经营学中的结构" class="headerlink" title="经营学中的结构"></a>经营学中的结构</h2><p>近年来，在经营学中也出现了一个叫作<strong>商业结构</strong>的概念.</p><blockquote><p><strong>商业结构是为了让商务活动中的必要要素和抽象概念等结构得以体系化呈现的架构</strong></p></blockquote><p>在《商业·结构》这本书中，藤本隆宏、青岛矢一、武石彰将其定义为“商业过程中各种活动要素之间相互依存或者相互关联的固有方式”。</p><p>举个例子，如果游戏市场盗版猖獗，实体游戏业务发展就会艰难。而网络游戏则成为产业，取得巨大成功。</p><p>这就是因为网游采用了客户服务型的游戏结构，并遵从了以预付卡进行收费结算的商业习惯。这一连串的结构应该就是商业结构了。</p><h2 id="信息社会论中的结构"><a href="#信息社会论中的结构" class="headerlink" title="信息社会论中的结构"></a>信息社会论中的结构</h2><p>在信息社会论中也应用了结构的概念。日本社会学家滨野智史在《结构的生态系统》一书中指出，结构是：</p><blockquote><p><strong>“无需让人们意识到被规则和价值规训”的结构和“独立于人的主观意识，但会影响和引导人的行为”的构造。</strong></p></blockquote><p>在这本书中，将关于结构的研究，推广到一个更加普及适化的层面。</p><p>举个例子，让我们比较一下快餐店和高级餐厅中的椅子。快餐店的椅子很小，而且很多都是塑料制成的。</p><p>而高级餐厅的椅子就很大，可以提供舒适的体验。快餐店的这种坚硬的、小号的椅子，有助于提升快餐店的餐位周转率。</p><p>接着举例。丰田汽车研发除了一项服务，就是可以自动从驾驶员呼出的气体中检测酒精含量，如果检测出了一定浓度的酒精含量，就无法发动车子。</p><p>假设这种服务，不仅限于丰田车，而是所有车都能装上，那么酒驾在理论上是不可能存在的了。</p><p>而且，当这项记述应用100年后，大家可能都会忘记应用这项技术的原因（完全消灭酒驾行为）了吧。根据滨野的观点，这也是结构。</p><h2 id="游戏中的结构"><a href="#游戏中的结构" class="headerlink" title="游戏中的结构"></a>游戏中的结构</h2><p>至此，以对游戏进行符号学上的结构性分析为开端，继而研究了Ludo和故事性（Narreme）的相关内容。通过这些研究发现，游戏中存在由Ludo和Narreme相互补充所构成的结构。这可以说是从着眼于游戏自身构造而得到的结论。</p><p>另外，影响游戏的外部因素也很多。第一，游戏的运行环境，如以游戏机为首的硬件设备。屡次将游戏硬件设备称为游戏平台，这其实是指游戏软件的内容和形式是由游戏平台结构（设计思想、标准）而定的意思。游戏是无法超越游戏机的技术规格的，这一点显而易见。</p><p>另外，游戏硬件设备是根据制造厂商的商业战略制作的。</p><p>也就是说，游戏无论是在技术上还是在商业上，都与各种平台紧密相关。而且，这点也给游戏设计自身带来了巨大的影响。</p><h2 id="PONG的商业结构"><a href="#PONG的商业结构" class="headerlink" title="PONG的商业结构"></a>PONG的商业结构</h2><p>结构给游戏设计带来了哪些影响？回到游戏历史中来考察这一点。</p><p>数字游戏的产业化是从街机游戏开始的。不过，师姐最初的商业数字游戏<a href="https://en.wikipedia.org/wiki/Computer_Space" target="_blank" rel="noopener">Computer Space</a>却并没能取得商业上的成功。最早获得巨大成功的是在总结了Computer Space 的经验教训之后所制作的<a href="https://zh.wikipedia.org/wiki/%E4%B9%93" target="_blank" rel="noopener">PONG</a><a href="http://www.ponggame.org/" target="_blank" rel="noopener">（快速明白PONG）</a></p><p>区分出Computer Space和PONG的高下的，正是：</p><blockquote><p>是否有意识地将商业结构结合到游戏设计之中</p></blockquote><p>Computer Space是<a href="https://en.wikipedia.org/wiki/Spacewar!" target="_blank" rel="noopener">space war!</a>（<a href="http://www.masswerk.at/spacewar/" target="_blank" rel="noopener">快速了解space war!</a>）的街机移植版。space war! 的硬件平台是小型计算机PDP-1，开发者也好，玩家也好，都是学生和研究者。</p><p>space war!相当于今天的免费软件，发布后出现了大量的复制和改良版本，之后它还作为PDP-1的demoSoft被捆绑发行。也就是说space war!中并不存杂直接商业结构。</p><p>Computer Space的开发制作欠缺深层次的商业结构分析，仅是比较忠实于原版的移植，但硬件平台已经变成街机。</p><p>其购买主力人群是酒馆老板，以期待能够赶超当时已经聚集大量人气的弹珠球。</p><p>不过，在研究室中具有人气的游戏，转移到娱乐场所时，却并没有聚集到多少人气。</p><p>再加上研究室和酒馆的定位不同，内容复杂的游戏并不适合客人投币来玩。</p><p>之后，该作品在开发续作时，开发者思考了游戏究竟应该具有什么样的内容，才能让客人乐在其中，也就是说，思考了商业结构。其思考结果得出如下几个要素：</p><ul><li><p>以赚钱为目的</p></li><li><p>玩家是酒馆的客人</p></li><li><p>和朋友们一起找乐子</p></li><li><p>game over时可以投币继续</p></li><li><p>单手就能玩的简单操作</p></li></ul><p>综合上述要素开发出的游戏是PONG，一部大为热卖的作品。</p><p>PONG的开发背景中，存在街机的商业结构，即厂商将游戏机卖给娱乐场所盈利，娱乐场所靠客人玩游戏投币盈利。</p><p>顺便说一下，布什内尔在开发PONG的时候成立了雅达利公司。而且这部作品的热卖使他成为了美国梦的代表者。</p><p>在这之后，雅达利公司改正了space war!中的缺点，发售了<a href="https://en.wikipedia.org/wiki/Asteroids_(video_game" target="_blank" rel="noopener">Asteroid</a>) （<a href="http://www.freeasteroids.org/" target="_blank" rel="noopener">快速了解Asteroid</a>）。</p><p>据记录，Asteroid也获得了成功，还带来了闲暇时间社会人士大量出入娱乐场所进行游戏的社会现象。</p><h2 id="游戏设计的激进化"><a href="#游戏设计的激进化" class="headerlink" title="游戏设计的激进化"></a>游戏设计的激进化</h2><p>由PONG中分析得出的街机游戏商业结构和游戏设计间的关系，成为了之后游戏的良好范。《打砖块》《太空侵略者》《吃豆人》等，全都是在这个商业结构的基础上设计的。</p><p>街机游戏的开发中，最重要的一点是“确保购买使用游戏机的店铺的利益”。</p><p>只有运营商得到了恰当的利益，游戏厂商才能的到新游戏作品的订单。</p><p>正因如此，游戏开发设计的相关人员有必要对店铺中玩家的行动和嗜好进行深层次的观察。</p><p>同时，关于投1枚游戏币可玩的最长时间，也就是游戏制作时有必要考虑的问题。因此在街机游戏的商业结构中，有着</p><blockquote><p>游戏厂商：运营商：玩家</p></blockquote><p>这种B2B2C模式的特征。</p><p>当时的街机游戏开发可以总结为“制作出让玩家愉快地进行游戏，引导玩家多次投币的装置”。</p><p>不过，这里也存在一种悖论，即需要承担“玩家熟练度上升，用1枚游戏币即可长时间玩游戏”的风险。</p><p>不过这种商业结构，逐渐给游戏设计带来了激进化问题。</p><p>对于运营商来说，如果玩家投1枚游戏币就能长时间玩耍，利益就无法增长。因此，游戏厂商就面临运营商提高游戏难度的压力。</p><p>不过仅仅提高游戏难度，又会让玩家敬而远之。因此到了80年代中期，游戏的设计方向转变为：</p><blockquote><p>如何以吸引玩家的高难度挑战，来增加单位时间内游戏币的投入量（income）。</p></blockquote><p>这个时期的代表作，可以以《魔界村》为例。利用点绘方式描绘出的美丽图像，以及十分具有震撼力的音效，都会引起大家的瞩目。</p><p>而且在游戏开始时会让玩家预览整个场景的结构，向玩家传达后续关卡的信息，设计者在唤起玩家挑战欲望这一点上下足了功夫。</p><h2 id="平板电脑时代的结构"><a href="#平板电脑时代的结构" class="headerlink" title="平板电脑时代的结构"></a>平板电脑时代的结构</h2><p>与商业结构相结合的游戏设计手法现在依然在应用。面向平板电脑的F2P（免费游戏）游戏《部落冲突》（这个就自行搜索了），就是一个很好的例子。</p><p>这个游戏的开发者，以战略要素为作品的基础，又推出了“table first stategy”（平板设备最优先战略），可以说在不断留意着平板电脑可用性的同时进行游戏开发。</p><p>特别是屏幕滚动功能、帧速率、手势控制、按键配置、点击时间的“舒适度”等，都是公司全员上下一起研究的，如果实在无法让玩家获得舒适感，就需要继续调整.</p><h2 id="技术的进步与结构"><a href="#技术的进步与结构" class="headerlink" title="技术的进步与结构"></a>技术的进步与结构</h2><p>在构成游戏的Ludo外部还存在各种各样的结构，都给游戏设计带来了很大的影响。在结构中，既有游戏平台（硬件）结构，也有更加外围的商业结构。</p><p>而且，还有一种能够给所有的这些都带来普遍影响的结构，就是以半导体和通信为代表的技术。</p><p>技术的进步催生了信的硬件（游戏平台结构）、新的商业模式（商业结构）和新的游戏（Ludo的结构）。</p><p>如果回溯从街机游戏到家用游戏机，以至于到社交游戏的变迁历程，就能明确感受到技术进步给游戏带来的影响</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><ul><li><p>虽然结构原本是建筑学中的专业术语，不过它逐渐在社会的各种领域中都得到了使用。</p></li><li><p>Computer Space失败了，而PONG却获得成功，出现这种差异的原因在于是否将商业结构结合到游戏开发中。</p></li><li><p>游戏身处游戏平台结构和商业结构之中，这两种结构对游戏设计产生了诸多影响。</p></li><li><p>游戏以及与游戏相关的各种结构，都受到技术革新的巨大影响。</p></li></ul><hr><p>至此，从“游戏”和“游戏性”两词“定义”的模糊性着手。为了独立研究“游戏性”的准确概念。以“人类是如何认识游戏的，又是如何进行游戏的”为线索，从“身体”“视觉”“世界”“触觉”四个角度进行探究。</p><p>前半部分从多个角度分析人对游戏的认识机制，也是为了方便理解人接触游戏直到沉迷于游戏这个过程。</p><p>后半部分，灵活运用了现在在各研究领域中都得到应用的一般性动机理论，分析了人沉迷游戏的过程。同时从游戏设计师的角度出发，研究了这种机制在游戏设计中的应用，其结构就是以游戏平衡性的形式呈现出来的。</p><p>在这些内容上，对游戏性的本质进行思考，终于接近了“Ludo”这个概念。（引导玩家进行效率预估的设计机制，以便于玩家通过实际身体/限制身体认知目标世界，以达成自己所设定的目标）。</p><p>极端概括来说，Ludo是游戏独特的“构造”，给这个构造赋予意识就是“Narreme”。Narreme是叙事的基本构成要素，即能让人感知到某种故事的符号。Narreme和Ludo的组合可以激发人的想像力，让玩家感受到游戏更深层次的意义。</p><p>影响游戏体验的外部因素是<strong>结构</strong>。</p><p>探究人与游戏之间的关系，也给了我们一个重新研究大脑与外部环境间关系的契机。即人作为人之前只拥有大脑，大脑从我们出生的瞬间开始，就以与包含身体在内的“外部环境”的交互为线索，通过Hand Regard等方式来学习以及成长。</p><p>之后，交互行为的经验，就会以故事的片段，即Narreme的形式铭刻在我们的记忆中。通过关联Narreme的片段，我们来理解“人生”这个故事，这些记忆也会成为一种指导，作为继续生存下去的基础。如果像这样继续论述下去的话，自然就能遇到一个新的概念研究。那就是行为与记忆的关系。这确实和探求游戏性时所得到的Ludo与Narreme的关系是相同的。</p><blockquote><p>摘自《游戏性是什么》第13章（结构）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>难易度平衡设计与效率预测</title>
      <link href="/2016/06/10/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E9%9A%BE%E6%98%93%E5%BA%A6%E5%B9%B3%E8%A1%A1%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%95%88%E7%8E%87%E9%A2%84%E6%B5%8B/"/>
      <url>/2016/06/10/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E9%9A%BE%E6%98%93%E5%BA%A6%E5%B9%B3%E8%A1%A1%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%95%88%E7%8E%87%E9%A2%84%E6%B5%8B/</url>
      <content type="html"><![CDATA[<p>人专注于游戏中的机制，与游戏设计者之间有什么关系？而这又与人类自身的何种特性息息相关？</p><p>——《游戏性是什么》第10章</p><h2 id="平衡设计，大致有以下2点："><a href="#平衡设计，大致有以下2点：" class="headerlink" title="平衡设计，大致有以下2点："></a>平衡设计，大致有以下2点：</h2><ul><li><p>静态（固定型）平衡设计</p></li><li><p>动态（变动型）平衡设计</p></li></ul><h2 id="静态平衡设计"><a href="#静态平衡设计" class="headerlink" title="静态平衡设计"></a>静态平衡设计</h2><p>是指游戏制作完成时，平衡设计就固定了。大多数小游戏都这样，如大众熟知《雷电2》、上篇文尾提到的《僵尸危机3》</p><p>在游戏中的平衡设计为</p><blockquote><p>难度从一开始就故意降低了。</p></blockquote><p>利用跷跷板模式，系统通过调整阻力点，是游戏保持了平衡状态。</p><p>利用这种平衡设计，可以给玩家带来“命悬一线的关头躲过了敌人的攻击”的快感。</p><p>而并非为了配合玩家的技能而变更游戏的难度。</p><p>每一关的难度都被固定了。<br><img src="http://upload-images.jianshu.io/upload_images/1171873-c7a2caa76dea0fe7.gif?imageMogr2/auto-orient/strip" alt></p><h2 id="动态平衡设计"><a href="#动态平衡设计" class="headerlink" title="动态平衡设计"></a>动态平衡设计</h2><p>分以下两种类型：</p><ul><li><strong>任意的负荷可变型平衡设计：</strong>玩家可以任意地对平衡进行改动。</li><li><strong>隐藏反馈型平衡设计：</strong>游戏自动调整平衡。游戏利用程序实时解析游戏中玩家的技能，自动，调整游戏的难易度，以匹配玩家技能水平。</li></ul><p>隐藏反馈型平衡设计，可以以《<a href="http://baike.baidu.com/link?url=q1K1FOsroMXxkJ6G7aAtvudxWn5papTNXA4wKr5Z3CWrEHTZAAJ6YcV-dO6toAUigCIW-saK6BPmK7Pvk3G65a#2" target="_blank" rel="noopener">山脊赛车</a>》为例。排名越靠后，车辆的控制会变得更加容易。</p><p>这是为了保持败者玩家动机的一种设计方法。</p><p>隐匿在游戏内部，对玩家来说是不可见的。</p><h2 id="效率预估型的平衡设计"><a href="#效率预估型的平衡设计" class="headerlink" title="效率预估型的平衡设计"></a>效率预估型的平衡设计</h2><p>以《超级马里奥兄弟》中的“<strong>B dash</strong>”为例，按住B键进行移动操作可以进行更加告诉的移动。</p><p>灵活使用可以在难度较高的关卡中巧妙避开敌人。</p><p>并为快速通关发挥巨大作用。由于在短时间内通关得分比较高，所以也被视为一种高效率的游戏方式。</p><p>另一方面，角色触碰到敌人的风险也增加了，这实际上是将难易度的设定托付给了玩家的判断。</p><p>玩家在游戏设计者所赋予的幅度之内，根据自己的情况权衡风险与效率（所需时间）。</p><p>为了实现这种机制，设计者还需要设计出“<strong>game over</strong>”之类的“危机”供玩家权衡。</p><h2 id="危机"><a href="#危机" class="headerlink" title="危机"></a>危机</h2><p>一般的游戏中，当难度超过技能时，游戏会陷入停滞状态。</p><p>通常是“回到起点”“装备减少”“重玩依旧无法通过某个场景”等情况。</p><p>将因玩家的抉择而使游戏进入停滞状态的状况称之为“危机”。</p><blockquote><p><strong>所谓危机，对于玩家来说就是强制性地花费“时间”成本。</strong></p></blockquote><hr><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/07/clock-650753_1280-785x510.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-ae702f7f6686762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><hr><h2 id="风险与时间成本的权衡"><a href="#风险与时间成本的权衡" class="headerlink" title="风险与时间成本的权衡"></a>风险与时间成本的权衡</h2><p>风险和时间成本，一般是为反比关系。要是将风险规避到最小，就需要花费很高的时间成本。</p><p>如上所述，危机机制的设计，是为了实现玩家的风险和时间成本的权衡。因此玩家有必要在下面两个选项中预估出哪一种平衡最合适。</p><ul><li>抑制陷入危机的风险，接受时间成本的增加</li></ul><ul><li>接受陷入危机的风险，谋求时间成本的减少</li></ul><p>当玩家选择风险更高的方式高效达成目标时，看起来为什么会很开心？其实是：</p><p><strong>“平衡难易度”的行为，正是创造出对于玩家自身而言挑战难度最恰当的机制。</strong></p><p>在认为到危机的风险程度增加的同时，预估处当前技能能够跨越这个危机，在短时间内能达成通关目标，便是玩家活用了以往游戏经历中的风险控制经验。</p><p>每次游戏时平衡风险与效率的经验积累，可以成为下一次游戏时的参考与指导。</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><ul><li>游戏平衡设计，分为“静态（固定型）平衡设计”，“动态（变动型）平衡设计”“效率预估型平衡设计”3种。</li><li>效率预估，依照自身技能，在“高风险短时间”和“低风险长时间”中做出恰当的判断行为。</li></ul><p>“你学习的时候要是有玩游戏那股冲劲和认真就好喽”<br><strong>……</strong></p><hr><p><img src="http://upload-images.jianshu.io/upload_images/1171873-8114c2764d17b974.gif?imageMogr2/auto-orient/strip" alt></p><hr><blockquote><p>摘自《游戏性是什么》第10章（难易度平衡设计与效率预测）喜欢这本书，</p><p>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>专注游戏的原因</title>
      <link href="/2016/06/08/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E4%B8%93%E6%B3%A8%E6%B8%B8%E6%88%8F%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/2016/06/08/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E4%B8%93%E6%B3%A8%E6%B8%B8%E6%88%8F%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<p>在人专注于游戏的机制中，动机是重要的因素。那么，应该如何维持这种动机？这个领域目前有哪些先行研究？这些研究有该如何应用到游戏中？</p><p>——《游戏性是什么》第9章</p><h2 id="游戏是符号化的现实世界"><a href="#游戏是符号化的现实世界" class="headerlink" title="游戏是符号化的现实世界"></a>游戏是符号化的现实世界</h2><p>至此，已经从“身体”、“视角”、“世界”、“触觉”4个角度分析了认识如何认知“作为符号集合体的游戏”，优势如何进行游戏的。</p><p>可以说，这些与“游戏和认知之间的关系”密不可分。</p><p>因为人正是在对各种因素进行认知的基础上，才能够理解游戏、娱乐游戏的。</p><p>从之前的研究可以看到，“人与现实世界的关联方式”与“玩家与游戏内世界的关联方式”没有本质区别。</p><p>也就是说，我们可以认为游戏是符号化现实世界。</p><p>在理解了这一点之后，从本章开始将研究“游戏的基本构成要素”的相关问题。</p><h2 id="刺激和反应"><a href="#刺激和反应" class="headerlink" title="刺激和反应"></a>刺激和反应</h2><p>人在持续某种行为时，在作为行为结果的“报酬”以及行为本身之中，都会存在某种“动机”。</p><p>在工业革命之后，工厂劳动者增加了，但劳动积极性的下降和厌倦情绪的滋生等新的社会问题也随之出现，在这样的背景下，就出现了各种关于动机的研究。</p><p>其中，有个著名的古典研究，就是由“<strong>巴甫洛夫的狗</strong>”所代表的、从心理学中的行动主义方面所做的研究。</p><p>在这个试验中，人在给狗吃饵料的时候会晃动铃铛。此后，狗只要一听到铃铛声，就会开始流口水。</p><p>心理学领域一次研究为基础，探求出了人行动方面的相关机制，即人的行为被附加一些有利条件，积极性和持续性就会高涨，若给予惩罚，行动意愿就会降低。</p><p>因此就出现了这样的构想：如果能够灵活运用“糖和鞭子”，就有可能实现动机的维持与管理。</p><p>根据报酬和惩罚来控制行动等，都是证明这种构想的例证。这也可以说是“刺激和反应”机制的反复应用。</p><p>像老虎机等游戏机，以及赌博等都是“刺激和反应”机制的灵活运用。卡牌游戏中的扭蛋机制也是这个意思。</p><p>不过扭蛋并不属于实质性的报酬，从扭蛋中可能获得的稀有游戏物品才是报酬，在这一点上还是存在差异的。</p><p>然而，还是有意资额明知违反规则，确认会使用现金交易稀有物品的玩家。</p><p>基于“刺激和反应”机制所产生的快感，是在用户无意识间产生作用的，若长时间反复可能会产生依赖性，届时再中断这种机制，可能会产生一些不适应和副作用。沉迷游戏而导致睡眠不足、疲劳等症状的“游戏依存症”，也可以置于此种机制背景下来考察。</p><h2 id="目标和评价"><a href="#目标和评价" class="headerlink" title="目标和评价"></a>目标和评价</h2><p>人都有“只要努力就能得到什么”的期待感。</p><p>实际上，当人获得与自身努力相符合的品附加和报酬时，人的行为就能够继续持续下去。</p><p>也就是说，当目标和评价之间的平衡处于比较恰当的状态时，动机会很高。想必很多人的日常感受也是如此。</p><p>很多游戏中也是如此，不断地重复问题的设定和解决。这些问题既不会太简单也不会太难。如果游戏能够在难度上保持适度的平衡性，就可以维持住玩家的动机。这种思考方式，与之后要说的“心流理论”是相联系的。</p><h2 id="麦克利兰的成就动机理论"><a href="#麦克利兰的成就动机理论" class="headerlink" title="麦克利兰的成就动机理论"></a>麦克利兰的成就动机理论</h2><p>随着时代的发展，动机的心理学的研究也走向了更深的层次。美国心理学家<strong>戴维·麦克利兰（David McClelland）</strong>的研究就是其中之一。麦克利兰首先将人类的需求进行了分类 。</p><ul><li><p>成就需求：向特定目标努力，获得成功的需求。</p></li><li><p>权力需求：影响及控制他人的需求。</p></li><li><p>亲和需求：建立良好的人际关系的需求。</p></li><li><p>回避需求：回避失败和困难的需求。</p></li></ul><p>紧接着他揭示了这些需求对人的动机产生的影响，会根据个体及个体文化背景的差异而不同。<br>社交网络的“点赞”功能，就是满足亲和需求结构的典型例子。在<strong>MMORPG（大型多人在线角色扮演游戏）</strong>这种具有社会性的游戏中，权力需求会在玩家动机方面产生一定影响。<br>这是由于游戏角色的等级越高，装备越好，就越能在游戏内产生更高的社会影响力。</p><h2 id="马洛斯的需求层析理论"><a href="#马洛斯的需求层析理论" class="headerlink" title="马洛斯的需求层析理论"></a>马洛斯的需求层析理论</h2><p><strong>亚伯拉罕·马洛斯（Abraham Maslow）</strong>假定了“人类是想着自我实现的目标不断成长的生物”，所以他将人类的需求从低到高分为5个阶段，即</p><blockquote><p>“自我实现需求”</p><p>“自尊需求”</p><p>“归属和爱的需求”</p><p>“安全需求”</p><p>“生理需求”</p></blockquote><p>这种模型的特征，就是一个人一旦满足了下层需求，对满足上层需求的渴望就会增加。如果目前层次的需求没有满足，那么其上层的需求就毫无意义。例如，对一个快饿死的人讲自尊和自我实现就没有任何意义。</p><p>这个理论模型，多被用来说明MMORPG内玩家的行动。刚开始接触游戏的玩家，由于尚不能在游戏内做出恰当的行动，所以经常不经意间就挂了。因此玩家最初的目的就是生存下来（<strong>生理需求</strong>），接着才会有安稳地进行游戏的需求（<strong>安全需求</strong>）。</p><p>当玩家在某种程度上习惯了游戏之后，就该开始结交朋友、加入公会（<strong>归属和爱的需求</strong>）。</p><hr><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/cat.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-297f2a5b18e2b458.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><hr><p>此后，积累了足够多经验的玩家之中，就会出现一个公会的领导者（<strong>自尊需求</strong>）。同时，一些玩家还会制作并发布新的道具或地图（<strong>自我实现需求</strong>）。</p><p>因此，将这些要素有意识地融入游戏中，就能够进一步地延长游戏的寿命。另外，也正由于很多游戏都能比现实社会更容易满足人类的这些需求，人才会专注，设置沉迷于游戏。实际上，很多的MMORPG的设计中都包括了比现实社会更加容易成长、成功和获得成就的机制。</p><p>另外，不少游戏中玩家可以在游戏内自己制作道具，或者将制作出的道具分享给大家。这样的功能也能够满足玩家的自我实现需求。</p><h2 id="心流理论"><a href="#心流理论" class="headerlink" title="心流理论"></a>心流理论</h2><p>至此提及的研究，艘说明了人沉迷于游戏的原因的一方面。但对于人“持续”地玩游戏的说明还很不足。因此，近些年来将“持续性”作为焦点的研究引起大家的关注。这就是<strong>米哈里·契克森米哈（Mihaly Csikszentmihalyi）</strong>的<strong>心流理论</strong>。</p><p>“心流”是指一种让人感觉到全身心投入的专注状态，“心流”并不仅限于游戏，还可以是电影、慢跑、登山、学习、工作等。（难易度）和行为所需要的必要能力（技能）。随后，研究发现当能够两者之间较好地维持平衡时，人就能够体会到“心流”。另外还发现，当玩家技能偏低，游戏难度偏高时，玩家就会感到不安和担心；（自己能行吗？会不会失败？）而技能偏高，游戏难度偏低时，玩家就会感到厌倦和其他不安情绪（更想做一些其他的事情，一直做这种事情真的好吗？）</p><p>契克森米哈随后又指出了心流体验的3个必要条件。</p><ul><li><p>存在明确的目标</p></li><li><p>对挑战难度的认知与对自身技能理解间的平衡</p></li><li><p>能得到某种即时性反馈</p></li></ul><p>由此可见，心流理论中含有被众多游戏开发者提及的“游戏平衡性”中的诸多要素。</p><p>游戏的特征之一，就是玩家可以能动性地参与。反过来，为了让人持续玩下去，游戏就必须持续引导人发挥能动性。但是，人的本性都是追求快乐，而回避麻烦。这正是所有的游戏设计师每天都要面对的窘境。究竟应该如何做，才能够完美地使游戏保持平衡？心流理论，就为回答这个问题提供了启示。</p><h2 id="电影脚本中的心流理论"><a href="#电影脚本中的心流理论" class="headerlink" title="电影脚本中的心流理论"></a>电影脚本中的心流理论</h2><p>心流理论并不是从无到有产生的，而是整合现实世界固有的事物和现象，进而体系化、理论化。正因为如此，有许多的游戏设计者并不了解心流理论，只是用符合心流理论的自己的独特感觉去制作游戏。同样的现象并不仅限于游戏，也可以在电影脚本中见到。例如《第一滴血2》，电影情节略。</p><p>兰博面临的问题难度在逐渐增大。这其实是导演为了引导观众容易将自己的感情带入到兰博身上的一种手法。虽然当人们重新回顾的时候，会觉得剧情展开有些荒谬，不过即使这样，当主人公在棉铃持续不断的艰难险阻时，观众还是会不由自主地将自身情感代入到主人公身上。</p><h2 id="游戏中的心流理论（PS：【原书说得确实有点详细、啰嗦，以下删改】）"><a href="#游戏中的心流理论（PS：【原书说得确实有点详细、啰嗦，以下删改】）" class="headerlink" title="游戏中的心流理论（PS：【原书说得确实有点详细、啰嗦，以下删改】）"></a>游戏中的心流理论（PS：【原书说得确实有点详细、<del>啰嗦</del>，以下删改】）</h2><p>每一部游戏都是从简单到困难，先是玩家（小白）虐电脑（菜鸟），到后来为打小怪，然后打BOSS。接着，拿装备、升级、打难度较大的小怪、再升级、打大BOSS。只是击败boss时的战斗思想和方式都各不相同罢了。</p><p>如此，游戏的模式设计为，随剧情的发展，</p><blockquote><p>难易度和技能两方面都在逐渐增长。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>目前动机研究中，已经存在诸多先行课题。</p></li><li><p>心流理论是解释人专注、沉迷于某项事物的理论，此理论可以应用于包括游戏在内的多种娱乐媒体上。</p></li></ul><blockquote><p>摘自《游戏性是什么》第9章（专注于游戏的原因）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>游戏和触觉</title>
      <link href="/2016/06/07/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E5%92%8C%E8%A7%A6%E8%A7%89/"/>
      <url>/2016/06/07/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E5%92%8C%E8%A7%A6%E8%A7%89/</url>
      <content type="html"><![CDATA[<p>游戏有一个特征，就是玩家通过游戏手柄来操作。那么，这种操作有着怎样的意义？为了设计出简明易懂的操作方式，究竟应该考虑到哪些问题？</p><p>——《游戏性是什么》第7章</p><h2 id="继“身体”、“视角”、“世界”后的最后要素——“触觉”"><a href="#继“身体”、“视角”、“世界”后的最后要素——“触觉”" class="headerlink" title="继“身体”、“视角”、“世界”后的最后要素——“触觉”"></a>继“身体”、“视角”、“世界”后的最后要素——“触觉”</h2><p>作为探求游戏和身体之间关系的最后一章，将从“触觉”的角度出发来研究这种关系。</p><p>之所以选取“触觉”这个角度，是因为在游戏中，玩家是通过操作手柄，能动地参与到游戏世界中。</p><p>随着技术的进步，游戏也变得越来越复杂。</p><p>如何设计出最适合玩家的手柄操作方式，就成为了一个重要问题。</p><p>这个问题不仅存在于游戏中，还存在与媒体、扩张现实等互动媒介的领域，在此将以游戏为中心对象来分析。</p><h2 id="游戏是“触觉媒体”"><a href="#游戏是“触觉媒体”" class="headerlink" title="游戏是“触觉媒体”"></a>游戏是“触觉媒体”</h2><p>以 <a href="http://baike.baidu.com/link?url=vVRSqHrwK6raDXVrqcn0oRttelLQUdhCk34-k4M6LAvKVpp7dKF-CPD3BJmRCGNPtZK5d4j3pMU5ETzz6VlE4K" target="_blank" rel="noopener"><strong>Wii Fit </strong></a>为例。该作品中，玩家根据游戏中的提示指令作出恰当的动作，已达成目标。和通常情况下使用游戏手柄操作的游戏不同，玩家是站在专用的Wii平衡板上操作的。也就是说，玩家通过脚这一全新的身体部位来参与游戏。</p><p>不了解Wii Fit 的旁观者，在不看游戏画面、只观察玩家的情况下，会怎么想？</p><p>恐怕他们只会觉得玩家站在一个奇怪的板子上，不停地伸胳膊抬腿。即使向他们解释说“这个人在玩游戏”，他们恐怕也无法理解。不过让他们结合影像和声音观察玩家的话，就能理解玩家根据游戏作出动作这件事了。（不理解Wii Fit 的可以想想游戏厅里的“跳舞毯”）</p><p>由此可知，以游戏为代表的交互型产品，很难和视觉、听觉、触觉脱离关系。从这个结论出发，媒体研究人——中岛诚一指出，交互媒体是“以视觉、听觉、触觉这3个维度传递信息的媒体”，即<strong>触觉媒体</strong>，触觉媒体可以看作是包括听觉、视觉、视听觉在内的媒体。</p><hr><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/1419434035.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-ae12f3a0578261b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><hr><p>回溯媒体史可知，媒体的普及源于报纸、书、杂志等<strong>视觉媒体</strong>。随后，收音机、电话、唱片等<strong>听觉媒体</strong>出现，最后进入了电视、电影、视频等<strong>视听觉媒体</strong>的全盛时代。而且之后还有着向游戏’媒体艺术等<strong>触觉媒体</strong>发展的趋势。</p><h2 id="触觉媒体的三要素"><a href="#触觉媒体的三要素" class="headerlink" title="触觉媒体的三要素"></a>触觉媒体的三要素</h2><p>中岛认为，触觉媒体包括以下3个要素。</p><ul><li>反应：大脑和大脑以外信息的循环速度。</li><li>连接结构：不仅指数据间的结构，还包括与其他项目间的互联性。</li><li>GUI：视觉上的界面。</li></ul><p><strong>反应</strong>，指的是软件的操作性，以及该操作所产生的反应。也就是能否迅速通过显示器、扬声器等输出设备，将从输入设备导入玩家的操作回馈出来。</p><p><strong>连接构造</strong>，指实现多样信息互连 的设计。能否迅速传递必要信息，并与大量相关信息建立互联，是评估连接构造优劣问题的重要标准。</p><p><strong>GUI设计</strong>，是对于人机交互媒体来说最重要的一个项目。（GUI？不解释了）</p><h2 id="游戏中的触觉媒体三要素"><a href="#游戏中的触觉媒体三要素" class="headerlink" title="游戏中的触觉媒体三要素"></a>游戏中的触觉媒体三要素</h2><p>触觉媒体三要素，对游戏来说也同样适用。</p><p>反应迟钝会导致玩家无法尽兴。特别是在动作和格斗游戏中，反应迟钝是致命的问题。</p><p>连接构造对网络游戏来说则特别重要。这是由于如果不能够对构成游戏的各种符号群流畅互联的话。</p><p>玩家就无法在复杂的游戏世界中自由探索。</p><p>GUI设计，是可以左右玩家能否直观地理解游戏符号意义的重要要素。</p><p>如果没有适当的GUI设计，游戏就无法向玩家展示符号间的连接构造了。</p><h2 id="功能可供性是什么"><a href="#功能可供性是什么" class="headerlink" title="功能可供性是什么"></a>功能可供性是什么</h2><p>在触觉媒体的设计中，功能可供性与上述三要素同等重要。“功能可供性”，是从表示“提供”之意的“Afford”一词中再造出来的词。功能可供性由美国心理学詹姆斯·J.吉布森提出，表示人与自然间相互依存关系的相关概念。它被定义为“在学习过程中，人通过视觉来认知对象的性质和关系”。</p><p>例如在椅子普及的某地区，当人们看到一排椅子、板凳、沙发等形状类似于椅子的家具，即使不用重新学习，他们也可以知道这些东西是用来坐的。即某种特定形状可以提供“坐下”的行为暗示。而且，即使是岩石等天然形成的物体，如果形式跟椅子类似的话，他们也可能会有“坐下”的认知。</p><p>功能可供性，就是通过学习认知和解释某种形状，提供出这种形状所暗示“行为”的“价值”和“意义”。</p><h2 id="游戏中功能可供性"><a href="#游戏中功能可供性" class="headerlink" title="游戏中功能可供性"></a>游戏中功能可供性</h2><p>美国认知心理学唐纳德·A，诺曼从设计者的角度，重新阐释了功能可供性的概念。他认为，优秀的设计，应该以符号明确展示对象的可供性。</p><p>日本媒体制作人兼研究者***（我打不出来），在游戏中指出这一点。举两个作为游戏中功能可供性的案例。</p><blockquote><ul><li>在《超级马里奥兄弟》中，从一开始马里奥就面朝右侧，即使没有具体的只是，马里奥也暗示了玩家“应该向右前进”。</li><li>在《勇者斗恶龙》中，“保存”功能被冠以了“复活咒语”的名称，而且密码的位数需要用“徘句”中的“五、七、五、七、三”来设定。</li></ul></blockquote><p>从如上列举的例子中可以发现，那些得到玩家支持的游戏在功能可供性方面的设计往往是非常优秀的。</p><p>竞速游戏和射击游戏，比起一般的游戏手柄，适用专用手柄玩起来更有身临其境的感觉。之所以会有这种效果，也就是游戏中匹配的专用界面可以直接提供“驾驶”和“射击”等行为的缘故。</p><p>游戏设计者，在手柄操作设计以及游戏世界两方面上，都必须构造易于玩家认知的功能可供性。</p><h2 id="输入界面的可供性"><a href="#输入界面的可供性" class="headerlink" title="输入界面的可供性"></a>输入界面的可供性</h2><p>第一人称视角下展开激烈动作的 <strong><a href="http://baike.baidu.com/link?url=6f3RAG74yRbrWJU5LGA7SFdmSMtno6oqreGLsVTElzhQIE48umE5ts8X8rCSkBzQ2QqIA9LXpBdyPA-PZsQHcYYCYd20QJVkY_xb9hl9KZ2CP7X3NZegUwbzJpDNRPW9" target="_blank" rel="noopener">FPS</a> </strong>游戏，有着一段PC游戏身份发展史。</p><p>最早的作品《<a href="http://baike.baidu.com/link?url=NFonxFfYLnRjrfh7NBOTp6HRzMpoBnlHTDruA0SCXvucCQPQ281iBVOtXQn6xFWeHF1dKWyPAwPUIH_bR0HXRq" target="_blank" rel="noopener">德军总部3D</a>》只能用键盘操作。</p><p>由于游戏没有纵向视角的变动。所以空间被设计得非常狭窄，若想变动横向视角的话，用左右方向键就可以了。</p><p>转动视角时，画面中央下部的玩家角色头部的眼镜，会配合视角的变化左右移动。</p><p>此后，当鼠标成为了电脑的标配。</p><p>FPS游戏就确立了用<strong>WASD</strong>键控制行走，用鼠标控制准星的操作模式。</p><p>按住特定方向键的行为引发“向特定方向移动”的行为，同时操作鼠标来回移动的行为也引发了“眼睛环视四周”的行为。</p><h2 id="人性化的游戏操作"><a href="#人性化的游戏操作" class="headerlink" title="人性化的游戏操作"></a>人性化的游戏操作</h2><p>在“触觉媒体”的应用上，最重要的是，设计要符合人的天性，比如大脑和身体之间的关系机制等性质。手握游戏手柄，头戴显示器等都会给玩家造成一定的符合，这就需要设计出能够抵消这种符合感的自然的界面。</p><p>比如移动的案件操作，能否考虑设计一种无需持续按住按键，只需在转向时按一下按键的模式？实际上《<a href="https://zh.wikipedia.org/wiki/%E5%90%83%E8%B1%86%E4%BA%BA" target="_blank" rel="noopener">吃豆人</a>》等早期的街机游戏就采用过这种操作模式。</p><hr><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/Google_Pac-Man_banner.png" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-1cc10c203ef87d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Google_Pac-Man_banner"></a></p><hr><p>不过这并不是现在的主流，“持续按住特定方向键，控制角色向该方向移动”的操作方式，是多数游戏所采用的。</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><ul><li><p>游戏是视觉媒体、听觉媒体所综合出的“触觉媒体”。</p></li><li><p>玩家在进行游戏的同时，会加深对整个世界的认知。</p></li><li><p>输入设备的操作设计，应注重可供性。</p></li></ul><blockquote><p>摘自《游戏性是什么》第7章（游戏和触觉），部分删略，<br>喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>游戏和世界</title>
      <link href="/2016/06/06/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E5%92%8C%E4%B8%96%E7%95%8C/"/>
      <url>/2016/06/06/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E5%92%8C%E4%B8%96%E7%95%8C/</url>
      <content type="html"><![CDATA[<p>游戏画面会随着游戏的进展实时变化。这时，玩家从游戏画面中能读取到怎样的信息呢？而这与人类在日常生活中认知世界的方式有何异同？</p><p>——《游戏性是什么》第6章</p><h2 id="身体和世界之间的关系"><a href="#身体和世界之间的关系" class="headerlink" title="身体和世界之间的关系"></a>身体和世界之间的关系</h2><p>本章将探讨人类身体与人类所处的世界之间的关系。</p><h2 id="可被认知的世界是身体成立的必要条件"><a href="#可被认知的世界是身体成立的必要条件" class="headerlink" title="可被认知的世界是身体成立的必要条件"></a>可被认知的世界是身体成立的必要条件</h2><p>从 <strong>Hand Regard </strong>、婴儿吮吸手指、翻身的时候，形成对自己身体的认知。</p><p>在“吊篮猫和自由移动的猫”的实验中，了解到我们的视觉和身体之间有着紧密的关系。视网膜中的视觉信息和身体获得的体感信息。只有在大脑中综合处理后，才能够让我们正确认识视觉信息的意义。</p><p>而我们的身体，存在与包围着我们的环境中，即存在于和世界的关联中。通过 <strong>Hand Regard </strong>认知身体，无非是认知包围着我们身体的整个世界。</p><h2 id="人类、狗和苍蝇的世界认知"><a href="#人类、狗和苍蝇的世界认知" class="headerlink" title="人类、狗和苍蝇的世界认知"></a>人类、狗和苍蝇的世界认知</h2><p>德国的生物学家、哲学家乌克威尔（Jakob Johann Baron von Uexkull）的研究领域正是“身体和世界”之间的关系。乌克维尔认为，生物所处的世界分为作用空间（与生物相关的空间）和非作用空间（无生物不相关，或生物无意识到其关联的空间）。他还分别论述了人类、狗和苍蝇的身体和作用空间的关系。</p><p>例如一间客厅，对人类来说，椅子河水沙发都是用来坐的东西，桌子是用来摆放餐具等物品的空间，书架则是摆放书籍的收纳空间。</p><p>不过这些东西对狗来说就另当别论了。它们可能会认为椅子和沙发既可以坐着又可以睡觉的场所，而桌子和书架等物品，即使进入了它们的视网膜，它们也不会认为这些是和自己相关的空间。对苍蝇来说，它们则只能识别出天花板上的灯以及桌子上摆放的餐具。如果餐具里没有食物，它们甚至可能只把餐具当成是障碍物。</p><p>因此，不仅是人类，大多数的生命都是基于自己身体能如何作用于世界这一点来认知世界的。对于人和狗来说，二者使用桌子的能力不同。因此，二者对于桌子的意义（即作用空间的意义）的认识方式也不同。</p><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/cropped-1399678306525994.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-0d007d4ac861c4fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><h2 id="游戏中作用空间和非作用空间的关系"><a href="#游戏中作用空间和非作用空间的关系" class="headerlink" title="游戏中作用空间和非作用空间的关系"></a>游戏中作用空间和非作用空间的关系</h2><p>将“身体与作用空间的关系”中的对象替换为游戏角色和游戏空间，来重新思考这个问题。与现实世界相比，游戏内的作用空间（游戏角色可以行动的空间领域）更加有限。另外，游戏中存在大量的按钮和开关。</p><p>而且在游戏中，作用空间和非作用空间通常也不一定是固定不变的。</p><p>在《超级马里奥》中，“砖块地面”为一种可以站立其上，也可以从下方跳跃将其破坏的作用空间。游戏中的敌方角色也是一种作用空间，敌方角色虽然危险，但是玩家可以用踩踏等方式打倒敌方角色并获得分数奖励。</p><p>另一方面，游戏背景中的图像，由于玩家无法直接使其移动，所以被认知为一种非作用空间。</p><p>另外，分数和剩余生命等也属于作用空间。</p><p>这些都会根据玩家的操作而变化，根据数值的不同，或增加剩余生命，或游戏结束。</p><p>因此，这些内容被认为是身体和世界之间的一种中介物。</p><p>另外游戏中隐藏砖块等非作用空间，会在游戏中因玩家的发现而转变成作用空间。</p><h2 id="《俄罗斯方块》中的扩展身体到作用空间的转化"><a href="#《俄罗斯方块》中的扩展身体到作用空间的转化" class="headerlink" title="《俄罗斯方块》中的扩展身体到作用空间的转化"></a>《俄罗斯方块》中的扩展身体到作用空间的转化</h2><p>《俄罗斯方块》中处于下落过程的方块可以视为玩家在游戏中的扩展身体。</p><p>在这个方块彻底落下，不能在移动的瞬间，方块就变成不断累加的“地基”，这时方块作为扩展身体的功能也就消失了。</p><p>随后这个“地基”又变成了可以承接接下来要落下的方块的作用空间。</p><p>因此，有时候最着游戏的进行，扩展身体会转化为作用空间。</p><p>虽然都是一些富有戏剧性的变化，但玩家在那个变化的瞬间都能够进行恰当的理解。</p><h2 id="规划游戏、身体和环境间的关系"><a href="#规划游戏、身体和环境间的关系" class="headerlink" title="规划游戏、身体和环境间的关系"></a>规划游戏、身体和环境间的关系</h2><p>整理下“身体”、“视觉”、“世界”的关系。</p><p>人类的大脑通过 <strong>Hand Regard </strong>等方式进行后天的身体学习。为了顺利学习，身体所处的世界不可或缺。</p><p>除了现实世界的身体学习，人还可以精神体扩展到道具，甚至是虚拟世界中，进行后天的关联学习。</p><p>之前举了“<strong>逆转眼镜</strong>”的例子，其实对于那些能力不好的人来说，眼镜和隐形眼镜也可以称得上是他们身体的一部分。</p><p>对于工匠、钢琴家、足球选手来说，工具、钢琴、足球也可以称为是它们被扩展的身体。</p><p>我们身处的世界又能分为作用空间和非作用空间，以及作用空间对我们自身的意义。</p><hr><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/02/20151103-21.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-5195c5aa54b3ab80.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20151103-21"></a></p><p>即使在游戏世界里，我们也能够观察到上述关系。</p><p>游戏中的玩家角色，就是玩家通过图像、音乐和手柄震动等反馈，在大脑中获得的新的关联学习，即所谓的扩展身体。</p><p>不过，所谓的扩展身体的操作范围和现实人类自己的身体比起来，操作上受到极大的限制。</p><p>玩家通过多次反复进行游戏不断进步，以完成操作被限制的身体的关联学习。</p><p>另外，玩家在理解游戏内作用空间的意义的同时，通过限制身体理解作用空间因时因地变化的意义，可以对游戏世界产生更加深刻的认知。</p><p>这个认知，在游戏过程中会不断更新变化。</p><p>这种变化，则是根据游戏设计的引导而发生的。因此，可以说游戏设计的一个重要职责就是“规划身体和环境间的关系”。</p><p>另外，游戏中的虚拟身体和世界，与实际中身体及现实世界并非毫不相干。</p><p>无论对哪一边的身体或世界来说，人都是通过同样的机制来认知的。</p><p>这一点对游戏设计者来说也是十分重要的。</p><p>创作游戏，并非“创作出一个和现实世界完全不一样的新世界”。创作者需要理解现实世界人类身体的特征，理解世界与作用空间的特性及其相互关系，并在这些理解的基础上，设计出玩家易于理解的抽象化的身体和世界。</p><blockquote><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2></blockquote><ul><li><p>我们身处的世界可以分为作用空间和非作用空间。</p></li><li><p>根据身体功能的不同，作用空间意义也不同。</p></li><li><p>玩家通过进行游戏，理解限制身体、作用空间和非作用空间的区别，以及作用空间的意义。</p></li><li><p>游戏中身体和环境间的关系由游戏设计者规划设计。</p></li></ul><blockquote><p>摘自《游戏性是什么》第6章（游戏和世界），作删改喜欢这本书，其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>游戏和视角</title>
      <link href="/2016/06/05/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E5%92%8C%E8%A7%86%E8%A7%89/"/>
      <url>/2016/06/05/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E5%92%8C%E8%A7%86%E8%A7%89/</url>
      <content type="html"><![CDATA[<p>让我们来思考下3D游戏中很容易成为玩家压力的镜头问题。为了实现舒适的游戏环境，游戏开发者如何惨淡经营？而镜头的问题，又和玩家身体指尖存在怎样的关系？</p><p>——《游戏性是什么》第5章</p><h2 id="视角和视觉"><a href="#视角和视觉" class="headerlink" title="视角和视觉"></a>视角和视觉</h2><p>上一章已经介绍了游戏角色是人身体的扩展部分。作为身体相关研究的第二章节，将通过游戏中必不可少的镜头问题，来研究视角的相关内容。</p><p>正确区分视角和视点</p><p>视角：玩家角色眼睛，镜头的位置</p><ul><li>视点：玩家角色或镜头所有的对象</li></ul><h3 id="镜头的各种视角"><a href="#镜头的各种视角" class="headerlink" title="镜头的各种视角"></a>镜头的各种视角</h3><p> 回顾下上一章所提到的射击游戏的历史，在游戏刚诞生的一段时间内，被称为<strong>固定场景</strong>的镜头成为了主流。像 Breakout 和《太空侵略者》等，就是所谓的“单场景游戏”。这都是由于硬件的限制，无法实现场景的滚动。</p><p> 随后不久，像《<a href="http://baike.baidu.com/link?url=V7s3oLu3lJRVnAT_J3C2BWIfC0JnCXf8FF2ljMfc6Kju8vNdYfS3KreLLpBCtVXY858DqZftRC3LlgnQdY3-ia" target="_blank" rel="noopener">铁板阵</a>》这种场景可以纵向滚动或者横向滚动的设计游戏出现了。这类游戏叫作平行场景游戏。在这类游戏中，镜头会从正上方或侧面一直追随角色的移动。</p><p> 作为这种应用的例子，还存在一种位于角色斜上方的视角，叫作45度视角。</p><p> 不过，当时基本没有什么人在意游戏的视角。这是由于玩家的操作和视角的移动毫无关系。</p><h3 id="《超级马里奥64》的视角"><a href="#《超级马里奥64》的视角" class="headerlink" title="《超级马里奥64》的视角"></a>《超级马里奥64》的视角</h3><p>在游戏视角方面，《超级马里奥64》是带来巨大改变的开山之作。在该作品中，玩家可以在3D世界中享受自由操作马里奥进行探索乐趣，这可以说是一部真正意义上的3D游戏，而且也是第一个将视角问题摆到开发者和玩家面前的游戏。</p><p>让我们看一下游戏中的具体内容吧。作品中，玩家可以操作“马里奥”和“快乐云”两个角色。由于角色的分开使用，所以画面场景出现了各种切换。</p><p>马里奥用3D摇杆操作，快乐云用C键操作（手柄右边的4个并列按钮）。也就是说玩家可以同时分别使用马里奥和快乐云两个视角</p><p>进行游戏。而且在很多情况下，这两个视角的移动是正好相反的。</p><p>例如当3D摇杆向右推时，马里奥就转向右方。然后镜头为了能照到马里奥的后脑勺，自动地移动到了左侧。这时的镜头移动，是为了能够让马里奥保持在画面中央。也就是说，由于镜头向左移动，电视画面中的视点才能向右侧滚动。</p><p> 接下来，思考下操作镜头的情况。按住C键的右侧，快乐云就向右移动了。快乐云以马里奥为中心进行圆周运动，当镜头右移时视点则向左滚动。也就是说，同样的向右操作，视角向右移动，而视点就向左移动了。</p><p> 就像这样，玩家可以同时操作马里奥和快乐云，就可以根据不同状况切换游戏视角。当玩家控制马里奥时，3D摇杆向右推，游戏画面便向右移动。反过来当控制快乐云时，玩家按右侧C键，画面就会向右移动。当然，也有不少玩家觉得这种操作相当混乱。</p><h3 id="《塞尔达传说：时之笛》中视角的修正方案"><a href="#《塞尔达传说：时之笛》中视角的修正方案" class="headerlink" title="《塞尔达传说：时之笛》中视角的修正方案"></a>《塞尔达传说：时之笛》中视角的修正方案</h3><p>继《超级马里奥64》之后又一部划时代作品——《塞尔达传说：时之笛》。</p><p>该作品和《超级马里奥64》一样，也可以通过3D摇杆的操作改变主人公林克面向的方向。3D摇杆的操作和林克的朝向（画面的移动）是一致的。</p><p>另一方面，作品中代替快乐云角色是妖精“那比”。当玩家想要注视一个特定场所时，就可以通过操作移动那比，林克的目光会随那比移动，画面就会转过去。也就是说，作品中</p><blockquote><p> 通过操作视点（角色），就能让视角（镜头）发生移动。</p></blockquote><p>即，我们普遍认为那比担任着GUI中光标的角色。当操作那比时，玩家的视点就转移到那比身上。在作品的镜头视角系统中。镜头移动时玩家并没有意识到镜头的存在，仅仅看到玩家角色和身为视点的那比。除此之外，《塞尔达传说：时之笛》中的系统也有很多类似的改良。</p><h2 id="角色、镜头、视点"><a href="#角色、镜头、视点" class="headerlink" title="角色、镜头、视点"></a>角色、镜头、视点</h2><p>在玩家的视角问题上，我们可以从角色、镜头、视点这3个要素进行考察。</p><p>在《超级马里奥64》中，通过操作镜头移动视点，让玩家产生了些许不协调感。而《塞达传说：时之笛》中玩家可以直接操作视点，就消除了这种不协调感。</p><p>此外，在任天堂DS（NDS）平台上的《塞尔达传说：梦幻沙漏》中，所有操作都为触控笔操作。使用触控笔后，玩家不再通过按键操作林克，这就切换成操作视点的方式了。</p><hr><p> <a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/16-1.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-a9541e80706b762d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><h2 id="人可以自由变换视角的位置"><a href="#人可以自由变换视角的位置" class="headerlink" title="人可以自由变换视角的位置"></a>人可以自由变换视角的位置</h2><p>在第三人称的游戏中，镜头的位置经常被固定在游戏角色的斜后方（后视）。这种镜头多在强制滚动形式的游戏中使用，竞速游戏就是其中之一。让我们以街机体感游戏 <strong>Rapid River </strong>为例。</p><p>玩家横跨在机体上，通过滑动船桨型的控制器对象对橡皮艇进行操作。画面上的游戏角色也会乘坐在橡皮艇上，滑动着船桨。<br>这时，玩家的身体扩展到画面中游戏角色的身上，但实际上</p><blockquote><p>玩家确实是从架空的斜后方视角</p></blockquote><p>出发来观察整个画面的。这就好像是一种自己从自己后方进行观察丢份儿感觉。</p><p>说起视角，像《超级马里奥64》这种自己可以操作视角的3D动作游戏，也能让人在进行游戏时毫无违和感。这是由于镜头与游戏角色总能面向同一个方向，视角和视点的朝向也没有太大偏离。</p><p>因此，我们的大脑就能将视角从眼睛移动到别的地方去。</p><h2 id="视角移动的实验"><a href="#视角移动的实验" class="headerlink" title="视角移动的实验"></a>视角移动的实验</h2><p>让我们用自己身体做个试验，来确认视角的移动。</p><p>首先，将指尖移到额头处，用一个<strong>对自己来说比较自然的方向</strong>，写下一个“了”字。</p><p>这时，在外人眼中，字看起来像是反了的“了”。这是因为书写者会从自己眼睛的位置（视角）出发去书写一个他所能看到的“了”字。（当然，试验中也有人写出正确方向的文字，但大多数人还是写出了镜像文字来）。</p><p>接下来，用指尖在自己后脑勺写出一个<strong>对自己来说方向自然</strong>的“了”字。这时，大多数人写出的字，对观察者来说朝向也是正确的。</p><p>这个实验结果带来的启发：<strong>将视角转移到自己身后方是一件很容易的事情</strong>。也就是说，后视的视角移动是相对简单的。</p><h2 id="大脑能够学习新的视角"><a href="#大脑能够学习新的视角" class="headerlink" title="大脑能够学习新的视角"></a>大脑能够学习新的视角</h2><p>有些游戏中的镜头位置可以任意切换，《<a href="http://baike.baidu.com/view/258671.htm" target="_blank" rel="noopener">GT赛车</a>》等竞速游戏就是典型的例子。</p><p>竞速游戏的玩家群体，有的喜欢驾驶员的视角（第一人称），有的则喜欢可以看到自己车辆的第三人称视角。因此这一作品中就设置了可以在第一人称视角和第三人称视角之间切换功能。</p><p>实际对比游戏的两种视角，会发现而这之间在操作体感上还是存在细微差异的。不过不论是哪种视角，玩家只需短暂的试玩就可以习惯整个操作。虽然第一人称视角为真正开车时的视角，不过正如我们前边所说的，被放置后方的第三人称视角，对人来说更熟悉。</p><p>第三人称视角，虽然并非游戏中担任玩家身体职务的角色（使难题在游戏中的扩展）的直接视角，但是我们的大脑却能学习到这个视角。这种现象就叫做“大脑的视角重新学习”。</p><h2 id="逆转眼镜"><a href="#逆转眼镜" class="headerlink" title="逆转眼镜"></a>逆转眼镜</h2><p><strong>“大脑的视角重新学习”</strong>可以通过“逆转眼镜”实验来考察。逆转眼镜是一种特殊眼镜，可以使佩戴者视觉上的上下左右方向发生反转。实际上在右侧的物体，在逆转眼镜中为左侧。</p><p>虽然这种眼镜一开始会给佩者的生活带来各种障碍，不过一周后，佩戴者就能习惯了。随后当佩戴者摘掉眼镜后，反而需要再用一段时间来适应正常的方位。</p><p>佩戴逆转眼镜会给我们带来强烈的视角变化，但我们的大脑仍然能应对自如。</p><h2 id="扩展身体和限制身体"><a href="#扩展身体和限制身体" class="headerlink" title="扩展身体和限制身体"></a>扩展身体和限制身体</h2><p>暂且放下“视角”的话题，先介绍下“扩展身体”和“限制身体”的相关内容。</p><p>我们将游戏中玩家身体的扩展部分（游戏中玩家控制的角色）叫作<strong>扩展身体</strong>。当以玩家为中心时，我们使用“扩展身体”一词。</p><p>反过来，当以游戏中玩家控制的角色为中心时，该角色为“玩家身体中一部分的表现”。因此，当以游戏角色为中心时，可以用“<strong>限制身体</strong>”一词来表现游戏中的角色。</p><p>例如，《俄罗斯方块》中正在下落的方块就看作是扩展身体。这种说法是站在玩家的立场上。当站在方块的立场上，比如描述方块如何与其他游戏中的物体（比如墙壁等）等物体相互关联时，方块就是“玩家身体一部分的表现”，即限制身体。</p><p>简而言之，从玩家的角度看，游戏角色是扩展身体，从游戏的角度看，游戏角色就是限制身体。区别仅在于我们是从哪个角度来看的，其实所指的对象都是一样的。</p><h2 id="行走和WASD键的相似性"><a href="#行走和WASD键的相似性" class="headerlink" title="行走和WASD键的相似性"></a>行走和WASD键的相似性</h2><p>现在，思考包括视角问题的身体感觉与用户界面之间的关系。首先，看一下以“战地”系列为代表的FPS（第一人称射击游戏）的相关操作。</p><p>FPS游戏的移动操作大多类似，键盘上的W键为前进，S键为后退，A、D分别左、右移动（这种组合键叫作<strong>WASD键</strong>），鼠标的移动则控制视角的移动。</p><p>虽然这种操作方法是FPS游戏中约定成俗的方式，不过，为什么用WASD键来控制角色行动，而用鼠标控制视角移动呢？</p><p>首先我们先考虑下人类的行走动作。，通过观察可以发现，人在行走时将脚向前迈出，中心也向前倾斜。当重心倾斜时，为了不让自己摔倒就必须用脚支撑，因此，人每次只能向前迈出一步。也就是说，“行走”并不是单纯地脚的移动，而是</p><blockquote><p>向特定方向移动重心。</p></blockquote><p>为了追随身体重心的移动，脚就应该移动。如此一来，行走的本质为“在特定时间目标方向移动重心”。</p><p>WASD键控制下的行走又是怎样的呢？那就是“在特定时间向目标方向按下按键”。也就是说，WASD键控制模式和人的行走模式相通。因此WASD键方的操作方式容易被大家认可。</p><h2 id="视点和鼠标的相似性"><a href="#视点和鼠标的相似性" class="headerlink" title="视点和鼠标的相似性"></a>视点和鼠标的相似性</h2><p>鼠标是一种能够瞬间指定位置的设备。它和视点的移动拥有一样的特性。因此它比较适合用来完成“改变枪口朝向”等瞬间位置指定操作。</p><p>在前一章所述的《塞尔达传说：梦幻沙漏》中，玩家使用触控笔指定目标地点，这种方式也和视点移动（鼠标移动）有一样的操作感。</p><h2 id="和感觉相互匹配的操作"><a href="#和感觉相互匹配的操作" class="headerlink" title="和感觉相互匹配的操作"></a>和感觉相互匹配的操作</h2><p>看一例子——<a href="http://baike.baidu.com/view/10368556.htm" target="_blank" rel="noopener"><strong>Oculus Rift</strong></a>。<strong>Oculus Rift</strong>为头戴显示器，是一种头戴式虚拟现实设备。其中内部配备了加速度传感器，能够匹配佩戴者头部运动，并在画面中呈现出来。当佩戴者低头时，游戏画面中的视角也随之向下运动。</p><hr><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/7e3e6709c93d70cf7fb6e7b7fbdcd100baa12b3f.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-1a465097c6d021fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Oculus Rift（图取自百度百科）"></a></p><hr><p>这个和人与生俱来所体验到的感觉完全一致的。</p><p>因此可以说，Oculus Rift中视角移动的操作非常易于学习。在原型阶段时，Oculus Rift在游戏开发者之间就具有很高的人气了，可以预见今后还会有许多相应的软件被开发出来。</p><p>在游戏开发中，</p><blockquote><p>设计易于玩家掌握的视角扩展身体</p></blockquote><p>是获得大多数玩家支持的重要条件。尽管大脑能够重新学习新的视角，但是我们不应该带给它过多的压力。我们有必要顾及游戏应和人类特性相匹配这一点。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>游戏的视角操作，需要重点考虑镜头、玩家角色和视觉三个要素。</p></li><li><p>大脑能够在各种不同的场景下设定视角，能够根据视觉信息重新学习视角。</p></li><li><p>在设计包括镜头在内的玩家扩展身体（玩家操作的游戏角色）时，为了让玩家更容易掌握，应该尽量让操作感觉和操作结果接近。</p></li></ul><blockquote><p>摘自《游戏性是什么》第5章（游戏和视角）喜欢这本书，</p><p>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>游戏的设计机制</title>
      <link href="/2016/06/04/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2016/06/04/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>游戏趣味性的本质——“游戏性”的问题。<br>“游戏性”问题研究中，最重要的是之前提到的效率预估。在此，将“引导玩家进行效率预估的游戏设计机制”定义为“Ludo”，以便于对游戏性的相关内容进行研究。</p><p>——《游戏性是什么》第11章</p><h4 id="游戏性与Ludo"><a href="#游戏性与Ludo" class="headerlink" title="游戏性与Ludo"></a>游戏性与Ludo</h4><p>“效率预估”是玩家根据自身技能，在“高风险短时间”和“低风险长时间”中做出最恰当选择的一种判断行为。</p><p>引导玩家进行效率预估的游戏设计机制，可以使更多的玩家在游戏中找到恰当的难易度平衡，从而持续玩家的动机。</p><p>反之，从玩家的角度来看，只有进行效率预估，才能在游戏中进入“心流”的专注状态，才会想继续玩下去。</p><p>从上述内容中可以看到“游戏性”定义的模糊轮廓：</p><blockquote><p><strong>游戏性，是为了引导玩家进行效率预估的一种设计机制。</strong></p></blockquote><p>结合之前关于身体性的相关研究，可以做出如下阐释：</p><blockquote><p><strong>游戏性，是为了引导玩家进行效率预估的一种设计机制，以便于玩家通过实际的身体 / 限制身体认知目标世界，达成自己所设定的目标。</strong></p></blockquote><p>将这种设计机制成为“Ludo”，这个名称源于拉丁语，“Ludus”，本意为“游戏，玩笑”。</p><p>很多游戏都是有多个Ludo组成的。多个Ludo相互结合构造出的平衡，会影响到每一个Ludo的平衡以及游戏的整体的平衡。个体Ludo的平衡可以使用跷跷板来表示，多个Ludo间的相互作用和平衡，可以想象，蕴含多级连杆力学平衡的育儿玩具“挂铃”。<br>这种“挂铃”是复合Ludo的示意图，称为Ludo结构图。</p><h4 id="Ludo结构的画法"><a href="#Ludo结构的画法" class="headerlink" title="Ludo结构的画法"></a>Ludo结构的画法</h4><p><img src="http://upload-images.jianshu.io/upload_images/1171873-a4aa6bb7d7161757.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Ludo.jpg--画图真是不是我强项"></p><p>游戏设计师需要将想要玩家发现的效率预估名称以标题的形式写在Ludo的最上部分。在曲线最下方写上玩家执行该Ludo所需要的时间。<br>接下来Ludo结构图，大部分游戏是由多个Ludo构成的。将这种结构用示意图来表示就是Ludo结构图。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-043d1515ceb05f25.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Ludo结构图.jpg--凑合这看吧"></p><p>这种包含关系的复杂结构中，最外侧的Ludo叫做“母Ludo”，内侧的Ludo叫做“子Ludo”。最外侧的“母Ludo”是达成目标所需时间最大的部分。</p><h4 id="Ludo的有效性"><a href="#Ludo的有效性" class="headerlink" title="Ludo的有效性"></a>Ludo的有效性</h4><p>简述Ludo的意义，Ludo是游戏设计师在思考游戏“难易度平衡模型”时的“设计图”。正因如此，它在游戏制作中会发挥其有效性。<strong><em>电影，动漫的脚本与最终作品往往有些差异，Ludo和最终游戏的呈现（画面构成和场景构成）也不一定是一致的。</em></strong></p><p>当分析游戏作品时，将按照如下顺序进行：</p><ol><li>分析者玩目标游戏</li><li>列举并分析自己从中所获得的效率预估</li><li>用Ludo的形式记述效率预估的引导形式</li></ol><p>而游戏设计则依照：</p><ol><li>以Ludo的形式记述引导玩家的效率预估</li><li>在Ludo的基础上，开发制作游戏</li><li>玩家去玩目标游戏</li></ol><p>游戏设计相当于“撰写脚本、依据脚本制作电影”，游戏分析则相当于“观看电影，依照电影分析脚本”。两者的顺序正好相反。</p><h4 id="超级马里奥的跳跃"><a href="#超级马里奥的跳跃" class="headerlink" title="超级马里奥的跳跃"></a>超级马里奥的跳跃</h4><p>eg：超级玛丽当中最基本的动作：跳</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-10319ee9fe5ed4af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SuperMarioLudo.jpg--一回生二回熟，这张画得比较快"></p><p>这里值得注意，Ludo引导的“效率预估”应由玩家自主发现。游戏设计师不能将目标和解决方案直接设计出来。但“Ludo”中要规划出具体方案，供玩家在效率预估是选择。</p><h4 id="引导效率预估的机制设计——Ludo"><a href="#引导效率预估的机制设计——Ludo" class="headerlink" title="引导效率预估的机制设计——Ludo"></a>引导效率预估的机制设计——Ludo</h4><p><img src="http://upload-images.jianshu.io/upload_images/1171873-dbc6ca5ba372a566.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="公主二重唱--我儿时玩的打架游戏--为了截图专门下载来玩"></p><p>像这样的画面，对老玩家而言一个再简单不过的局面，但对没有游戏经验的人，会首先进行可行性尝试。不过，光是看到“来回移动”就应该能够引发效率预估了，大多数人应该是如下：</p><ul><li>如果在间隙缩小时跳跃，应该能顺利通过（风险低）。但是必须等到恰当的时机。</li><li>在间隙扩大时跳跃可能会失败（风险高），不过却能迅速行动（时间成本低）。</li></ul><p>当然，仅这样，还不能引发效率预估，还需要另外的条件，即难易度对于玩家技能而言，已经上升到“危机”层次，这样才能引导玩家进行效率预估。当玩家被迫在风险和时间成本之间做出权衡时，就不得不做出一个对自己最恰当的决定。</p><p>不过当遵从自我决定的行为结果为“成功”时，就能够得到满足感、爽快感等直接关系到游戏趣味性的感觉。</p><h4 id="Ludo唤起其他Ludo"><a href="#Ludo唤起其他Ludo" class="headerlink" title="Ludo唤起其他Ludo"></a>Ludo唤起其他Ludo</h4><p>就是一个Ludo引导另外一个Ludo。游戏设计师通过灵活运用Ludo的性质设计出作用空间，就可以引导玩家进行效率预估。</p><h4 id="设计师料想之外的效率预估"><a href="#设计师料想之外的效率预估" class="headerlink" title="设计师料想之外的效率预估"></a>设计师料想之外的效率预估</h4><p>游戏中具体设计的限制身体作用空间，会引导玩家进行效率预估。将这一过程称为Ludo。大多数玩家都在游戏设计师设定好的Ludo中找到问题的解决方案，推进游戏的进展。不过，当Ludo的引导不是特别恰当时，有时也会出现玩家技能的习得进展不按照游戏设计师预定的效率预估进行，引发了设计之外的效率预估。</p><p>例如，玩家为了验证“怎么才能最快死亡”的效率预估等就是这个情况。</p><p>这对于游戏设计师来说，是意料之外的游戏方式。不过，这也可以说是游戏本来就具备的游戏本质吧。</p><p>Ludo并不仅是引导玩家进行效率预估的机制。很多游戏中，玩家在自己尝试效率预估时，会发现一些独立的（游戏设计师料想之外的）效率预估机制。</p><p>因此，游戏中具有这样的一种可能性，即：</p><blockquote><p><strong>玩家发现游戏设计师料想之外的效率预估机制</strong></p></blockquote><h4 id="引导效率预估的Ludo中诞生出新游戏"><a href="#引导效率预估的Ludo中诞生出新游戏" class="headerlink" title="引导效率预估的Ludo中诞生出新游戏"></a>引导效率预估的Ludo中诞生出新游戏</h4><p>Ludo和效率预估之间有着密不可分的关系。换句话说，游戏就是</p><p><strong>一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。</strong></p><p>制作这种环境的行为就是游戏设计。</p><p>随着分析的深入，得出游戏设计的核心重点，即：</p><blockquote><p><strong>在限制身体和作用空间的何处，设置“引导玩家进行效率预估的机制==Ludo”</strong></p></blockquote><p>关于游戏之外的内容，如果能够在这一点上下功夫设计的话，和能够成为具有“游戏性”的作品。虽然不知道是否可以将这样的内容称为“游戏”，但这些具有“游戏性”设计的内容却是能像游戏一样，给人带来持久的乐趣。</p><blockquote><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4></blockquote><ul><li>游戏性，是为了引导玩家进行效率预估的一种设计机制。</li><li>引导玩家进行效率预估，以便于玩家通过实际的身体/限制身体认知目标世界，达成自己所设定目标的设计机制（游戏性），称为“Ludo”。</li><li>Ludo结构图，是整体平衡与单体平衡相互影响的复合性“挂铃”结构。</li><li>Ludo同样可以应用在游戏之外的内容中。</li></ul><hr><p><strong>游戏就是：一个玩家可以从作用空间中进行效率预估并且能达成目标的人工制作出来的环境。</strong>加上游戏是<strong>符号化的现实世界</strong>。在初步了解专注游戏的原因和游戏性后，开始理解人接触游戏直到沉迷于游戏这个过程。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-5ea07a77408ae2de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><blockquote><p>摘自《游戏性是什么》第11章（游戏设计的机制）喜欢这本书，</p><p>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>游戏和身体</title>
      <link href="/2016/06/04/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E5%92%8C%E8%BA%AB%E4%BD%93/"/>
      <url>/2016/06/04/%E6%96%87%E9%9B%86-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88-%E6%B8%B8%E6%88%8F%E5%92%8C%E8%BA%AB%E4%BD%93/</url>
      <content type="html"><![CDATA[<p>游戏中玩家操作的角色，对于玩家来说是一个什么样的存在？我们人类是怎么看待游戏内的世界和操作对象的？</p><p>——《游戏性是什么》第4章</p><h2 id="玩家角色和玩家自身"><a href="#玩家角色和玩家自身" class="headerlink" title="玩家角色和玩家自身"></a>玩家角色和玩家自身</h2><p>着眼于“身体”，同时探讨玩家与游戏角色之间的关系。</p><p>游戏角色是玩家在游戏世界内所拥有的“身体”，它和我们在现实世界中所拥有的“身体”有什么相同之处，又有什么不同之处？？</p><h2 id="玩家操作的究竟是触控笔，还是游戏角色？"><a href="#玩家操作的究竟是触控笔，还是游戏角色？" class="headerlink" title="玩家操作的究竟是触控笔，还是游戏角色？"></a>玩家操作的究竟是触控笔，还是游戏角色？</h2><p>在这里，以任天堂DS平台上的冒险游戏《<a href="http://baike.baidu.com/link?url=g3Ww7NjrJS1xqwEW00PEj5vdAHkd5sMvlOojrDwFiUZRlDQrSuPBZE8qmqhkz0s_F1DAT25rRgNhI4qcKFf8da" target="_blank" rel="noopener">塞尔大传说：幻影沙漏</a>》为例进行说明。</p><p>这款游戏的特点就是几乎所有操作是使用触控笔完成的。</p><p>在这款游戏中，玩家用触控笔点击地面，主角林克就会向着点击处移动。</p><p>那么问题来了，这个时候玩家所操作的究竟是触控笔还是林克？</p><p>下边这种观点比较妥当：</p><blockquote><p><strong>玩家操作触控笔，间接操作林克。</strong></p></blockquote><p>也就是，玩家用身体操作设备，使画面上的数据图形移动。</p><p>这种解释方式不仅限于游戏，电脑上的鼠标操作也符合这个道理。</p><h2 id="身体的感觉是通过学习掌控的"><a href="#身体的感觉是通过学习掌控的" class="headerlink" title="身体的感觉是通过学习掌控的"></a>身体的感觉是通过学习掌控的</h2><p>首先，我们是如何认识自己的身体。</p><p>说到身体，一般人会认为身体就是从头到脚。</p><p>我们从各种各样的研究结果中可得知，这种感觉是我们在成长过程中，通过大脑后天学习获得的，并不是人与生俱来的本能。</p><p>考虑到这种学习机制时，最重要的是身体和大脑之间的3中信号，将这3中信号整合起来，大脑就能够识别身体的情况了。</p><ul><li><p>动作信号， 由大脑发出，经神经系统传达至身体各处，目的是只是身体的运动。</p></li><li><p>体感信号， 基本上是指触觉。</p><p>如果说动作信号是由大脑通过神经系统对外输出的信号的话，那么与之相对的则是对内输入的信息。</p><p>也就是说，体感信号是通过神经系统返回大脑的信号。</p></li><li><p>特殊感觉信号，指视觉、听觉、味觉等。</p><p>体感是身体全方位所能接收到的感觉，而与之相对的，特殊感觉信号则是眼睛、耳朵、舌头等个别器官所能接收到的感觉。</p><p>特殊感觉信号和体感信号一样，都是输入信号。</p></li></ul><h2 id="Hand-Regard"><a href="#Hand-Regard" class="headerlink" title="Hand Regard"></a>Hand Regard</h2><p>具体看一下这3种信号的传递。</p><p>婴儿经常会注视、触摸自己的手，吮吸自己的手指。</p><p>此时，这3种信号是按照下方这样的次序传递的。</p><ul><li><p>大脑发出“吮吸手指”的动作信号。</p></li><li><p>手指的触感等体感信号反馈到大脑。</p></li><li><p>眼睛看到手指动作时的视觉信号，口中含这手指的味觉信号等特殊感觉信号反馈到大脑。</p></li><li><p>动作信号、体感信号、特殊感觉信号三者在大脑中整合，婴儿形成了对身体的认识。</p></li></ul><p>这种婴儿身体学习称为“手掌凝视（<strong>Hand Regard</strong>）”。</p><p>人成年后，对自己身体的认识已经形成了，</p><p>所以我们很难在体验到手掌凝视了，但是这种身体学习形式并不只限于婴儿身上发生。</p><p>幻肢痛就可以证明此理。</p><h2 id="幻肢痛和镜盒治疗"><a href="#幻肢痛和镜盒治疗" class="headerlink" title="幻肢痛和镜盒治疗"></a>幻肢痛和镜盒治疗</h2><p>因事故等原因而丧失四肢的患者，</p><p>会屡次产生四肢仿佛还在的错觉，而他们也能感觉到这些虚假肢体上的痛觉，这种痛觉叫做<a href="http://baike.baidu.com/link?url=5H_oerEfZ2wceBoSqM1EPqrvthRziWi8DT5SJ3wcy9Vo5zdx16SudIMFcsxTvq8s" target="_blank" rel="noopener"><strong>幻肢痛</strong></a>。</p><p>为了帮助一位因事故失去双手，进而经受了10年幻肢痛困扰的患者祛除病痛，神经外科医生拉玛钱德朗通过研究，使用<strong>镜盒治疗</strong>治愈了这位患者的幻肢痛。</p><p><strong><a href="http://baike.baidu.com/link?url=tyB4TBiKqT7nm42_9b3DKphpnexNl95j3D6JXo7cs3FbZ_sZ-MHz79DTTHuzKqEFBm8bcULvyp3XgAbgB457iq" target="_blank" rel="noopener">镜盒治疗</a></strong>是一个构造极其简单的盒子。</p><p>镜盒治疗，就是在盒子正中间用一块镜子隔开，然后将两只手分别插进两边的孔洞内。</p><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/eaf81a4c510fd9f999926074252dd42a2834a421.png" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-0deb372128e799d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="百度百科词条——镜盒治疗1"></a><br>让我们以失去左手的患者为例。</p><p>他将实际存在的右手和自己假想中存在的左手，都伸进到盒子中。将两边分隔开的镜子会映出右手的影子。</p><p>随后，患者就会觉得镜中的右手的虚像，仿佛是自己的左手。也就是说，让此时患者可以感到自己的双手都伸进到盒子里。</p><p>紧接着，让患者做出双手握拳、松开的动作。</p><p>也就是对实际上存在的左手同样发出这种动作信号，所以他对左手的特殊感觉信号（这种情况下指视觉）就会反馈回了大脑。</p><p>不过虚假左手的体感信号（触觉）并没有反馈回去。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/06/8435e5dde71190effc72a7c2ce1b9d16fdfa6025.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-a89282a3cce2f348.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="百度百科词条——镜盒治疗2"></a></p><hr><p>在镜盒治疗持续进行的过程中，幻肢痛逐步缓解，最终消失。</p><p>这其实是将3种信号反复重新匹配，使得患者的大脑对左手这一身体部位的认知进行了再学习的结果。</p><p>镜盒治疗的设备非常简单。</p><p>实际上笔者（渡边修司）也做一下，进行了数十分钟的尝试。</p><p>但经过几天之后，笔者的手产生了麻痹感。</p><p>这正是因为笔者两只手都是实际存在的。但大脑却进行了某只手缺失的身体认识再学习的缘故。</p><blockquote><p>渡边修司 | Shuji Watanabe<br> 日本立命馆大学教授，日本立命馆游戏研究中心运营委员，日本数字游戏学会研究委员，1997年，以《最终幻想7国际版》（原史克威尔公司）进军游戏业后，在多家游戏公司任职游戏策划、制作人等职务。</p></blockquote><p>游戏中的身体感觉</p><p>整理一下镜盒治疗的中3个信号的流程</p><ul><li><p>大脑发出“将双手放入镜盒中，只让单侧的手进行动作”的动作信号。</p></li><li><p>手的动作成为一种体感反馈给大脑。</p></li><li><p>镜子中映出的影像成为一种特殊感觉反馈给大脑。</p></li><li><p>动作信号、体感、特殊感觉在大脑内得到统一，并产生了新的感觉关联（身体健全者会有命名一只手没有动，却能感到两只手都在动的不协调感，而幻肢痛患者则感觉到他缺失那一只手）。</p></li></ul><hr><p>身体感觉就是以这种形式重新学习关联。</p><p>让我们将这种模型应用到触控笔操作的游戏中来看。</p><p>实际上，玩家在玩游戏时，往往都在进行身体感觉的再次关联学习。</p><ul><li><p>大脑发出“让触摸笔触碰特定地方”的动作信号。</p></li><li><p>手的动作成为一种体感反馈给大脑。</p></li><li><p>画面上角色的动作成为一种特殊体感反馈给大脑。</p></li><li><p>动作信号、体感、特殊感觉在玩家的大脑中得到统一。</p></li></ul><hr><p>老玩家对于这种再次关联学习不会感到什么困难。</p><p>通过这种关联学习，玩家会将游戏中的角色当成自己身体的一部分，这样便可以自由自在地操作角色了。</p><p>这正是将游戏中的角色作为“自己身体的扩展部分”来进行再次关联学习。</p><h2 id="身体和世界之间的相互作用"><a href="#身体和世界之间的相互作用" class="headerlink" title="身体和世界之间的相互作用"></a>身体和世界之间的相互作用</h2><p>关于身体感觉的关联学习，也有将重点放在视觉层面上的实验。</p><p>“吊篮猫和自由移动猫”就是这种实验。这个实验能够让大家理解大脑是如何形成“看”这种行为。</p><p>在这个实验中，有两只从出生就一直被饲养在漆黑的环境之中，刚刚学会走路的小猫。</p><p>这两只小猫被一个像天秤一样的装置互相连在一起，一侧的小猫乘坐在吊篮里，另一侧的小猫可以自由自在地移动。</p><p>也就是说，这个装置中，坐在吊篮里的小猫会随这自由移动的小猫的行动而移动。</p><p>保持这种状态，将小猫放在内部描绘着条纹花样的圆筒中，暂时让它们习惯一下。</p><p>接着，将两只小猫从装置中取出，放在桌子上面。我们会发现，自由移动的猫不会踏出桌子外侧一步，而坐在吊篮理的猫咪并不能察觉到危险，所以它从桌子上掉下去。</p><p>这两只猫咪出现了不同的“主动的运动”和“被动的运动”。</p><p>虽然它们“看”的行为都是一样的，但是由于坐在吊篮中的猫没有机会学习到视觉的变化和运动之间的关联性，所以它不能察觉到从视觉信息的变化中所产生的危险。</p><p>因此，即使大脑可以主动让身体进行运动，但如果它不能将身体运动和世界之间的相互作用联系起来的话，就无法正确理解视觉信息。</p><p>这种“<strong>身体和世界之间的相互作用</strong>”并不仅仅是现实世界才能有的现象。</p><p>如之前所说的，大脑甚至能够将虚拟世界的数据，作为身体的扩展不分进行关联学习。</p><p>“最近沉迷于竞速游戏，身体经常毫不自觉地左右晃动”“当我被敌人击中的时，会喊出‘好痛！’”这些现象都是典型的例子。</p><hr><p>这就是大脑对于身体进行再次关联学习后产生的现象。</p><h2 id="游戏中的身体学习"><a href="#游戏中的身体学习" class="headerlink" title="游戏中的身体学习"></a>游戏中的身体学习</h2><p>——“身体扩展关联学习”的相关内容</p><p>这里要举的例子是<strong>《<a href="http://baike.baidu.com/link?url=2t_3mVswt2mZ0WGsLpSIWTZ9YDLd8dLmR0MT9VK9Mr1UYJxatjh2sOzEmMpOAM6KyJOxHaYvEEyhd3xE4eW12Rlg82tT_iOkjOmvtIlKcz85ZysJCcSNROCZ4NG9BlxaL3PCffum5H2B9YyOEB1jX7gSLWF6syy_vMEOttZoyLrIoxaTEjnllMpbsnbRpxc9-Hl2fHdONHNCtLywrS3--q" target="_blank" rel="noopener">超级马里奥64</a>》</strong></p><blockquote><p>超级马里奥64</p><p>发行时间：1996年</p><p>游戏平台：任天堂（简称64）</p><p>这是niendo64的首发游戏，游戏手柄增设了3D摇杆。<br>从这部作品开始，“马里奥”就变成了第三人称3D动作游戏。也成为了给之后的3D游戏带来巨大影响的里程碑游戏。</p></blockquote><p>在作品真正的游戏开始之前准备一个学习关卡。</p><p>在这个关卡不会有敌人袭击，玩家可以自由地操作游戏角色进行练习。<br>此时，在跑动、跳跃、爬树等动作的时候，玩家就可以把手柄的操作和马里奥的动作在大脑里关联起来。这个过程就是大脑对游戏中身体的扩展部分进行再次关联学习。在经过多次是失败后，玩家就可以成为完美操作马里奥游戏的大师了。</p><p>这时，大脑和身体的关联学习就可以说是完成了。</p><p><strong>《<a href="http://baike.baidu.com/link?url=HAXhgM_EnT2vZRS-zqhnD4y9t_xaIjYPNwGE7CPmgLyOpJaI7WowtyfT2pqbzm8GOLIAsrWBXle2dNoDYbSRJa" target="_blank" rel="noopener">战地3</a>》</strong></p><p>同样的身体关联学习过程，也存在于“战地3”这样的第一人称游戏中。与《超级马里奥64》有所不同的是，第一人称视角下不存在玩家能够通过视觉观察到的“自己的投影对象”。但玩家可以通过画面中的胳膊、枪械以及手柄操作等动作信号和体感的反馈，切实感受到游戏世界中（被扩展的）身体的存在。随后玩家通过游戏，就可以进行身体的关联学习。</p><p><strong>《俄罗斯方块》</strong></p><p>也有一些游戏，并不存在明确的游戏角色，比如《俄罗斯方块》。当中，玩家能够操作的是下落的方块，即玩家将方块当成自己身体的扩展。紧接着，随着方块不断堆积，当方块落到相应位置无法操作时，玩家又失去了将这个方块当成自己身体扩展部分的认知，转而将这种认知切换到接下来要落下的方块上去。</p><p>这种类型的游戏通过让玩家反复进行身体关联学习的过程，就不会在身体扩展部分的切换中感到不自然。</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><ul><li><p>人类通过 <strong>Hand Regard </strong>对身体感觉进行后天学习。</p></li><li><p>身体感觉可以通过再次关联学习进行修正和扩展。</p></li><li><p>游戏的操作对象，就是人类通过再次关联学习扩展的身体。</p></li><li><p>游戏内的扩展身体会随着状况不同而发生各种各样的变化。</p></li></ul><blockquote><p>摘自《游戏性是什么》第4章（游戏和身体）喜欢这本书，<br>其中一边引导一边抛出问题和解释问题的方式很值得学习，作已记录。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 游戏性是什么 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hello,os-world of Boot Sector</title>
      <link href="/2016/05/25/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E2%80%9Chello-os-world-%E2%80%9D-of-Boot-Sector/"/>
      <url>/2016/05/25/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E2%80%9Chello-os-world-%E2%80%9D-of-Boot-Sector/</url>
      <content type="html"><![CDATA[<p>这不是个完整的os，而只是个最最简单的引导扇区(Boot Sector)，但至少它是在裸机上运行的，不依赖任何其他软件～</p><hr><p>在图书馆无意中挖到一本《<strong>自己动手写操作系统</strong>》。欢哉～</p><p>可惜是2005年的书了，书中讲到的软盘和软盘映像相应的软件在网上实在不好找，特别是win系统的。最后还是装个deepin来编译.asm和.img文件来得方便。</p><p>为什么是deepin？方便啊，十几分钟自动安装，然后就能用了。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160513132812.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-ed5b2fee51b9e54f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一个简单的Boot Sector"></a></p><p>将下面的代码保存为 BOOT.ASM<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">org 07c00h  ;告诉编译器程序加载到7c00处</span><br><span class="line">mov ax,cs</span><br><span class="line">mov ds,ax</span><br><span class="line">mov es,ax</span><br><span class="line">call DispStr  ;无线循环</span><br><span class="line">jmp $</span><br><span class="line">DispStr:</span><br><span class="line">  mov ax,BootMessage</span><br><span class="line">  mov bp,ax   ;es:bp = 串地址</span><br><span class="line">  mov cx,16 ;cx = 传长度</span><br><span class="line">  mov ax,01301h ;ah = 13,all = 01h</span><br><span class="line">  mov bx,000ch   ;页号为0(bh=0)，黑底红字(b1=0Ch,高亮)</span><br><span class="line">  mov dl,0</span><br><span class="line">  int 10h  ;10h号中断</span><br><span class="line">  ret</span><br><span class="line">BootMessage: db &quot;hello ,os world!&quot;</span><br><span class="line">times 510-($-$$) db 0    ;填充剩下的空间，使生成的二进制代码，恰到好处为512字节</span><br><span class="line">dw 0xaa55   ;结束标志`</span><br></pre></td></tr></table></figure></p><p><strong>linux下安装nasm，编译：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**nasm boot.asm -o boot.bin**</span><br></pre></td></tr></table></figure></p><p>使用linux下的dd命令，网上找了下dd制作映像文件，果然是可以的，制作方法如下：<br>1 先制作一个空的软盘映像文件diska.img(1.44Mb的软盘映像文件)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**dd if=/dev/zero of=diska.img bs=512 count=2880**</span><br></pre></td></tr></table></figure></p><p>2 制作一个包含boot.bin的映像文件boot.img:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**dd if=boot.bin of=boot.img bs=512 count=1**</span><br></pre></td></tr></table></figure></p><p>3 将diska.img中1个扇区后面的数据拷贝到boot.img的后面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**dd if=diska.img of=boot.img skip=1 seek=1 bs=512 count=2879**</span><br></pre></td></tr></table></figure></p><p>这样就做成了一个大小为1.44Mb的包含引导代码的映像文件。</p><p>接着，创建一个空的虚拟机，在设置中将Floppy（软盘）的路径设置为上面制作的引导扇区的路径：<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160515125816.png" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-59867994fdf17b2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160515125816"></a><br>开启虚拟机，便出现本文开头的那张图——hello ,os world!</p><p>其实这些在网上是能够找到的，可奈何脑子笨，弄了一天试了好多软件才出现这一界面，固然欣喜。如何与硬件做沟通？正是我想要了解的。<a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/1786778861.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-3fd3dee55e0a9bbd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a><br>一个不懂汇编和C语言的，可怜的娃。</p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>百度，广告</title>
      <link href="/2016/05/08/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E7%99%BE%E5%BA%A6%EF%BC%8C%E5%B9%BF%E5%91%8A/"/>
      <url>/2016/05/08/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E7%99%BE%E5%BA%A6%EF%BC%8C%E5%B9%BF%E5%91%8A/</url>
      <content type="html"><![CDATA[<p>其实很久前就知道了，就怕给忘了，虽然现在google粉</p><hr><h3 id="1、登录账号。在百度首页下方的“-使用百度前必读-”，点击。"><a href="#1、登录账号。在百度首页下方的“-使用百度前必读-”，点击。" class="headerlink" title="1、登录账号。在百度首页下方的“ 使用百度前必读 ”，点击。"></a>1、登录账号。在百度首页下方的“ <strong>使用百度前必读</strong> ”，点击。</h3><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224221.png" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-82a3b68905aea738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160114224221"></a></p><h3 id="2、接着在这个页面上找到-“-隐私权保护声明-”"><a href="#2、接着在这个页面上找到-“-隐私权保护声明-”" class="headerlink" title="2、接着在这个页面上找到 “ 隐私权保护声明 ”"></a>2、接着在这个页面上找到 “ <strong>隐私权保护声明</strong> ”</h3><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114224827.png" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-f2c62ef3ff9d9db7.png" alt="20160114224827"></a></p><h3 id="3、在右侧找到“-个性化配置-”，并点击。"><a href="#3、在右侧找到“-个性化配置-”，并点击。" class="headerlink" title="3、在右侧找到“ 个性化配置  ”，并点击。"></a>3、在右侧找到“ <strong>个性化配置</strong>  ”，并点击。</h3><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225041-1.png" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-c30ca8f5d9fb35fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160114225041-1"></a></p><h3 id="4、点击“-选择停用-”"><a href="#4、点击“-选择停用-”" class="headerlink" title="4、点击“ 选择停用 ”"></a>4、点击“ 选择停用 ”</h3><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/05/20160114225912.png" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-c584526647dafd6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160114225912"></a>对，没错，藏得很隐蔽</p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>扣头发丝</title>
      <link href="/2016/05/08/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%8A%A0%E5%A4%B4%E5%8F%91%E4%B8%9D/"/>
      <url>/2016/05/08/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%8A%A0%E5%A4%B4%E5%8F%91%E4%B8%9D/</url>
      <content type="html"><![CDATA[<p><a href="http://yamida.org/2016/04/28/%e6%8a%a0%e5%a4%b4%e5%8f%91%e4%b8%9d%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-8decbc7debca5ee4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "></a></p><p>中午阿姐发来证件照，要我改下格式和大小，还好人长得漂亮，不需要做什么处理……只是换背景色麻烦了点，幸好她没要求（其实我压根不会PS）。<br>冲着好奇，找到教程，跟着做了下，成品很不错（尽管调试了好多次）……<br>分享此文，望有帮助……原文为：<br><a href="http://cuiqingcai.com/" target="_blank" rel="noopener">静觅</a> » <a href="http://cuiqingcai.com/1415.html" target="_blank" rel="noopener">PS抠头发丝详细教程</a></p><p>#<a href="http://cuiqingcai.com/1415.html" target="_blank" rel="noopener">PS抠头发丝详细教程</a></p><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>在PS里，对于抠图，比较有技术含量的便是抠头发丝了，下面为大家带来一个比较详细的抠头发丝的教程。</p><h3 id="素材准备"><a href="#素材准备" class="headerlink" title="素材准备"></a>素材准备</h3><p>在这里我们用这张图片作为抠图素材，下面让我们一步步来演示抠图的过程，并为之更换背景。<a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-0.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-4202a5104dbcd810.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-0"></a></p><h4 id="1-打开素材"><a href="#1-打开素材" class="headerlink" title="1.打开素材"></a>1.打开素材</h4><p>第一步，当然是用PS打开这张图片素材啦。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-1.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-93915dc31032f90c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-1"></a></p><h4 id="2-复制通道"><a href="#2-复制通道" class="headerlink" title="2.复制通道"></a>2.复制通道</h4><p>打开通道选项卡，按每个通道的前面的小眼睛，让红绿蓝通道依次显示，观察哪一个通道明暗对比更加明显，在这里，我们发现蓝色通道的明暗对比更加明显，那我们就右键复制，建立蓝色通道的一个副本，如图所示。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-2.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-0bfe11fcf8b39865.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-2"></a></p><h4 id="３-调整色阶"><a href="#３-调整色阶" class="headerlink" title="３.调整色阶"></a>３.调整色阶</h4><p>打开图像－调整－色阶，将低色阶调高，高色阶调低，让图片的明暗对比更加明显，点击确定。<a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-3.png" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-3f1fe1a0baef6249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-3"></a><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-4.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-cac117cef59f87dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-4"></a></p><h4 id="４-减淡加深"><a href="#４-减淡加深" class="headerlink" title="４.减淡加深"></a>４.减淡加深</h4><p>切换至减淡或加深工具，首先我们切换到减淡工具，范围选择高光，直接对图片的亮白部分进行涂抹，这时我们会发现比较亮的部分都被减淡为白色，如图所示。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-5.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-1dbc976c243b2168.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-5"></a></p><p>然后切换到加深工具，范围选择阴影，直接涂抹人物，将人物全部涂抹成黑色，如图所示<a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-6.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-1b18a0b1c65de851.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-6"></a><br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-7.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-7210cfc93bb15342.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-7"></a><br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-8.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-3810ef8d22626a5a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-8"></a></p><h4 id="５-画笔修补"><a href="#５-画笔修补" class="headerlink" title="５.画笔修补"></a>５.画笔修补</h4><p>这时我们会发现几乎所有的人物都已经变成了黑色，不过还有小瑕疵，有一小部分还没有变成黑色，没关系，切换到画笔工具，颜色选择黑色，让我们把没有变成黑色的部分进行填充。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-9.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-67d0c8cced4529df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-9"></a><br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-10.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-4dde4b4869cfd8a6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-10"></a></p><h4 id="６-反向检查"><a href="#６-反向检查" class="headerlink" title="６.反向检查"></a>６.反向检查</h4><p>按Ctrl+I，将图片切换为反向，将黑白部分没有填充好的地方重新用画笔工具填充一下，保证做到黑白分明。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-11.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-310cd83f3a0cd2ae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-11"></a></p><h4 id="7-抠出人物"><a href="#7-抠出人物" class="headerlink" title="7.抠出人物"></a>7.抠出人物</h4><p>按住Ctrl键，鼠标移至图层的小图标处点击，即图中红色框处的区域，点击一下，即可选中人物的轮廓。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-12.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-6c4ae315f8474159.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-12"></a><br>将图层的RGB通道全部复原，切换至图层面板<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-13.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-052557298c16cf4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-13"></a><br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-14.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-3c78dae9ceefa30a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-14"></a></p><p>按Ctrl+J，复制选区中的内容到新的图层，这时我们会发现新建了一个图层，它的背景是透明的。(P.S.按第一次不生效可以尝试按第二次，我这边出现了一个副本，然后便是透明背景的图片)<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-15.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-f0ce6064b9d1d1e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-15"></a></p><h4 id="8-更换背景"><a href="#8-更换背景" class="headerlink" title="8.更换背景"></a>8.更换背景</h4><p>我们在该图层下面新建一个图层，填充为自己想要的颜色，看一下效果，在这里我设置了灰白渐变效果。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-16.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-4e06d8dc9c170fe2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-16"></a></p><h4 id="9-去除白边"><a href="#9-去除白边" class="headerlink" title="9.去除白边"></a>9.去除白边</h4><p>选中人物图层，选择图层-修边-移除白色杂边，即可去除边缘的杂边干扰<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/ps-17.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-457ca19943981fc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps-17"></a><br>这样一来，抠头发丝的完整过程就结束啦。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上便是抠头发丝的全部过程，如果做证件照的话，可以尝试一用，希望对大家有帮助</p><blockquote><p>转载自：<a href="http://cuiqingcai.com/" target="_blank" rel="noopener">静觅</a> » <a href="http://cuiqingcai.com/1415.html" target="_blank" rel="noopener">PS抠头发丝详细教程</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>孙悟空无姓无名的时候，阎王生死簿是怎么写的呢？</title>
      <link href="/2016/05/04/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E5%AD%99%E6%82%9F%E7%A9%BA%E6%97%A0%E5%A7%93%E6%97%A0%E5%90%8D%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E9%98%8E%E7%8E%8B%E7%94%9F%E6%AD%BB%E7%B0%BF%E6%98%AF%E6%80%8E%E4%B9%88%E5%86%99%E7%9A%84%E5%91%A2%EF%BC%9F/"/>
      <url>/2016/05/04/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E5%AD%99%E6%82%9F%E7%A9%BA%E6%97%A0%E5%A7%93%E6%97%A0%E5%90%8D%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E9%98%8E%E7%8E%8B%E7%94%9F%E6%AD%BB%E7%B0%BF%E6%98%AF%E6%80%8E%E4%B9%88%E5%86%99%E7%9A%84%E5%91%A2%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>——转载于知乎</p><p>这个问题让我对地狱数据库系统（Hell-DBMS )进行了几点小思考，开个脑洞。</p><p>###1、生死薄技术上如何实现？广大生灵在生死薄中的唯一标记是什么？阴间数据库是什么样一个数据库？</p><p>首先，地狱必须有数据库，数据量太大了<br>每个生灵都要有记录，且必须是实时记录，要进行数据分析。想像一下各种生灵，万物有灵，大大小小，连蝼蚁飞蛾也是命，从单细胞到现代社会的数据应该有多大。<br>数据库的话每个生灵就要有唯一标记。实名反对说是名字主键的，这是基本知识，名字重名怎么办，数据库原理请重修。<br>实名反对说是IP地址标记的，<strong>IPV4</strong>很快就用光的好不好；<strong>IPV6</strong>貌似在生物历史长河中也是不够的，朝生暮死都是生灵，这么多年过去了，这数据积累。<br>把自动生成的唯一ID当主键相对还靠谱，但位数必须相当长，数据库得特别设计，如此大数据至少要谷歌技术支持，也许叫地狱歌，<strong>SQL -Server</strong>之类的技术根本顶不住。搞<strong>Hell-DBMS</strong>请先看下大技术</p><blockquote><p>Hoogle File System<br>Hoogle Bigtable<br>Hoogle MapReduce</p></blockquote><p>对了，《开源海量数据库技术在阴间生死管理系统中的研究与实践》应该获得天庭科技进步特等奖的。<br><strong>其次，查询效率必须高</strong><br>查询效率低的话，阎王还得点支烟等半天结果么，经常有上级官员过来查数据，玉皇啊，如来啊，即使是阿难、迦叶来也是惹不起的人，用户不满意，<strong>KPI</strong>不行、绩效差阎王官位不稳的。业务量这么大，每天至少插入数亿条新记录，删除数亿条记录，所有善恶状态数据都要实时记录，想想要接多少善恶传感器，信道冲突肯定很难解决，好事坏事用<strong>WiFi</strong>还是<strong>ZIGBEE</strong>传的不清楚，说不定某米会推出家庭善恶智能数据处理中心。</p><p>生灵死掉之后还要迅速进行大数据分析，判定死人到底应该进几层地狱。数据分析慢了奈何桥都要排队，用户差评有木有！数据粒度非常非常细，死亡时间三更五更都不能差，下了地狱打多少下铁棍都要精确计算，况且还会有许多异常发生，有时候要回滚，有可能不小心操作错了（死而复生应该就是地府回滚，详细请见《聊斋志异》<a href="http://baike.baidu.com/link?url=VmN2qIU0_GJgFy7KmThxf8Lv6fL0B8pIour5MXKn0s1TTpl9ZWPgQKsagndDRQo257plbTKr4MnnnjYDCRPuvRwj3Hc4y6R0Dc76LxaMabO" target="_blank" rel="noopener">[7]</a>)；有时候要灾难恢复，比如孙猴子捣乱引起的灾难性数据损失；比如用户投诉问题，凭什么猴子要短命？这种问题只有孙猴子问得出，不仅问得出还直接上门责问，地府的安保工作真的要加强。</p><p>对了，像悟空这种异常用户，Sa恨不得一删了之有木有？（不懂Sa的IT人士请自行面壁，admin也算sa）</p><p><strong>再次，必须能应对瞬时并发高峰数据</strong><br>战争来了，成千上万的人阵亡；瘟疫了，成千上万人逝去；灭鼠了，几万几十万老鼠完蛋；飞机撒农药了，多少修行不够的小精灵批量完蛋。<br>有生灵死亡必须要登记并把流程向前推进，这是典型的移动应用，无数的勾魂小鬼在短时间内飞速赶到现场，管它是扫二维码还是近场通讯技术<strong>NFC</strong>，反正无数小鬼同时用移动客户端向<strong>Hell-DBMS</strong>系统上传数据，App必须友好，后台必须能顶住，不能学12307-1总是掉链子，12307-1掉了链子还能骂它：“去死！Go to Hell!”，<strong>Hell-DBMS</strong>可怎么骂才好。所以呢：<br><strong>关键时刻，服务器不能卡住，数据库性不能下降，生死薄必须实时更新。</strong></p><p><strong>最后，必须有大数据分析和预测技术</strong><br>阴间有谛听，可以通过”听“，得到过去数据和未来的数据，这明显是大数据和云结合的杰作。为什么是听呢？因为阴间数据库已经把数据语音化了，用定向波束直接送到谛听耳边，电磁监听根本没有效果，几乎不可能泄密。定向波束的技术在加大功率后可同时用于在阴间跳广场舞的某些亡灵们。</p><p>###2、孙猴子在阴间里删除数据，怎么删除的？后来如何？</p><p><strong>结论1： 猴子要删除数据，应该是从界面删除的，没什么高技术，纯粹的社会工程而已。</strong></p><p>巨型数据库，大数据数据库一定是分解得比较细的，删除的话至少是多表级联删除，直接从主表<strong>Delete</strong> 未免要引发异常，再说孙猴子不是计算机专业的，应该是用金箍棒顶着小鬼的顶梁门，胁迫他用超级用户进去，选择界面的删除功能搞定的。</p><p>我猜阴间数据库删除要左右各一个小鬼，持阎王发的优盾，同时输入口令。<br>孙猴子反正克隆能力强，变出几个分身分别逼住就能搞定。<br>这个BUG系统必须要改进。</p><p><strong>所以这是正常删除，删除之后，轮回系统并没有完全混乱，只影响了一部分数据。</strong></p><p>即使给孙猴子开个CONSOLE，他也记不住命令，猴急猴急，抓耳挠腮，他最多会点点鼠标。</p><p><strong>结论2：阴间数据库有强劲的灾难恢复功能</strong></p><p>话说，猴子完全低估了程序员们的实力。海量数据库都有强大的异地容灾备份功能，数据应该是备在最安全的雷音寺（第三方），所有操作均有<strong>LOG</strong>。在西方以如来为首的专家团指导下（具体操作应该是负责安全保卫的天王，成就归于领导），数据迅速恢复，猴子们根本没有得到永生，在西方如来团队的支持下数据迅速恢复，猴子家族应该死还是死。</p><p>孙猴子自己么，虽然罪过不小，但是他会闹，能力还强。为了和谐天庭管理层还是为他做了特殊标记，在数据库里加上一个<strong>TAG</strong>，设定为神仙级，计算寿命但不设定界限，有异常情况直接发出系统警报，和<strong>RuLai -SkyNet All-in System</strong>系统联动，确保一方平安。</p><hr><p>应 @ 王政童鞋要求，必须放参考文献：<br>0 、《Big Data Application Platform for Hell》[J] InHell Hell-SCI收录<br>1、《论Paxos算法在阴间生死管理系统中的应用与优化》[J] 阴间信息技术 玉帝元年 第7788卷 核刊<br>2、《论Consistent Hash在阴间生死管理系统云中的应用》[M]阴间信息技术 玉帝9527年 第125222 核刊<br>3、 《论超大规模稠密矩阵在阴间生死管理系统中的理论研究》[C] 信息技术阴间应用大会 9528<br>4、 《论孟婆汤在阴间生死管理系统库存管理当中的管理流程》 [J] 阴间食品与营养 VOL 2241554<br>5、《论牛头马面阴间勾人大队的管理电子化》[J] 阴间数字化城管研究 VOL15486488789<br>6、《论天庭-西天-阴间点对点技术在阴间办公自动化中的实现》 [J] 阴间实用软件增刊。<br>7、《聊斋志异》[7] 491(张友鹤本)或494(朱其铠本)</p><blockquote><p>作者：大海链接：<a href="http://www.zhihu.com/question/29775354/answer/45744415" target="_blank" rel="noopener">http://www.zhihu.com/question/29775354/answer/45744415</a>来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OneTab 和 轻听</title>
      <link href="/2016/04/22/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-OneTab-%E5%92%8C-%E8%BD%BB%E5%90%AC/"/>
      <url>/2016/04/22/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-OneTab-%E5%92%8C-%E8%BD%BB%E5%90%AC/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1171873-5d5a9d4fb4a32993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "></p><p>这两款软件是在“<a href="https://www.iplaysoft.com/" target="_blank" rel="noopener">异次元</a>”上看到的。</p><blockquote><p><a href="http://www.iplaysoft.com/onetab.html" target="_blank" rel="noopener">开太多网页变卡变慢？OneTab 一键收纳标签页，瞬间恢复谷歌浏览器速度！</a></p></blockquote><blockquote><p><a href="http://www.iplaysoft.com/qingting.html" target="_blank" rel="noopener">轻听——可自动下载歌词和歌曲封面的安卓本地音乐播放器 (简约无广告/腾讯出品)</a></p></blockquote><p>对严重依赖浏览器的同学超级推荐“OneTab”这款google chrome插件。自己有个习惯，说不上好和不好，有时一开网页标签就50，60个。然后不够看了，接着开新的浏览器……</p><p>当中有个评论挺有趣的：一般用“ctrl+shift+D”来保存目前现有的标签。哈哈哈……这也是个不错的办法。</p><p>亲测：绝对推荐，这样就能纵容我这个谈不上好和不好的习惯了。</p><hr><p>昨天上课手机听歌（实在不想听课）的时候，用的是本地播放器。<br>其中好几首歌曲听着感觉不对劲。</p><p>昨天中午饭后，怀疑是本地播放器的问题，下载了“轻听”。比较了下，明显是本地播放器的问题。说明，轻听的软件解析比本地好（仅限于我的手机）。</p><blockquote><p><strong>这是有那么一点出我意料的。一直以为自带的软件一般是完美匹配硬件的。</strong></p></blockquote><p>其实我只试过“轻听”这款播放器，网易云音乐通常是用来下载歌曲的（手机上很少听歌，网易大法好）。</p><p>为何推荐“<strong>轻听</strong>”？小，而且带有歌词，专辑图。这很小清新～(手动爱心)</p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>恶意代码引起的反思</title>
      <link href="/2016/04/18/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%BC%95%E8%B5%B7%E7%9A%84%E5%8F%8D%E6%80%9D/"/>
      <url>/2016/04/18/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%BC%95%E8%B5%B7%E7%9A%84%E5%8F%8D%E6%80%9D/</url>
      <content type="html"><![CDATA[<p>一个恶作剧……不过，稍不注意把自己电脑给弄崩了就不太好了……你说是吧？！</p><p>下午拿着新做的恶意代码在自己机子测试，电脑的反应很大，显然很不喜欢……</p><p><code>while(1){   &quot;蓝屏&quot;;   &quot;重启&quot;;}</code><br>在另外一台win7上测试，正常效果；</p><p>在一台win10上测试，什么事情都没有；</p><p>恶意代码中删除了<strong>C:/Windows/System32/下的KBDUS.DLL</strong>文件，而这个文件需要<strong>“获取管理员权限</strong>”才能删除。</p><p>笔者电脑很开放，加上自己手痒在“<strong>KBDUS.DLL</strong>”上右键获取权限，结果是电脑蓝屏加重启<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/QQ20160417231457.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-f25de8e23e964dbb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20160417231457"></a><br>“0x000000F4”的含义到现在也没弄清楚，反正把<strong>KBDUS.DLL</strong>文件放还原处后，电脑就不闹性子了。</p><p>在另一台win7上，因为没有权限，除了<strong>KBDUS.DLL</strong>删除报错，其余正常。win10因为用的是自定义用户（微软账号啥的），权限更少，加上微软自带防护软件。完全被藐视了……<br><img src="http://upload-images.jianshu.io/upload_images/1171873-1866029119f9d97a.gif?imageMogr2/auto-orient/strip" alt></p><p>虽然不是很有说服力：</p><blockquote><p>系统、软件、防火墙、杀软…及时升级的必要性。</p></blockquote><blockquote><p>慎重获取最高权限，无论是电脑还是手机。</p></blockquote><p>其中，有个细节，笔者的恶意代码被360成功拦截，腾讯管家并有做到这一点……</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>无题</title>
      <link href="/2016/04/15/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%A0%E6%A0%87%E9%A2%98%E6%96%87%E7%AB%A0/"/>
      <url>/2016/04/15/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%A0%E6%A0%87%E9%A2%98%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>YY里传来极轻的一声笑，<br>就好像懒懒的夏天，屋檐下的一只风铃，<br>不经意间，一缕柔风，轻飘飘的将它吹进了梦呢里</p><hr><p>春风夹杂着三月的桃花，我看见他的瞳孔里倒映出我自己，眼底落满笑意</p><hr><p>有很多街道林荫蔽日，甚至抬头不见光亮，下起雨时，会觉得人世间所有孤独都在此处，而路边画廊寻常可见，不起眼的小店干净整齐，一切都在告诉你：这里的每个人都在生活。</p><hr><p>夜太短，还没开始就天亮</p><hr><p>秋雨如烟如雾,无声地飘洒在那空地上的瓦砾堆里、枯枝败叶上,淋湿了地,淋湿了房,淋湿了树。</p><hr><p>还没有晾干的外衣,闷在寂寞的房里</p><hr><p>孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。</p><p>默默的聆听,窗外这场大雨下个不停。</p><p>伞下还有你的痕迹,勉强撑过这场雨</p><hr><p>牙医曾经说过，放手如同拔牙拔掉的那一刻，你会觉得解脱，但是舌头总会不由自主的往那个空空的牙洞里舔，一天数次。不痛了，不代表你已完全无视留下的那个空缺，永远都在间或甚至异常挂念，适应是需要时间，但牙总是要拔，因为太痛，所以终归还是要放手。</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>看几天韩剧的感想</title>
      <link href="/2016/04/15/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E7%9C%8B%E5%87%A0%E5%A4%A9%E9%9F%A9%E5%89%A7%E7%9A%84%E6%84%9F%E6%83%B3/"/>
      <url>/2016/04/15/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E7%9C%8B%E5%87%A0%E5%A4%A9%E9%9F%A9%E5%89%A7%E7%9A%84%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>近几天在看一部12年《幽灵》的剧，男主那忧愁的表情，眉眼间的信息传递，女主漂亮的脸蛋，露出可爱的门牙……剧情紧凑（后面8集就不知道了）……表示喜欢这部剧<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160505.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-44c5a8f2a7f24856.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160505"></a><br>看剧很爽，代价也同样……<br>就是每每躺在床上的空虚和充斥着满满的罪恶感，并且持续一个星期……<br>这部剧竟然没有情感戏</p><blockquote><p>喵了个咪。简书不能插音频链接。<br>（嗯，其实本文自带bgm——Burn Out (inst.)，只不过有些人没听到而已）</p></blockquote>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PPPOE上网</title>
      <link href="/2016/04/07/linux-pppoe%E4%B8%8A%E7%BD%91/"/>
      <url>/2016/04/07/linux-pppoe%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<p><em>韶华易逝，望能有松的坚强，山的稳重</em></p><hr><p>好吧～我承认这很傻逼，现在才知道怎么越过学校上网客户端上网。因为之前总觉得这些客户端都很高大上的，管着几千几万学生。</p><p>几天前一网友得知我是用pppoe拨号，语音里大笑  “这很简单啊～自己弄去”</p><p>在学校开网以后会得到一个拨号器软件—— “蝴蝶” ，安装中还需依赖插件——“ <a href="https://en.wikipedia.org/wiki/Pcap#WinPcap" target="_blank" rel="noopener">winpcap</a> ”，才能上网。</p><p>国内大部分高校均采用IEEE 802.1X认证方式对校内宽带接入进行认证，在802.1X认证下，一般的路由器无法使用。</p><blockquote><p>笔者学校称之为 “ 蝴蝶 ”……类似的有安腾、安朗、锐捷……（某朋友竟然无聊到跟我争论广东地区只用“ 锐捷 ”……-_-||  ……）</p></blockquote><p>@_@……我arch大法就这样复活了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pppoe-setup     //设置pppoe</span><br><span class="line">输入账号、</span><br><span class="line">网卡名字、</span><br><span class="line">DNS、</span><br><span class="line">密码、</span><br><span class="line">0-2 （我设置“ 0 ”）、</span><br><span class="line">y</span><br><span class="line">pppoe-start    //启动</span><br><span class="line">…Connected!【一般没说超时（timeout）就是好了】</span><br></pre></td></tr></table></figure><blockquote><p>看网上的说明，说是要装“ rp-pppoe ”，可是我装了也没什么用好像  -_-||<br>（呃，后来亲测还是要装的，不然连pppoe-setup都不能用——补充于20160515）</p></blockquote><p>gnome下设置<br>“ 添加配置 ”<br><img src="http://upload-images.jianshu.io/upload_images/1171873-2489474018dcd8e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2016-04-07"><br><img src="http://upload-images.jianshu.io/upload_images/1171873-6a05f5b9104869ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2016-04-07-1"></p><p>做以记录～</p>]]></content>
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>旧照片</title>
      <link href="/2016/04/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%A7%E7%85%A7%E7%89%87/"/>
      <url>/2016/04/05/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%A7%E7%85%A7%E7%89%87/</url>
      <content type="html"><![CDATA[<p>灯光火影，街道人群，窗台风铃。宛如油画般鲜艳的所有回忆。</p><p>时间会刺破青春的 华美精致，想水一样慢慢地从每个人身上覆盖过去，那些潮水的痕迹早就在一年一年的季风中干透，只残留一些水渍，变化着每个人的模样。<br><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-1.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-9c1e3b8f1d08aaf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160404-1"></a><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/04/20160404-2.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-912e40cd97aa92ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160404-2"></a></p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>f.lux和“薄暮微光”</title>
      <link href="/2016/04/01/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-f-lux%E5%92%8C%E2%80%9C%E8%96%84%E6%9A%AE%E5%BE%AE%E5%85%89%E2%80%9D/"/>
      <url>/2016/04/01/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-f-lux%E5%92%8C%E2%80%9C%E8%96%84%E6%9A%AE%E5%BE%AE%E5%85%89%E2%80%9D/</url>
      <content type="html"><![CDATA[<p>两个有趣的软件：自动调整屏幕色温减少蓝光防疲劳</p><p>在异次元看到的，直接传送门：</p><blockquote><p><a href="http://www.iplaysoft.com/android-night-shift-mode.html" target="_blank" rel="noopener">睡前玩手机必备的 Android 安卓夜间模式 APP 应用</a></p></blockquote><blockquote><p><a href="http://www.iplaysoft.com/flux.html" target="_blank" rel="noopener">f.lux – 全天候保护眼睛健康软件！</a></p></blockquote><p>考试那天装了试用，感觉只有在日出和日落时才会调色温……</p><p>不过效果还行……因为有时候6点多起床看电脑，宿舍很暗，又不好意思开灯（我那能照亮半个宿舍的台灯），于是算帮上忙了……</p><blockquote><p>不过后来发现，并不经常用。<br>——又是记录于20160904</p></blockquote>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows7,打开休眠模式</title>
      <link href="/2016/04/01/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-windows7-%E6%89%93%E5%BC%80%E4%BC%91%E7%9C%A0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2016/04/01/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-windows7-%E6%89%93%E5%BC%80%E4%BC%91%E7%9C%A0%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>运行：powercfg -h on<br>没了，我就记着，省得找不着</p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>电脑文件搜索神器——Everything</title>
      <link href="/2016/03/21/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Everything/"/>
      <url>/2016/03/21/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Everything/</url>
      <content type="html"><![CDATA[<p>“Everything” is a sofeware for search in your pc——题记</p><p>为了这个“逼格”的题记，芽蜜翻了半小时的牛津词典……</p><h3 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h3><p>一句话概括强大之处：一款能在几秒内根据名称查找文件和目录的软件，大小在550k左右。</p><p>有时想找个文件，却不知道放在哪里，通常会在“ 文件管理器 ”右上角查找文件名称……接着就是傻傻坐等电脑刷新，不幸的话会在漫长等待后得到电脑回答“ 没有与搜索条件匹配的项 ”，然后就心塞塞的……</p><p>Everything是一个私有的免费Windows桌面搜索引擎</p><hr><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>当Everything第一次运行时，会通过主文件表中的文件元数据创建卷上每个文件和目录名称的索引。默认情况下，会索引所有挂载的NTFS卷。创建索引后，程序就会根据USN日志持续更新索引。Everything在索引中查找满足用户查找表达式的文件名，表达式可以是部分目标文件名，或使用正则表达式，并且在搜索关键字输入后立刻显示结果。</p><p>由于Everything并不索引文件内容，并且依赖于USN日志来过滤文件更新，因此只会占用很少的内存和处理器时间。Everything的索引过程和搜索过程执行非常快速（几乎瞬间完成）、占用资源极低，同时能实时更新索引数据库（索引文件极小）和搜索结果，这些特性在如今磁盘容量越来越大、用户文件越来越多的情况下使得Everything超越了传统桌面搜索工具而广受欢迎。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>基于前面描述的工作原理，使得Everything的缺点和它的优点一样明显。</p><p><strong>需要管理权限：</strong>这样才能读取USN日志，由此带来了安全上的问题。<br><strong>仅支持文件全名（含路径）：</strong>在搜索时仅能根据路径和文件名进行过滤。而不支持其他文件属性，如修改时间等。<em>（这只能说Everything只支持文件名搜索，应该算是局限性不算缺点）</em></p><p><strong>仅支持NTFS卷：</strong>不支持目前大量移动设备使用的FAT文件系统，也不支持除Windows外的其他操作系统中常见的文件系统，如Linux。不过，从Everything 1.3.0.629b（测试版）开始提供的文件列表功能，为使用其他文件系统的用户和使用移动存储设备的用户提供了便利。</p><blockquote><p>如果希望能快速在硬盘上找到想要的文件，那这款软件真心不错……。芽蜜好几次是用Everything找到忘了位置的文件。平时放文件都有分类，类别多了难免路径长了点。</p></blockquote><p>相关软件：<a href="https://zh.wikipedia.org/wiki/Listary" target="_blank" rel="noopener">Listary</a>、DocFetcher（根据文件内容搜索的软件）</p><p>文章内容引用自<a href="https://zh.wikipedia.org/" target="_blank" rel="noopener">wikipedia</a>词条<a href="https://zh.wikipedia.org/wiki/Everything_(%E8%BD%AF%E4%BB%B6" target="_blank" rel="noopener">Everything</a>)<br>推荐网站：<a href="http://www.iplaysoft.com/" target="_blank" rel="noopener">异次元</a> – 软件改变生活! （一直光顾的网站，在这里也能找到需要的软件）</p><p> <a href="http://yamida.org/myfiles/Everything-1.3.4.686.x64-Setup.1418106344.exe" target="_blank" rel="noopener">本页面提供Everything-1.3.4.686.x64版本下载，嫌弃版本低就算了^_^。</a></p>]]></content>
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>春分</title>
      <link href="/2016/03/20/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%98%A5%E5%88%86/"/>
      <url>/2016/03/20/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%98%A5%E5%88%86/</url>
      <content type="html"><![CDATA[<p><a href="http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-d736311cf0ef9653.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><a href="http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/" target="_blank" rel="noopener">2016年3月20日</a> / <a href="http://yamida.org/author/rabbit/" target="_blank" rel="noopener">芽蜜</a> / <a href="http://yamida.org/2016/03/20/%e6%98%a5%e5%88%86/#respond" target="_blank" rel="noopener">0 COMMENTS</a></p><p>今日春分……清早的大雨倾盆、雷声隆隆，加上一周的毛毛雨。到处湿漉漉，衣服湿答答……</p><p><a href="http://7xn7w0.com1.z0.glb.clouddn.com/wp-content/uploads/2016/03/first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp.gif" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-bd5b31cc2a9883e8.gif?imageMogr2/auto-orient/strip" alt="first-day-of-spring-2016-northern-hemisphere-5727786629070848.4-hp"></a><br>喜欢看google主页上的动画……可每每向身边人分享这些可爱的动画时（也许是他们不方便看吧），一般不会引起共鸣……</p><p>在写这篇时，上面的动画一直反复，写着写着就傻傻地被逗笑一下……</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>windows下启动项菜单(Boot-Manager)问题</title>
      <link href="/2016/03/19/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-windows%E4%B8%8B%E5%90%AF%E5%8A%A8%E9%A1%B9%E8%8F%9C%E5%8D%95-Boot-Manager-%E9%97%AE%E9%A2%98/"/>
      <url>/2016/03/19/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-windows%E4%B8%8B%E5%90%AF%E5%8A%A8%E9%A1%B9%E8%8F%9C%E5%8D%95-Boot-Manager-%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这个问题通常会在装linux、win双系统后，用EasyBCD之类的软件重置了电脑的 mbr ，导致在windows下的启动菜单变成英文，或是欢迎界面变成英文版的……</p><p>这种情况笔者在deepin下遇过……deepin挂了，连win的启动项都找不到，情急之下用启动盘将重写了win的mbr。</p><p>在win中，以管理员身份运行 “ cmd ” ，输入<br><figure class="highlight plain"><figcaption><span>-SET &#123;CURRENT&#125; LOCALE ZH-CN```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(此命令将把需要启动的操作系统的选择菜单，也就是多重操作系统共存时选择需要启动哪个操作系统的选择菜单的显示语言修改为简体中文)</span><br><span class="line">``` BCDEDIT -SET &#123;MEMDIAG&#125; LOCALE ZH-CN</span><br></pre></td></tr></table></figure></p><p>(此命令将把当前选定的 Windows操作系统的 F8 高级启动菜单的显示语言修改为简体中文)<br><figure class="highlight plain"><figcaption><span>-SET &#123;BOOTMGR&#125; LOCALE ZH-CN```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(此命令将把 Windows 内存诊断工具的显示语言修改为简体中文)</span><br><span class="line">``` BCDEDIT /ENUM ALL</span><br></pre></td></tr></table></figure></p><p>查看上述项目的 LOCALE 值是否已成功修改为ZH-CH简体中文。<br><img src="http://upload-images.jianshu.io/upload_images/1171873-aad8b8af50722c2d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "></p><p><strong>这方法不是原创，搜索引擎上一大把（多也就意味着要去筛选）。这样记下来以后要是就方便了……</strong></p><blockquote><p>笔者发现，搜索解决问题办法时，常因表达不明确而导致难以找到满意的答案。普通使用者哪会知道每次开机时黑色背景的倒计时叫做 “ 启动项菜单 ”？ 笔者最近的arch出了问题，还好有grub，省去了不必要的麻烦。</p></blockquote>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>还没有晾干的旧伞，闷在寂寞的房里</title>
      <link href="/2016/03/17/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E8%BF%98%E6%B2%A1%E6%9C%89%E6%99%BE%E5%B9%B2%E7%9A%84%E6%97%A7%E4%BC%9E%EF%BC%8C%E9%97%B7%E5%9C%A8%E5%AF%82%E5%AF%9E%E7%9A%84%E6%88%BF%E9%87%8C/"/>
      <url>/2016/03/17/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E8%BF%98%E6%B2%A1%E6%9C%89%E6%99%BE%E5%B9%B2%E7%9A%84%E6%97%A7%E4%BC%9E%EF%BC%8C%E9%97%B7%E5%9C%A8%E5%AF%82%E5%AF%9E%E7%9A%84%E6%88%BF%E9%87%8C/</url>
      <content type="html"><![CDATA[<p><a href="http://yamida.org/2016/03/17/%e8%bf%98%e6%b2%a1%e6%9c%89%e6%99%be%e5%b9%b2%e7%9a%84%e6%97%a7%e4%bc%9e%ef%bc%8c%e9%97%b7%e5%9c%a8%e5%af%82%e5%af%9e%e7%9a%84%e6%88%bf%e9%87%8c/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-e191b2876ea9a256.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160317"></a></p><p>雾蒙蒙的天持续了两周。每个早晨都能在走廊上看到零星雨点孤独地坠落,没有蜻蜓的伴舞,没有风儿的指引。</p><p>昨天陪了五年的伞说它累了，想歇息一下。只好去附近店铺买把新的。特意选了一把和原来颜色（紫色），大小一样的伞。</p><p>身边总有认识的看到我大伞，随口说一句“卧槽，这伞这么大”。通常会开玩笑回道“ 专为我未来的雨中情人准备的 ”……</p><p>雨中，有你的痕迹，足以撑过这场雨。</p><p>致现有的雨中情人——伞</p><blockquote><p>这两天鼻梁上长了两颗痘痘，于是戴眼镜成了噩梦……</p></blockquote>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>麻雀告诉我们的故事</title>
      <link href="/2016/03/14/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E9%BA%BB%E9%9B%80%E5%91%8A%E8%AF%89%E6%88%91%E4%BB%AC%E7%9A%84%E6%95%85%E4%BA%8B/"/>
      <url>/2016/03/14/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E9%BA%BB%E9%9B%80%E5%91%8A%E8%AF%89%E6%88%91%E4%BB%AC%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>一对父子坐在一个大树下，儿子在看着报纸，父亲在望着树上。</p><p>父亲问：“你看树上那是什么呀？”<br>儿子低着头看报纸，“那是麻雀。”</p><p>过了一会，父亲又问：“树上的那都是什么呀？”<br>儿子有点不耐烦了，说：“不是告诉你了吗？那是麻雀！”</p><p>沉默…</p><p>一会儿，父亲又指着树枝问：“这树上密密麻麻的是什么呀？”<br>儿子噌地一下站起来，甩手把报纸一扔，气极了，扭过头对着父亲的耳朵大吼了起来：“你特么是不是有病啊？！！不是告诉你了那是该死的麻雀吗！！烦不烦啊你！”</p><p>树上的麻雀惊得四散飞去。</p><p>父亲很安静地坐着，看着暴跳如雷的儿子，安静得像只乖巧的猫咪，他的目光落在空落落的大树，落在远处随风摇摆的秋千，最后又回到了眼前青筋暴起的儿子，没有说话，仿佛在静静等待着什么…</p><p>树上慢悠悠地飘落了一片枯叶，“簌”，被儿子狠狠地踩在了脚下。</p><p>过了好久，儿子终于平静下来，坐回位子上，父亲开始哆哆嗦嗦地在身上摸索着，似乎在找一个很重要的物件。</p><p>他掏出一本小小的日记本，小心翼翼的翻开其中的一页来，那昏黄的纸张上镶嵌着一尾毫不起眼的羽毛，那是鸟的羽毛。</p><p>“你三岁的时候，常常跟着我坐在树底下，就在这里坐着”，<br>他轻轻拍了拍木凳子——那条随着年岁的磨砺变得的些许破败的板条凳，低头望着地上绿油油的小草，自顾自地叙说着，</p><p>​“当时我正在看书，你奶声奶气地问我：‘树上的那些是什么呀？’<br>我说：‘那是麻雀，会唱歌的麻雀。’</p><p>过了一会，你又指着树丫问我：‘树上的那个是什么呀？’<br>我说：‘那是麻雀，会飞上天的麻雀。’ ”</p><p> 父亲脸上的沟壑里填满了幸福的微笑，湿润的双眸仍然盯着小草，似乎那是他倾述的对象一般，</p><p>“一只麻雀飞走了，打落了一根羽毛，<br>你开心地追逐着，我把羽毛轻轻捧在手里递给你，<br>你说：‘爸爸，我可以把它养起来吗？’<br>我问：‘为什么呀？’<br>你开心地张开双臂说：‘这样的话，等我长大以后就有好多好多羽毛，就可以像麻雀一样飞上天，就可以带着爸爸一起到处去玩了！’<br>你很高兴的把它交到我手掌心，当你在秋千上荡着的时候，我把这片羽毛轻轻地收藏在我的日记本里，这是我儿子送给我的第一份礼物。”</p><p>父亲舒了一口气，转过头来望着儿子。</p><p>儿子早已，泪流满面。</p><p>这是《飞越老人院》里老葛讲给他孙子的故事，故事还未结尾，一滴泪却悄然滑过我的脸颊，我想起了记忆中似乎永远不会疲惫的父亲，<br>在我某一天归家的时候，突然发现，白发早已爬满他的黑发，而我回家的次数却越来越少……<br>当有一天，父母都老了，我想安静地守在他们身边听他们讲，“那时候你才7岁……”<br><img src="http://upload-images.jianshu.io/upload_images/1171873-08196ed305a7977c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong><em>注：文章转载自<a href="http://zhuweisheng.com.cn/" target="_blank" rel="noopener">碎碎念</a>《<a href="http://zhuweisheng.com.cn/diary/love-your-old-family/" target="_blank" rel="noopener">麻雀告诉我们的故事</a>》本文首发于微信公众号：imdaoke，原标题为《像小时候那样耐心地对待我好吗？儿子。》——详细请查看 微信公众号imdaoke-历史消息。</em></strong></p><blockquote><p>真的是含泪看完，因为我爸也曾心平气和地给我讲过极其相似的一段话，就在他反复问我同一个问题的时候而我却极其不耐烦……不知从什么时候对待家人变成如此这般，小时候的我可不这样……是时候反省一下了……</p></blockquote>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>织梦</title>
      <link href="/2016/03/11/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E7%BB%87%E6%A2%A6/"/>
      <url>/2016/03/11/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E7%BB%87%E6%A2%A6/</url>
      <content type="html"><![CDATA[<p><a href="http://yamida.org/2016/03/11/%e7%bb%87%e6%a2%a6/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-1816be201f6b249f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="liuli"></a></p><p>事实证明，编程对我而言是最完美的职业。现在我还在筑造世界，但不是以故事的形式，而是以代码的方式。编程赋予我神器的力量，使我有能力建立自己的小宇宙，按照自己的规则和惯例运行。仅以逻辑的力量就可以从无生有，创造事物。<br>——Linda Liukas</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>arch分swap</title>
      <link href="/2016/03/06/linux-arch%E5%88%86swap/"/>
      <url>/2016/03/06/linux-arch%E5%88%86swap/</url>
      <content type="html"><![CDATA[<p>安装gparted在硬盘里划出一定量的空间，并格式化为swap（linux-swap）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon /dev/sda9    //把我的swap挂在上</span><br><span class="line">sudo mv /etc/fstab /etc/fstab.bak &amp;&amp; sudo genfstab / &gt; /etc/fstab</span><br></pre></td></tr></table></figure><p><strong>注：若出现“ mv：无法获取’/etc/fstab’的文件状态(stat):没有那个文件或目录 ”，则直接执行“&amp;&amp;”后面的语句……若还是出现相关问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S arch-install-scripts</span><br></pre></td></tr></table></figure></p><p>之后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U -p / &gt;&gt; /etc/fstab</span><br><span class="line">cat /etc/fstab</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-a1462beff9a45e15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "></p><p>重启，出现开机错误（前提：我的boot不是单独分的）<br><img src="http://upload-images.jianshu.io/upload_images/1171873-df7214833d0582f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在grub倒计时时按下e，进入编辑模式<br><img src="http://upload-images.jianshu.io/upload_images/1171873-ccab91cfa0b09b76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="  "></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">倒数第三行，**rw后面，空格，写上  init=/bin/bash ** ，F10引导</span><br><span class="line">nano /etc/fstab</span><br></pre></td></tr></table></figure><p>然后把中间的两行gvf用#注释掉，留下一个“ / ”和最后一个swap</p><p>ctrl+alt+del  重启</p>]]></content>
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>定时关机——睡眠</title>
      <link href="/2016/03/06/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E5%AE%9A%E6%97%B6%E5%85%B3%E6%9C%BA-%E7%9D%A1%E7%9C%A0/"/>
      <url>/2016/03/06/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E5%AE%9A%E6%97%B6%E5%85%B3%E6%9C%BA-%E7%9D%A1%E7%9C%A0/</url>
      <content type="html"><![CDATA[<p>夜还没开始，天就亮了……</p><p>在看《哈佛大学公开课：幸福课》第11集的时候，讲到了“例行公事”，并说道例行公事养成良好的习惯。态度的提升能引导行为的改变，促成习惯；当然，原有的习惯会将态度拉回原点……</p><p>早睡、按时睡觉是良好习惯的开端。对我来说，电脑定时关机是个强迫我去执行“睡眠”命令的办法。“定时关机”是可以不用第三方软件的。</p><p>首先弄个关机的脚本，搜索引擎搜一下就有的。在这里我使用.vbs脚本，将以下代码保存为<strong>.vbs</strong>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dim WSHshellset WSHshell = wscript.createobject(&quot;wscript.shell&quot;)WSHshell.run &quot;shutdown -f -s -t 00&quot;,0 ,true</span><br></pre></td></tr></table></figure><hr><p>睡眠脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dim WSHshellset WSHshell = wscript.createobject(&quot;wscript.shell&quot;)WSHshell.run &quot;Rundll32.exe Powrprof.dll,SetSuspendState Sleep&quot;,0 ,true</span><br></pre></td></tr></table></figure></p><p>脚本有了，接着就是选择执行时间……桌面—&gt;我的电脑（右键）—&gt;管理</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-73bb76d173f27d4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160306112853"></p><p>接着，系统工具 —&gt; 任务计划程序 —&gt; 任务计划程序库（右键）—&gt; 创建任务<br><img src="http://upload-images.jianshu.io/upload_images/1171873-f5293e6e86b4b0d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160306113220"></p><p>在“常规”选项卡上填上需要的内容，接着在“触发器”选项卡中“新建”，选择需要触发的时间、次数，频率。<br><img src="http://upload-images.jianshu.io/upload_images/1171873-2a1fdca9c36c1f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160306115307"></p><p>在“操作”选项卡中“新建”，选择需要启动的脚本。<br><img src="http://upload-images.jianshu.io/upload_images/1171873-82f1c4e3bbb007f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160306114849"><br>点击“确定”，便完成脚本定时执行时间。<br><img src="http://upload-images.jianshu.io/upload_images/1171873-6ba196c42c307aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160306115349"></p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>arch打包sogou</title>
      <link href="/2016/03/04/linux-arch%E6%89%93%E5%8C%85sogou/"/>
      <url>/2016/03/04/linux-arch%E6%89%93%E5%8C%85sogou/</url>
      <content type="html"><![CDATA[<p><a href="http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-6b9207c12b5b1acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><a href="http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/" target="_blank" rel="noopener">2016年3月4日</a> / <a href="http://yamida.org/author/rabbit/" target="_blank" rel="noopener">芽蜜</a> / <a href="http://yamida.org/2016/03/04/arch%e6%89%93%e5%8c%85sogou/#comments" target="_blank" rel="noopener">2 COMMENTS</a></p><p>几天前，搜狗输入法不知发什么疯了。尝试重装sogou的时候发现yaourt不到sogou。在竹子的帮助下，学会了打包。这以后应该会方便多了吧～</p><p>在<a href="https://www.archlinux.org/" target="_blank" rel="noopener">arch网站</a>里面找到<a href="https://aur.archlinux.org/" target="_blank" rel="noopener">aur</a>页面，搜sogou</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-864fd484ef046f03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><hr><p><img src="http://upload-images.jianshu.io/upload_images/1171873-48525df6a6ab9650.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击“  <a href="https://aur.archlinux.org/cgit/aur.git/snapshot/fcitx-sogoupinyin.tar.gz" target="_blank" rel="noopener">Download snapshot</a>  ”</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-f720721281390d3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>下载后解压……</p><blockquote><p>题外话：当时电脑还不能解压tar<br>yaourt -S file-roller   //这是gnome的归档管理器</p></blockquote><blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1171873-165e55638ef02c7b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">安装上所有的依赖，可奇怪的还是不能用，双击解压包后鼠标一直转啊转，然后就没有然后了</span><br><span class="line">解压命令：tar -xzvf 文件名</span><br><span class="line">//文件名用tab补全，这样不容易出错</span><br></pre></td></tr></table></figure><p>解压后，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makepkg     //打包</span><br><span class="line">sudo pacman -U 文件名.tar   //安装</span><br></pre></td></tr></table></figure></p><p>装好搜狗了。第二次重装系统的过程也是不顺利，输入法一直不听话……（干嘛？～我就要用搜狗，你管我啊～）<br>搜狗问题，见文《<a href="http://www.jianshu.com/p/f2bbff538856" target="_blank" rel="noopener">sogou输入配置</a>》</p><blockquote><p>这篇的重点不是装搜狗，而是如何打包……</p></blockquote>]]></content>
      
      <categories>
          
          <category> 系统 Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux sogou </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>十二行代码</title>
      <link href="/2016/03/02/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E5%8D%81%E4%BA%8C%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
      <url>/2016/03/02/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E5%8D%81%E4%BA%8C%E8%A1%8C%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p><a href="http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-af3e0d49e43b2982.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p>#十二行代码<br><a href="http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/" target="_blank" rel="noopener">2016年1月29日</a> / <a href="http://yamida.org/author/rabbit/" target="_blank" rel="noopener">芽蜜</a> / <a href="http://yamida.org/2016/01/29/%e5%8d%81%e4%ba%8c%e8%a1%8c%e4%bb%a3%e7%a0%81/#respond" target="_blank" rel="noopener">0 COMMENTS</a></p><p>几天前在google+上看到这消息的。</p><p>事情的起因是这样的，国外一哥们Cyber Security在<a href="https://twitter.com/?lang=zh-cn" target="_blank" rel="noopener">推特</a>上发了这么一条推文：</p><p>这12行js代码能让手机或是电脑进入这网页后出现浏览器奔溃，假死……<br>1月17号，有人发推，说这段代码能让火狐、chrome、safari浏览器奔溃，能让iphone重启。<br><img src="http://upload-images.jianshu.io/upload_images/1171873-3f0c591beeaeaa78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>完整 HTML 代码如下：<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">  </span></span><br><span class="line"><span class="undefined">      var total="";</span></span><br><span class="line"><span class="undefined">      for (var i=0;i&lt;1000000;i++)&#123;</span></span><br><span class="line"><span class="undefined">        total= total+i.toString ();</span></span><br><span class="line"><span class="undefined">        history.pushState (0,0,total); </span></span><br><span class="line"><span class="undefined">      &#125;   </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>来看下这段代码，主要就是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total= total+i.toString();</span><br><span class="line">history.pushState(<span class="number">0</span>,<span class="number">0</span>,total);</span><br></pre></td></tr></table></figure></p><p>这两行代码执行1000000遍。<br>这段代码的核心真的就是 history.pushState() 方法。<br>这个方法是 HTML5 的一个 API，用于向history添加当前页面的记录。简单来说就是在不刷新页面，也不打开新页面的情况下，改变浏览器地址栏中的URL。这个技术可以解决AJAX遗留下来的问题。它和AJAX结合后，有个新的称呼是PJAX（淘宝目前正在使用）。<br>这里的代码：<br> <code>history.pushState(0, 0, total);</code></p><p>只能起到一个效果，就是修改URL（只能修改当前目录后的字符，无法修改全部域名。且不会发生跳转或发送请求）。然后这里代码循环了1000000次，也就是说URL修改了1000000次，每次新的URL都是之前一次的后面再加上<strong>i.toString()</strong><br>。这样快速不停地向history中添加记录，最终就会导致内存占用迅速增大到机器无法承受，然后浏览器崩溃。</p><p>当然那段脚本不运行的话是没问题的，比如用w3m。</p><p>演示：<a href="http://www.0xroot.cn/demo.html" target="_blank" rel="noopener">www.0xroot.cn/demo.html</a>（务必做好死机准备，尽管是假死。）<br><img src="http://upload-images.jianshu.io/upload_images/1171873-56935b81d8fe5d1c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="要是我，肯定用while(1)……"></p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>一罐硬币实验的讨论——《信号与噪声》</title>
      <link href="/2016/03/02/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E4%B8%80%E7%BD%90%E7%A1%AC%E5%B8%81%E5%AE%9E%E9%AA%8C%E7%9A%84%E8%AE%A8%E8%AE%BA%E2%80%94%E2%80%94%E3%80%8A%E4%BF%A1%E5%8F%B7%E4%B8%8E%E5%99%AA%E5%A3%B0%E3%80%8B/"/>
      <url>/2016/03/02/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E4%B8%80%E7%BD%90%E7%A1%AC%E5%B8%81%E5%AE%9E%E9%AA%8C%E7%9A%84%E8%AE%A8%E8%AE%BA%E2%80%94%E2%80%94%E3%80%8A%E4%BF%A1%E5%8F%B7%E4%B8%8E%E5%99%AA%E5%A3%B0%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>“在经济学课上有这么一个常见的实验，通常教授想额外赚点午餐费时就让学生做这个实验。</p><p>他会在班内举行一场拍卖会，让学生竞拍一罐硬币。出价最高的学生将赢得硬币，还要向老师支付一笔拍卖服务费。几乎每一次中标的学生都会发现，这笔交易不值那么多钱 有些学生报价过低，有些报价正好等于那罐硬币的金额，但是，每次中标的都是估价过高的那位同学，而最【差】的预测者往往会获得【奖励】。这就是赢家的诅咒。”<br><strong><em>【书摘——《信号与噪声》】</em></strong></p><hr><p>这是网友“chen ”在网易公开课群里分享的一段话。感觉这段话的含义很深，之后和chen讨论，明白了些，作以记录分享。</p><h3 id="笔记："><a href="#笔记：" class="headerlink" title="笔记："></a>笔记：</h3><p>把这些用超出硬币实际价格的钱拍下硬币罐的学生看成是一种“噪声”的载体，超出实际的那部分价格就是噪声。相对于出价低于或等于实际价格的人来说，中标学生的预测最糟糕。因此他们实际承担了损失。可是却往往是“赢家”。</p><p>而赢家往往并不是“赢家”，而是“噪声”。噪声干扰了对实际的判断。在生活中也常发生，像“<a href="https://zh.wikipedia.org/wiki/%E6%99%95%E8%BD%AE%E6%95%88%E5%BA%94" target="_blank" rel="noopener">光环效应</a>”一样，我们一般倾向于把一些本不属于他们的品质放在他们身上。</p><p>因为噪声干扰，在别人眼里，就高估了东西的实际价值，下回就会出更高的价格，直到他们赢得奖励后发现自己亏了……而这些中标的人通常不想被认为是“傻瓜”……为了弥补损失，他们又对手中的东西进行伪装，去寻找下个“傻瓜”……</p><blockquote><p>当然说得不对的地方或是有不一样的看法，欢迎指出讨论，一起学习<br>【感觉压根没人知道这个网站XD】</p></blockquote>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>处理快捷方式小箭头</title>
      <link href="/2016/03/01/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E5%A4%84%E7%90%86%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%B0%8F%E7%AE%AD%E5%A4%B4/"/>
      <url>/2016/03/01/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E5%A4%84%E7%90%86%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%B0%8F%E7%AE%AD%E5%A4%B4/</url>
      <content type="html"><![CDATA[<p>win7桌面上快捷方式的图标，旁边都会出现“ 小箭头 ”。<br>在不使用优化软件的情况下可以通过修改注册表处理“ 小箭头 ”<br>清除箭头：将下方代码保存为.reg文件，双击执行，重启生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\lnkfile]</span><br><span class="line">&quot;IsShortcut&quot;=-</span><br><span class="line">[HKEY_CLASSES_ROOT\piffile]</span><br><span class="line">&quot;IsShortcut&quot;=-</span><br></pre></td></tr></table></figure><p>恢复箭头：将下方代码保存为.reg文件，双击执行，重启生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\lnkfile]</span><br><span class="line">&quot;IsShortcut&quot;=&quot;&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\piffile]</span><br><span class="line">&quot;IsShortcut&quot;=&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>要注意的是，在执行以上文件后，可能出现【<a href="http://www.jianshu.com/p/1d2304172362" target="_blank" rel="noopener">我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”</a>】的问题，可<a href="http://www.jianshu.com/p/1d2304172362" target="_blank" rel="noopener">点击查看</a></p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>说说在win7下优化软件的必要性</title>
      <link href="/2016/02/29/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E8%AF%B4%E8%AF%B4%E5%9C%A8win7%E4%B8%8B%E4%BC%98%E5%8C%96%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/"/>
      <url>/2016/02/29/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E8%AF%B4%E8%AF%B4%E5%9C%A8win7%E4%B8%8B%E4%BC%98%E5%8C%96%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/</url>
      <content type="html"><![CDATA[<p><strong>相比win7，还是比较推荐10的。毕竟有新东西……</strong></p><hr><p>本文的优化软件一般指“ XXX安全卫士 ”、“ XX管家 ”、“ XX毒霸 ”等国产优化软件，当然也包括国外部分优化软件……</p><p><strong>10虽然出来了，但7目前仍是生产机的主力系统……许多10的问题是可以用7的办法来解决的</strong></p><p>优化软件虽给众多小白带来了“方便”，但还是希望通过这篇短文让读者明白：优化软件是怎么对系统进行优化的。windows系统并非众人想的那么差，“<strong>装机就要装杀软</strong>”是不必要的……</p><blockquote><p><strong><em>注：部分用户将“ XXX安全卫士 ”当杀毒软件用，但严格来讲它应该属于优化软件。</em></strong></p></blockquote><p>优化软件——扮演的角色<br>目前国内优化软件属于杀软、优化集成软件。软件自身偏臃肿，增加了系统运行负担，部分软件甚至经常出现弹窗广告。笔者对这类优化软件的能力表示怀疑。</p><p>优化软件最常用功能——清理垃圾<br>在讲优化软件的“ 清理功能 ”之前，先看看win7里的一个东东——“<strong><a href="http://baike.baidu.com/item/SuperFetch" target="_blank" rel="noopener">SuperFetch</a></strong>”。这是在windows Vista时引入的，这一技术的核心思想是<strong>「过分闲置的内存空间即是浪费」</strong>，它预测你在何时将可能执行哪些程序，并将所需数据片段预先读入内存缓存，以用于降低对于速度较慢的硬盘的频繁访问，加速系统和程序运行。（具体解释可搜索“<strong><a href="http://baike.baidu.com/item/SuperFetch" target="_blank" rel="noopener">SuperFetch</a></strong>”）</p><p>SuperFetch 会根据你的操作动态调整自己的缓存策略，且快速适应你任何新的操作习惯（特别是在你安装、卸载新软件之后）。并将你的操作习惯做记录，在不同时间点抓取不同程序的数据片段。（比如，你可能习惯在早晨开机后第一时间打开浏览器，而在傍晚使用相关软件与移动硬盘同步数据，那么Windows在早间启动时就不会读入同步软件的有关数据片段）。根据微软权威专家Mark Russinovich 在TechNet Magazine的阐述，SuperFetch将合理分配缓存，有兴趣的可以移步《<a href="http://technet.microsoft.com/en-us/magazine/2007.03.vistakernel.aspx" target="_blank" rel="noopener">Inside the Windows Vista Kernel: Part 2</a>》。</p><blockquote><p>大体了解了win7内存分配的结构，可以解释：</p></blockquote><hr><p>win7在内存的占用比值比 xp 大的原因：因为 xp 没有这项技术。这也是win7越用越快也是这个原因。</p><p>而通常使用优化软件的用户，用得最多的功能是“  清理垃圾  ”，仔细看清理项，都是些缓存、电脑的操作记录。一旦删除，会造成Windows丢失这些跟踪数据，从而拖慢整个系统的效能，系统也将重新花费较长的时间来再次建立这些记录。</p><p>因此，网上传的类似“ 一键清理.bat ”脚本可能也会误杀这些记录（当然这要视编写者的水平而定）。</p><blockquote><p>显而易见，不用刻意清理垃圾，这些缓存对现在的硬盘来说九牛一毛，正常使用win7即可。如果使用win7不是越用越快，那肯定是设置上出问题了。而这些设置问题，使用优化软件是很鸡肋的。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1171873-12157cea71a2aecf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>笔者认为：任何经过修改、优化的iso镜像系统都不如官网上的系统镜像。官网上的镜像系统是最干净、安全的。而在win7、win10下，优化软件可以说是来搞笑的。</p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>禁用UEFI安全自启动功能</title>
      <link href="/2016/02/28/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E7%A6%81%E7%94%A8UEFI%E5%AE%89%E5%85%A8%E5%90%AF%E5%8A%A8%E5%8A%9F%E8%83%BD/"/>
      <url>/2016/02/28/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E7%A6%81%E7%94%A8UEFI%E5%AE%89%E5%85%A8%E5%90%AF%E5%8A%A8%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>微软所倡导的UEFI安全启动（Secure Boot）机制，能够防止病毒在UEFI电脑启动的过程中进驻，但是目前除了Windows 8、10以外，仅有Linux系统加载程序能够支持这种驱动程序需要签名的安全启动机制。</p><p>低于win8（包括win7在内）的微软操作系统都无法支持，因而如果希望在Windows 8以上认证的电脑上安装Windows 7或者其他操作系统，需要在UEFI设置菜单中关闭安全启动功能。</p><blockquote><p>说白了就是，只有在uefi安全锁关闭的情况下，电脑才能识别到硬盘里win8以下的微软操作系统。</p></blockquote><p>要禁用安全启动功能， 首先启动电脑，然后按电脑的设置访问UEFI，在许多电脑上这通常是按<strong>[Delete]</strong>键，不过，不同的制造商可能有不同的设置，具体请参考主板说明书。根据不同的UEFI版本，安全启动选项通常在一个选项卡下，这个选项卡可能被命名为“Boot”、“Security”或者“Authentication”，在类似的选项卡中查找，我们会发现一个“Secure Boot”选项，该选项默认设置为“Enabled”，选中它并回车，将其设置为“Disabled”，接下来，按[F10]键存储设置，重新启动电脑即可安装我们需要的操作系统。</p><p>这里说下题外话：</p><blockquote><p>某位新人在对bios进行操作后，保存的时候手误按下了F9，然后还“回车”了。之后发现电脑开机后就会自动进入bios，而再也找不到硬盘里的系统（比如找不到win7的系统）……就连小白救星的万能“老毛桃”和“大白菜”都没法用……(so sad)</p></blockquote><p>通过文本开头的解释，现在明白了吧。原因就在“  <strong>F9</strong>  ”恢复了bios的出厂设置，打开了UEFI锁（UEFI默认是打开的），这和拔电池是一个道理的。</p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows7隐藏IE浏览器</title>
      <link href="/2016/02/27/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-win7%E9%9A%90%E8%97%8FIE%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2016/02/27/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-win7%E9%9A%90%E8%97%8FIE%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>点击开始，运行，输入 <strong>“regedit”</strong>，打开注册表编辑器。</p><p>然后找到下面的项删除，最后的项名称不一定是一样，注意该项数据是<strong>Internet Explorer</strong>，如果还有其他浏览器被改，找到对应项删除即可</p><pre><code class="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\{FAC36FAA-6F1A-0EB6-A06D-841C1415FB7E}"></code></pre><p>右边窗口（名称，类型，数据）删掉“数据”为：<strong>Internet Explorer</strong> 即可。（找不到或没用的话 ，则为：“ <strong>Windows media </strong>”）</p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>QQ右下角弹出新闻框</title>
      <link href="/2016/02/27/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-QQ%E5%8F%B3%E4%B8%8B%E8%A7%92%E5%BC%B9%E5%87%BA%E6%96%B0%E9%97%BB%E6%A1%86/"/>
      <url>/2016/02/27/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-QQ%E5%8F%B3%E4%B8%8B%E8%A7%92%E5%BC%B9%E5%87%BA%E6%96%B0%E9%97%BB%E6%A1%86/</url>
      <content type="html"><![CDATA[<p>在安装路径下：Tencent\QQ\I18N, 用记事本打开 “ config.xml ” 文件 将语言 2052 改为 1033 或者3076, 将文件夹2052改为相对应的数字。但这种方法会有一些小小的缺憾，比如点击个人资料时，好友印象、QQ空间、QQ秀、装扮等会无法显示，且登陆时为直版登陆框，无法设置使用横版的经典登陆框……但并不影响正常使用……<br>（这些“ 缺憾 ”对我来说不成影响……）</p><p><em>（顺便把聊天对话框QQ秀上的广告、右侧的广告处理了）</em></p><h3 id="去除聊天窗口右上角广告："><a href="#去除聊天窗口右上角广告：" class="headerlink" title="去除聊天窗口右上角广告："></a>去除聊天窗口右上角广告：</h3><p>1、在<br><strong>C\:用户\你的用户名\AppData\Roaming\Tencent\QQ\Misc (Vista/win7)</strong><br>找到  <em>com.tencent.advertisement </em> 文件夹 ，打开，删除里边的所有内容。注意文件夹本身不能删除，然后把当前用户的写入权限给拒绝掉（需要当前分区为NTFS格式）。<br>方法：文件夹上右键，属性 – 安全标签，选中当前登录用户，接着在下方“写入”权限里，拒绝上打勾。</p><p>2、如果有多个QQ需要登录的话，上边这样做还是不能屏蔽其他QQ号聊天窗口右上角的广告，需要直接将<strong>Misc</strong>文件夹的写入权限给拒绝掉，不然可恶的腾讯会在<strong>MISC</strong>文件夹下添com.tencent.advertisement***文件夹，***代表随机性的数字，文件夹里边仍然是可恶的广告。</p><hr><p>嗯，干掉了.</p><blockquote><p>最近发现，原来还有“QQ轻聊版”这种存在，使用了下，一周了，右下角无弹窗，聊天界面无广告。只不过～缺少emoji表情、QQ群不能布置作业、群工具部分图标丢失。（算是残缺版吧～诶）<br>——记录于20160904</p></blockquote><blockquote><p>现在用 TIM 了，大多数人都改用腾讯的 TIM ，没广告<br>——记录于20180628</p></blockquote><p>参考《<a href="http://blog.sina.com.cn/s/blog_62c15a9501010q74.html" target="_blank" rel="noopener">如何阻止QQ右下角弹出新闻框</a>》</p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows7-我的电脑右键-管理“该文件没有与之关联的程序来执行该操作”</title>
      <link href="/2016/02/26/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-windows7-%E6%88%91%E7%9A%84%E7%94%B5%E8%84%91%E5%8F%B3%E9%94%AE-%E7%AE%A1%E7%90%86%E2%80%9C%E8%AF%A5%E6%96%87%E4%BB%B6%E6%B2%A1%E6%9C%89%E4%B8%8E%E4%B9%8B%E5%85%B3%E8%81%94%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%9D%A5%E6%89%A7%E8%A1%8C%E8%AF%A5%E6%93%8D%E4%BD%9C%E2%80%9D/"/>
      <url>/2016/02/26/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-windows7-%E6%88%91%E7%9A%84%E7%94%B5%E8%84%91%E5%8F%B3%E9%94%AE-%E7%AE%A1%E7%90%86%E2%80%9C%E8%AF%A5%E6%96%87%E4%BB%B6%E6%B2%A1%E6%9C%89%E4%B8%8E%E4%B9%8B%E5%85%B3%E8%81%94%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%9D%A5%E6%89%A7%E8%A1%8C%E8%AF%A5%E6%93%8D%E4%BD%9C%E2%80%9D/</url>
      <content type="html"><![CDATA[<p>故障原因：</p><p>使用优化大师等优化系统（或是使用某些.bat脚本），清理了快捷方式小箭头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOTCLSID&#123;20D04FE0-3AEA-1069-A2D8-08002B30309D&#125;shellManage]@=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“MUIVerb”=hex(2):40,00,25,00,73,00,79,00,73,00,74,00,65,00,6d,00,72,00,6f,00,6f,00,74,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,79,00,63,00,6f,00,6d,00,70,00,75,00,74,00,2e,00,64,00,6c,00,6c,00,2c,00,2d,00,34,00,30,00,30,00,00,00“SuppressionPolicy”=dword:4000003c“HasLUAShield”=””[HKEY_CLASSES_ROOTCLSID&#123;20D04FE0-3AEA-1069-A2D8-08002B30309D&#125;shellManagecommand]@=hex(2):25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,6d,00,6d,00,63,00,2e,00,65,00,78,00,65,00,20,00,2f,00,73,00,20,00,25,00,77,00,69,00,6e,00,64,00,69,00,72,00,25,00,5c,00,73,00,79,00,73,00,74,00,65,00,6d,00,33,00,32,00,5c,00,63,00,6f,00,6d,00,70,00,6d,00,67,00,6d,00,74,00,2e,00,6d,00,73,00,63,00,00,00</span><br></pre></td></tr></table></figure></p><p>方法：新建一个文本文件，然后复制上面的代码保存为任意文件名.reg<br>注意：后缀是reg，这样才可以导入注册表！<br>双击执行即可<br>如果不行的话，使用下面的方法<br>召唤注册表：regedit</p><p>注：regedit是“注册表编辑”（register edit）的简写。</p><hr><p>进入注册表路径：HKEY_CLASSES_ROOT\CLSID{20D04FE0-3AEA-1069-A2D8-08002B30309D} \shell\Manage\command的值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改为：</span><br><span class="line">```%windir%\system32\mmc.exe /s %windir%\system32\compmgmt.msc</span><br></pre></td></tr></table></figure></p><p>说得好专业啊，其实就是在运行输入regedit，然后按上面顺序找到修改地址，改为compmgmt.msc就行了。</p>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>禁止软件开机自启动的三种方法</title>
      <link href="/2016/02/21/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E7%A6%81%E6%AD%A2%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2016/02/21/%E7%94%B5%E8%84%91%E9%97%AE%E9%A2%98-%E7%A6%81%E6%AD%A2%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>随着我们的使用，电脑开机启动程序日益增多——这是电脑开机慢的原因之一<br>程序在不需要的时候启动，占用资源——这是电脑卡的原因之一</p><p>目前禁止软件的自动启动常用的方法一般有三种：</p><blockquote><ul><li>用软件禁止；</li><li>用Windows命令禁止；</li><li>直接修改注册表。</li></ul></blockquote><h3 id="一、使用软件禁止软件的自动启动"><a href="#一、使用软件禁止软件的自动启动" class="headerlink" title="一、使用软件禁止软件的自动启动"></a>一、使用软件禁止软件的自动启动</h3><p>大陆常用多数是360、金山、腾讯等公司开发的软件。不太推荐这些国内所谓的优化软件。软件本身就占用大资源。这里不详谈。（<strong>相关阅读</strong>移步至“<strong><a href="http://yamida.org/2016/02/29/%e8%af%b4%e8%af%b4%e5%9c%a8win7%e4%b8%8b%e4%bc%98%e5%8c%96%e8%bd%af%e4%bb%b6%e7%9a%84%e5%bf%85%e8%a6%81%e6%80%a7/" target="_blank" rel="noopener">说说在win7下优化软件的必要性</a></strong>”）</p><h3 id="二、用Windows命令禁止软件的自动启动"><a href="#二、用Windows命令禁止软件的自动启动" class="headerlink" title="二、用Windows命令禁止软件的自动启动"></a>二、用Windows命令禁止软件的自动启动</h3><p>点击“开始”—“运行”（或者直接用WIN+R也可以），接着输入“<strong>msconfig</strong>”敲回车。在系统配置实用程序的窗口中选择“启动”的页面。同样，在这里列出了很多开机时候自动启动的程序，把它们前面的小勾取消，点确定。一般重启生效</p><h3 id="三、修改注册表彻底禁止软件的自动启动"><a href="#三、修改注册表彻底禁止软件的自动启动" class="headerlink" title="三、修改注册表彻底禁止软件的自动启动"></a>三、修改注册表彻底禁止软件的自动启动</h3><p>明明禁止了某软件的启动，可是它还是自动加载了（如Realplayer）。遇到这种情况可以用修改注册表来彻底禁止软件的自动启动。操作时注意，因稍有不慎就可能出错，从而使系统出错而崩溃。<br>点击“开始”—“运行”输入“<strong>regedit</strong>”打开注册表编辑器，切换到<br><strong>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</strong><br>先清理掉不想启动的程序,注意不要乱删，出问题就6666了。<br>然后在Run上右键—权限—高级—添加—输入everyone—确定。然后把<strong>设置数值</strong>的拒绝勾上（其他都不要勾，这样不会影响到想要启动的程序）然后确定。同样的方法把<br><strong>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</strong><br>也搞定。这样，任何软件一般是无法自动添加到启动了。除非你想，只要删掉权限里面的everyone即可。这样还可以从一定程度上防止木马程序，因为大多数木马也是加在这里，无法随系统启动当然也无法搞破坏了。<img src="http://upload-images.jianshu.io/upload_images/1171873-0b4b37ab43f77c95.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20150926-22"><br>不要再说“电脑慢、卡是因为装太多软件了”。我电脑就还行嘛～</p><blockquote><p>文章来源：中关村在线【时隔久远链接早已404】（已做部分删改）</p></blockquote>]]></content>
      
      <categories>
          
          <category> windows电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google[x]’s-Loon，一个互联网气球</title>
      <link href="/2016/02/21/%E7%A2%8E%E7%A2%8E%E5%BF%B5-Google-x-%E2%80%99s-Loon%EF%BC%8C%E4%B8%80%E4%B8%AA%E4%BA%92%E8%81%94%E7%BD%91%E6%B0%94%E7%90%83/"/>
      <url>/2016/02/21/%E7%A2%8E%E7%A2%8E%E5%BF%B5-Google-x-%E2%80%99s-Loon%EF%BC%8C%E4%B8%80%E4%B8%AA%E4%BA%92%E8%81%94%E7%BD%91%E6%B0%94%E7%90%83/</url>
      <content type="html"><![CDATA[<p>两个月前在youtube上看到关于Project Loon的视频，挺有意思的，可惜没多少人知道。小小的介绍，当是安利。详细可搜索 <a href="https://www.google.com/loon/" target="_blank" rel="noopener">Project Loon</a>。</p><p>眼下， 全球有超过40亿的人们不能访问互联网，他们中很多生活在农村和偏远地区。因此，要接入网络需要更容易、便捷的解决方案，而不是那里建立同一种地面基础设施。几个气球放飞，让附近的人们能接入网络，正是这个项目的初心。</p><p>Loon的目的是方便在农村和偏远地区的人们联系，帮助填补覆盖间隙，和灾后使人们重新联机的网络。<br><img src="http://upload-images.jianshu.io/upload_images/1171873-bb2f6750a088fb01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="loon"><br>Loon气球漂浮于大约20公里以上的平流层（高度是飞机的两倍）。在平流层中，Loon会根据风的分层、方向和风速，上升或下降一层吹向所需行使的方向。与电信公司合作，通过气球将移动频谱覆盖到脚下的大地。人们就能直接通过手机及其他移动设备接入网络。</p><p>每个气球可以将LTE无线通信技术覆盖到地面直径80公里。使用LTE的合作伙伴与电信企业共享蜂窝频带，人们便能够直接用手机和移动设备接入网络。嗯，没错，loon就是一个飘在天上的“无线路由器”。<br><img src="http://upload-images.jianshu.io/upload_images/1171873-5552544df1537e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="loon1"><br>几年前，Loon项目团队帮助新西兰的一个农村农民上网；去年，他们给巴西偏远地区的学校带来的互联网；明年，他们将在印度开始测试……并且该项目希望在未来几年开始提供良好的商业服务。</p><p><img src="http://upload-images.jianshu.io/upload_images/1171873-d60ff551c3f59010.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="115648_large"><br>当我们行驶在高速，高铁，远郊，手机会随我们位置的变换寻找基站并接入网络。同样，气球飘过的地方便会有网络，而气球通过软件的确定行使的方向，这便是一个移动的基站。随风移动，气球便可布置成一个大的通信网络。<br>某天，天上飞的气球，我们甚至看不到它。但是有人会来分享他们的朋友的照片，而这将是因为这气球。</p><blockquote><p>One day,a balloon is going to be flying up in the sky,and we’re not even going to be able to see it.<br>But someone is going to be sharing a photo with their friend,and it’s going to be because of that balloon we can’t even see. Just like anything else,what was once crazy because normal.</p></blockquote>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>时光</title>
      <link href="/2016/01/28/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%B6%E5%85%89/"/>
      <url>/2016/01/28/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E6%97%B6%E5%85%89/</url>
      <content type="html"><![CDATA[<p><a href="http://yamida.org/2016/01/28/%e7%8e%b0%e5%9c%a8%e5%92%8c%e5%b0%86%e6%9d%a5%e7%9a%84%e6%88%91%e4%bb%ac/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-a26bfedc382dfc34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><em>岁月是场有去无回的旅行，好的坏的都是风景</em></p><p>回家的路上，十字路口排起了长龙；<br>冬天的日子特别短，天就这样，渐渐灰暗了下来。<br>路灯慢慢亮了，车灯一盏盏也跟着打开，<br>黄白色的灯光交错闪烁，远远附和着红绿灯跳动。</p><p>听着收音机里，正在讨论关于遇见未来。<br>而总有这样的悖论：正是你知道了未来，反省着过去才会想着去改变现在，而最后的结果其实就是你所看到的。<br>辗转，轮回，宿命；<br>踌躇，前行，造就。<br>其实怀念曾经的回忆和期待以后的未知又何尝不是一种美好。</p><p>我在梦中遇见了，更好的我们；<br>谢谢，曾经，现在和将来的我们。</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>那些住在手机里的朋友</title>
      <link href="/2016/01/15/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E9%82%A3%E4%BA%9B%E4%BD%8F%E5%9C%A8%E6%89%8B%E6%9C%BA%E9%87%8C%E7%9A%84%E6%9C%8B%E5%8F%8B/"/>
      <url>/2016/01/15/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E9%82%A3%E4%BA%9B%E4%BD%8F%E5%9C%A8%E6%89%8B%E6%9C%BA%E9%87%8C%E7%9A%84%E6%9C%8B%E5%8F%8B/</url>
      <content type="html"><![CDATA[<p><a href="http://yamida.org/2016/02/23/%e9%82%a3%e4%ba%9b%e4%bd%8f%e5%9c%a8%e6%89%8b%e6%9c%ba%e9%87%8c%e7%9a%84%e6%9c%8b%e5%8f%8b/" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/1171873-882d2799c15cfa9c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p>在这个通讯十分发达的时代，无论是初次相见还是老友重逢，我们都会交换手机号码。</p><p>初次相识的喜悦，让你觉得似乎找到了知音。但渐渐地就不怎么联系了，接下来就是偶尔在节假日发短信问候。偶尔有一天，你发现，你发出的信息石沉大海。几次没有回音后，你也许会删掉那一个偶然在人海中拾来的联系方式，把那个偶尔认识的人完全淡忘。这个曾经的朋友，便像人海中的一朵浪花，偶尔与你相遇，然后被你记忆的余光蒸发。</p><p>你还会与新的人相识，你还会不断地让新朋友住进你的手机。就这样，我们不知不觉中就成为住在别人手机里的朋友，也变成了别人手机里匆忙的过客。你有多少住在手机里的朋友？</p><p>最怕的是突然有一天，你的手机不见了，通信录上的朋友们似乎一下子全部消失了，你的心也空掉了一块，就像不见了珍贵的首饰，令人难过，也许还能通过其他方式寻回，而那些浪花般有缘邂逅过的朋友，因一次偶然不见了他们的号码，这一生，也许你永远不会再与他们相遇，虽然心里也会觉得可惜，但就像每天梳头掉几根头发一样，并不太在意。<br><img src="http://upload-images.jianshu.io/upload_images/1171873-0055ad757f54ee82.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>当你某天想起曾经相交频繁的友人，满怀热情地打电话给他，他只是淡淡的回了一句：“喂，你是谁？”你的热情骤降到零点，根本没有心思再说什么，神伤地挂掉电话。也许对方早已把你的电话号码删掉了，也许，对方也是因为手机被盗或者是换号等原因丢失了你的号码，反正，你不再是住在他手机里的朋友。</p><p>我们的社交圈子在扩大，交往常常目的明确，点个头的熟人渐渐多了，交心的友人却渐渐少了。你我，只是住在对方手机里的朋友，感情如浪潮退去后便不留痕迹。</p>]]></content>
      
      <categories>
          
          <category> 日记本 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>arch安装-日志</title>
      <link href="/2015/12/21/linux-Arch%E5%AE%89%E8%A3%85-%E6%97%A5%E5%BF%97/"/>
      <url>/2015/12/21/linux-Arch%E5%AE%89%E8%A3%85-%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1171873-0cf0d522e5641d08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><a href="http://yamida.org/2016/02/24/arch%e5%ae%89%e8%a3%85%e6%97%a5%e5%bf%97/" target="_blank" rel="noopener">2016年2月24日</a> / <a href="http://yamida.org/author/rabbit/" target="_blank" rel="noopener">芽蜜</a> / <a href="http://yamida.org/2016/02/24/arch%e5%ae%89%e8%a3%85%e6%97%a5%e5%bf%97/#comments" target="_blank" rel="noopener">1 COMMENT</a></p><p>时间：2015.12.21～23<br>21日跟着视频在虚拟机上尝试了几遍。</p><p>22日早上，算是准备充分了，准备用物理机，以下是装机过程：（是我装机过程，并非教程。有流水账之嫌）</p><blockquote><p>cfdisk /dev/sda</p></blockquote><p>选择了一个盘，write、quit    我选了sda8<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sda8</span><br><span class="line">mount /dev/sda8 /mnt</span><br><span class="line">ifconfig</span><br><span class="line">dhcpcd eno16777736</span><br></pre></td></tr></table></figure></p><p>然后就出事了<br><strong>eno16777736</strong>……是什么鬼，视频里就是这么写的，我在虚拟机也这么用，没事啊。<br>于是上网找了下，原来是无线网卡。<br>这可是物理机，我得想办法连上家里的wifi（就是因为这个才没在学校装的）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iw dev  //识别无线网卡</span><br><span class="line">wifi-menu wlp3s0</span><br></pre></td></tr></table></figure></p><p>进入一个界面，在里面设置了wifi密码<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhcpcd wlp3s0</span><br></pre></td></tr></table></figure></p><p>在里面设置联网的镜像<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> &gt; /etc/pacman.d/mirrorlist</span><br><span class="line">nano /etc/pacman.d/mirrorlist</span><br><span class="line"></span><br><span class="line">Server=[http://mirrors.aliyun.com/archlinux/](http://mirrors.aliyun.com/archlinux/)<span class="variable">$repo</span>/os/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure></p><p>ctrl+x  //保存<br>y  //确定<br>回车<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel  //安装基本工具</span><br></pre></td></tr></table></figure></p><p>安装grub和一些基本配置<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">arch-chroot /mnt</span><br><span class="line">nano /etc/locale.gen</span><br></pre></td></tr></table></figure></p><p>会出现很多东西<br>找到“ <strong>#en_US.UTF-8 UTF-8</strong> ”，删掉前面的“##”<br>然后找到“ <strong>#zh_CN.UTF-8 UTF-8</strong> ”，删掉前面的“##”<br>同样X保存，y确定<br>回车<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">locale-gen  //生成中英文locale</span><br><span class="line"><span class="built_in">echo</span> Arch &gt; /etc/hostname</span><br><span class="line">passwd  //设置你root的密码</span><br><span class="line">pacman -S grub</span><br><span class="line">grub-install /dev/sda –recheck</span><br></pre></td></tr></table></figure></p><p>若是错误了，试试这个，至于为什么，我不清楚，反正是在wiki上看到有关<strong>uefi</strong>安装的命令，然后就填上去，没想成了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">grub-install –target=i386-pc –recheck –debug /dev/sda</span><br><span class="line"></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line">pacman -Syu</span><br><span class="line"></span><br><span class="line">useradd -m -s /bin/bash rabbit    //这里的rabbit是我添加的普通用户名</span><br><span class="line">passwd rabbit                     //设置rabbit的密码</span><br><span class="line"></span><br><span class="line">pacman -Syu net-tools</span><br><span class="line">**pacman -S dialog  //超级注意，把这个装上，重启后联网会方便很多。**</span><br><span class="line">**pacman -S wpa_supplicant dialog  //超级超级注意，保证新系统可以联网。**</span><br><span class="line">**pacman -S rp-pppoe  //装上，有线上网时可通过pppoe设置**</span><br><span class="line">systemctl <span class="built_in">enable</span> dhcpcd</span><br><span class="line">pacman -S sudo  //装个sudo，以示纪念</span><br></pre></td></tr></table></figure><p>安装图形界面<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S gnome</span><br><span class="line">pacman -S gdm</span><br><span class="line">systemctl <span class="built_in">enable</span> gdm -f</span><br></pre></td></tr></table></figure></p><p>配置ARCHLINUXCN源<br>参考“<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/archlinuxcn" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/archlinuxcn</a>”，<br>“<a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/" target="_blank" rel="noopener">https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/</a>”</p><blockquote><p>nano /etc/pacman.conf<br>在 /etc/pacman.conf 文件末尾添加两行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustAll</span><br><span class="line">Server = [https://mirrors.ustc.edu.cn/archlinuxcn/](https://mirrors.ustc.edu.cn/archlinuxcn/)<span class="variable">$arch</span></span><br></pre></td></tr></table></figure></p></blockquote><p>然后安装<strong> archlinuxcn-keyring </strong>包以导入 <strong>GPG key</strong>。<br>具体做法为：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syu （刷新源）</span><br><span class="line">pacman -S archlinuxcn-keyring（安装archlinuxcn-keyring）</span><br></pre></td></tr></table></figure></p><p>安装YAOURT （前提，建议先添加ARCHLINUXCN源）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yaourt</span><br></pre></td></tr></table></figure></p><p>若是找不到wine软件，则nano /etc/pacman.conf<br>取消注释，再刷新一下，就有了<br>如果想找软件，yaourt 描述如果想安装软件yaourt -Ｓ 包名记得“yaourt -Syu”一下</p><p>安装常用软件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S fcitx-im fcitx-sunpinyin fcitx-cloudpinyin fcitx-configtool  //输入法</span><br><span class="line">pacman -S gstreamer ffmpeg smplayer  //播放器和解码器</span><br><span class="line">pacman -S alsa-utils pulseaudio-alsa  //音频</span><br></pre></td></tr></table></figure></p><p>安装网络管理器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S network-manager-applet</span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager.service</span><br><span class="line">systemctl start NetworkManager.service</span><br></pre></td></tr></table></figure></p><p>自己加到用户组里<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a yourname audio</span><br><span class="line">gpasswd -a yourname video</span><br></pre></td></tr></table></figure></p><p>字体<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S wqy-microhei ttf-dejavu ttf-droid cantarell-fonts</span><br><span class="line">pacman -S ttf-dejavu wqy-microhei</span><br></pre></td></tr></table></figure></p><p>各项驱动和必要的软件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pacman -S texlive-most</span><br><span class="line">yaourt -S acroread-fonts-systemwide</span><br><span class="line">**pacman -S wpa_supplicant dialog  //保证新系统可以联网。**</span><br><span class="line">pacman -S xf86-input-synaptics // 支持触摸屏、板</span><br><span class="line">pacman -S libreoffice// 办公软件,语言包选101简体中文</span><br><span class="line">pacman -S gnome-tweak-tool// 系统美化工具</span><br><span class="line">pacman -S xfce4-terminal  //终端</span><br></pre></td></tr></table></figure></p><p>好像差不多了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></p><p>重启<br>重启后发现不能上网<br>查到的解释是：arch需要两次配置网络<br>在安装后，arch会把原来的配置关了还是怎么了，需要再开一次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable dhcpcd  //设置开机启动</span><br><span class="line">sudo dhcpcd wlp3s0  //wlp3s0 是我的网卡</span><br></pre></td></tr></table></figure></p><p>大致搞完，收工。然而这个我弄了一整天。<br>我的装机就到这里了</p><p>重启后会出现些问题，部分问题解决办法查看“<a href="http://yamida.org/2016/02/24/arch%e5%ae%89%e8%a3%85-%e7%ac%94%e8%ae%b02/" target="_blank" rel="noopener">Arch安装-笔记</a>”</p><p>分类： <a href="http://yamida.org/category/%e7%ac%94%e8%ae%b0/0%e5%92%8c1/" target="_blank" rel="noopener">0和1</a>, <a href="http://yamida.org/category/%e7%ac%94%e8%ae%b0/0%e5%92%8c1/arch/" target="_blank" rel="noopener">arch</a>, <a href="http://yamida.org/category/%e7%ac%94%e8%ae%b0/" target="_blank" rel="noopener">笔记</a><br> 标签： <a href="http://yamida.org/tag/arch/" target="_blank" rel="noopener">Arch</a></p>]]></content>
      
      <categories>
          
          <category> 系统 Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>arch安装笔记</title>
      <link href="/2015/12/21/linux-arch-arch%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/12/21/linux-arch-arch%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p> ——(2)为解决问题(不定期更新)</p><p>2015年1月29日</p><p>下午，心血来潮，决定试着在装一次arch。<br>基本装完界面后，找到竹子。在大神的帮助下，开始解决之前不能解决的问题以下的出现的问题，及解决办法：</p><p><strong>Q：pacman -S sudo后，发现 sudo 不能用。出现提示：“不在SUDOERS文件中，此事将被报告。”</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/sudoers  找到 </span><br><span class="line">## Same thing without a password#  %wheel ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure><p>取消“ #  %wheel ALL=(ALL) NOPASSWD:ALL”前面的“#”。</p><blockquote><p>%wheel：表示一个组的名称</p></blockquote><p>前提是你必须在这个用户组，如果不是过不确定，那就改成“你的名字”</p><p><strong>eg： “rabbit ALL=(ALL) NOPASSWD:ALL”  ，将“%wheel”改成“rabbit”，“%wheel”是一个用户组。</strong></p><p><strong>重启ARCH后不能上网</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dhcpcd wlp3s0   ##（wlp3s0是我的无线网卡）。</span><br></pre></td></tr></table></figure></p><p>【前提是你在重启前安装了dialog，“pacman -S  dialog”】<br>若提示 NetworkManager的问题，意为“启动网络管理器”。则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable NetworkManager</span><br><span class="line">sudo systemctl start NetworkManager</span><br></pre></td></tr></table></figure></p><p><strong>Q：添加ARCHLINUXCN源</strong><br>可参考  <a href="https://lug.ustc.edu.cn/wiki/mirrors/help/archlinuxcn" target="_blank" rel="noopener">Archlinux CN 镜像源使用帮助</a>，<a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/" target="_blank" rel="noopener">Arch Linux 中文社区仓库 / 镜像加速源</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/pacman.conf</span><br><span class="line">在 /etc/pacman.conf 文件末尾添加两行：</span><br><span class="line"></span><br><span class="line">[archlinuxcn]SigLevel = Optional TrustAll</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><p>然后请安装 archlinuxcn-keyring 包以导入 GPG key。<br>具体做法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syu   （刷新源）</span><br><span class="line">pacman -S archlinuxcn-keyring　（安装archlinuxcn-keyring）</span><br></pre></td></tr></table></figure><p><strong>Q：安装YAOURT  （前提，建议先添加ARCHLINUXCN源）</strong></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yaourt</span><br></pre></td></tr></table></figure><p><strong>注：</strong>若是找不到wine软件，则<strong>nano /etc/pacman.conf</strong> 找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>取消注释，再刷新一下，如果想找软件，yaourt  描述如果想安装软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -Ｓ 包名</span><br></pre></td></tr></table></figure><p>记得“<strong>yaourt -Syu</strong>”一下</p><p><strong>Q： 安装CHROME　（前提，已安装YAOURT）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S google-chrome</span><br></pre></td></tr></table></figure></p><p><strong>Q：安装搜狗输入法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt sogou</span><br></pre></td></tr></table></figure><p>安装过程中遇到编辑 ，回车忽略。一般来说，aur的内容不需要编辑。</p><p>然后安装“fcitx-qt5”和　kcm-fcitx（如果不是kde桌面，就不用安装kcm-fcitx）<br><strong>注：</strong>记得卸载ibus　命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -Rscn　ibus</span><br></pre></td></tr></table></figure><p>附带依赖和配置文件，都删除</p><hr><p>启动输入法：<br>记得安装“<strong>ttf-dejavu</strong>”<br>配置：参考“wiki.archlinux.org”，<strong>nano /.xprofile</strong>     文尾加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=”@im=fcitx”</span><br></pre></td></tr></table></figure></p><p>重启电脑，完成</p><p><strong>Q：安装WINE</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S wine-staging ##（听说目前的测试版比较稳定）</span><br></pre></td></tr></table></figure></p><p><strong>Q：安装WINEQQ（这里使用“百度  清风博主 WINEQQ”）参考“<a href="http://phpcj.org/wineqq/" target="_blank" rel="noopener">https://phpcj.org/wineqq/</a>”</strong></p><hr><p>第一步，安装wine<br>第二步，找到下载的安装包（tar.xz）的路径<br>终端使用“cd”一直不断进入到安装包所在的文件夹下，在该文件夹下输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf wineQQ8.1O17216.tar.xz -C ~/</span><br></pre></td></tr></table></figure></p><hr><p><strong><em>原文为：“~ $tar xvf wineQQ8.1O17216.tar.xz -C ~/” 中的“～$”为普通用户，“～#”为root下。</em></strong></p><p><strong>Q： 安装深度影音，深度影院</strong></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt deepin</span><br></pre></td></tr></table></figure><p>在里面自己找，有music 、moive就是了。安装多个可以用空格隔开，如：1 3 5 52</p><hr><p>深度影院安装后会出现打不开现象，终端执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deepin-movie</span><br></pre></td></tr></table></figure></p><p>查看里面什么没有组建没安装，如“XXXX is not installed”下图：</p><p>google了一下这个module，加上了arch。然后搜到arch的仓库。<br>可得，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S qt5-quickcontrols</span><br></pre></td></tr></table></figure></p><p><strong>Q：修改GNOME桌面的样式，3.18已经不支持修改CSS来更换</strong></p><hr><p>下载gnome-tweak-tools 优化工具，然后在“扩展-user them-启动”，重启优化工具，进入“外观-主题”选择你已经下载的主题</p><p><strong>Q：字体好奇怪，装完了文泉驿字体也是好奇怪。</strong></p><hr><p><strong>nano /etc/pacman.conf </strong>把下面的内容添加进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[infinality-bundle]</span><br><span class="line">SigLevel = Never</span><br><span class="line">Server= http://bohoomil.com/repo/$arch</span><br><span class="line"></span><br><span class="line">[infinality-bundle-multilib]</span><br><span class="line">SigLevel = Never</span><br><span class="line">Server= http://bohoomil.com/repo/multilib/$arch</span><br><span class="line"></span><br><span class="line">[infinality-bundle-fonts]</span><br><span class="line">SigLevel = Never</span><br><span class="line">Server= http://bohoomil.com/repo/fonts</span><br></pre></td></tr></table></figure><p>然后保存，并执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syu infinality-bundle infinality-bundle-multilib ibfonts-meta-extended</span><br></pre></td></tr></table></figure></p><p>因为是打补丁，所以会出现很多冲突，全部选择删除</p><p><strong>Q：添加WIN7启动项</strong></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S os-prober</span><br><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>可能出现“无法获取某些文件”，便多重试几次，这个网站是外国的，网速连接慢……（竹子说他曾经重试了十次）</p><hr><p>推荐将win下的字体复制到“.fonts”。路径为“/home/你的用户名/.fonts”，该文件夹默认隐藏（“.”就是隐藏的意思）然后刷新字体缓存，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fc-cache -fsv</span><br></pre></td></tr></table></figure></p><p><strong>Q：GNOME3.18的桌面，将任务放到右上角（如UBUNTU一样）</strong></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt topicon</span><br></pre></td></tr></table></figure><p>安装后，重启一下优化工具，“扩展-User themes”的上面就会出现“topicons”选项，启动它。<br>然后，键盘“alt+f2” ，输入“r”，回车。<br><strong>注：优化工具不会自动刷新的</strong></p><hr><p><strong>Q：安装DEEPIN桌面环境（参考“ WIKI.ARCHLINUX.ORG ”）搜索“ DEEPIN DESKTOP ENVIRONMENT ”</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S deepin deepin-extra</span><br></pre></td></tr></table></figure><p><strong>注：启动Deepin 桌面环境，使用登录管理器</strong></p><p>deepin默认lightdm greeter是lightdm-deepin-greeter，可通过pacman安装，安装后需编辑lightdm.conf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure><p>然后找到，并修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SeatDefaults]</span><br><span class="line">…</span><br><span class="line">greeter-session=lightdm-deepin-greeter</span><br></pre></td></tr></table></figure></p><p>之后终端执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable lightdm -f</span><br></pre></td></tr></table></figure><p>重启</p><hr><p>在进入deepin桌面后，可能出现设置部分英文现象。<br>终端执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.pam_environment</span><br></pre></td></tr></table></figure></p><p>把 <strong>en_US</strong>  改成 <strong>zh_CN</strong><br>两行都要，然后注销</p><p><strong>Q：安装ZSH</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S zsh oh-my-zsh-git</span><br></pre></td></tr></table></figure><p>安装完毕后会有让你cp一个文件，复制一下哪个命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/oh-my-zsh/zshrc ~/.zshrc</span><br></pre></td></tr></table></figure></p><p>然后输入“ chsh ”<br>输入密码<br>输入“ /bin/zsh ”</p><hr><p>每次进入终端，输入zsh后，会出现“ ～ ” ，说明进入zsh了，双击tab可补全命令。</p><p><strong>Q：删除base软件包组以外的所有软件包</strong></p><p><a href="https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">参考网址</a>#.E5.88.A0.E9.99.A4base.E8.BD.AF.E4.BB.B6.E5.8C.85.E7.BB.84.E4.BB.A5.E5.A4.96.E7.9A.84.E6.89.80.E6.9C.89.E8.BD.AF.E4.BB.B6.E5.8C.85)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Rs $(comm -23 &lt;(pacman -Qeq|sort) &lt;((for i in $(pacman -Qqg base); do pactree -ul $i; done)|sort -u|cut -d &apos; &apos; -f 1))</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://bbs.archlinux.org/viewtopic.php?id=130176" target="_blank" rel="noopener">帖子来源</a></p></blockquote><p>Q：激活“ KEYBOARD SHORTCUTS ”(传说中的魔术键)，参考“<a href="https://wiki.archlinux.org/index.php/Keyboard_shortcuts" target="_blank" rel="noopener">HTTPS://WIKI.ARCHLINUX.ORG/INDEX.PHP/KEYBOARD_SHORTCUTS</a>”**</p><p>终端输入将临时启用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl kernel.sysrq=1</span><br></pre></td></tr></table></figure><p>或是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo “1” &gt; /proc/sys/kernel/sysrq</span><br></pre></td></tr></table></figure></p><p>希望在系统启动时就开启，编辑“/etc/sysctl.d/99-sysctl.conf”文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/sysctl.d/99-sysctl.conf</span><br></pre></td></tr></table></figure></p><p>文件中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel.sysrq = 1</span><br></pre></td></tr></table></figure></p><p>保存</p><p><strong>注：</strong>记住这个激活命令的通用口诀是 “Reboot Even If System Utterly Broken” (或者”REISUB”)。</p><p> 最后更新于2016年3月15日</p>]]></content>
      
      <categories>
          
          <category> 系统 Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arch </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
